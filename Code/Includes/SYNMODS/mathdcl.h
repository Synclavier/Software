/* Mathdcl $title high precision math routines   modified:   02/04/91 - PF  - added dcl for FRACTDIV32   11/15/89 - MWH - Make "neg32" public   04/26/88 - JSS - "times" (linear) <=> dB (log) amplitude mapping routines   10/30/87 - MWH - ADD and SUB routines for FEET, SMPTE and BEATS   06/11/87 - MWH - Added 32 bit math function names   */#if 0// To measure floating point accuracy// yielded 53 on G3 9/20/97 CJ{	double x = 1.0;	double y = 2.0;	double z = 1.0;	int i;		for (i=0; i<200; i++)	{		double xyz = x + z;				if (xyz == x)		{			printf("failed at: %d\n", i);			return (0);		}				z = z / y;	}	return(0);}#endif// define bitmsb, bitlsb in orderextern	fixed	bitmsbarray[2];#define	bitmsb	(bitmsbarray[0])#define	bitlsb	(bitmsbarray[1])extern	fixed	mul_llsb;extern	array	multiply_result;extern	void	multiply(fixed, fixed, fixed, fixed);		/* Scale bitmsb bitlsb by a.bcd					*/extern	void	unround();									/* Procedure to provide truncated result		*/extern	void	ratiomultiply(fixed, fixed);extern	void	longinvert(fixed, fixed, fixed, fixed);extern	void	multiple_precision_add(array, array, array, fixed);extern	void	fractdiv32(fixed num[2], fixed den[2], fixed ratio[3]);extern	data	frames_per_second;							/* Frames per second (indexed by smpte mode)	*/extern	data	bits_per_msec_a;extern	data	bits_per_msec_b;extern	data	bits_per_msec_c;extern	data	bits_per_msec_d;extern	data	msecs_per_bit_a;extern	data	msecs_per_bit_b;extern	data	msecs_per_bit_c;extern	data	msecs_per_bit_d;// define c_hrs, c_min, c_sec, c_fra, c_bit in orderextern	fixed	c_hrsc_minc_secc_frac_bit[5];#define	c_hrs	(c_hrsc_minc_secc_frac_bit[0])#define	c_min	(c_hrsc_minc_secc_frac_bit[1])#define	c_sec	(c_hrsc_minc_secc_frac_bit[2])#define	c_fra	(c_hrsc_minc_secc_frac_bit[3])#define	c_bit	(c_hrsc_minc_secc_frac_bit[4])extern	void	smpte_to_sbits(array, fixed, array);extern	void	sbits_to_smpte(array, fixed, array);extern	void	sbits_to_msec(array,  fixed, fixed, fixed, array);extern	void	msec_to_sbits(array,  fixed, fixed, fixed, array);extern	void	msec_to_smpte(array,  fixed, fixed, fixed, array, array);extern	void	smpte_to_msec(array,  fixed, fixed, fixed, array, array);extern	void	feet_to_fbits(array,  fixed, array);						/* converts footage to 80ths of film frames		*/extern	void	fbits_to_feet(array,  fixed, array);						/* converts 80ths of frames to footage			*/extern	void	fbits_to_msec(array,  fixed, fixed, fixed, array);			/* converts film footage subframe bits to Synclavier msec	*/extern	void	msec_to_fbits(array,  fixed, fixed, fixed, array);			/* converts Synclavier msec to film footage subframe bits	*/extern	void	msec_to_feet(array,   fixed, fixed, fixed, array, array);	/* converts Synclavier msec to Film Footage		*/extern	void	feet_to_msec(array,   fixed, fixed, fixed, array, array);	/* converts Film Footage to Synclavier msec		*/extern	void	sec_to_msec(array,    fixed, array);extern	void	msec_to_sec(array,    fixed, array);extern	void	beats_to_msec(array,  fixed, fixed, array);extern	void	msec_to_beats(array,  fixed, fixed, array);extern	fixed	msec_to_duration(array);extern	fixed	compare_times (fixed[], fixed[], fixed);	/* compares two times, return 0 if equal, 1 if a>b, -1 if a<b	*/ extern	void	time_normalize(fixed[]);extern	void	copy_time     (fixed[], fixed[]);			/* =====>										*/extern	void	normalize_smpte  (array, fixed);extern	void	normalize_feet   (array, fixed);extern	void	normalize_beats  (array);extern	void	normalize_sf_time(array);extern	void	add_smpte(array,   array, array, fixed);extern	void	sub_smpte(array,   array, array, fixed);extern	void	add_feet(array,    array, array, fixed);extern	void	sub_feet(array,    array, array, fixed);extern	void	add_beats(array,   array, array);extern	void	sub_beats(array,   array, array);extern	void	add_sf_time(array, array, array);extern	void	sub_sf_time(array, array, array);extern	void	convert_sf_len_to_samples(array, array);extern	void	convert_samples_to_sf_len(array, array);extern	void	str32(fixed, fixed, array);extern	void	add16(fixed, array);extern	void	sub16(fixed, array);extern	void	add32(array, array, array);extern	void	sub32(array, array, array);extern	fixed	com32(array, array);extern	fixed	com16(fixed, array);extern	void	copy32(array, array);extern	void	shl32(array, fixed);extern	void	shr32(array, fixed);extern	void	neg32(array);extern	void	msec_to_dtd_sample__ 		(array, fixed, fixed, fixed, array, array);extern	void	dtd_sample___to_msecs		(array, fixed, fixed, fixed, array, array);	/* Sample#, Format, Speed, Rate, Base, Msec		*/extern	void	signed_dtd_sample___to_msecs(array, fixed, fixed, fixed, array, array);extern	fixed	map_times_to_db(fixed);extern	fixed	map_db_to_times(fixed);extern	void	remove_zero_time_offset	(array);extern	void	add_zero_time_offset	(array);extern 	void	signed_msec_to_dtd_sample__(array	msec, 					/* 32 bit millisecond time						*/											fixed	format, 				/* time or duration								*/											fixed	speed, 					/* Speed setting								*/											fixed	rate, 					/* sampling rate in question					*/											array	base, 					/* sample base of project						*/											array	sample_);				/* output array									*/#include "mathlits.h"_library(":SYNLIBS:MATHLIB")
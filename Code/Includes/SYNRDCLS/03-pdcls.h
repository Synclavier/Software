/* 03-Pdcls  $title  external Declarations for the procedures and variables in 03-PRIM   Modified:   08/13/91 - pf -  added "noio" argument to PS.AUDITION   04/26/91 - cj -  added Check.For.Tempo.Meter.Events   04/04/91 - PF -  Added Create.Tempo.Map.From.Track   03/22/91 - cj -  Changed sea.spl.time to fix Lee Kopp FM retrigger clicks   03/13/91 - KJC - Added external record trigger and d34gpi variables   02/01/91 - PF  - Moved "Divisions" to Synclits   01/09/91 - PF  - dcls for click value, beats per measure editing   07/16/90 - PF  - Added REAL.TIME.OF.MIDI.LIMIT.LSB/MSB                    and ACTUALLY.EMIT.MIDI.CLOCK   07/10/90 - PF  - Added meter map dcls   03/21/90 - PF  - reduced CLAV.PTR from 128 to 43 sectors   09/23/89 - CJ  - Added tempo, meter map ptr declarations & routines   08/24/89 - PF  - Add MAX.MIDINET.CHAN   06/20/89 - MWH - Add "play to" time for the sequencer   06/07/89 - TSS - Added PMAP.PTR dcl and documented TTMAP.PTR & VMAP.PTR use   01/16/89 - MWH - Add Auto Punch feature   10/03/88 - cj  - added loop.last.click, loop.trigger.click, compute.click.rate   09/21/88 - TSS - Added dcl of BSTAT.PTR   07/18/88 - CJ  - Removed GOOD.SMPTE, added SMPTE.LAST.INFO2 & 3   05/19/88 - MWH - Remove unused procedures   03/14/88 - CJ  - ADDED NEW.CUE.TRACK.SETTINGS   12/18/87 - MWH - Merge poly updates with N-Final plus AEE sources   08/24/87 - MWH - Merge with other release-N edits; PS.COLLECT, PS.ALLOCATE   08/18/87 - MWH - Rename 199-PLAY -> 195-PLAY   08/17/87 - MWH - Add PS.MAX.TIME   08/06/87 - MWH - Add 199-PLAY procedures   07/14/87 - MWH - Change args for PS.COLLECT, PS.ALLOCATE, PS.SETUP   07/02/87 - MWH - Change args for PS.UPDATE and PS.DEALLOCATE   06/25/87 - MWH - Split FRP.PTR into FP0-FP3.PTR for expanded poly   06/22/87 - MWH - Move multi.syn2 to external memory at MFM.PTR   06/18/87 - MWH - Update for expanded poly; multi.poly to MPOLY.PTR in ext memory   01/08/87 - cj - removed d107 suspended   12/29/86 - CJ - CHANGED ABUF.DATA TO DATA EXTERNAL. MONO SAMPLING ITEMS*//* From 032-poly  */extern	array	newfname;extern	fixed	mono_state;extern	fixed	mono_elim;extern	fixed	mono_inc;extern	fixed	mono_divisor;extern	fixed	mono_env_time;extern	fixed	mono_chan;/* From 040-glob  *//* Global buffers  */extern	fixed	random_;						/* Random number seed							*//* Interrupt storage  *//**** The following 7 variables need to be in this order!!! (see 144-tim3) ****/extern	fixed	intcha;							/* Preserve chan# during intrpt					*/extern	fixed	intfun;							/* And function code							*/extern	fixed	save_r13;extern	fixed	save_mam;extern	fixed	save_mal;extern	fixed	pschan;extern	fixed	psfun;/* Global variables for timbre and sequence recall  */extern	fixed	play_time_msb;					/* Counts 32 bit # of milliseconds				*/extern	fixed	play_time_lsb;					/* Note  script 0.000 = zero.time				*/extern	fixed	play_time_acu;					/* Speed accumulator							*/extern	fixed	next_click;						/* Lsb of next click							*/extern	fixed	beat_number;					/* Beat # of last click							*/extern	fixed	prior_click_msb;				/* Sequence time of prior clcik					*/extern	fixed	prior_click_lsb;extern	fixed	next_click_msb;					/* Sequence time of next click					*/extern	fixed	next_click_lsb;extern	fixed	prior_beat_msb;					/* Sequence time of prior beat					*/extern	fixed	prior_beat_lsb;extern	fixed	next_beat_msb;					/* Sequence time of next beat					*/extern	fixed	next_beat_lsb;extern	fixed	real_time_of_prior_click_msb;	/* Real time of next click						*/extern	fixed	real_time_of_prior_click_lsb;extern	fixed	real_time_of_next_click_msb;	/* Real time of next click						*/extern	fixed	real_time_of_next_click_lsb;extern	fixed	real_time_of_prior_beat_msb;extern	fixed	real_time_of_prior_beat_lsb;extern	fixed	real_time_of_next_beat_msb;extern	fixed	real_time_of_next_beat_lsb;extern	fixed	actually_emit_click;			/* Tells interrupt code ok to click				*/extern	fixed	num_midi_clocks;				/* Number of clocks emitted in interrupt since last main loop	*/extern	fixed	num_received_clocks;			/* Number of clocks received in interrupt since last main loop	*/extern	fixed	real_midi_clock_rate;			/* Current rate of midi clock in real time duration	*/extern	fixed	next_midi_clock_rate;			/* Rate of midi clocks at next tempo change		*/extern	fixed	real_time_of_next_tempo_msb;	/* Time of next tempo change					*/extern	fixed	real_time_of_next_tempo_lsb;extern	fixed	disable_midi_clocks;			/* Flag to prevent interrupt code from interferring with main loop calculation	*/extern	fixed	bounce;							/* True for bounce operation active				*/extern	fixed	chain;							/* True for chain operations					*/extern	fixed	recd_just;						/* True if justified recording active			*/extern	fixed	recall_state;					/* Indicate action to take on timbre recall button pressed	*/extern	fixed	timb_dest;						/* Indicates state of smt/skt/splt				*/extern	fixed	our_timbre;						/* Current timbre to display					*/extern	fixed	our_bank;						/* Current bank   to display					*/extern	fixed	our_seq;						/* Current seq    to display					*/extern	fixed	smt, skt, splt, tpan, tgrp;		/* For smt, skt, split, track pan, track group	*/extern	fixed	butmode;						/* -1=None, 0=entry mode, 1=bank mode, 2=sequence mode	*/extern	fixed	info_mode;						/* 0=Normal no-info mode, 1=info mode			*//* Variables for allocating channels & wave memories  */extern	fixed	lsyn1_start, lsyn1_end;			/* Channels in logical synthesizer 1			*/extern	fixed	lsyn2_start, lsyn2_end;			/* Channels in logical snthesizer 2				*//* Sector pointers allocated during initialization  (top down)        */extern	fixed	stb_ptr;						/* ( 1) External sector of sine table			*/extern	fixed	fre_ptr;						/* ( 8) Frequency table							*/extern	fixed	ltb_ptr;						/* ( 4) Log table								*/extern	fixed	poly_fre_ptr;					/* (16) New poly sampling frequency table		*/extern	fixed	nul_ptr;						/* ( 1) Xmem sec # of null timbre				*/extern	fixed	kbd_pre;						/* (47) Precomputed keybard partial blocks		*/extern	fixed	clav_ptr;						/* (43) Ext mem sectors for kbd and midi key state info (indexed by channel and key #)	*/extern	fixed	ttmap_ptr;						/* ( 1) Xmem ptr - synclavier transit time to volume mapping (ttime = 0 to 255)	*//* At ttmap.ptr+0: synclavier transit time (0-255) to rte value (0-225) mapping */extern	fixed	vmap_ptr;						/* ( 2) Ext mem ptr only  - midi velocity to volume mapping	*//* At vmap.ptr+0: midi velocity (0-127) to volume (0-225) mapping      *//* At vmap.ptr+1: synclavier rte value (0-225) to midi (0-127) mapping */extern	fixed	pmap_ptr;						/* ( 3) Ext mem ptr only - pressure mapping/calibration	*//* At pmap.ptr+0: pressure calibration data - this is unique to each kbd. *//*                Manufacturing creates this info when the kbd is built   *//*                The data is the raw hardware reading obtained when a    *//*                Standard 20 oz. Weight is placed on each key.  Hence,   *//*                You get one reading per key.  This value is used to     *//*                Scale the pressure map.  The reading obtained will      *//*                Represent the 90% point in the pressure map.            *//* At pmap.ptr+1: synclavier baseline pressure readings (one per key)     *//*                This data is re-created whenever the restore.power      *//*                Routine is called. It measures the raw hardware reading *//*                Obtained with no pressure applied to the key. Software  *//*                Assumes the keys will not be held down during the       *//*                Procedure. You get one reading per key.  This info is   *//*                Subtracted from each pressure reading to get an offset  *//*                From the pressure baseline.  This leads to a more       *//*                Consistent and robust pressure subsystem.               *//* At pmap.ptr+2: pressure (0-255?) to rte value (0-225) mapping          */extern	fixed	load_ptr;						/* ( 3) Loader from upper memory				*/extern	fixed	pbn_ptr;						/* ( 2) Physical button number lookup table		*/extern	fixed	tbut_ptr;						/* ( 1) Look up table for track buttons			*/extern	fixed	bstat_ptr;						/* ( 1) Look up table for clavier button panel status	*/extern	fixed	use_ptr;						/* ( 1) Active timbre useage countes			*/extern	fixed	mpoly_ptr;						/* ( 1) Multi-channel to poly voice mapping table	*/extern	fixed	mfm_ptr;						/* ( 1) Multi-channel to fm voice mapping table	*/extern	fixed	new_kbd_pre;					/* Set to 1 to recompute keyboard info			*//* Sector pointers for mono & poly allocation  */extern	fixed	msfirst, mslast, msmax, msfree;/* Internal memory allocation  */extern	fixed	fr1_ptr;						/* Core pointer only - free list #1				*/extern	fixed	fr2_ptr;						/* Core pointer only - free list #2				*/extern	fixed	frm_ptr;						/* Core pointer only - free channel list for mono sampling	*/extern	fixed	fp0_ptr;						/* Core pointer only - free channel list for poly sampling bin 0	*/extern	fixed	fp1_ptr;						/* Core pointer only - free channel list for poly sampling bin 1	*/extern	fixed	fp2_ptr;						/* Core pointer only - free channel list for poly sampling bin 2	*/extern	fixed	fp3_ptr;						/* Core pointer only - free channel list for poly sampling bin 3	*/extern	fixed	str_ptr;						/* Core pointer only - note & partial block storage	*/extern	fixed	num_nblks, num_pblks;			/* Number of note & partial blocks				*//* Data arrays */extern	data	western_scale;extern	data	null_timbre;extern	data	denvlim;extern	data	dec_adj_tab;extern	data	dur_mul_data;extern	data	powers_msb;extern	data	powers_lsb;/* Multi output variables */extern	fixed	multi_there;					/* Set true if multi hardware attached			*/extern	fixed	multi_max;						/* # Of output channels							*/extern	fixed	multi_errs;						/* Input voices with errors						*/extern	fixed	disp_multi_errs;				/* If true display multichannel errors			*//* Basic midi info  */extern	fixed	midi_there;						/* Non-zero if any midi subsystems found (bits 0-7 set for each subsys found)	*/extern	fixed	max_midi_chan;					/* Max output channel number found				*/extern	fixed	max_midinet_chan;				/* Max output number in midinet configuration	*/extern	fixed	sequencer_control_reg;			/* Set to turn on/off sequencer from main loop	*/extern	fixed	kbd_milliseconds;				/* Time base for keyboard delays				*/extern	fixed	upper_disp;						/* Displayed in upper window					*/  /* 0 = Nothing recognized */extern	fixed	lower_disp;						/* Displayed in lower window					*/  /* Positive = that parameter (for resetting on double bounce) */extern	fixed	track_format;					/* Seconds/beats for track display				*/extern	array	wimage;							/* Window image - ascii equiv of window display	*/extern	fixed	new_upper;						/* Set when window image changes				*/extern	fixed	new_lower;						/* Upper and lower halves						*/#if (inc_voice_output)	extern	fixed	speak_it;					/* Set true to activate d42						*/	extern	fixed	speak_time;					/* Time to re-enable							*/#endif extern	array	gpdt;							/* Global parameter data						*/extern	fixed	mark_button_disabled;extern	fixed	xpos_trigger_disabled;extern	fixed	last_loop_parm;					/* Last selected loop parm						*/extern	fixed	loop_start_msb;					/* Holds loop start time parm					*/extern	fixed	loop_start_lsb;extern	fixed	loop_end_msb;					/* Holds loop end time parm						*/extern	fixed	loop_end_lsb;extern	fixed	edit_len_msb;					/* Holds insert/delete length					*/extern	fixed	edit_len_lsb;extern	fixed	chain_repetitions;				/* How many copies of trk to chain				*/extern	fixed	v_s_mul;						/* Computed from v.s.min (sens)					*/extern	fixed	logtbase;						/* Holds log of overall tuning base at all times	*/extern	fixed	rte_overwrite_bits;				/* Holds expression overdub enable bits			*/extern	data	overwrite_lookup;				/* Lpns for overwrite expression lights			*//* From 050-mem */extern	fixed	cnv_sta;						/* Status to pass to conversion program			*/extern	fixed	call_terminate;					/* Set true on break received					*/extern	fixed	call_convert;					/* Set true to active conversion pgm			*/extern	fixed	orig_psys;						/* Original psys #								*/extern	fixed	loader_moved;					/* Set to 1 if loader moved to external memory	*/extern	fixed	from_sfm;						/* 1 If overlayed from sfm, else 0				*/extern	void	overlay(fixed, fixed, fixed);	/* Perform overlay of disk object file			*/extern	void	silence_synths();				/* Procedure to silence synthesizer - called before overlay	*/extern	void	terminate();					/* Procedure to terminate if 's' is typed		*/extern	void	writeout_seq();extern	void	conversion_overlay();			/* Procedure to link to conversion program, music printing, sfm	*/extern	void	leave_synclavier_program();		/* Tries to overlay to other programs			*//* From 100-m1 */extern	fixed	ptptr;/* Sequencer variables from 130-sdef  *//* Sector pointers for real time allocation  (bottom up) */extern	fixed	bas_ptr, bas_len;				/* Sec # in xmem of base sector					*/extern	fixed	par_ptr, par_len;				/* Sec # in xmem of timbre info					*/extern	fixed	nah_ptr, nah_len;				/* Sec # in xmem of note area header			*/extern	fixed	bnk_ptr, bnk_len;				/* Sec # in xmem of timbre bank					*/extern	fixed	inf_ptr, inf_len;				/* Sec # in xmem for seq info					*/extern	fixed	tim_ptr, tim_len;				/* Sec # in xmem for tim/par info				*/extern	fixed	nah_free;						/* Linked list of free blocks in nah			*/extern	fixed	nah__free;						/* Number therein								*/extern	fixed	tim_free;						/* Linked list of free blocks in tim			*/extern	fixed	tim__free;						/* Number therein								*/extern	fixed	next_event_queue;extern	fixed	next_event_msb;extern	fixed	next_event_lsb;extern	fixed	trk_head;						/* Pointer to look up table in xmem				*/extern	fixed	tim_head;						/* Sector number of external memory with timbre/partial info	*/extern	fixed	num_of_soloed_tracks;extern	fixed	tempo_map_ptr;					/* Holds absolute pointer						*/extern	fixed	meter_map_ptr;					/* To start of linked blocks					*/												/* For each data structure.						*/extern	fixed	cplist0;						/* Head of channel pressure list				*/extern	fixed	arlist0;						/* Head of ribbin  filter   list				*/extern	fixed	uplist0;						/* Head of update  list     list				*//* Sequencer control variables  */extern	fixed	advanced_play_time_msb;			/* Sampled once per main loop					*/extern	fixed	advanced_play_time_lsb;			/* Note  these variables						*/extern	fixed	advanced_next_click;			/* Are advanced by 'prescan'					*/extern	fixed	advanced_beat_number;extern	fixed	advanced_seq_time_msb;			/* Version of advanced play						*/extern	fixed	advanced_seq_time_lsb;			/* Mapped to sequencer units					*/extern	fixed	loop_play_time_msb;				/* Time of overall loop start					*/extern	fixed	loop_play_time_lsb;extern	fixed	loop_play_time_acu;extern	fixed	loop_next_click;extern	fixed	loop_beat_number;extern	fixed	loop_trigger_click;extern	fixed	loop_last_click;extern	fixed	loop_real_time_of_next_click_msb;extern	fixed	loop_real_time_of_next_click_lsb;extern	fixed	loop_seq_time_msb;				/* Loop start point mapped						*/extern	fixed	loop_seq_time_lsb;				/* To sequencer units							*/extern	fixed	loop_seq_time_of_next_click_msb;extern	fixed	loop_seq_time_of_next_click_lsb;extern	fixed	prescan;						/* Prescan sequencer by 8 ticks for better timing	*/extern	fixed	repscan1;						/* Prescan time for repeat/arpegg				*/extern	fixed	seq_spl_tim;					/* Splice time for poly notes					*/extern	fixed	seq_fm1;						/* First splice for fm notes					*/extern	fixed	seq_fm2;						/* Second splice for fm notes					*/extern	fixed	seq_mono3;						/* Mono sampling splice times					*/extern	fixed	cont, eras;						/* Sequencer state variables					*/extern	fixed	xpos;							/* More      state variables					*/extern	fixed	move_limit_msb, move_limit_lsb;	/* Abs seq time limit to ff/rewind to			*/extern	fixed	move_speed;						/* >0 For f.f, <0 for rewinding					*/extern	fixed	abort_seq_notes;				/* Causes termination of active notes on 'stop'	*/extern	fixed	abrt_recording;					/* Set true if should abort recording notes		*/extern	fixed	recd_trk;						/* Holds track # (2-255?)						*/extern	fixed	click_track_mode;				/* Click track mode								*/extern	fixed	continue_button_active;			/* True if looking for first note				*/extern	fixed	erase_style;					/* Holds style of erase selected				*/extern	fixed	new_motion;						/* Set if new info for l.o.d					*/extern	fixed	lod_play_tracks;				/* Lod tracks to play							*/extern	fixed	lod_recd_tracks;				/* Lod tracks to record on						*/extern	fixed	new_cue_track_settings;			/* New constants for cue tracks					*/extern	fixed	samp_speed;extern	fixed	samp_click_rate;extern	fixed	samp_crm;extern	fixed	samp_bpm;extern	fixed	sm_hrs, sm_min, sm_sec;			/* Sampled info									*/extern	fixed	sm_fra, sm_bit, sm_mode;		/* For use by interrupt routine					*/extern	fixed	mark_button_msb;extern	fixed	mark_button_lsb;extern	fixed	check_sequencer_times;			/* Set if we need to check vars below			*/extern	fixed	auto_punch_in_armed;			/* Record pressed, ready to punch in			*/extern	fixed	play_seq_to_a_time;				/* Sequencer will "play to" a time, then stop	*/extern	fixed	ext_rec_trigger_state;			/* State of external record triggers			*/extern	fixed	auto_punch_on;					/* Auto punch mode on if non-zero				*/extern	fixed	rehearse_mode;					/* True if auto punch in is actually a rehearse	*/extern	fixed	pre_roll_msb;					/* Snapshot start time for auto punch			*/extern	fixed	pre_roll_lsb;extern	fixed	auto_punch_in_msb;				/* Snapshot punch in time						*/extern	fixed	auto_punch_in_lsb;extern	fixed	auto_punch_out_msb;				/* Snapshot punch out time						*/extern	fixed	auto_punch_out_lsb;extern	fixed	seq_play_to_msb;				/* Sequencer play to time						*/extern	fixed	seq_play_to_lsb;extern	array	preroll_trigger;				/* Time to trigger preroll						*/extern	array	rec_in_trigger;					/* Time to trigger record in					*/extern	array	rec_out_trigger;				/* Time to trigger record out					*/extern	fixed	d34_ccc_bits;					/* D34 bits lit by ccc (on d34gpi)				*/extern	fixed	d34_trigger_bits;				/* D34 bits lit by external triggers			*/extern	fixed	overall_loop;extern	fixed	goback_play_time_msb;extern	fixed	goback_play_time_lsb;extern	fixed	goback_seq_time_msb;			/* Version that has been						*/extern	fixed	goback_seq_time_lsb;			/* Mapped to seq times							*/extern	fixed	phase_info;						/* Set true if phase info in first coeff word	*/extern	array	c_frame, fr_ptrs;extern	fixed	par_top;						/* Length (words) of timbre area				*/extern	fixed	par_numt;						/* Number of timbres in par.ptr					*/extern	fixed	active_bank_len;				/* Length of bank area							*/extern	fixed	missing_tim_head;extern	fixed	selected_partials;				/* Bits for selected partials					*//* External sync variables: */extern	fixed	ext_clock_mode;					/* Mode of external clock						*/extern	fixed	clock_data;						/* Used to detect changes in ext clock input	*/extern	fixed	ext_clock_case;					/* For interrupt routine						*/extern	fixed	create_50hz_clock;				/* True to create 50 hertz clock output			*/extern	fixed	ext_clock_toggle;				/* Toggle for external 50 hertz signal			*/extern	fixed	create_beat_clock;				/* True to create beat sync clock output		*/extern	fixed	ext_clock_accum;				/* For ext clock at beat rate					*/extern	fixed	ext_clock_out;					/* State of external clock output				*/extern	fixed	ext_speed_accum;				/* For external beat sync generation			*/extern	fixed	ext_beat_trigger;				/* For external beat sync generation			*/extern	fixed	midi_limit_rem;					/* Remainder for midi clock output				*/extern	fixed	midi_limit_msb;					/* Limit for midi clock							*/extern	fixed	midi_limit_lsb;extern	fixed	trigger_click;					/* Used with external and recorded clicks		*/extern	fixed	loop_trig_click;				/* Looping version								*/extern	fixed	real_time_of_midi_limit_msb;	/* Real time limit of midi clock				*/extern	fixed	real_time_of_midi_limit_lsb;extern	fixed	real_time_of_midi_limit_acu;extern	fixed	enable_key_trig;				/* Variables for drum replacement trigger		*/extern	fixed	key_is_triggered;extern	fixed	key_trig_time;extern	fixed	key_rel_time;extern	fixed	key_end_time;extern	fixed	est_rate;						/* For use with external click track			*/extern	fixed	ext_rep_arp;					/* Set to allow external repeat/arpeggiate		*/extern	fixed	new_ext_pulse;					/* Set when ext pulse received					*/extern	fixed	ext_pulse_time;					/* Time of external repeat pulse				*/extern	fixed	clock_advances;					/* For 50 hz clock input						*/extern	fixed	clock_received;					/* For external beat sync input					*/extern	fixed	real_clock_rate;				/* Current rate of external clock in real time duration	*/extern	fixed	next_clock_rate;				/* Rate of external clocks at next tempo change	*/extern	fixed	clock_limit_msb;				/* Limit for beat/midi sync input				*/extern	fixed	clock_limit_lsb;extern	fixed	clock_limit_rem;				/* Remainder for beat sync input				*/extern	fixed	clock_delay_time;				/* Sync delay timer for beat sync				*/extern	fixed	disable_received_clocks;		/* Flag to prevent interrupt code from interferring with main loop calculation	*/extern	fixed	real_time_of_clock_limit_msb;	/* Real time limit of external beat/midi clocks	*/extern	fixed	real_time_of_clock_limit_lsb;extern	fixed	samp_ext_div;					/* Sampled beat divisor for ext syncing			*//* Bits for guitar performance parameters- stored in gtinfo.loc (see above)  */extern	fixed	quant;							/* true for quantization						*/extern	fixed	pfilt;							/* activate pitch filter						*/extern	fixed	tfilt;							/* activate pitch transient filter				*/extern	fixed	vtrack;							/* true for volume envelope tracking			*/extern	fixed	dcont;							/* decay control - true suppresses dual decays	*/extern	fixed	tfilten;						/* set to zero to remove trans filter completely	*/extern	fixed	follow_guitar;					/* true when guitar envelope is to be followed	*//* Tempo/Meter Map Routines: */extern	void	map_sequence_time_to_real_time(array, array);extern	void	map_sequence_duration_to_real_duration(array, array, array);extern	void	map_real_time_to_sequence_time(array, array);extern	void	map_real_duration_to_sequence_duration(array, array, array);extern	void	compute_real_midi_clock_rates(array);extern	void	compute_real_clock_rates(array);extern	void	create_tempo_map_from_track(fixed, fixed);extern	void	compute_time_of_nearest_tempos(array, array, array);extern	void	advance_to_next_tempo_record();extern	void	backup_to_prior_tempo_record();extern	void	advance_to_next_meter_record();extern	void	backup_to_prior_meter_record();extern	void	set_click_value(array, fixed);extern	void	lookup_click_value(array);extern	void	compute_loop_next_click();extern	void	map_sequence_time_to_nearest_clicks(array, array, array);extern	void	map_sequence_time_to_nearest_beats(array, array, array);extern	void	map_sequence_time_to_beats(array, array);extern	void	map_beats_to_sequence_time(array, array);extern	void	map_measures_beats_to_sequence_time(array, array);extern	void	map_sequence_time_to_measures_beats(array, array);extern	void	map_sequence_duration_to_beats(array, array, array);extern	void	map_beats_to_sequence_duration(array, array, array);extern	void	map_sequence_duration_to_measures_beats(array, array, array);extern	fixed	lookup_beats_per_measure(array);extern	void	lookup_denom(array);extern	void	set_beats_per_measure(array, fixed);extern	void	set_denom(array, fixed);extern	fixed	lookup_beat_rate(array);extern	void	lookup_tempo(array, array);extern	void	set_tempo(array, array);extern	fixed	insert_tempo_record(array);extern	fixed	delete_tempo_record(array);extern	fixed	insert_meter_record(array);extern	fixed	delete_meter_record(array);extern	void	compute_time_of_nearest_meters(array, array, array);extern	void	compute_real_time_of_next_click(array);extern	void	compute_real_time_of_next_beat(array);extern	void	check_for_tempo_meter_events(array);/* From 131-sdf1 */extern	void	compute_trk_heads();			/* Recompute abs track head pointers after moving note area	*/extern	void	adjust_tim_heads(fixed);extern	void	clean_track_heads(fixed);extern	void	init_live_rtes();extern	void	shuffle_bas_down();				/* Move bas ptr to 1							*/extern	void	shuffle_par_down();				/* Move par area down in memory					*/extern	void	shuffle_tim_up();				/* Shuffle tim.ptr up to trd					*/extern	void	shuffle_inf_up();extern	void	shuffle_bnk_up();extern	void	get_par_storage(fixed);			/* Get par.ptr storage							*/extern	void	maximize_memory_for_record();	/* Make max space for recording					*/extern	void	check_memory_for_record();		/* Make usefull space for recording				*/extern	void	get_bnk_storage(fixed);			/* Get bnk.ptr storage							*/extern	void	get_tim_storage(fixed);			/* Get tim.ptr storage							*/extern	void	get_trd_storage(fixed);			/* Get trd.ptr storage							*/extern	void	get_large_temporary_xmem_buffer(array);	/* Returns array(0) = xmem base;  array(1) = xmem sector length	*/extern	void	nah_collect();extern	void	compute_click_rate();extern	void	speed_comp();					/* Compute prescan amounts & sample sequencer info	*/extern	void	compute_numb_left();			/* Handy procedure to compute # of notes remaining in sequencer	*/extern	void	p_lookup(fixed);				/* Look up single word from timbre area			*/extern	void	p_store(fixed, fixed);			/* Store word in partial area					*/extern	void	trk_head_lookup(fixed, fixed);	/* Look up single word from specified track header area	*/extern	void	trk_head_store(fixed, fixed, fixed);	/* Store single word into specified track header area	*/extern	void	tim_head_lookup(fixed, fixed);	/* Look up single word from specified timbre info area	*/extern	void	tim_head_store(fixed, fixed, fixed);	/* Store single word into specified timbre info area	*/extern	void	find_timbre(fixed, fixed);		/* Pass base, timbre # - return core pointer to timbre, or word offset	*/extern	void	lookup_timbre_name(fixed, array);	/* Looks up name for a timbre #					*/extern	void	lookup_track_timbre_name(fixed, array);	/* Looks up current timbre name for a track		*/extern	void	compute_timbre_frame(fixed);	/* Compute waveshape for currently selected timbre frame	*/extern	void	adjust_usage_counters(fixed, fixed);	/* Adjust entries in use.ptr table				*/extern	void	alloc_timbre_uses(fixed);		/* Account for a tracks timbre uses in use.ptr table	*/extern	void	dealloc_timbre_uses(fixed);		/* Remove a tracks timbre uses from use.ptr table	*/extern	void	alloc_all_timbre_uses();		/* Account for all tracks timbre uses in use.ptr table	*/extern	void	dealloc_all_timbre_uses();		/* Remove all tracks timbre uses from use.ptr table	*/extern	void	compact_timbres(fixed, fixed);	/* Procedure to compact in-core timbres as required in sequencer, or bank	*/extern	void	zero_frame_ptrs();				/* Initialize frame pointers - used several places	*/extern	void	find_frame(fixed, fixed);		/* Find frame for keyboard timbre - pass partial #, frame #	*/extern	void	find_partial();					/* Find first selected partial					*/extern	void	count_timbre_frames(fixed);		/* Counts timbre frames							*//* From  136-que */extern	fixed	notelist;						/* Start of active note list que				*/extern	fixed	kbdlist;						/* Start of que for new kbd notes				*/extern	fixed	seqlist;						/* Start of que for new seq notes				*/extern	fixed	seqlast;						/* End   of que for new seq notes				*/extern	fixed	tielist;						/* Start of que for tied    notes				*/extern	fixed	tielast;						/* End   of que for tied    notes				*/extern	fixed	nptr, nfreep;extern	fixed	pptr, pfree;extern	fixed	gfree;							/* Holds list of freed up 'ghost' partial blocks	*/extern	void	relp();							/* Release partial block - zero out block here to reduce note start delay	*//* From 143-sio */extern	data	stop_data;extern	fixed	smpte_onoff;					/* 1: Smpte on.  0: Smpte off					*/extern	fixed	smpte_state;					/* Internal smpte state							*/extern	fixed	smpte_recd;						/* Stored punch & record bits					*/extern	fixed	smpte_rate;						/* Smpte rate, bits/2.5 secnd					*/extern	fixed	smpte_time;						/* Time of smpte reading						*/extern	fixed	smpte_accum;					/* Bit accumulator								*/extern	fixed	smpte_advances;					/* Advance accumulator							*/extern	fixed	smpte_brate;					/* Bit rate (bits in 20 msec)					*/extern	fixed	smpte_rate_accum;				/* Rate accumulator								*/extern	fixed	sm_info1;						/* Smpte info stored here						*/extern	fixed	sm_info2;						/* By d03 interrupt routine						*/extern	fixed	sm_info3;extern	fixed	sampled_rate;					/* Sampled by main loop							*/extern	fixed	sampled_time;					/* For use during lock-up						*/extern	fixed	sampled_accum;extern	fixed	sampled_advances;				/* Advance accumulator							*/extern	fixed	sampled_brate;					/* Bit rate (bits in 20 msec)					*/extern	fixed	sampled_rate_accum;				/* Rate accumulator								*/extern	fixed	sampled_info1;extern	fixed	sampled_info2;extern	fixed	sampled_info3;extern	fixed	smpte_bit_targ;					/* Target bit.accum for lock up					*/extern	fixed	smpte_time_targ;				/* Target kbd.mills for lock up					*/extern	fixed	smpte_track_rate;				/* Rate to use for tracking						*/extern	fixed	smpte_last_adv;					/* Previous last.adv reading					*/extern	fixed	smpte_last_racc;				/* Previous rate accumulator					*/extern	fixed	smpte_mode_rate;				/* Desired rate for mode						*/extern	fixed	smpte_sync_msb;					/* Error accumulator							*/extern	fixed	smpte_sync_lsb;extern	fixed	check_smpte_error;				/* Set to check sync							*/extern	fixed	slocked;						/* True if locked to smpte						*/extern	fixed	disable_smpte_start;			/* Set true to disable auto-start				*/extern	fixed	smpte_last_info2;				/* Save last reading displayed on				*/extern	fixed	smpte_last_info3;				/* Vk for better displaying						*/extern	void	init_smpte();					/* Procedure to initialize for smpte			*/extern	void	lock_to_smpte();				/* Lock up to smpte								*/extern	void	check_smpte_synchronization();	/* Check smpte synchronization					*//* These variables must be in order:  (accessed with "core") */extern	fixed	cur_hrs;						/* Last read smpte time							*/extern	fixed	cur_min;						/* Stored as global variables					*/extern	fixed	cur_sec;						/* For display									*/extern	fixed	cur_fra;extern	fixed	cur_bit;extern	fixed	dis_hrs;						/* Last displayed smpte time					*/extern	fixed	dis_min;extern	fixed	dis_sec;extern	fixed	dis_fra;extern	fixed	dis_bit;extern	data	bits_per_msec_num;				/* Smpte bits per msec numerator				*/extern	data	bits_per_msec_den;				/* Smpte bits per msec denom					*/extern	data	bit_rate_factor;/* From 194-samp */extern	fixed	sector_msb, sector_numb, sector_offset;extern	fixed	time_seconds, time_milliseconds, time_microseconds;extern	void	time_to_index(fixed, fixed, fixed, fixed, fixed);extern	void	index_to_time(fixed, fixed, fixed, fixed, fixed);extern	void	period_time_to_index(fixed, fixed, fixed, fixed);extern	void	index_to_period_time(fixed, fixed, fixed, fixed);/* From 195-play */extern	void	poly_alloc_chans(array, fixed);extern	void	poly_free_chans();extern	void	poly_play(array, fixed, fixed, fixed, fixed, fixed, fixed, fixed, fixed, fixed);extern	void	poly_play_sfile(array);extern	void	poly_wait_sf();/* From 196-mal */extern	void	ms_search();					/* See if file name is in ext memory - uses global fnbuf - also check buffer size	*/extern	void	ms_update(fixed, fixed);		/* Update file pointers if buffer moved			*/extern	void	ms_collect(fixed);				/* Garbage collect external memory				*/extern	void	ms_users(fixed, fixed);			/* Update user field for file record in ext mem	*/extern	void	ms_load(fixed, fixed);			/* Load a sound file attack buffer. Pass disk sector	*/extern	void	ms_extract();					/* Get file info into misc.buf from ext mem		*//* From 197-pal */extern	fixed	cache_ptr;						/* ptr to next free word in cache				*/extern	fixed	cache_secs;						/* cache length in sectors						*/extern	array	cache_base;						/* base sector/bin of cache						*/extern	fixed	num_snds_in_cache;				/* number of sound files in cache				*/extern	data	initial_fname;					/* default name for a new sound file			*/extern	fixed	sample_to_memory;extern	fixed	show_file_loading_message;		/* Set to position to show message at			*/extern	fixed	poly_hist_there;				/* True if .sply-7 file is there				*/extern	fixed	poly_hist_buf;extern	fixed	poly_hist_size;extern	fixed	polydev, polysec;				/* Disk ptrs to the file						*/extern	void	ps_update(array, array);		/* Update file pointers if data is moved		*/extern	void	ps_deallocate(array);extern	void	ps_deallocate_all();			/* Free up all sounds in polymem				*/extern	void	ps_collect(fixed, fixed, fixed);	/* Garbage collect poly synth memory			*/extern	void	ps_shuffle(fixed);extern	void	ps_allocate(fixed, fixed, fixed);	/* Allocate a block i sectors long				*/extern	void	ps_setup(array);				/* Set up synclavier info from sound file in poly memory	*/extern	void	ps_audition(array, fixed);		/* Audition sound file in poly mem				*/extern	void	ps_load(fixed, fixed, fixed, fixed, fixed);extern	void	ps_extract();					/* Get file info into misc.buf from ext mem		*/extern	void	ps_max_time();					/* move sound files out of bin-0 if possible	*/extern	void	read_in_poly_hist();extern	void	write_out_poly_hist();extern	void	build_poly_hist_reset_rec(array);extern	void	build_poly_hist_rec(array, fixed, array);extern	void	add_poly_to_hist(array);/* From 197-pal1 */extern	void	find_cache();					/* look for sound file cache in polymem			*/extern	void	setup_cache(fixed);				/* set up a cache of all sound files on winchester disk	*/extern	void	find_sound(fixed[]);			/* looks for a sound file in the cache			*/extern	boolean	add_file_to_cache(fixed[]);		/* add file to cache							*/extern	boolean	remove_file_from_cache(fixed[]);	/* remove file from cache						*//* From 412-d42 */#if (inc_voice_output)	extern	void	do_voice_output();			/* handle output								*/#endif 
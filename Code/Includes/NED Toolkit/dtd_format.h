/******************************************************************** *	dtd_format.h  *		*	*	Paul Forstman******************************************************************* *//*	Modified:	09/14/93	PF  - Created this file*/#ifdef __cplusplusextern "C" {#endif#define DTD_SECTOR_BYTES	512			/* Number of bytes in a disk sector */#define DTD_SECTOR_WORDS	256			/* Number of words in a disk sector *//* The following magic numbers unambiguously identify a DTD disk drive */#define DTD_MAGIC1     		54322#define DTD_MAGIC2			12345/* The following enumerate the important disk sectors */#define DTD_MAGIC_SECTOR	0			/* Magic number sector - holds magic numbers and global information */#define TRACK_ALLOC_SECTOR	1     		/* Allocation info for 1st track - where audio has been recorded on the track *//*                          2        	/* Alloc info for second track *//*                         	3 			/* Alloc info for third  track *//*                         	4        	/* Alloc info for fourth track *//* * Each allocation sector contains 64 8 byte records. * A record of all zeroes is null. * Nonzero records contain a starting sector number (32 bits) and an ending sector number (32 bits) */#define PROJECT_SECTOR 		16			/* Project directory (allow 50) */#define TRACK_SECTOR		32			/* Track directory (allow 100) *//* The following sectors contain cue storage information */#define CUE_INFO_SECTOR		132    		/* Info sector about cue entries */#define CUE_ALLOC_SECTOR	133			/* Cue entry allocation directory - where cue entries are stored in CUE_SECTOR */#define CUE_ALPHA_SECTOR  	261     	/* Cues, alphabetically sorted - these are pointers into CUE_ALLOC_SECTOR */#define CUE_TIME_SECTOR 	325     	/* Cues, time sorted */#define CUE_SMPTE_SECTOR	389			/* Cues, smpte sorted */#define CUE_SECTOR		  	453			/* Starting sector of cue entries *//* * Part of each disk contains digital zeroes.   This is used to zero out * poly memory during CUE PLAYBACK mode when no cues are being triggered. */#define ZERO_SECTOR			3744	   		 	/* Start of zeroes */#define DATA_SECTOR			4000				/* Start of data */#define DATA_SAMPLE			(DATA_SECTOR << 8)	/* Start of data (sample#) */#define ZERO_LEN			256					/* # of sectors of zeros on disk */#define MAX_STORE_DISK		(ZERO_SECTOR - CUE_SECTOR)#define MAX_PORTS			4			/* maximum number of drives which can be connected to system *//* The following describes the contents of the magic sector */typedef struct {	unsigned short	magic1;				/* Magic #1 */	unsigned short	magic2;				/* Magic #2 */	int		error;	short	longconfig;	short	zero_sector;	short	data_sector;	short	unused[9];	char	sync;						/* DTD sync */	char	format;						/* DTD format */	short	port;						/* Port number drive is attached to */	short	base_track;					/* Base track number for this port */	short	tracks_per_port;			/* Number of tracks on each drive */	short	track_avail_bits;	int		track_data;					/* For EACH track? */} dtd_magic_sector;#define NUM_T_ALLOC_SECTORS		4		/* One sector for each track per drive */#define ADIR_LEN				64		/* Number of entries per track *//* The following describes the contents of the blocks within the track allocation sectors */typedef struct {	uint32	start;	uint32	end;} t_alloc_entry;/* Project directory format */#define NUM_PROJECTS      	50       	/* Num of projects in directory */#define NUM_PROJECT_SECTORS	5			/* ((50 * 24) + 255) / 256)/* The following describes the structure of a project directory entry */typedef struct {	short 	item;					   	/* Human item # - start w/ 1 */	char 	title[24];					/* 24 characters, space filled */	short	start_time;					/* Start time, secs, 50 khz */	short	end_time;			      	/* End   time, secs, 50 khz */	short	sample_rate;				/* Sample rate for project */	short	seconds_used;				/* # of seconds used */	short	status;						/* Status bits *//*  *					bit 0:    0 = empty project		1 = non-empty (something recorded or loaded) *     				bit 1:    0 = ready         	2 = locked by user */	short	modified;					/* True if modified since last backup */	short	index;						/* Index to track directory sector */	short	fade;						/* Length of cross fade, in msec */	short	star;						/* Screen symbol - 1: *   2: + */	short	unused1;	short	unused2;} project_entry;/* Track directory format */#define MAX_TRACKS			16			/* Max. tracks used by any one project */#define NUM_TRACK_SECTORS	100			/* Number of sectors of track directory information *//* The following describes the structure of a track directory entry */typedef struct {	char 	title[16];					/* 16 chars, no length, space filled */	char	sr;							/* 0=safe, 1=ready, 2=locked */	char	ria;						/* 0=repro, 1=input, 2=auto, 3=cue playback */	short	used;					 	/* # of seconds of recording used @ 50 Khz   */	short	input;						/* Upper: 0=stm, 1=dig, 2=out, 3=trk */										/* Lower: 0=no channel, else channel # (1-16) */	short	gain;						/* Input gain, 0-100.0 */	short	volume;					  	/* Track volume, 0 - 100.0 */	short	pan;					   	/* Track pan, -50 - +50 */	short	bits;						/* Bits 0-1: code for command outstanding */										/* Bit 2: 0 means early directory - no routing info. */	short	routs;						/* Upper: digital routing, Lower: voice output */} track_entry;/* The following describes the structure of a track sector on disk */typedef track_entry track_sector[MAX_TRACKS];/* Cue allocation record format */typedef struct {	short 	sector;						/* Sector number of cue entry */	short 	offset;						/* Offset within sector of cue entry */} cue_alloc_entry;/* Cue record format */#define MIN_CUE_RECORD_LEN	32			/* Min cue record length */#define MAX_CUE_RECORD_LEN  2560 		/* Max cue record length */#define NUM_CUE_SECTORS		64			/* # of sectors of directory entries */#define MAX_CUE_NAME_LEN	32#define MAX_NUM_OF_CUES		16384/* The following describes the structure of a cue directory entry */typedef struct {	short	record_len;					/* 16-bit word length of this cue entry */	int 	start_sample;				/* Starting sample number */	int		end_sample;					/* Ending sample number */	short 	fade_in;					/* Length of fade in */	short	fade_out;					/* Length of fade out */	short	tracks[4];					/* Holds track ID bits */	short 	alloc;						/* Id # to index cue */	int 	smpte;						/* Sorted SMPTE bit */	short 	smpte_mode;					/* Mode code for smpte bits */	int 	edit_in;					/* Edit-in sample # */	int		edit_out;					/* Edit-out sample # */	int		mark_offset;				/* Mark offset time, msec */	short 	bits;						/* Bit 0: protect or not, Bit 2-4: cue offset switch */										/* Bit 8: cue.smpt.msb is absolute, Bit 16: event.in.s#.msb has been set. */	short 	sample_rate;				/* Holds sample rate */	int 	cue_len;					/* Cue length, msecs */	short 	list_ptr;					/* Pointer to splice list */	short 	list_len;					/* Length of splice list */	int 	in_sample;					/* Actual disk sample # of first audio segment */	int		event_in_sample;			/* Base in time for event */	short	spare;	short	name_len;					/* Length of the name to follow (in bytes) */	char	name[1];					/* The cue name starts here */} cue_entry;/*  * In order to tell if there is a caption or not: * 		get word length of cue handy (cue.rlen) *		compute word address of first word after cue name (e.g. cue.name + 1 + shr(cue[cue.name]+1,1) *			if cue.record_len = that address there is no caption *			if cue(cue.list.ptr) = that address there is no caption *			else an xpl string starts there which is the caption */  /* The following describes the format of Cue Record Edit Segments */#define CUE_SEG_STRIDE		16			/* Words per edit segment */typedef struct {	int		sync;						/* Sync address */	int		in;							/* In address */	int		out;						/* Out address */	short 	drive_bits[4];				/* Drive on/off control bits */	short	fade_in;					/* Fade In  Milliseconds */	short	fade_out;					/* Fade Out Milliseconds */	int		unused;	short	start_pixel;				/* Start pixel pointer */	short	end_pixel;					/* End pixel pointer */} edit_segment;/* The following describes the contents of the cue info sector */typedef struct {	unsigned short	magic1;				/* Magic #1 */	unsigned short	magic2;				/* Magic #2 */	short	num;						/* Number of cues in data area */	short	num_sectors;				/* Number of sectors of cue definition */	short	num_words;					/* Number of 16-bit words of cue definition */	short	num_of_alloc;				/* Number of entries in allocation sector */	short	num_of[3];					/* Num_of for total disk sort ?????? */} cue_info;#define		ALPH_SORT		0#define		TIME_SORT		1#define		SMPT_SORT		2typedef struct {	short				scsi_id;	dtd_magic_sector	*dtd_magic;	project_entry		*project_list;	t_alloc_entry		*adir;	track_sector 		*track_dir;		cue_info 			*c_info;	cue_alloc_entry		*c_alloc;		short				*c_alpha;	short				*c_time;	short				*c_smpte;	cue_entry			*c_base;	uint32				drive_capacity;	uint32				drive_block_size;} dtd_port_structure;#ifdef __cplusplus}#endif
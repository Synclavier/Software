/* SyncNet driver operations are split into * a major (interface type) and minor (operation) code * not all operations are meaningful * be careful about conflicts with the OS calls */ #include	"snetdefs.h"		/* get opcode definitions */ /* control calls for the DRVR */#include	"reqstructs.h"#include	"lsnstructs.h"#ifdef __cplusplusextern "C" {#endifvoid	req_for		(REQ *q, callout rply, int max);	/* low-level initialize 		*/int		req_tag		(void);								/* generate request/answer tag 	*/bool	req_post	(REQ *q, int tag, PACKET *rpkt);	/* await tag with buffer 		*/void	req_cancel	(REQ *q);							/* stop pending requests, don't release */PACKET* req_dq(REQ *q);bool	req_nq(REQ *q, int tag);						/* await a new tag in a new_packet() */bool 	req_aq(REQ *q,int tag,int length);void	lsn_for(LSN *l, callout happen);				/* low-level initialize */void	lsn_enable(LSN *l, eset *enbl);					/* listen for event set */void	lsn_event(LSN *l, set_type evt, bool b);		/* enable/disable individual event */int32	lsn_when(LSN *l);								/* time of last update */void	lsn_latch(LSN *l, eset *s, uint32 *when);		/* latch out pending events */void	lsn_close(LSN *l);void	snet_close_with_warnings(void);					/* duh.... */bool	setautopunch(int32 state[3]);bool	getautopunch(int32 state[3]);#ifdef __cplusplus}#endif
/*	NED Toolkit - External Machine Control Class		Copyright © 1991,1992 by New England Digital Corp.  All rights reserved.	Used to control Sony, Panasonic, Ampex video decks*/#ifndef	NED__MACHINECONTROL#define NED__MACHINECONTROL#include "cplus.h"#include "convert.h"#include "tapedeck.h"// since the machine being controlled is a shared resource,// we treat it like the mouse & keyboard - it belongs to the foreground application// active machine control controls the serial port with the machine// enabling machine control means that it is active when we're in foreground.//// this is an abstract class which must be subclassed for the runtime environment// to provide notifications and enviromnment information.//// This class should eventually be based on Protocol.struct	MachineControlPrefs						// configuration data{	int8	machine_address;					// machine address on ampex serial chain	int8	protocol;							// machine protocol	int8	port;								// machine port};class MachineController{	public:	MachineController ();						// construct server	virtual ~MachineController ();				// destruct server	// status	Boolean			IsEnabled () { return fEnabled; }	// is machine control enabled?	Boolean			IsActive ()	{ return IsEnabled() && fActive; }	// is machine control active?	int				GetSpeed () { return fSpeed; };	// return current speed & direction	long			GetTimeCode () { return fTimeCode; }	// return time code	// motion control	void			Stop ();					// stop movement	void			Shuttle (short speed);		// shuttle motion	void			Locate (int32 sbits);		// seek to time code	void			Rewind ();					// rewind tape	void			FastForward ();				// advance tape	void			Play ();					// play from tape	void			Run ();						// do work	void			KillIO ();					// don't work	void			Activate (Boolean b);		// lose/regain control	void			Enable(Boolean enabled);	// do machine control	// notifications	virtual void	Alert (short err);			// display error		virtual void	MotionChange ();			// change motion display	enum { OK=0, ErrMemory, ErrTimeout, ErrTrouble, ErrLocal, ErrEOT, ErrTransmit, ErrNAK, ErrAddr, ErrConnect };		// enquiries	virtual S_MODE	GetSMPTEMode ();			// determine current SMPTE mode	// configuration	void			SetPrefs (int address, mc_protocols protocol, Ser_Port port);					/* machine control active */	MachineControlPrefs*	GetPrefs ()	{ return &fPrefs; }	// get configuration struct	void			SetPrefs (MachineControlPrefs *p);		// reload configuration struct	static bool		PortAvailable(Ser_Port port);	// can this port be used?protected:		// machine state		MachineControlPrefs	fPrefs;					// machine configuration	uint32		fTimeCode;						// time code	uint32		fResponse;						// machine response	int			fSpeed;							// FFW/REW speed	short		fSpeedDelta;					// FFW/REW speed increment	short		fSpeedLimit;					// FFW/REW speed limit	// driver states	long		fTicker;						// execution ticker	long		fPollTick;						// status ticker	long		fErrTick;						// error ticker	Boolean		fPoll;							// poll time or status	void		DoPoll (long now);				// poll time/status	// command states	Boolean		fCmdBusy;						// current command sent/awaiting status	short		fCmd;							// current command	void		DoCmd ();						// execute play/stop/locate	void		SendCmd ();						// send command to machine	Boolean		Check (Boolean alert);			// check response		short		fNextCmd;						// pending command	short		fNextSpeed;						// its argument	int32		fNextTime;						// its argument	Boolean		HasCmd ();						// is command pending¥¥¥	Boolean		Connect ();						// connect using Prefs	Boolean		Disconnect ();					// connect using Prefs	Boolean		fActive;						// is actually operating	Boolean		fEnabled;						// wants to operate in foreground};#endif // NED__MACHINECONTROL
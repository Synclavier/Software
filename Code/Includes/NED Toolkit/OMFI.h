/*************************************************************************//*								      	 *//*              Copyright (c) 1993 Avid Technology, Inc.	      	 *//*								      	 *//* Permission to use, copy and modify this software and to distribute 	 *//* and sublicense application software incorporating this software for	 *//* any purpose is hereby granted, provided that (i) the above	      	 *//* copyright notice and this permission notice appear in all copies of	 *//* the software and related documentation, and (ii) the name Avid     	 *//* Technology, Inc. may not be used in any advertising or publicity   	 *//* relating to the software without the specific, prior written	      	 *//* permission of Avid Technology, Inc.				      	 *//*								      	 *//* THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 	 *//* EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY   	 *//* WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.   	 *//* IN NO EVENT SHALL AVID TECHNOLOGY, INC BE LIABLE FOR ANY DIRECT,   	 *//* SPECIAL, INCIDENTAL, INDIRECT, CONSEQUENTIAL OR OTHER DAMAGES OF   	 *//* ANY KIND, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,    	 *//* DATA OR PROFITS, AND WHETHER OR NOT ADVISED OF THE POSSIBILITY OF  	 *//* DAMAGE, REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF OR IN	 *//* CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.	      	 *//*								      	 *//*************************************************************************//* * This file contains a sample API for reading and writing single  * and multi Frame OMF Interchange files. * */#ifndef _OMF_TOOLKIT_API_#define _OMF_TOOLKIT_API_ 1#ifdef __cplusplusextern "C"   {#endiftypedef enum     {    NotApplicable,    RGB888,     YUV422    } mediaFormat; /* FORMATS WE SUPPORT */typedef double editRate; /* Video compression types */typedef enum {noComp, JPEG} videoCompr; typedef enum {jcLuminance, jcChrominance} JPEGcomponent; /* layout, fullFrame = all data in one sample,            oneField  = only the even field is present, should be replicated           interlacedFields = both fields are present but in separate form*/typedef enum {noLayout, fullFrame, oneField, interlacedFields} cframeLayout;typedef unsigned char uChar; typedef uChar *uCharPtr;/* An image description struct */typedef struct imageStruct{        mediaFormat     format;        cframeLayout    layout;        short           width;        short           height;        editRate        editrate;        short           bitsPerPixel;        videoCompr      compression;	long		JPEGtableID;	char           *name;	char           *filename;} imageStruct_t, *imageStructPtr;/* An audio descriptor struct */typedef struct audioStruct{        editRate        editrate;    /* sample rate */        long            sampleSize;  /* in bits */        short           numChannels;	char           *name;	char           *filename;} audioStruct_t, *audioStructPtr;        typedef struct {    long prefix;    unsigned long major;    unsigned long minor;} omfMobID;           typedef enum {noMedia, audioMedia, imageMedia} cmediaType;typedef struct mediaDescStruct          *mediaDescPtr;typedef struct FileStruct               *filePtr;/**************************************************************//* API ROUTINES FOR WRITING DATA INTO AN OMF INTERCHANGE FILE *//**************************************************************//**************************************************************************** * * omfCreateFile() *      Input:          File name. *      Function:       Create a NEW OMFI file with the given file name  *                      and open it for writing. *      Output:         the OMFI file handle. NULL is returned in case  *                          of error. * *      Usage:          Call this routine when you want to create  *                        a new OMFI and write data to it. */ extern filePtr  omfCreateFile(char *filename);/**************************************************************************** * * omfSetMediaDesc() *      Input:          file handle, media type, pointer to media description  *			     structure, and optional pointer to input source mob ID. *      Function:       Set the media description information for the OMFI file. *      Output:         ID of the created source mob, same as ID parameter if specified. * *      Usage:          This routine should be called after the OMFI file is  *                           opened for writing. It prepares the internal OMFI  *                           routines for handling the appropriate type of data  *                           being written through WriteSamples(). */extern omfMobID omfSetMediaDesc(filePtr file, cmediaType mt, mediaDescPtr mdp, omfMobID *mobID);/**************************************************************************** * * omfSetJPEGComprTables() *      Input:          file handle, component number, pointers to JPEG compression  *                              tables, and table sizes.  The Quantization table *				(QTables) is required, but the two Huffman tables are *				optional.  If the sizes are zero, default tables will *				be used. * *      Function:       Copy the compression tables into the OMFI file  *                              being generated. *                              Different JPEG tables can be used for different  *                              components so a component number is required. The *				component number is 1-based, e.g., 1-2-3 *                               *      Output:         None. * *      NOTE:           This routine should be called if the data being written  *                              to the OMFI file is JPEG compressed data  *                              (as indicated when SetMediaDesc() is called).  *                              If the media descriptor specifies that the data  *                              is JPEG compressed but this routine is not called *                              BEFORE WRITING SAMPLES, the standard JPEG tables  *                              will be used. * *      Usage:          Call this routine after setting the media descriptor  *                              for a new OMFI file that contains JPEG compressed *                              data. This routine is optional, but if it is used at all, *				it must be called once for each component in the image *				(e.g. once for each of the Y, U, and V components). * */extern void omfSetJPEGComprTables(filePtr file, JPEGcomponent JPEGcomp,                          uCharPtr QTables,                          uCharPtr ACTables, uCharPtr DCTables,                         short QTableSize, short ACTableSize,                          short DCTableSize); /**************************************************************************** * * omfWriteSamples() *      Input:          file handle, number of samples, data buffer, and data length. *      Function:       Writes the given number of samples from the data  *                              buffer into the currently open OMFI file. *      WARNING:        If the data being written is compressed (this is  *                              indicated in the media description), nSamples  *                              must be equal to one. *      NOTE:           For video data, buffer must point to an array of bytes. *                              For audio data, buffer must point to an array  *                              of shorts. *                               *      Output:         Returns the number of bytes written. * *      Usage:          After creating an OMFI file and setting the media  *                              description, this routine should be called  *                              repeatedly to write each consecutive  *                              set of data (video or audio samples). */extern long omfWriteSamples (filePtr file, long nSamples, void *buffer, long buflen);/**************************************************************************** * * omfWriteLines() *      Input:          file handle, number of horizontal lines, and data buffer. *      Function:       Writes the given number of scan lines from the data  *                              buffer into the currently open OMFI file. *      WARNING:        If the data being written is compressed (this is  *                              indicated in the media description), this function *                              cannot be used. *			Also, scan lines must run top-to-bottom. * *      NOTE:           buffer must point to an array of bytes.  The number of bytes in *				the buffer must be equal to the number of lines times the *				image width times the bytes per pixel. *                               *      Output:         Returns the number of bytes written. * *      Usage:          After creating an OMFI file and setting the media  *                              description, this routine should be called  *                              repeatedly to write each consecutive  *                              set of data.  The number of lines in a frame is specified *				in the media descriptor. */extern long omfWriteLines (filePtr file, long nLines, void *buffer);/**************************************************************//* API ROUTINES FOR READING DATA FROM AN OMF INTERCHANGE FILE *//**************************************************************//**************************************************************************** * * omfOpenFile() *      Input:          File name. *      Function:       Open an OMFI file with the given file name for reading. *      Output:         the OMFI file handle. NULL is returned in case of error. * *      Usage:          Call this to open an already existing OMFI file  *                         for reading. */ extern filePtr omfOpenFile(char *filename);/**************************************************************************** * * omfGetNumMediaObjects() *      Input:          file handle. *      Function:       Get the number of media objects in the opened  *                        OMFI file. *      Output:         Returns the number of media objects in the opened OMFI file *                         * *      Usage:          This routine should be called after the OMFI file  *                        is opened for reading. The purpose of it is to  *                        inform you how many objects are available. */extern long omfGetNumMediaObjects(filePtr file);/**************************************************************************** * * omfGetNthMediaDesc() *      Input:          file handle, index of media, pointer to media type and media description  *			  structure. *      Function:       Get the specified media description information from the opened  *                        OMFI file. *      Output:         Returns (in its parameters) the media type, the media information and the *                        mob ID. * *      Usage:          This routine should be called after the OMFI file  *                        is opened for reading. The purpose of it is to  *                        inform you of the type of data *                        that will be returned by ReadSamples(). */extern void omfGetNthMediaDesc(filePtr file, long index, cmediaType *mtPtr, mediaDescPtr mdp, omfMobID *mobID);/**************************************************************************** * * omfGetNumSamples() *      Input:          file handle. *      Function:       Get the number of samples in the opened OMFI file. *      Output:         Returns number of samples. * *      Usage:          This routine should be called after the OMFI file is  *                         opened for reading.  */extern long omfGetNumSamples(filePtr file);/**************************************************************************** * * GetMaxSampleSize() *      Input:          file handle. *      Function:       Returns the size of the largest sample that  *                        exists within the OMFI file being read. *      Output:         Sample size. * *      Usage:          Call this routine after getting the media  *                        description information in order to figure out  *                        what size buffer needs to be allocated for *                        for reading the sample data in the file. */extern long omfGetMaxSampleSize(filePtr file); /**************************************************************************** * * omfGetJPEGComprTables() *      Input:          file handle, video component number, plus pointers to  *				JPEG compression parameters (see SetJPEGComprTables()). *      Function:       Copy the compression tables in the OMFI file to the  *                       caller's variables. *       *      Output:         JPEG parameters are returned through the parameters. *      Function:       This routine should be called if the data in the OMFI  *                         file is JPEG compressed data (as indicated when  *                         GetMediaDesc() is called). *      WARNING:        READ ALL comments in SetJPEGComprTables(). *                               */extern void omfGetJPEGComprTables(filePtr file, JPEGcomponent JPEGcomp,                           uCharPtr *QTables,                          uCharPtr *ACTables, uCharPtr *DCTables,                          short *QTableSize, short *ACTableSize,                          short *DCTableSize); /**************************************************************************** * * omfReadSamples() *      Input:          file handle, plus number of samples to read, address of data buffer,  *                          buffer size, and address for returning number  *                          of samples read. *      Function:       Read the next set of samples (audio or video) from  *                          the currently open OMFI file into the given data  *                          buffer. *      Output:         number of bytes read (-1 is returned at EOF). *                      number of samples read is returned in samplesRead *      Usage:          After opening an OMFI file and setting the media  *                              description, this routine should be called  *                              repeatedly to read each consecutive  *                              set of data (video or audio samples). */extern long  omfReadSamples (filePtr file, long nSamples, void *buffer, long buflen,                                                 long *samplesRead);/**************************************************************************** * * omfReadLines() *      Input:          file handle, number of horizontal lines, data buffer, and the length *				of the buffer. *      Function:       Reads the given number of scan lines from the data  *                              buffer from the currently open OMFI file. *      WARNING:        If the data being read is compressed (this is  *                              indicated in the media description), this function *                              cannot be used. *			Also, scan lines will run top-to-bottom. * *      NOTE:           buffer must point to an array of bytes.  The number of bytes in *				the buffer must be equal to at least the number of lines *				times the image width times the bytes per pixel. *                               *      Output:         Returns the number of bytes written. * *      Usage:          After creating an OMFI file and setting the media  *                              description, this routine should be called  *                              repeatedly to read each consecutive  *                              set of data.  The number of lines in a frame is specified *				in the media descriptor. */extern long omfReadLines (filePtr file, long nLines, void *buffer, long bufLen);/**************************************************************//*                   OTHER API ROUTINES                       *//**************************************************************//**************************************************************************** * * omfCloseFile() *      Input:          OMFI file handle (returned from omfOpenFile  *                         or omfCreateFile). *      Function:       Close the given OMFI file. *      Output:         none. * *      Usage:          Call this after you are done reading from or  *                            writing information to *                              an OMFI file. */ extern void omfCloseFile(filePtr omfiFilePtr);/**************************************************************************** * * omfSoftwareCodec() *      Input:          OMFI file handle, plus... *			a Boolean indicating whether or not to convert uncompressed video  *				input to compressed OMFI output or vice-versa. * *      Function:       OMFI toolkit will either compress or decompress images based on *				compression parameters supplied by the user in the case *				of export, or by the OMFI file in the case of import. *				this function is useful in the cases where uncompressed *				images are preferred on the user's side, but compressed *				images are required or found in the OMFI file. * *      Output:         none. * *      Usage:          Call this after setting or getting a media descriptor. * *      Note:		True implies that all image data passed between the user and *				the OMFI toolkit is uncompressed, and *				the toolkit will handle the compression.   * *      Restrictions:	Only JPEG video compression is allowed at this time. */ extern void omfSoftwareCodec(filePtr omfiFilePtr, char activate);/**************************************************************************** * * omfGetErrorCode() *      Input:          none * *      Function:       returns an error code, 0 being success, non-zero being failure. * *      Output:         OMFI Toolkit error code * *      Usage:          Call this after encountering an error condition (null handle, etc.) * */ extern long omfGetErrorCode(void);/**************************************************************************** * * omfGetErrorString(code) *      Input:          OMFI Toolkit error code * *      Function:       returns a static string pointer * *      Output:         error string pointer * *      Usage:          Call this after encountering an error condition (null handle, etc.) * * */ extern char *omfGetErrorString(long code);#ifdef __cplusplus}#endif#endif /* _OMF_TOOLKIT_API_ */
/*	NED Toolkit - Definitions of SYNCnet protocol message structures.		Copyright й 1991-1992 by New England Digital Corp.  All rights reserved.		This file defines message types for the SYNCnet interface.	*//* DAWN Protocol Packet Definitions */#ifndef NED__MESSAGETYPE#define NED__MESSAGETYPE/* Specific Packet Type Codes *//* Supertype definitions */#define P_NETWORK_LEVEL			0x01	/* Network Level */#define P_PLAYBACK				0x02 	/* Playback */#define P_CREATION_RECORDING	0x03 	/* Creation / Recording */#define P_SEQUENCE_EDITING		0x04 	/* Sequence Editing */#define P_SOUND_EDITING			0x05 	/* Sound Editing */#define P_ARCHIVAL				0x06 	/* Archival */#define P_RETRIEVAL				0x07 	/* Retrieval */#define P_TIME_INFO				0x08 	/* Time Information */ // Called P#Time_Base in able#define P_TRACK_SETUP			0x09 	/* Track Setup */#define P_UTILITY				0x0A 	/* Utility */#define P_EVENTS				0x0B 	/* Events */#define P_MIDI					0x0C 	/* MIDI Events */#define P_CLAVIER				0x0D 	/* RS-232 Clavier and Clavier Emulation */#define P_MIXER					0x0E	/* DSP Mixer Control */#define	P_ROUTING				0x0F	/* DSP I/O Routing Control */#define P_EDIT					0x10	/* editing commands */#define P_FILEIO				0x11	/* file download */#define P_LOCAL					0xF0	/* Local mac422<->mac/d115d<->able messages *//* Subtypes definitions *//******  P_NETWORK_LEVEL packets *******/#define T_CRASH_PART1			0x10#define T_CRASH_PART2			0x11#define T_CRASH_REQUEST			0x14#define T_RELOAD_BASE_ADDR		0x15#define T_RELOAD_DATA			0x16#define T_RELOAD_START_ADDR		0x17#define T_HERE_IS				0x20#define T_RELAY_DATA			0x21#define T_BLOCK_CONTINUED		0x30#define T_BLOCK_START			0x31#define T_BLOCK_END				0x32#define T_BLOCK					0x33/********  P_PLAYBACK packets **********/#define T_PLAY					0x00#define T_STOP					0x01#define T_REWIND				0x02#define T_FAST_FORWARD			0x03#define T_LOCATE				0x04#define T_REQ_MOTION_STATUS		0x05#define T_MOTION_STATUS			0x06#define T_PLAY_CUE				0x10#define T_PLAY_REGION			0x11#define T_PLAY_FROM				0x12#define T_PLAY_TO				0x13#define T_PAUSE_CONTINUE_CUE	0x14#define T_STOP_DTD				0x15#define T_START_SEQ_SCRUBBING	0x20#define T_SCRUB_TO_NEW_SEQ_TIME	0x21#define T_STOP_SEQ_SCRUBBING	0x22#define T_SCRUB_CURRENT_CUE		0x23#define T_SCRUB_CURRENT_CUE_TO_TIME 0x24#define T_PLAY_EVENT			0x30#define T_REQ_AUDITION_MODE		0x40#define T_AUDITION_MODE			0x41#define T_SET_AUDITION_MODE		0x42#define T_AUDITION_DS			0x50#define T_DS_AUDITION_STATUS	0x51/****  P_CREATION_RECORDING packets ****/#define T_START_RECORD			0x00#define T_START_PUNCH			0x01#define T_STOP_RECORD			0x02#define T_REQ_AUTO_PUNCH_INFO	0x10#define T_AUTO_PUNCH_INFO		0x11#define T_SET_AUTO_PUNCH_MODE	0x12#define T_SET_REHEARSE_MODE		0x13#define T_SET_AUTO_PUNCH_TIME	0x14#define T_REQ_RECORDING_TIME	0x20#define T_RECORDING_TIME		0x21#define T_REQ_DTD_RECORD_STATE	0x22#define T_DTD_RECORD_STATE		0x23#define T_SET_DTD_RECORD_READY	0x24#define T_ARM_MANUAL_ALLOCATE	0x25#define T_ARM_SEQ_TRIG_ALLOCATE	0x26#define T_ARM_PUNCH_IN			0x27#define T_SET_EXT_REC_TRIGGERS	0x28#define T_ERASE_CURRENT_CUE		0x30#define T_BLOCK_CUE				0x31/*****  P_SEQUENCE_EDITING packets  ****/#define T_SAVE_SEQ				0x00#define T_RESTORE_SEQ			0x01#define T_ERASE_SEQ				0x02#define T_REQ_SEQ_DATA			0x03#define T_SEQ_DATA				0x04#define T_INIT_SEQ_DATA			0x05#define T_ADD_TO_SEQ_DATA		0x06#define T_ACTIVATE_DATA_AREA	0x07#define T_REQ_ABLE_SEQ_PATH		0x08#define T_ABLE_SEQ_PATH			0x09#define T_SET_ABLE_SEQ_PATH		0x0A#define T_RECALL_PATH_SEQUENCE	0x0B#define T_STORE_PATH_SEQUENCE	0x0C#define T_SCROLL_SEQUENCE_PATH	0x0D#define T_REQ_SEQ_SNAPSHOT		0x10#define T_REQ_SEQ_EVENT			0x11#define T_REQ_DEFAULT_EVENT		0x12#define T_START_SEQ_SNAPSHOT	0x13#define T_START_TRACK_SNAPSHOT	0x14#define T_SEQ_EVENT				0x15#define T_END_TRACK_SNAPSHOT	0x16#define T_END_SEQ_SNAPSHOT		0x17#define T_PLACE_SEQ_EVENT		0x20#define T_CHANGE_EVENT_ITEM		0x21#define T_REQ_EVENT_STRING		0x22#define T_EVENT_STRING			0x23#define T_SET_EVENT_STRING		0x24#define T_DELETE_EVENT			0x25#define T_RECALL_EVENT_FOR_EDIT	0x26#define T_REQ_CHANGED_TRACKS	0x27#define T_CHANGED_TRACKS		0x28#define T_DELETE_TIME_ON_TRACK	0x30#define T_INSERT_TIME_ON_TRACK	0x31#define T_PLACE_CUE				0x40/******  P_SOUND_EDITING packets  ******/#define T_REQ_CUE_DATA			0x00#define T_CUE_DATA				0x01#define T_SET_CUE_TIME			0x02#define T_SET_CUE_TRACKS		0x03#define T_SET_PLACE_CUE_TRACK	0x04#define T_SET_PLACE_CUE_MODE	0x05#define T_REQ_CUE_STRING		0x06#define T_CUE_STRING			0x07#define T_SET_CUE_STRING		0x08#define T_REQ_CUE_INFO_BY_ID	0x09#define T_CUE_INFO				0x0A#define T_REQ_CUE_STRING_BY_ID	0x0B#define T_CUE_STRING_ID			0x0C#define T_COPY_CUE_MEMORY		0x10#define T_CUT_FROM_CUE			0x11#define T_PASTE_INTO_CUE		0x12#define T_CHAIN_CUE				0x13#define T_FILL_CUE				0x14#define T_SLIDE_CUE				0x15#define T_SELECT_REEL_TO_EDIT	0x16/*********  P_ARCHIVAL packets  ********/#define T_STORE_CUE				0x00/********  P_RETRIEVAL packets  ********/#define T_REQ_DIR_KEY_BY_NAME	0x00#define T_REQ_DIR_KEY_BY_INDEX	0x01#define T_REQ_DIR_KEY_BY_ID		0x02#define T_DIRECTORY_KEY			0x03#define T_REQ_DIRECTORY_INFO	0x08#define T_DIRECTORY_INFO		0x09#define T_REQ_DIRECTORY_ENTRIES	0x0A#define T_DIRECTORY_ENTRIES		0x0B#define T_OPEN_DS				0x10#define T_DS_OPEN_STATUS		0x11#define T_CLOSE_DS				0x12#define T_REQ_DS_READ			0x13#define T_DS_TRANSFER			0x14		/* bidirectional */#define T_DS_WRITE_STATUS		0x15		/* not implemented yet */#define T_COPY_DS				0x16#define T_DS_COPY_STATUS		0x17#define T_ACTIVATE_DS			0x18#define T_DS_ACTIVATE_STATUS	0x19/********  P_TIME_INFO packets  ********/#define T_CURRENT_TIME			0x00#define T_REQ_TIME_PARAMETERS	0x01#define T_TIME_PARAMETERS		0x02#define T_SET_TIME_PARAMETER	0x03#define T_REQ_TRIM_TIME			0x04#define T_TRIM_TIME				0x05#define T_SET_TRIM_TIME			0x06#define T_REQ_SYNC_MODE			0x10#define T_SYNC_MODE				0x11#define T_SET_SYNC_MODE			0x12#define T_SET_MIDI_SYNC_OUT		0x13#define T_SET_MIDINET_SYNC_OUT	0x14#define T_TAKE_CURRENT_TIME		0x15#define T_REQ_CURRENT_MARK		0x16#define T_CURRENT_MARK			0x17#define T_SET_CURRENT_MARK		0x18#define T_REQ_CUR_SMPTE_TIME	0x19#define T_CUR_SMPTE_TIME		0x1A#define T_REQ_VALID_SAVED_MARKS	0x1B#define T_VALID_SAVED_MARKS		0x1C#define T_REQ_SAVED_MARK		0x1D#define T_SAVED_MARK			0x1E#define T_SET_SAVED_MARK		0x1F/*******  P_TRACK_SETUP packets ********/#define T_REQ_TRACK_STATES		0x00#define T_TRACK_STATES			0x01#define T_SET_TRACK_STATE		0x02#define T_SET_MULT_TRACK_STATES	0x03#define T_CLEAR_ALL_TRACKS		0x04#define T_REQ_TRACK_STATE		0x06#define T_TRACK_STATE			0x07#define T_REQ_GROUP				0x10#define T_GROUP					0x11#define T_GROUP_MULTI			0x12		/* еее NOT IMPLEMENTED еее */#define T_SET_GROUP				0x13#define T_SET_GROUP_MULTI		0x14		/* еее NOT IMPLEMENTED еее */#define T_REQ_VALID_GROUPS		0x15#define T_VALID_GROUPS			0x16#define T_SET_GROUP_STATE		0x17#define T_REQ_ROUTING_INFO		0x20#define T_REQ_MIDI_IN_OUT		0x21#define T_MIDI_IN_OUT			0x22#define T_SET_MIDI_IN_OUT		0x23#define T_REQ_MULTICHAN_OUT		0x24#define T_MULTICHAN_OUT			0x25#define T_SET_MULTICHAN_OUT		0x26#define T_REQ_DTD_INPUTS		0x27#define T_DTD_INPUTS			0x28#define T_SET_DTD_INPUTS		0x29#define T_REQ_DTD_OUTPUTS		0x2A#define T_DTD_OUTPUTS			0x2B#define T_SET_DTD_OUTPUTS		0x2C#define T_REQ_VALID_TRACKS		0x2D#define T_VALID_TRACKS			0x2E/*********  P_UTILITY packets  *********/#define T_REQ_CONFIGURATION			0x00#define T_CONFIGURATION				0x01#define T_HELP_MESSAGE				0x10	/* еее NOT IMPLEMENTED еее */#define T_HELP_MESSAGE_CONTINUED	0x11	/* еее NOT IMPLEMENTED еее */#define T_REQ_ERROR_TEXT			0x12	// Request text of most recent Synclavier error message#define T_ERROR_TEXT				0x13	// Contains text of error message#define T_REQ_ECHO					0x20#define T_ECHO						0x21/**********  P_EVENTS packets  **********/#define T_SET_EVENT_ENABLES		0x00#define T_TIMBRE_INFO_EVENT		0x01#define T_SEQUENCER_EVENT		0x02#define T_ENTRY_WRITES_EVENT	0x03#define T_PARAMETER_INFO_EVENT	0x04#define T_DTD_INFO_EVENT		0x05#define T_POLY_CONTENTS_EVENT	0x06#define T_ERROR_TYPE_EVENT		0x07#define T_SMPTE_EVENT			0x08#define T_CLAVIER_EVENT			0x09#define T_AEE_NOTICE			0xA0/**********  P_MIDI packets  ***********/#define T_NOTE_OFF				0x01#define T_NOTE_ON				0x02#define T_POLY_KEY_PRESSURE		0x03#define T_CONT_CONTROL_CHANGE	0x04#define T_SWITCH_CONTROL_CHANGE	0x05#define T_PROGRAM_CHANGE		0x06#define T_CHANNEL_PRESSURE		0x07#define T_PITCH_BEND_CHANGE		0x08#define T_MIDI_SPP				0x09#define T_MIDI_TIMING_CLOCK		0x0A#define T_MIDI_START			0x0B#define T_MIDI_CONTINUE			0x0C#define T_MIDI_STOP				0x0D#define T_SYSTEM_EXCLUSIVE		0x0E#define T_MIDI_CONTROL_CHANGE	0x0F#define T_MIDI_INPUT_ROUTING	0x0F#define T_MIDI_BULK				0x10#define T_END_OF_EXCLUSIVE		0x11#define T_ALL_NOTES_OFF			0x12#define T_CLEAR_ROUTING			0x13#define T_REQ_MIDINET_FILENAME	0x14#define T_MIDINET_FILENAME		0x15#define T_SET_MIDINET_FILENAME	0x16#define T_DOWNLOAD				0x20#define T_DOWNLOAD_CONTINUE		0x21#define T_END_OF_DOWNLOAD		0x22#define T_PB_ENTRY				0x23#define T_CLEAR_PB_ENTRY		0x24#define T_MIDINET_ERROR			0x30#define T_REQUEST_REFRESH		0x31#define T_BEGIN_PANIC			0x32#define T_END_OF_PANIC			0x33#define T_OVERRUN				0x34#define T_SYSEX_TIMEOUT			0x35#define T_REQ_MIDINET_CONFIGUR	0x36#define T_MIDINET_CONFIGUR		0x37#define T_REQ_MIDINET_VERSION	0x38#define T_MIDINET_VERSION		0x39/********  P_CLAVIER packets  **********/#define T_EMULATE_PRESS_AND_HOLD	0x00#define T_EMULATE_PRESS_AND_REL	0x01#define T_EMULATE_RELEASE		0x02#define T_EMULATE_RELEASE_ALL	0x03#define T_EMULATE_CLAVIER_KNOB_JOG	0x04#define T_EMULATE_CLAVIER_KNOB	0x05#define T_REQ_CLAVIER_STATUS_INFO	0x06/*********  P_MIXER packets  ***********/#define T_METER_CONTROL			0x00		/* enable/disable meters */#define T_METER_DATA			0x01		/* meter data */#define T_REQ_MIXER_DIALS		0x08		/* request mixer dials */#define T_MIXER_DIALS			0x09		/* return mixer dials */#define T_SET_MIXER_DIALS		0x0A		/* set mixer dials */#define T_REQ_MIXER_SWITCHES	0x0B		/* request mixer switches */#define T_MIXER_SWITCHES		0x0C		/* return mixer switches */#define T_SET_MIXER_SWITCHES	0x0D		/* set mixer switches */#define	T_REQ_MIXER_CONFIG		0x14		/* request mixer configuration */#define T_MIXER_CONFIG			0x15		/* mixer configuration *//*********  P_LOCAL packets  ***********/#define T_RESET_CHANNEL			0x00		/* reset channel (to comm. processor) */#define T_CHANNEL_ACTIVE		0x00		/* channel active (from comm. processor) */#define T_RX_LOST				0x01		/* lost Rx packets (from comm. processor) */#define T_TX_LOST				0x02		/* lost Tx packets (from comm. processor) */#define T_CHANNEL_INACTIVE		0x03		/* channel inactive (from comm. processor) *//**********  P_ROUTING packets  ***********/#define T_REQ_ASC_BUS_DEVICES	0x00		/* request list of DSP Option ASC bus devices and status bytes */#define T_ASC_BUS_DEVICES		0x01		/* answer: list of DSP Option ASC bus devices and status bytes */#define T_SET_IO_PANEL_LABEL	0x02		/* set alpha-numeric LED readouts on an Input/Output panel */#define T_SET_SYNC_SOURCE		0x0E		/* DSP Option: set synchronization basis signal */#define T_SET_HOUSE_SYNC		0x10		/* DSP Option: set House Sync frequency */#define T_SET_DIG_IN_SYNC		0x12		/* DSP Option: set digital audio input signal to use as synchronization basis signal */#define T_REQ_SYNC_SOURCE		0x14		/* DSP Option: request synchronization basis signal */#define T_REQ_HOUSE_SYNC		0x16		/* DSP Option: request House Sync frequency */#define T_REQ_DIG_IN_SYNC		0x18		/* DSP Option: request digital audio input signal used as synchronization basis signal */#define T_WORD_CLOCK_STATUS		0x1A		/* DSP Option: request & answer: word clock synchronization status (e.g., sig present, locked, async condition) */#define T_SET_SAMPLE_RATE		0x1C		/* DSP Option: set sample rate (currently sent FROM Baker, not support TO Baker) */#define T_REQ_SAMPLE_RATE		0x1E		/* DSP Option: request sample rate */#define T_REQ_DIO_EMPHASIS		0x20		/* DSP Option: request state of incoming or outgoing digital audio protocol "emphasis" bits */#define T_SET_DIG_OUT_EMPHASIS	0x22		/* DSP Option: set outgoing digital audio protocol "emphasis" bits or answer to T_REQ_DIO_EMPHASIS for outgoing dig audio */#define T_SET_DIG_IN_EMPHASIS	0x24		/* DSP Option: answer to T_REQ_DIO_EMPHASIS request for incoming dig audio */#define T_SET_EMPHASIS_FILTER	0x26		/* DSP Option: turns DAC output deemphasis filters on and off or answer to T_REQ_EMPHASIS_FILTER request */#define T_REQ_EMPHASIS_FILTER	0x28		/* DSP Option: request state of DAC output deemphasis filters */#define T_REQ_AESEBU_STATUS		0x2A		/* DSP Option: request state of AES/EBU panel settings */#define T_SET_AESEBU_STATUS		0x2C		/* DSP Option: set state of AES/EBU panel settings and answer to T_REQ_DIG_OUT_MODE */#define T_REQ_D2D_SYNC_SOURCE	0x30		/* Direct-to-Disk: Request synchronization basis signal */#define T_SET_D2D_SYNC_SOURCE	0x32		/* Direct-to-Disk: Set synchronization basis signal *//**********  P_EDIT packets  ***********/#define T_REQ_READ				0x00		/* request remote data */#define T_READ_DATA				0x01		/* return remote data */#define T_REQ_WRITE				0x02		/* set remote data */#define T_WRITE_STATUS			0x03		/* remote data set *//**********  P_FILEIO packets  ***********//* these are used for dowload only, and are not revised protocol subtypes */#define	T_DOWNLOAD_HEADER	200			/* download header */#define T_DOWNLOAD_SECTOR	201			/* download sector data */#define T_DOWNLOAD_CHECK	202			/* download checksum */#define T_REQ_DOWNLOAD		231			/* request file download *//********** revised postmodern transfer protocol * these message subtypes are shared across supertypes. * each operation has a fixed set of subtypes for requests, answers, etc., * and a common header format, * enabling low-level code to respond without knowledge of particular operations *//* these macros convert among request & answer subtypes */#define	R_ISTYPE(R)			((R&0x80)!=0)		/* is this a new subtye? */#define	R_CMDTYPE(R)		(R&~3)				/* command number */#define	R_REQTYPE(R)		(R_CMDTYPE(R)|1)	/* request message, expect response */#define	R_ANSTYPE(R)		(R_CMDTYPE(R)|2)	/* response to request *//* these are the defined operations */#define	R_READ		0x80				/* read data */#define	R_WRITE		0x84				/* write data */#define R_CREATE	0x88				/* create object */#define	R_DELETE	0x8C				/* delete object */#define R_COPY		0x90				/* duplicate object */#define R_CLOCK		0x94				/* date/time */#define	R_AUDITION	0x98				/* audition *//* all responses share a low-level header that can be generated from low-level code */#if 0	If these are used, endian issues will need to be checked...	typedef struct R_Request				/* request header */	{	uint8	type, subtype;				/* process, op code */		uint16	tag;						/* transaction ID */		uint16	alloc;						/* size allocated for response */	}	R_Request;	typedef struct R_Reply					/* reply header */	{	uint8	type, subtype;				/* process, op code */		uint16	tag;						/* transaction ID */		uint16	status;						/* operation status */	}	R_Reply;#endif/* just what is in the status word */#define	R_SUCCESS		0				/* OK */#define	R_INVALID		0x0001			/* undeliverable */#define	R_INCOMPLETE	0x0002			/* more data available */#define	R_BUSY			0x0004			/* not avaliable right now *//* Protocol events */#define PE_TIMB_NEW			0x00		/* new timbre recalled */#define PE_TIMB_PARTIAL		0x01		/* different partial selected */#define PE_TIMB_NAME		0x02		/* new timbre name for keyboard timbre */#define PE_SEQ_NEW			0x10		/* new sequence recalled */#define PE_SEQ_NAME			0x11		/* new timbre name for sequencer track */#define PE_SEQ_NOTE_EDIT	0x12		/* note was added or deleted on a track */#define PE_SEQ_CONSTANT		0x13		/* new constant (speed, smpte offset, etc.) or DTD turned on/off */#define PE_SEQ_MOTION		0x17		/* change in sequencer motion or mark start */#define PE_SEQ_SOLO			0x18		/* solo state changed on a track (or change in info mode) */#define PE_SEQ_SYNC			0x19		/* sync mode changed */#define PE_SEQ_MUTE			0x1B		/* mute state changed on a track */#define PE_SEQ_SAFE_READY	0x1C		/* safe/ready state changed on a track */#define PE_SEQ_VITC			0x1D		/* note placed using VITC placing */#define PE_SEQ_LIVE			0x1E		/* change in live track mode (input, auto, etc.) */#define PE_SEQ_SAVED		0x1F		/* sequence has been saved */#define PE_EWRT_BANK1		0x20		/* bank one has been written */#define PE_EWRT_BANK2		0x21		/* bank two has been written */#define PE_EWRT_BANK3		0x22		/* bank three has been written */#define PE_EWRT_BANK4		0x23		/* bank four has been written */#define PE_EWRT_BANK5		0x24		/* bank five has been written */#define PE_EWRT_BANK6		0x25		/* bank six has been written */#define PE_EWRT_BANK7		0x26		/* bank seven has been written */#define PE_EWRT_BANK8		0x27		/* bank eight has been written */#define PE_PARM_PARTIAL1	0x30		/* partial one changed */#define PE_PARM_PARTIAL2	0x31		/* partial two changed */#define PE_PSRM_PARTIAL3	0x32		/* partial three changed */#define PE_PARM_PARTIAL4	0x33		/* partial four changed */#define PE_PARM_MISC		0x34		/* misc area changed */#define PE_PARM_PATCH		0x35		/* patch list changed or new project */#define PE_PARM_TRACK		0x36		/* change in track volume or track routing */#define PE_PARM_SEQPATH		0x38		/* system-wide able sequence path name changes (motion panel) */#define PE_DTD_PROJECT_DIR	0x40		/* project created or deleted or DTD power-up */#define PE_DTD_TRACKS		0x41		/* live tracks assigned to different sequencer tracks */#define PE_DTD_TRACK_DIR	0x42		/* live track directory changed */#define PE_DTD_MOTION		0x43		/* DTD is moving */#define PE_DTD_RECORDING	0x44		/* aspect of recording has changed (safe/ready, armed, recording) */#define PE_DTD_BATCH		0x45		/* batch command complete (load/backup, DSP) or current project changed */#define PE_DTD_NEW_REEL		0x47		/* new edit reel selected */#define PE_DTD_CUE_EDIT		0x48		/* current cue has changed (e.g., cue in) */#define PE_DTD_NEW_ANCHOR	0x49		/* new scrubbing anchor time */#define PE_DTD_CUE_SEQUENCE	0x4C		/* sequence parameter (e.g., place track, audition mode) in current cue changed */#define PE_DTD_CUE_DIR		0x4D		/* cue saved or unsaved */#define PE_DTD_TRACK_ROUTING	0x4E		/* live track input/output routing or pan/vol changed */#define PE_DTD_NEW_CUE		0x4F		/* new cue created after allocate record */#define PE_POLY_FILE_LIST	0x50		/* poly file list changed */#define PE_POLY_FREE		0x51		/* amount of free poly memory changed */#define PE_VOLUME_MOUNTED	0x52		/* new volume mounted */#define PE_VOLUME_UPDATED	0x53		/* the directory of some volume has changed */#define PE_ERR_MESSAGE		0x60		/* an error message has been generated */#define PE_ERR_AEE			0x61		/* an Audio Event Editor error message has been generated */#define PE_SMPTE_TIME		0x70		/* incoming SMPTE time changed (at most every .5 sec) */#define PE_CLAV_BUTTON0		0x80		/* button bank zero's lit state changed */#define PE_CLAV_BUTTON1		0x81		/* button bank one's lit state changed */#define PE_CLAV_BUTTON2		0x82		/* button bank two's lit state changed */#define PE_CLAV_BUTTON3		0x83		/* button bank three's lit state changed */#define PE_CLAV_BUTTON4		0x84		/* button bank four's lit state changed */#define PE_CLAV_BUTTON5		0x85		/* button bank five's lit state changed */#define PE_CLAV_BUTTON6		0x86		/* button bank six's lit state changed */#define PE_CLAV_BUTTON7		0x87		/* button bank seven's lit state changed */#define PE_CLAV_BUTTON8		0x88		/* button bank eight's lit state changed */#define PE_CLAV_BUTTON9		0x89		/* button bank nine's lit state changed */#define PE_CLAV_WINDOW0		0x80		/* window bank zero's display info changed */#define PE_CLAV_WINDOW1		0x81		/* window bank one's display info changed */#define PE_CLAV_WINDOW2		0x82		/* window bank two's display info changed */#define PE_CLAV_WINDOW3		0x83		/* window bank three's display info changed */#define PE_DSP_SYNC_SETTING	0x90		/* DSP Option: sync setting or sample rate changed */#define PE_DSP_SYNC_STATUS	0x91		/* DSP Option: sync status (locked, present, asynch) changed */#define PE_DSP_DIO_EMPHASIS	0x92		/* DSP Option: emphasis setting changed in digital input stream */#define PE_SYNCLAVIER		0xF0		/* synclavier present (locally generated) *//********* Playback Types *********/typedef enum {						/* locate modes for m_locate */	LM_CUE = 0,						/* locate cue */	LM_SEQUENCE						/* locate sequence */} Locate_Mode;typedef enum {						/* locate types for m_locate */	LT_ABS_NOTE = 0,				/* locate to absolute note */	LT_REL_NOTE,					/* locate to relative note */	LT_ABS_TIME,					/* locate to absolute time */	LT_REL_TIME,					/* locate to relative time */	LT_MARK							/* locate to mark point */} Locate_Type;typedef enum {						/* playback sources */	PS_CUE = 0,						/* playback cue */	PS_SEQUENCE						/* playback sequence */} Playback_Source;typedef enum {								/* sequencer motion states */	MS_PLAYING =		0x0001,				/* playing */	MS_RECORDING =		0x0002,				/* recording */	MS_PUNCHING_IN =	0x0004,				/* punching in */	MS_REWINDING =		0x0008,				/* rewinding */	MS_FAST_FORWARDING =0x0010,				/* moving at fast forward */	MS_SMPTE_LOCKED =	0x0020,				/* locked to SMPTE */	MS_SIZE_HOLDER = 0x7FFF					/* make it an int16 */} Motion_Status;/********* Creation/Recording Types *********/typedef enum {							/* DTD motion status */	DMS_READY =		0x0001,				/* ready to record */	DMS_ARMED =		0x0002,				/* armed to record */	DMS_RECORDING =	0x0004,				/* recording */	DMS_PLAYING =		0x0008,			/* playing */	DMS_SCRUBBING =	0x0010,				/* scrubbing */	DMS_SIZE_HOLDER = 0x7FFF			/* make it an int16 */} DTD_Motion_Status;/********* Sequence Editing Types *********/typedef enum {	SA_TEMPO_MAP =		0x0000,		/* tempo map */	SA_METER_MAP =		0x0001		/* meter map */} Sequence_Area;typedef enum {						/* event snapshot request bits for m_req_seq_snapshot */	ES_EVENT =		0x00000001,		/* send event information */	ES_EVENT_NAME =	0x00000002,		/* send event names */	ES_EVENT_CAPTION =	0x00000004,	/* send event captions */	ES_EVENT_NOBACK =	0x00000008,	/* optimization: when set, do not scan backwards	*/									/* through the sequence to find events which		*/									/* overlap this time window - (CJ) 					*/	ES_ENABLE_RTE =	0x00000010,		/* send RTE information								*/	ES_ENABLE_ILP = 	0x00000020,	/* send independant loop info 						*/	ES_ENABLE_NOTES =	0x00000040,	/* send poly note info								*/	ES_LONG_CAPTIONS =	0x00000080, /* return long captions 							*/	ES_EVENT_SOURCE =	0x00000100, /* return dtd source info 							*/	ES_SIZE_HOLDER =	0xFFFFFFFFu} Event_Snapshot_Bits;typedef enum {						/* event string types for m_req/set_event_string */	ES_TRACK = 0,					/* name of sequencer track (track -2 is keyboard, track -1 is split keyboard) */	ES_NAME,						/* name of event */	ES_CAPTION,						/* the event's caption */	ES_TIMBRE,						/* name of timbre on sequencer track */	ES_LONG_CAPTION_START,			// first packet of long caption	ES_LONG_CAPTION_CONTINUE,		// continuation packet of long caption	ES_LONG_CAPTION_END,			// final packet of long caption	ES_SIZE_HOLDER2 = 0x7FFF} Event_String_Type;typedef enum {						// error string types for m_req_error_text	ERR_COMPLETE_ERROR_TEXT = 0,	// complete error string in 1 packet	ERR_LONG_ERROR_START,			// first packet of long error string	ERR_LONG_ERROR_CONTINUE,		// continuation packet of long error string	ERR_LONG_ERROR_END				// final packet of long error string} Error_String_Type;typedef enum {						/* event types for m_req_default_event */	ET_NOTE = 0,					/* get a note event */	ET_RTE,							/* get a real-time effects event */	ET_CUE,							/* get a cue event */	ET_ILP,							/* get an independent loop point event */	ET_EVENT,						/* get an event */	ET_POLY,						/* get a poly ram event */	ET_SIZE_HOLDER = 0x7FFF} Event_Type;typedef enum {						/* event field definitions for m_change_event_item */	EF_VOL = 15,					/* overall event volume	*/	EF_IN = 34,						/* event in time */	EF_OUT = 36,					/* event out time */	EF_MARK = 38,					/* event mark time */	EF_FADE_IN = 40,				/* fade in length */	EF_FADE_OUT,					/* fade out length */	EF_START_VOL = 43,				/* starting event volume */	EF_END_VOL						/* ending event volume */} Event_Field;typedef enum {						/* string selectors for path names... */	PN_ABLE_TEXT_PATH    = 0,	PN_ABLE_CUR_SEQ_PATH = 1} Path_Name;typedef enum {						/* direction code for path name scrolling */	PSD_FORWARD  = 0,	PSD_BACKWARD = 1} Path_Scroll_Direction;/********* Sound Editing Types *********/typedef enum {						/* cue time selectors for m_set_cue_time */	CT_CUE_IN = 0,					/* cue in time */	CT_CUE_OUT,						/* cue out time */	CT_EDIT_IN,						/* edit in */	CT_EDIT_OUT,					/* edit out */	CT_CUE_OFFS,					/* cue offset */	CT_SYNC_TIME,					/* cue sync time */	CT_FADE_IN,						/* cue fade in */	CT_FADE_OUT						/* cue fade out */} Cue_Time_Select;/********* Retrieval Types *********/typedef enum {						/* data structure types */	DT_CUE = 0,						/* cue */	DT_SOUND,						/* sound file */	DT_TIMBRE,						/* timbre */	DT_SEQUENCE,					/* sequence */	DT_DIRECTORY,					/* directory (or DTD project) */	DT_OPTICAL_INDEX,				/* NED optical index */									/* *** specialized types returned by Open DS *** */	DT_UNKNOWN = 256,				/* accessing directory entry for a file of an unsupported type (system error) */	DT_ABLE_CATALOG,				/* directory is an ABLE catalog */	DT_NED_WORM,					/* directory is an NED WORM */	DT_DTD_PROJECT,					/* directory (or file) is a DTD Project */	DT_DTD_TRACK_DIRECTORY,			/* data structure is a DTD Track Directory */	DT_RAW_AUDIO_16					/* data structure is raw 16-bit audio */} DS_Type;typedef enum {								/* data structure filter for types */	INC_ALL = 0,							/* include all types */	INC_CUES = 1 << DT_CUE,					/* include cues */	FB_CUES = INC_CUES,						/* for backward compatibility */	INC_SOUNDS = 1 << DT_SOUND,				/* include sounds */	INC_TIMBRES = 1 << DT_TIMBRE,			/* include timbres */	INC_SEQUENCES = 1 << DT_SEQUENCE,			/* include sequences */	INC_DIRECTORIES = 1 << DT_DIRECTORY,		/* include directories */	INC_OPTICAL_INDICES = 1 << DT_OPTICAL_INDEX,	/* include optical indices */	INC_EVERYTHING = 0xFFFFFFFFu				/* include everything (same as include all) */} DS_Type_Filter;typedef enum {						/* data structure accesses for m_access_ds */	DA_READ = 1,					/* open for read */	DA_WRITE = 2,					/* open for write */	DA_ALL_ACCESSES = 0x7FFF		/* all possible accesses */} DS_Access;typedef enum {						/* audio source for audition sound for m_access_ds */	AS_PLAY_OUT_ANY,				/* play it out any audio gear (we don't care) */	AS_PLAY_OUT_POLY,				/* play it out the poly synthesizer */	AS_PLAY_OUT_DTD,				/* play it out the DTD */	AS_SIZE_HOLDER = 0x7FFF			/* make it an int16 */} Audio_Source;typedef enum {								/* directory read status */	DS_NO_ERROR = 0,						/* everything's okay */	DS_INVALID_ID,							/* invalid directory ID (maybe not a directory) or data structure ID (maybe file not found) */	DS_INVALID_ENTRY_NUMBER,				/* invalid directory entry number (out of range) */	DS_NO_MEDIA,							/* no media in drive (or drive not powered up) */	DS_INVALID_ACCESSES,					/* invalid accesses for open */	DS_INVALID_TRANSFER_REQUEST,			/* start address out of range or address/length is odd */	DS_NO_TRANSFER_ID,						/* out of transfer IDs */	DS_INCORRECT_TYPE,						/* incorrect file type for operation (e.g., attempting to audition a directory) */	DS_OPTICAL_XFER_ERROR,					/* error in optical transfer (type of error is in extra_status and extra_error) */	DS_INVALID_NAME,						/* invalid file name specified */	DS_DUPLICATE_NAME,						/* another file already exists under specified name */	DS_NO_STORAGE,							/* out of storage space */	DS_SCSI_ERRORS = 0x0100,				/* SCSI errors start here */	DS_ABLE_CATALOG_ERRORS = 0x0200,		/* ABLE catalog errors start here */	DS_SIZE_HOLDER = 0x7FFF					/* make it an int16 */} Dir_Status;/********* Track Setup and Assign Types *********/typedef enum {						/* track attributes */	TA_READY = 0,					/* track ready */	TA_SOLO,						/* track soloed */	TA_MUTE,						/* track muted */	TA_INPUT,						/* track in input mode */	TA_AUTO,						/* track in auto mode */	TA_CUEPB						/* track in cue playback mode */} Track_Attribute;/********* Mixer control types ******************//* see <mixermessage.h> */#endif				/* NED__MESSAGETYPE */
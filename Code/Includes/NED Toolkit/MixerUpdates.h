//	Copyright © 1991 by New England Digital Corp.  All rights reserved.	// This class handles Mixer dial and switch changes//	reported by the Baker to the Macintosh.// Thee changes are queued by a packet handler (rupt)// for consumption by the mixer application.// This class buffers change events until they can be delivered.// Repeated changes to the same dial or switch are replaced// by the last change.#ifndef NED__MIXERUPDATES#define NED__MIXERUPDATES#ifndef NED__CPLUS#include	"cplus.h"#endif#ifndef NED__PACKETS#include	"packets.h"#endif#ifndef NED__MIXERMESSAGE#include	"mixermessage.h"#endif#ifndef NED__RUPT#include	"rupt.h"#endifclass MixerUpdates	{public:												// application interface	MixerUpdates(int max_dials, int max_switches);	// initialize with queue capacities	~MixerUpdates();	void		enable_updates();					// mixer update monitoring	void		disable_updates();					// disable mixer updates		bool		is_enabled();						// are we active?		bool		get_update(Mixer_Dial_Set *dial_event);	// get dial change	bool		get_update(Mixer_Switch_Set *switch_event);	// get switch setting	void		clear_updates();							// clear all pending updates	int			num_dials, num_switches;			// increment with each mixer message rcvd	int			dial_overflow, switch_overflow;		// incremented whenever queue overflowsprotected:											// update event management	// queue management interface	virtual void	update(Mixer_Dial_Set& upd);	// update dial	virtual void	update(Mixer_Switch_Set& upd);	// update switch setting	struct	MixUpd {								// update queue entry		union { Mixer_Dial_Set dial_upd; Mixer_Switch_Set switch_upd; uint32 key; };	// either kind	};	struct MixUpdQ {		MixUpdQ(int max);		~MixUpdQ();		MixUpd*	next(MixUpd* e);					// next entry in queue		MixUpd*	dq();								// take queue entry		MixUpd*	pool;								// update event pool		unsigned	pool_max;						// pool allocation		MixUpd	*head;								// start of queue		unsigned	count;							// length of queue		};	MixUpdQ	dials, switches;						// two queues	private:											// internal data representation 	// protocol driver interface	long		cookie;								// interrupt addressing validity check	rupt		rhook;								// interrupt interface	static void	click(MixerUpdates &me,PACKET *pkt);	// rupt handler	static const long	magic;	};#endif		// NED__MIXERUPDATES
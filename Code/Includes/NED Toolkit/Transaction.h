/*	NED Toolkit - Abstract Transaction Class		Copyright © 1990 by New England Digital Corp.  All rights reserved.		This file defines the abstract class that all long-lived protocol	transactions are derived from.		Modification History:		07/29/90	KJC	Created this file*/#ifndef NED__TRANSACTION#define NED__TRANSACTION#ifndef NED__CPLUS#include "cplus.h"#endif#ifndef NED__REQUEST#include "Request.h"#endif#ifndef NED__LISTEN#include "Listen.h"#endif//class /*PascalObj*/ Transaction;#define NEVER_IDLE	MAX_UINT32				/* idle interval to never idle */class Transaction : public Requester {public:	Transaction (/*NED_Object*/void *creator = NULL, int requests = 1);	virtual ~Transaction (void);	virtual int32	check_idle (int32 time);	// idle if it's time (returns how long till next time)	virtual void	soft_abort (void);			// override this to provide soft abort	virtual void	abort (void);				// override this to provide hard abort (no cleanup allowed - just get out)		// class management for use by the application scheduler	static void		startup();					// initialize lists	static void		idles();					// run idle chain	static void		shutdown();					// delete all existing Transactions	static bool		need_idles()				{ return idle_head!=NULL; }protected:	Listener listen;							// listener object (access this directly)		inline /*NED_Object*/ void	*get_creator (void)			{ return (creator); }	inline int32		get_idle_interval (void)	{ return (idle_interval); }	inline void			set_idle_interval (int32 idle)	{ idle_interval = idle; }	inline uint8		get_idle_priority (void)	{ return (idle_priority); }	inline void			set_idle_priority (uint8 priority)	{ idle_priority = priority; }	inline int32		get_last_idle (void)		{ return (last_idle); }		static  void	default_evt_handler (Transaction *t);	// handler for the event	virtual void	event_handler (void);		// override this		virtual void	idle (void);				// override this for idle time		virtual void	change_idle_rate (uint32 idle);	// change idle rate (milliseconds)	virtual void	change_priority (uint8 priority);	// change idle priority (255 is highest, 0 is lowest and reserved)private:	/*NED_Object*/ void	*creator;					// pointer back to creator	Transaction	*next_trans;				// next Transaction in idle chain	int32		idle_interval;				// idle rate (ticks)	uint8		idle_priority;				// idle time priority (conflict resolution)	int32		last_idle;					// last time we idled (ticks)		void		install_transaction (void);	// install transaction on Transaction list	void		remove_transaction (void);	// remove transaction from Transaction list		// manage the set of transactions	static Transaction *head;				// head of Transaction list	static Transaction *queue;				// next running Transaction	static Transaction *idle_head;			// head of Transaction idle chain};#endif	/* NED__TRANSACTION */
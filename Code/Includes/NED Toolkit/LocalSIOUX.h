/*  Metrowerks Standard Library  Version 2.1.2  1997 May  *//* *	File:		SIOUX.h *				©1993-1997 metrowerks Inc. All rights reserved *	Author:		Berardino E. Baratta * *	Content:	Interface file for SIOUX, containing all accessible entries ... * */#ifndef __SIOUX__#define __SIOUX__#if __MOTO__#include <Events.h>#endif#pragma pack(2)/* *	Structure for holding the SIOUX specific settings ... *	default values are: *		{TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, 4, 80, 24, 0, 0, monaco, 9, normal, *			TRUE, TRUE,	FALSE, 0};	// SIOUX-WE specific */typedef struct tSIOUXSettings {	char		 	initializeTB,			/* Do we initialize the ToolBox ... */					standalone,				/* Is SIOUX running in standalone mode ... */					setupmenus,				/* Do we draw the SIOUX menus ... */					autocloseonquit,		/* Do we close the SIOUX window on program termination ... */					asktosaveonclose,		/* Do we offer to save on a close ... */					showstatusline;			/* Do we draw the status line ... */	short			tabspaces,				/* if non-zero, replace tabs with 'tabspaces' spaces ... */					columns, rows,			/* The initial size of the SIOUX window ... */					toppixel, leftpixel,	/* The topleft window position (in pixels) ... */											/* 	(0,0 centers on main screen) ... */					fontid, fontsize,					fontface;				/* SIOUX's font, size and textface (i.e. bold, etc...) ... */	/* SIOUX-WE specific settings -- these will have no effect on a non-SIOUX-WE project */	char			enabledraganddrop,	/* WASTE will use Drag and Drop, if available 			*/					outlinehilite,			/* if false, selections in a non-active window will	*/												/* not be outlined--the selection "disappears".			*/												/* if enabledraganddrop == true, this feature will be	*/												/* activated no matter the value of outlinehilite		*/					wasteusetempmemory;			/* tell WASTE to allocate its main data structures from temporary memory *//*	long			wastemaxbuffersize; /* setting to limit the size of the WASTE text. Not yet implemented */} tSIOUXSettings;extern tSIOUXSettings	SIOUXSettings;		/* SIOUX's settings structure ... */#ifdef __cplusplusextern "C" {#endif/* *	extern short SIOUXHandleOneEvent(EventRecord *initialevent); * *	Tells SIOUX to handle one event.  If initialevent is NULL, then SIOUX *	will poll the eventqueue for an event.  For applications which wish to *	use an embedded SIOUX window, call this function at the beginning of *	your eventloop, and pass it your current event ... * *	EventRecord *userevent:	The user's event from their call to Get/WaitNextEvent. *	returns short:			Was the event handled by SIOUX? */extern short SIOUXHandleOneEvent(struct EventRecord *userevent);/* *	extern void SIOUXSetTitle(unsigned char title[256]); * *	Change the SIOUX window's title ... * *	unsigned char title[256]:	contains a pascal string. */extern void SIOUXSetTitle(const unsigned char title[256]);// duh...extern void DeleteSIOUXLastLine();// Allows breakpoint upon entry to write char from console...extern long WriteCharsToConsoleBreakFlag;#ifdef __cplusplus}#endif#pragma options align=reset#endif/*     Change record*/
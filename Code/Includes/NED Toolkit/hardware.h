/* MC68K Hardware Definitions */#ifndef NED__HARDWARE#define NED__HARDWARE/* Low memory addresses */#define GLOB_BASE	0x400				/* start of low memory globals */#define GLOB_LEN	0x200				/* length of low memory globals */#define GLOB_END	(GLOB_BASE + GLOB_LEN)	/* start of user program space *//* ROM addresses */#define	ROM_UNUSED1	((int16 *) 0xC0008)#define	ROM_UNUSED2	((int16 *) 0xC000A)#define	ROM_UNUSED3	((int16 *) 0xC000C)#define	ROM_UNUSED4	((int8 *)  0xC000E)#define	ROM_DEVTYPE	((unsigned int8 *) 0xC000F)	/* network device type (upper nibble/zero in lower) *//* parallel bus addresses */#define	P_BUS	((int16 *) 0x340000)	/* pointer to parallel bus (1 wait state) */#define	P_SBUS	((int16 *) 0x300000)	/* pointer to parallel bus (sync acknowledge) *//* multifunction peripheral definitions */#define MFP			((int16 *) 0x380100)		/* multifunction peripheral */#define GPIP			(MFP + 0x00/2)				/* GPIP data */#define GPIP_IEDGE		(MFP + 0x02/2)				/* GPIP interrupt active edge */#define GPIP_DIR		(MFP + 0x04/2)				/* GPIP data direction */#define GPIP_IENA		(MFP + 0x06/2)				/* GPIP interrupt enable A */#define GPIP_IENB		(MFP + 0x08/2)				/* GPIP interrupt enable B */#define GPIP_IPENDA		(MFP + 0x0A/2)				/* GPIP interrupt pending A */#define GPIP_IPENDB		(MFP + 0x0C/2)				/* GPIP interrupt pending B */#define GPIP_ISERVA		(MFP + 0x0E/2)				/* GPIP interrupt in-service A */#define GPIP_ISERVB		(MFP + 0x10/2)				/* GPIP interrupt in-service B */#define GPIP_IMASKA		(MFP + 0x12/2)				/* GPIP interrupt mask A */#define GPIP_IMASKB		(MFP + 0x14/2)				/* GPIP interrupt mask B */#define MFP_VECTOR		(MFP + 0x16/2)				/* interrupt vector address */#define TIMER_CONTROL	(MFP + 0x18/2)				/* timer A control */#define TIMER_B_CONTROL	(MFP + 0x1A/2)				/* timer B control */#define TIMER_CD_CONTROL	(MFP + 0x1C/2)				/* timers C & D control */#define TIMER			(MFP + 0x1E/2)				/* timer A data */#define TIMER_B		(MFP + 0x20/2)				/* timer B data */#define TIMER_C		(MFP + 0x22/2)				/* timer C data */#define TIMER_D		(MFP + 0x24/2)				/* timer D data */#define UART_CONTROL	(MFP + 0x28/2)				/* UART control */#define RCVR_STATUS		(MFP + 0x2A/2)				/* UART receiver status */#define XMIT_STATUS		(MFP + 0x2C/2)				/* UART transmittr status */#define UART			(MFP + 0x2E/2)				/* UART data *//* timer commands */#define STOP_TIMER		0x00						/* stop timer command */#define START_TIMER		0x04						/* start timer command (delay mode, Ö 50 prescale) *//* DUSCC definitions */#define S_ABASE		((int16 *) 0x380200)		/* channel A base address */#define S_BBASE		((int16 *) 0x380240)		/* channel B base address */#define S_ICR			(S_ABASE + 0x3E/2)			/* interrupt control register (channel A only) *//* interrupt vector */typedef void (*INTHAN) ();						/* pointer to interrupt handler */#define inthan(x)		((INTHAN *) ((x)*sizeof(INTHAN)))	/* interrupt handler pointer */#define MFPV			96						/* MFP vectors start here */#define TIMER_VECTOR	inthan (MFPV + 13)			/* timer A interrupt vector cell */#define BREAK_VECTOR	inthan (MFPV + 15)			/* user break interrupt vector cell (GPIP 7) */#define USER_BREAK		((INTHAN) 0xC1028)			/* pROBE manual break address *//* MC68K control word */#define MC68K_CONTROL	((int16 *) 0x380500)		/* MC68K control word */#endif	/* NED__HARDWARE */
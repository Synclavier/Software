/*	NED Toolkit - Condition Signalling Library		Copyright © 1990-1992 by New England Digital Corp.  All rights reserved.		This module implements condition queues and monitor calls.	It's modeled on the Synclavier events, but allows dynamic	creation and destruction of events	Monitors enable for Conditions, to be called when those	Conditions are enqueued.		HMonitors are for installation in SingleObjects.	They call a static method with an object pointer		Modification History:		08/09/90	MAC		Created this file*/#ifndef	NED__CONDITION#define NED__CONDITIONclass Condition;							// forward referencesclass Monitor;class HMonitor;#include "cplus.h"#include "nedset.h"#include "handler.h"// class definitionsclass Condition{public:	Condition();							// define	~Condition();							// undefine	void		signal();					// signal condition	// application server	static	int scan();						// collect & count pending conds	Condition*	check();					// simple consistency check		private:	int		cid;							// condition number	SET		*mons;							// monitors enabled for this	friend	class Monitor;};// Monitor class class Monitor{public:	Monitor();								// create monitor	~Monitor();								// delete monitor		Monitor&	enable(Condition &c);		// enable for condition	Monitor&	disable(Condition &c);		// disable for condition	bool		test(Condition &c);			// test one signal	bool		test();						// test any signal	bool		latch(Condition &c);		// test & clear one signal	bool		latch();					// test & clear all signals	static	int serve();					// serve monitor class	Monitor		*check();					// simple consistency check	protected:	virtual	void signal(void);				// signal handlerprivate:	int		mid;							// monitor number	SET		*mask;							// enable mask	SET		*pend;							// pending conds	void	call(SET *conds);				// signal new conds	friend	class Condition;};// Handler Monitor class// this can take an external (C or Pascal) signal handlerclass HMonitor : public Monitor{public:	HMonitor(void *that = NULL, Handler *notify = NULL);	// low-level generic method pointer	protected:	virtual void	signal(void);	void			*that;					// client pointer	Handler			*notify;				// client handler};#endif	// NED__CONDITION
/* This library allows generic application-level routines to be executed  at VBL time or on a Time Manager interrupt without much concern for how  VBL tasks and Time Manager tasks operate.  Installed routines cannot  allocate or deallocate memory nor can they call any function that does.  Functions provided are:    vbl_id = install_vbl (task, interval, periodic):	Installs a VBL task to run at a specified interval.  If periodic is	FALSE, the task will be executed exactly once (after the specified	interval of time) and then will be removed from the VBL queue.  Interval	is specified in Macintosh clock ticks.    remove_vbl (vbl_id):	Removes the specified VBL task from the VBL queue (so that it no	longer executes).  All VBL tasks MUST be removed before the	application terminates.    tm_id = install_time (task, periodic):	Installs a Time Manager task.  If periodic is TRUE, the task will be	executed periodically at the interval specified in the prime_time call.    prime_time (tm_id, interval):	Schedules the specified Time Manager task to execute after the specified	interval (in milliseconds).  If the task was installed as a periodic task,	it will continue to run at that interval until it is either removed or	its interval is changed to zero.    remove_time (tm_id):	Removes the specified Time Manager task (so that it no longer executes	and can no longer be primed).  All Time Manager tasks MUST be removed	before the application terminates.    change_task_interval (task_id, interval):	Changes the interval at which the specified VBL task or periodic Time	Manager task executes.  The change does not take effect until the next	time the task executes.  If the interval is changed to zero, the task	will stop executing periodically.  In addition, changing a VBL task's	interval to zero will remove that task from the VBL queue the next time	it is executed.  Note that changing the interval of a non-periodic	Time Manager task to anything other than zero will start that task	executing at a periodic interval the next time prime_time () is called.    old_level = mask_int (new_level):	Changes the processor interrupt mask to the specified level and	returns the value it was previously set to (so the interrupt level	can be restored later).  This function is provided here because VBL	tasks often manipulate objects that are accessed at interrupt time	(such as hardware registers and global variables).  The constant	DISABLE_INTERRUPTS is provided to disable all interrupts on the	Macintosh except the programmer's switch.    Dependencies:  	NO_TASK and TASK_ID are both dependent on values from list.h.  These	values (L_END_OF_FREE_LIST and list_pos) are copied directly from	list.h into this file so as not to require list.h in order to use	this library (and to avoid the conflicts associated with when the	LIST data type gets completed).  If these list.h values change, so	must the definitions of NO_TASK and TASK_ID.*/#ifndef NED__VBL#define NED__VBL#ifndef NED__C#include "c.h"#endif/* constants */#define NO_TASK			(-1)				/* TASK ID when VBL/Time Manager task wasn't installed (MUST match L_END_OF_FREE_LIST on list.h) */#define DISABLE_INTERRUPTS	6				/* interrupt level to disable all interrupts *//* data structures */typedef int TASK_ID;						/* data type of VBL/Time Manager task identifiers (MUST match list_pos data type in list.h) *//* prototypes */#ifdef __cplusplusextern "C" {#endifTASK_ID	install_vbl  (void (*task) (void), int16 interval, bool periodic);	/* install task on VBL queue */void		remove_vbl   (TASK_ID vbl_id);								/* remove task from VBL queue */TASK_ID	install_time (void (*task) (void), bool periodic);				/* install Time Manager task */void		prime_time   (TASK_ID time_id, int32 interval);					/* prime Time Manager task */void		remove_time  (TASK_ID time_id);								/* remove Time Manager task */void		change_task_interval (TASK_ID task_id, int32 interval);			/* change interval at which periodic task is executed */int		mask_int     (int level);									/* set interrupt mask to specified level */#ifdef __cplusplus}#endif#endif NED_VBL
/*	NED Toolkit - SYNCnet Requester Class Definitions		Copyright © 1990-1992 by New England Digital Corp.  All rights reserved.		These classes manage request/answer calls to SYNCnet.		The Request class manages requests and their responses.  The request	is initialized with a callback, which is called whenever one of its	replies comes in.  A request may be used for a numbner of answers,	which are delivered in the order requested.		The Requester class provides a defualt Request object and handler.	To use it, simply derive your class from it and override handler().	A variant is the Snapper class, used for sequence snapshots.  It	provides a handler that maintains the packet stream		Modification History:		08/03/90	KJC		Added Requester class		07/31/90	MAC		Created this file*/#ifndef NED__REQUEST#define NED__REQUEST#include <Size_t.h>#include <String.h>#ifndef NED__CPLUS#include "cplus.h"#endif#ifndef NED__PACKETS#include "packets.h"#endif#ifndef NED__HANDLER#include "handler.h"#endifclass /*PascalObj*/ Requester;class /*PascalObj*/ Snapper;struct REQ;										// opaque type// a Syncnet data packet receiver// request messages are enqueued by tag, usually through the Syncnet objects// the state is polled through  busy(), idle(), done()// arrived packets are dequeue()'d and release()'d// pending traffic may be cleared through abort()class Request{public:	Request(void *that = (void *) NULL,	// constructor			Handler *rply = NULL,			int max_requests = 1);	virtual ~Request(void);				// destructor	// send & receive messages		bool	enqueue(int tag, int length = PACKET_MAX);			// setup for a reply	PACKET	*dequeue(void);				// get next packet		void	abort();					// kill request	// current state	int		idle();						// idle count	int		busy();						// busy count	int		done();						// done count	// buffer management	virtual PACKET	*nextpacket(int length = PACKET_MAX);			// allocate buffer	virtual	void	donepacket(PACKET*);							// release bufferprotected:	REQ		*rptr;					// pointer to data};// a Requester base class to derive from// the default_handler manages dequeue() and lastpacket() and passes// the packet to answer_handlerclass Requester /*: public NED_Object*/ {public:	inline	void* operator new    (size_t size) {void *it = new char[size]; memset(it, 0, size); return it;}	inline	void  operator delete (void*  obj ) {delete [] obj;}protected:	Request req;									// request object (access this directly)		static void		default_handler (Requester *r);	// handler for the request	virtual void	answer_handler (PACKET *ans);	// override thispublic:	Requester (int requests = 1);					// constructor	virtual	~Requester (void);						// destructor};// a variant requestor for snapshots// the default_handler dequeues and posts another bufferclass Snapper /*: public NED_Object*/ {protected:	Request req;									// request object (access this directly)	int		tag;									// snapshot tag	static void		default_handler (Snapper *s);	// handler for the request	virtual void	snap_handler (PACKET *snap);	// override thispublic:	Snapper (void);	virtual ~Snapper(void);	virtual bool	run();							// run snapshot stream	virtual void	abort(void);					// abort snapshot};	#endif	// NED__REQUEST
/* ShutDownUtilities.c *///	Mac OS Includes#include <Carbon/Carbon.h>#include <CoreServices/CoreServices.h>#include <OSUtils.h>#include <Types.h>								/* definitions of toolbox routines */#include <Errors.h>#include <AppleEvents.h>#include <Finder.h>#include <Processes.h>// 	Local Includes#include "ShutdownUtilities.h"// Handy routine to find the process number of an applicationstatic	OSErr FindAProcess(OSType typeToFind, OSType creatorToFind, ProcessSerialNumberPtr processSN) {		ProcessInfoRec	tempInfo;	FSSpec 			procSpec;	Str31			processName;	OSErr 			myErr = noErr;		processSN->lowLongOfPSN  = kNoProcess;	processSN->highLongOfPSN = kNoProcess;		tempInfo.processInfoLength = sizeof(ProcessInfoRec);	tempInfo.processName       = (StringPtr)&processName;	tempInfo.processAppSpec    = &procSpec;		while (1)	{		myErr = GetNextProcess(processSN);				if (myErr)			break;				myErr = GetProcessInformation(processSN, &tempInfo);		if (myErr)			break;				if ((tempInfo.processSignature == creatorToFind)	    &&  (tempInfo.processType      == typeToFind   ))	    	return (noErr);	}	return myErr;}// Handy routine to issue shutdown request to the Finder.OSErr	RestartSafely(){	OSErr				myErr;	OSType				kFinderSig      = 'FNDR';	AEEventClass		kAEFinderEvents = 'FNDR';	AEDesc				finderAddr;	AppleEvent			myShutDown;	AEEventID			kAERestart  = 'rest';	AEEventID			kAEShutDown = 'shut';	ProcessSerialNumber	psn;		if ((myErr = FindAProcess('FNDR', 'MACS', &psn)) != 0)		return (myErr);			if ((myErr = AECreateDesc(typeProcessSerialNumber, &psn, sizeof(psn), &finderAddr)) != 0)		return (myErr);			if ((myErr = AECreateAppleEvent(kAEFinderEvents, kAERestart, &finderAddr, kAutoGenerateReturnID, kAnyTransactionID, &myShutDown)) != 0)		return (myErr);		if ((myErr = AESend(&myShutDown, NULL, kAENoReply + kAECanSwitchLayer + kAEAlwaysInteract,                        kAENormalPriority, kAEDefaultTimeout, NULL, NULL)) != 0)		return (myErr);			return (myErr);}
            New England Digital ABLE Series Assembler                 page 1                         0              TTL       HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0     *                            0     *          20 NOV 85: WROTE SCSI DRIVER FROM ORIGINAL IMI DRIVER [KJC]                    0     *           2 JUN 86: UPDATED FOR -7 CATALOG STRUCTURE [KJC]                    0     *          12 FEB 94: ARBITRATE AS ID6 INSTEAD OF ID7 [PFF]                    0     *                            0     *        NOTE:  THE TOTAL NUMBER OF SECTORS IN THE SYSTEM IS LIMITED TO 16,777,216.                    0     *                            0     *                            0     *                            0     *                            0     *        THIS PROGRAM RESIDES IN THE LOWER 768 OF THE UPPER 1024 WORDS OF MEMORY.                    0     *        READ DATA FROM THE WINCHESTER AS REQUIRED:                    0     *          000000  154215    0              RE(FBOOT) TO   RTRA      LOCATION 0 - LOAD 'MONITOR' FROM DRIVE ZERO  000001  154211    0              RE(OVLAY) TO   RTRA      LOCATION 1 - OVERLAY A PROGRAM (AC0=MS SECTOR, AC1=LS SECTOR, AC2=DEST, AC3=LENGTH)  000002  154224    0              RE(NBOOT) TO   RTRA      LOCATION 2 - LOADS SPECIAL FILE NAME (PASSED IN AC0-AC3)  000003  154201    0              RE(CCOPY) TO   RTRA      LOCATION 3 - PERFORMS CORE TO CORE COPY (AC0=SOURCE, AC1=DEST, AC2=LENGTH)  000004  154203    0              RE(ECOPY) TO   RTRA      LOCATION 4 - PERFORMS EXTMEM TO CORE COPY (AC0=SECTOR, AC1=DEST, AC2=LENGTH)                    0     *                            0     *                  002000    0     CATLEN:  EQU       2000           WINCHESTER CATALOG LENGTH (4 SECTORS)          002000    0     MEMDIF:  EQU       2000           (MEM.SIZ - TOP OF THIS ROUTINE) [1024]          000001    0     CONTAB:  EQU       1              POINTER TO LOCATION OF LOWCORE CONFIGURATION TABLE          000150    0     TABLEN:  EQU       150            104 WORDS IN THE CONFIGURATION TABLE          000004    0     OBJLEN:  EQU       4              POINTER TO OBJECT CODE LENGTH (LOWCORE ONLY)          000006    0     SWPLEN:  EQU       6              POINTER TO SWAP FILE LENGTH IN SECTORS (LOWCORE ONLY)          000014    0     CURTRK:  EQU       14             POINTER TO DISKREAD/DISKWRITE HEAD POSITIONS (LOWCORE ONLY)          000357    0     CTABOF:  EQU       357            LOCATION OF HIGHCORE CONFIGURATION = (MEM.SIZ - LOC.CTAB) [239]          000020    0     CONINF:  EQU       20             CONFIGURATION INFO STARTS HERE IN CONTAB          000350    0     CURDEV:  EQU       (CTABOF-27+CONINF) OFFSET FOR CURRENT DEVICE          000347    0     STRDEV:  EQU       (CTABOF-30+CONINF) OFFSET FOR STORAGE DEVICE TABLE          000000    0     SYSTYP:  EQU       0              OFFSET TO TYPE WORD IN STORAGE DEVICE TABLE          000001    0     SYSSPC:  EQU       1              OFFSET TO SECTORS/CYLINDER ENTRY IN STORAGE DEVICE TABLE          000002    0     SYSCYL:  EQU       2              OFFSET TO TOTAL CYLINDERS ENTRY IN STORAGE DEVICE TABLE          000003    0     DRVCON:  EQU       3              OFFSET TO DRIVE/CONTROLLER WORD IN STORAGE DEVICE TABLE          000004    0     BLKLEN:  EQU       4              LENGTH OF STORAGE DEVICE TABLE ENTRY          000227    0     STREND:  EQU       (CTABOF-TABLEN+CONINF) END OF STORAGE DEVICE TABLE PLUS ONE          000363    0     HDPOS:   EQU       363            OFFSET FOR TRUE HEAD POSITIONS (USED BY DISKREAD/DISKWRITE) [243]          000224    0     MAGIC:   EQU       224            LOCATION OF MAGIC NUMBER IN HIGHCORE [148]          000364    0     EMSIZE:  EQU       364            OFFSET FOR AVAILABLE EXTENDED MEMORY SIZE IN SECTORS [244]                    0     *                            0     *                            0     *        READ STATES (FOR DSKRD ROUTINE):                    0     *                            0     *          SINCE THE OVERLAY MECHANISM WILL NOW AUTOMATICALLY LOAD ANY SWAP FILE                    0     *          INTO EXTENDED MEMORY FOR THE CALLING PROGRAM, VARIOUS "READ STATES"                    0     *          HAVE BEEN ADDED TO THE DSKRD ROUTINE.  THESE STATES DESCRIBE WHAT                    0     *          IS EXPECTED OF THE READ ROUTINE.                    0     *                            0     *          NOTE:  THE SWAP FILE IS READ INTO THE VERY TOP PORTION OF THE                    0     *                 EXTENDED MEMORY.                    0     *                  000000    0     RCAT:    EQU       0              READ CATALOG          000001    0     RFIRST:  EQU       1              READ FIRST SECTOR OF THE OBJECT FILE (### ISSRD ASSUMES THIS IS 1!!! ###)          000002    0     RRESTN:  EQU       2              READ THE REST OF THE OBJECT FILE - NO CONFIGURATION          000003    0     RREST:   EQU       3              READ THE REST OF THE OBJECT FILE - VALID CONFIGURATION FOUND          000004    0     RSWAP:   EQU       4              READ THE SWAP FILE INTO THE EXTENDED MEMORY            New England Digital ABLE Series Assembler                 page 2     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *                            0     *        D24 CONTROL BITS AND MASKS                    0     *                  010000    0     SELENA:  EQU       10000          SELECT ENABLE (D24)          007400    0     SELMSK:  EQU       7400           SELECT BITS MASK (D24)          000377    0     DATMSK:  EQU       377            DATA BUS MASK (D24)          000100    0     ID6:     EQU       100            SCSI ID 6 (D24)          000200    0     ID7:     EQU       200            SCSI ID 7 (D24)          005000    0     ARB6:    EQU       5000           ARBITRATE FOR SCSI ID 6 (D25)          001000    0     ARB7:    EQU       1000           ARBITRATE FOR SCSI ID 7 (D25)          000777    0     BUSMSK:  EQU       777            SIGNAL BUS MASK (D25)          000050    0     EXTRD:   EQU       50             EXTENDED READ COMMAND (D26)          004000    0     DEVBSY:  EQU       4000           DEVICE BUSY STATUS (D27)          007400    0     STAMSK:  EQU       7400           STATUS BITS MASK (D27)                    0     *                            0     *                            0     *        SCSI SIGNAL LINES (JUST THE ONES WE USE)                    0     *                  000001    0     ATN:     EQU       1              ATTENTION          000002    0     BSY:     EQU       2              BUSY          000004    0     ACK:     EQU       4              ACKNOWLEDGE          000010    0     RST:     EQU       10             RESET          000020    0     MSG:     EQU       20             MESSAGE          000040    0     SEL:     EQU       40             SELECT          000100    0     CD:      EQU       100            C/D (CONTROL/DATA)          000200    0     REQ:     EQU       200            REQUEST          000400    0     IO:      EQU       400            I/O                    0          000573    0     SIGMSK:  EQU       (ATN\BSY\RST\MSG\SEL\CD\IO) SIGNAL MASK FOR STATUS PHASES          000502    0     PSTAT:   EQU       (BSY\CD\IO)    STATUS PHASE          000402    0     PDATIN:  EQU       (BSY\IO)       DATA IN PHASE          000042    0     BUSFRE:  EQU       (BSY\SEL)      BUS FREE STATE WHEN THESE ARE BOTH ZERO            New England Digital ABLE Series Assembler                 page 3     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        CORE TO CORE COPY ROUTINE                    0     *          000005            0     CCOPY:   ...  000005  000660    0              IM(-20)   TO   D1        MAKE SURE INTERRUPTS ARE OFF  000006  154377    0              PCI       TO   RTRA      TRANSFER TO THE CORE-TO-CORE COPY ROUTINE  000007  001021    0              DATA      (CCOPY2-.-1)                    0     *                            0     *        EXTERNAL MEMORY TO CORE COPY:                    0     *          000010            0     ECOPY:   ...  000010  000660    0              IM(-20)   TO   D1        DISABLE INTERRUPTS  000011  154377    0              PCI       TO   RTRA      TRANSFER TO THE EXTERNAL MEMORY-TO-CORE COPY ROUTINE  000012  001064    0              DATA      (ECOPY2-.-1)                    0     *                            0     *        OVERLAY A FILE                    0     *          000013            0     OVLAY:   ...  000013  000660    0              IM(-20)   TO   D1        DISABLE INTERRUPTS FOR SURE FOR OVERLAY  000014  144201    0              IM(RFIRST) TO  R10       SET STATE TO READ FIRST SECTOR OF OBJECT FILE  000015  154224    0              RE(SETUP) TO   RTRA      GO READ IT IN                    0     *                            0     *        LOAD PROGRAM CALLED 'MONITOR'                    0     *          000016            0     FBOOT:   ...  000016  000660    0              IM(-20)   TO   D1        MAKE SURE INTERRUPTS ARE OFF  000017  140377    0              PCI       TO   R0  000020  047515    0              DATA      47515          LOAD PROGRAM NAME INTO R0-R3 FOR LATER CODE  000021  140777    0              PCI       TO   R1  000022  044516    0              DATA      44516  000023  141377    0              PCI       TO   R2  000024  047524    0              DATA      47524  000025  141777    0              PCI       TO   R3  000026  000122    0              DATA      122                    0     *                            0     *        LOAD PROGRAM AS SPECIFIED IN AC0-AC1-AC2-AC3                    0     *          000027            0     NBOOT:   ...  000027  000660    0              IM(-20)   TO   D1        MAKE SURE INTERRUPTS ARE OFF  000030  142300    0              R0        TO   R4  000031  142701    0              R1        TO   R5  000032  143302    0              R2        TO   R6  000033  143703    0              R3        TO   R7        MOVE NAME TO REGISTERS 4-7                    0     *                            0     *        SET UP FOR DISK READ                    0     *          000034  140200    0              IM(0)     TO   R0        SET THE DEVICE ADDRESS TO THE SYSTEM DEVICE  000035  140600    0              IM(0)     TO   R1        START READ FROM SECTOR 0 OF WINCHESTER  000036  141200    0              IM(0)     TO   R2        READ CATALOG INTO START OF MEMORY  000037  141777    0              PCI       TO   R3        THIS IS THE CATALOG'S LENGTH  000040  002000    0              DATA      CATLEN  000041  144200    0              IM(RCAT)  TO   R10       SET STATE TO READ IN THE CATALOG            New England Digital ABLE Series Assembler                 page 4     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        SET UP FOR READING THE DISK - MAP LOGICAL DEVICE TO PHYSICAL DEVICE                    0     *          000042            0     SETUP:   ...  000042  145277    0              IM(-1)    TO   R12       TRY TO FIND THE DEVICE/DRIVE ID FOR THE DEVICE PASSED IN R0  000043  146300    0              R0        TO   R14       SET THE LOGICAL DRIVE ID ASIDE  000044  102377    0              PCI       TO   AND0      EXTRACT JUST THE LOGICAL DEVICE CODE  000045  177000    0              DATA      177000         (LSB IN UPPER BYTE IS THE LOGICAL DRIVE NUMBER - IGNORE IT AS WELL)  000046  156616    0              RE(DECODE) TO  RTNZ      NONZERO DEVICE TYPE - GO DECODE IT  000047  140317    0              R17       TO   R0        GET OUR CURRENT LOCATION  000050  104377    0              PCI       TO   ADD0      POINT TO CURRENT DEVICE - FOLLOWING WORD IS SYSTEM DEVICE  000051  001360    0              DATA      (MEMDIF-CURDEV-(.-1))  000052  145300    0              R0        TO   R12       SAVE THIS POINTER  000053  140314    0              R14       TO   R0        RECOVER THE LOGICAL DRIVE ID  000054  122377    0              PCI       TO   TAND0     SEE IF THE DRIVE NUMBER IS ONE  000055  000400    0              DATA      400            LSB		IN UPPER BYTE  000056  156601    0              IM(1)     TO   RTNZ      IF NON-ZERO, WE WANT THE CURRENT DEVICE (ALREADY POINT TO IT)  000057  152332    0              R12I      TO   ATNV      OTHERWISE, WANT SYSTEM DEVICE - POINT TO IT  000060  140352    0              MR12      TO   R0        PICK UP DESIRED DEVICE  000061  102377    0              PCI       TO   AND0      KEEP JUST THE DEVICE TYPE  000062  000377    0              DATA      377  000063  145300    0              R0        TO   R12       AND SET ASIDE  000064  154211    0              RE(CHKDEV) TO  RTRA      AND GO CHECK THE DEVICE'S VALIDITY                    0  000065  126377    0     DECODE:  PCI       TO   TSUB0     DECODE THE DEVICE TYPE  000066  003000    0              DATA      3000           WINCHESTER?  000067  156606    0              RE(CHKDEV) TO  RTNZ      NO, WE AREN'T INTERESTED IN DECODING ANY OTHER DEVICES  000070  145201    0              IM(1)     TO   R12       SET WINCHESTER DEVICE CODE IN R12  000071  140314    0              R14       TO   R0        PICK UP LOGICAL DEVICE AGAIN  000072  122377    0              PCI       TO   TAND0     CHECK DRIVE NUMBER  000073  000400    0              DATA      400  000074  154601    0              RE(CHKDEV) TO  RTZE      NO DRIVE NUMBER - R12 IS THE DEVICE  000075  145221    0              IM(21)    TO   R12       SET IT TO WINCHESTER ONE (NORMALLY, WE'D OR THIS BIT IN)                    0  000076  140312    0     CHKDEV:  R12       TO   R0        PICK UP RESULT  000077  102217    0              IM(17)    TO   AND0      EXTRACT JUST THE DEVICE TYPE  000100  126201    0              IM(1)     TO   TSUB0     MAKE SURE IT'S A WINCHESTER  000101  156604    0              RE(CHKERR) TO  RTNZ      NOT A WINCHESTER                    0  000102  140051    0     CHKDV2:  D51       TO   R0        PICK UP COMPUTER DEVICE BITS  000103  122377    0              PCI       TO   TAND0     MAKE SURE WE HAVE A SCSI INTERFACE  000104  040000    0              DATA      40000          (SCSI INTERFACE BIT)  000105  156602    0              RE(CHKDV3) TO  RTNZ      WE HAVE AN INTERFACE  000106  024207    0     CHKERR:  IM(7)     TO   D50       NO INTERFACE - BEEP FOREVER  000107  154276    0              IM(-2)    TO   RTRA                    0  000110  140310    0     CHKDV3:  R10       TO   R0        PICK UP READ STATE  000111  126200    0              IM(RCAT)  TO   TSUB0     READ CATALOG?  000112  154604    0              RE(FNDBL1) TO  RTZE      YES, DON'T SET THE MS SECTOR  000113  140314    0              R14       TO   R0        PICK UP DEVICE/MS SECTOR  000114  102377    0              PCI       TO   AND0      KEEP JUST MS SECTOR  000115  000377    0              DATA      377  000116  142700    0              R0        TO   R5        SAVE IN R5            New England Digital ABLE Series Assembler                 page 5     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        LOOK FOR DRIVE'S CONFIGURATION                    0     *          000117  146301    0     FNDBL1:  R1        TO   R14       SAVE R1  000120  144702    0              R2        TO   R11       SAVE R2  000121  140317    0              R17       TO   R0        GET OUR CURRENT LOCATION  000122  104377    0              PCI       TO   ADD0      POINT TO THE HIGHCORE STORAGE DEVICE TABLE  000123  001303    0              DATA      (MEMDIF-STRDEV-BLKLEN-(.-1)) OR THEREABOUTS  000124  141317    0              R17       TO   R2        GET OUR CURRENT LOCATION  000125  105377    0              PCI       TO   ADD2      POINT TO THE END OF THE HIGHCORE STORAGE DEVICE TABLE  000126  001424    0              DATA      (MEMDIF-STREND-(.-1))  000127  145677    0              IM(-1)    TO   R13       INITIALIZE BLOCK POINTER                    0  000130  152333    0     FNDBLK:  R13I      TO   ATNV      POINT TO NEXT BLOCK  000131  104204    0              IM(BLKLEN) TO  ADD0      HERE TOO  000132  126302    0              R2        TO   TSUB0     SEE IF WE WENT OVER THE TOP  000133  154652    0              RE(CHKERR) TO  RTZE      IF WE DID, WE'RE IN TROUBLE  000134  140740    0              MR0       TO   R1        PICK UP DEVICE TYPE  000135  102777    0              PCI       TO   AND1      EXTRACT JUST THE DEVICE TYPE  000136  000377    0              DATA      377  000137  126712    0              R12       TO   TSUB1     IS IT THE DEVICE WE'RE LOOKING FOR?  000140  156667    0              RE(FNDBLK) TO  RTNZ      NO, KEEP LOOKING                    0  000141  140340    0              MR0       TO   R0        PICK UP DEVICE TYPE WORD AGAIN  000142  130200    0              IM(0)     TO   BSOR0     MOVE WINCHESTER TYPE TO LOWER  000143  102203    0              IM(3)     TO   AND0      KEEP WINCHESTER TYPE ONLY  000144  126201    0              IM(1)     TO   TSUB0     SEE IF SCSI  000145  156640    0              RE(CHKERR) TO  RTNZ      IT ISN'T  000146  140714    0              R14       TO   R1        RESTORE R1  000147  141311    0              R11       TO   R2        RESTORE R2                    0     *          000150  140301    0              R1        TO   R0        SHIFT EVERYTHING DOWN SO THE CODE THAT ONLY HAD AN LS SECTOR WORKS  000151  140702    0              R2        TO   R1  000152  141303    0              R3        TO   R2        R3 IS NOW FREE                    0     *                            0     *                            0     *        READ DATA FROM WINCHESTER                    0     *          R0 = STARTING SECTOR                    0     *          R1 = CORE LOCATION                    0     *          R2 = LENGTH                    0     *          R5 = MS STARTING SECTOR (EXCEPT STATE RCAT)                    0     *          R10= READ STATE (0: READ CATALOG, 1: READ FIRST SECTOR OF FILE, ETC.)                    0     *          R13= LOGICAL DRIVE NUMBER TO START AT                    0     *          000153            0     DSKRD:   ...  000153  144701    0              R1        TO   R11       SAVE STARTING MEMORY LOCATION                    0     *                            0     *        THE FOLLOWING FINDS THE APPROPRIATE WINCHESTER IN THE CONFIGURATION                    0     *        AND SELECTS IT.  THE FOLLOWING REGISTERS ARE USED:                    0     *           R0:  LOGICAL OR PHYSICAL SECTOR NUMBER ON CURRENT DISK AT ENTRY                    0     *                PHYSICAL SECTOR NUMBER ON CURRENT DISK AFTER SELECTION                    0     *           R1:  LOCATION TO COPY TO - USED AS TEMP DURING SELECTION (BUT PRESERVED)                    0     *           R2:  LENGTH TO COPY - USED AS TEMP DURING SELECTION (BUT PRESERVED)                    0     *           R3:  TEMPORARY                    0     *           R4-R7: NAME OF FILE TO OVERLAY TO (STATE RCAT ONLY)                    0     *           R4:  ADDRESS OF SWAP FILE (STATE RSWAP ONLY - PASSED TO TARGET PROGRAM)                    0     *           R5:  MS LOGICAL OR PHYSICAL SECTOR NUMBER ON CURRENT DISK (ALL STATES EXCEPT RCAT)                    0     *           R6:  UNUSED (ALL STATES EXCEPT RCAT)                    0     *           R7:  SUBROUTINE RETURN ADDRESS (ALL STATES EXCEPT RCAT IN WHICH NO SUBROUTINES ARE CALLED)                    0     *           R10: READ STATE - SEE DEFINITIONS ABOVE                    0     *           R11: ORIGINAL LOCATION TO COPY TO (R1 AT OVLAY ENTRY) - TARGET FOR TRANSFER                    0     *           R12: TEMPORARY (USED ONLY IN SELECTION TO PRESERVE R1)                    0     *           R13: CURRENT LOGICAL DRIVE NUMBER (STORAGE DEVICE BLOCK NUMBER)                    0     *           R14: TEMPORARY (USED ONLY IN SELECTION TO PRESERVE R2)                    0     *           R15: NEGATIVE NUMBER OF SECTORS REMAINING ON THE CURRENT DRIVE                    0     *           R16: LOGICAL DRIVE CODE OF DRIVE WE'RE OVERLAYING TO (USED ONLY IN SELECTION)                    0     *                    New England Digital ABLE Series Assembler                 page 6     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        SELECT THE NEXT (LOGICAL) WINCHESTER                    0     *          000154            0     WINSEL:  ...                      SELECT THE NEXT (LOGICAL) WINCHESTER  000154  145301    0              R1        TO   R12       PRESERVE R1  000155  141717    0              R17       TO   R3        GET OUR CURRENT LOCATION  000156  105777    0              PCI       TO   ADD3      AND POINT TO STORAGE DEVICE TABLE IN HIGHCORE CONFIG  000157  001253    0              DATA      (MEMDIF-STRDEV-(.-1))  000160  105713    0              R13       TO   ADD3      POINT TO CURRENT LOGICAL DRIVE  000161  105713    0              R13       TO   ADD3      [FOUR (BLKLEN) WORDS/TABLE ENTRY]  000162  105713    0              R13       TO   ADD3  000163  105713    0              R13       TO   ADD3                    0     *                            0     *        FIND THE LOGICAL DRIVE THAT THIS SECTOR IS ON                    0     *          000164  146302    0              R2        TO   R14       PRESERVE R2  000165  141343    0              MR3       TO   R2        PICK UP LOGICAL DRIVE CODE OF DRIVE WE'RE LOOKING FOR  000166  103377    0              PCI       TO   AND2      EXTRACT JUST THE TYPE  000167  000377    0              DATA      377  000170  147302    0              R2        TO   R16       SET ASIDE LOGICAL DRIVE CODE OF DRIVE WE'RE LOOKING FOR  000171  127777    0     WIN0:    PCI       TO   TSUB3     ARE WE AT THE END OF THE TABLE?  000172  001360    0              DATA      (MEMDIF-STREND-(.-1))  000173  156602    0              IM(2)     TO   RTNZ      NO, KEEP LOOKING  000174  024207    0     WINERR:  IM(7)     TO   D50       YES, THE SPECIFIED SECTOR IS BEYOND THE END OF THE DISK  000175  154276    0              RE(WINERR) TO  RTRA      BOMB OUT                    0  000176  141343    0              MR3       TO   R2        PICK UP LOGICAL DRIVE/TYPE WORD  000177  103377    0              PCI       TO   AND2      EXTRACT JUST THE DEVICE TYPE  000200  000377    0              DATA      377  000201  127316    0              R16       TO   TSUB2     IS THIS A DRIVE WE'RE LOOKING FOR?  000202  156671    0              RE(WINERR) TO  RTNZ      NO, EITHER AT END OF TABLE (-1) OR PAST W0'S LIST                    0  000203  141303    0              R3        TO   R2        GET BLOCK POINTER FOR CURRENT LOGICAL DRIVE  000204  105201    0              IM(SYSSPC) TO  ADD2      POINT TO SECTORS/CYLINDER  000205  146762    0              MR2I      TO   R15       PICK UP AND SAVE SECTORS/CYLINDER (AND POINT TO TOTAL CYLINDERS)  000206  002700    0              R0        TO   D5        DIVIDE THE LOGICAL SECTOR NUMBER (OR PHYSICAL IF WE'RE CROSSING A DISK BOUNDARY)  000207  140710    0              R10       TO   R1        SEE IF READING CATALOG  000210  126600    0              IM(RCAT)  TO   TSUB1  000211  154601    0              IM(1)     TO   RTZE      IF SO, MS IS ZERO  000212  002305    0              R5        TO   D4        (MS AS WELL)  000213  003715    0              R15       TO   D7        BY THE NUMBER OF SECTORS/CYLINDER  000214  140405    0              D5        TO   R1        TO GET THE LOGICAL CYLINDER NUMBER (ASSUMES CYLINDER NUMBER < 64K)                    0  000215  126742    0              MR2       TO   TSUB1     SEE IF THE TARGET CYLINDER IS ON THE CURRENT LOGICAL DRIVE  000216  157212    0              RE(WIN2)  TO   RTNC      THE CYLINDER IS ON THIS DRIVE (ALWAYS EXIT FIRST TIME FROM RCAT)  000217  106742    0              MR2       TO   SUB1      NOT ON THIS DRIVE; REDUCE THE LOGICAL CYLINDER NUMBER BY LENGTH OF THIS DRIVE  000220  141004    0              D4        TO   R2        SAVE REMAINDER FROM DIVISION ABOVE  000221  002701    0              R1        TO   D5        MULTIPLY NEW LOGICAL CYLINDER NUMBER BY SECTORS/CYLINDER  000222  002302    0              R2        TO   D4        AND ADD IN SECTOR REMAINDER  000223  003315    0              R15       TO   D6        TO GET NEW LOGICAL SECTOR NUMBER  000224  140005    0              D5        TO   R0        AND MOVE THAT TO R0  000225  142404    0              D4        TO   R5        MS TO R5  000226  105604    0              IM(BLKLEN) TO  ADD3      POINT TO THE NEXT DRIVE (BLOCK)  000227  152333    0              R13I      TO   ATNV      INCREMENT THE LOGICAL DRIVE AS WELL  000230  154240    0              RE(WIN0)  TO   RTRA      AND KEEP LOOKING            New England Digital ABLE Series Assembler                 page 7     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        SAVE TARGET CYLINDER HERE                    0     *          000231  147004    0     WIN2:    D4        TO   R16       SAVE REMAINDER - THIS IS THE PHYSICAL SECTOR NUMBER ON THIS CYLINDER  000232  002701    0              R1        TO   D5        MULTIPLY THE PHYSICAL CYLINDER NUMBER BY SECTORS/CYLINDER  000233  002336    0              R16I      TO   D4        AND ADD IN THE PHYSICAL SECTOR NUMBER ON THIS DRIVE (AND MAKE R16 BE THAT PLUS ONE)  000234  003315    0              R15       TO   D6        PERFORM THE MULTIPLICATION, THEN THE ADDITION  000235  140005    0              D5        TO   R0        THE RESULT IS THE PHYSICAL SECTOR NUMBER ON THIS LOGICAL DRIVE  000236  141310    0              R10       TO   R2        SEE IF READING CATALOG  000237  127200    0              IM(RCAT)  TO   TSUB2  000240  154601    0              IM(1)     TO   RTZE      IF SO, MS IS ZERO  000241  142404    0              D4        TO   R5        MS TO R5                    0     *                            0     *        FIND THE NEGATIVE NUMBER OF SECTORS REMAINING ON THIS DRIVE                    0     *          000242  105602    0              IM(SYSCYL) TO  ADD3      POINT TO TOTAL CYLINDERS ON DISK  000243  106763    0              MR3I      TO   SUB1      COMPUTE NEGATIVE NUMBER OF CYLINDERS LEFT ON DRIVE (AND POINT TO DRIVE/CONTROLLER)  000244  002701    0              R1        TO   D5        PLACE NEGATIVE NUMBER OF CYLENDERS LEFT ON DRIVE IN D5  000245  003315    0              R15       TO   D6        TIMES SECTORS PER CYLINDER = YIELDS NEG SECTORS ON REMAINING CYLS  000246  141004    0              D4        TO   R2        READ THE MASB  000247  107315    0              R15       TO   SUB2      COMPUTE THE MSB CORRECTLY BY APPLYING SIGNED MULT CORRECTION  000250  105201    0              IM(1)     TO   ADD2      SEE IF WAS MINUS 1  000251  154602    0              RE(WIN6)  TO   RTZE      IF WAS MINUS 1, THEN NO OVERFLOW PROBLEM OCCURS  000252  146601    0              IM(1)     TO   R15       ELSE SIMULATE 65535 SECTORS REMAINING ON DRIVE  000253  154203    0              RE(WIN7)  TO   RTRA      DONE WITH THIS NASTINESS  000254  141005    0     WIN6:    D5        TO   R2        PICK UP NEGATIVE NUMBER OF SECTORS ON REMAINING CYLINDERS  000255  105316    0              R16       TO   ADD2      ADD IN STARTINC SECTOR-IN-CYL PLUS 1  000256  146702    0              R2        TO   R15       YIELDS NEGATIVE NUMBER OF CYLINDERS ON DRIVE AFTER THIS ONE  000257  141314    0     WIN7:    R14       TO   R2        RESTORE R2 HERE                    0                    0     *                            0     *        ATTEMPT TO CONNECT WITH THE SPECIFIED DRIVE                    0     *          000260  147343    0     CONNECT: MR3       TO   R16       PICK UP D24 ID, SCSI ID, SCSI LUN OF DRIVE  000261  141716    0              R16       TO   R3        MOVE TO R3  000262  133600    0              IM(0)     TO   SHRA3     GET D24 ID (SHR 4)  000263  133600    0              IM(0)     TO   SHRA3  000264  133600    0              IM(0)     TO   SHRA3  000265  133600    0              IM(0)     TO   SHRA3  000266  103617    0              IM(17)    TO   AND3      EXTRACT JUST THE ID                    0  000267  140601    0              IM(1)     TO   R1        BIT ENCODE THE ID  000270  154201    0              RE(CONN3) TO   RTRA      CHECK TERMINATION CONDITION  000271  104701    0     CONN2:   R1        TO   ADD1      SHL  000272  107601    0     CONN3:   IM(1)     TO   SUB3      SEE IF DONE  000273  157675    0              RE(CONN2) TO   RTPL                    0  000274  130777    0              PCI       TO   BSOR1     MOVE TO UPPER AND ADD IN SELECT ENABLE  000275  010000    0              DATA      SELENA         SELECT ENABLE BIT  000276  012301    0              R1        TO   D24       SELECT THE APPROPRIATE D24  000277  141424    0              D24       TO   R3        SEE IF THAT D24 WAS ACTUALLY THERE  000300  123777    0              PCI       TO   TAND3     MAKE SURE WE GET THE BIT BACK  000301  007400    0              DATA      SELMSK         (SELECT BITS)  000302  156601    0              RE(CONN1) TO   RTNZ      THE BOARD IS THERE                    0  000303  024207    0     CONERR:  IM(7)     TO   D50       NO BOARD - BEEP ONCE                    0  000304  012200    0     CONN1:   IM(0)     TO   D24       CLEAR SCSI DATA BUS                    0     *                            0     *        ARBITRATION                    0     *                            0     *                            0     *        RE-ENTER FROM BELOW TO REISSUE COMMAND                    0     *                            0     *        REGISTERS HERE:                    0     *                            0     *        	R16 = DEVICE ADDRESS (LUN, BOARD, TARGET)                    0     *        	R12 = HOLDS SAVED COPY OF R1 (E.G. MEM LOAD ADDRESS)                    0     *          000305  140600    0     ARBITE:  IM(0)     TO   R1        SET TIMEOUT OF APPROX. 500 MS                    0  000306  106601    0     ARBIT1:  IM(1)     TO   SUB1      DECREMENT TIMER  000307  154673    0              RE(CONERR) TO  RTZE      TIMED OUT - BEEP ONCE AND TRY AGAIN (FOREVER LOOP)  000310  101425    0              D25       TO   LOA3      LATCH THE SCSI BUS  000311  115425    0              D25       TO   OR3       CHECK IT TWICE  000312  123777    0              PCI       TO   TAND3     TEST FOR BUS FREE BITS  000313  000042    0              DATA      BUSFRE            New England Digital ABLE Series Assembler                 page 8     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS  000314  156671    0              RE(ARBIT1) TO  RTNZ      BUS NOT FREE YET, KEEP TRYING  000315  012602    0              IM(BSY)   TO   D25       BUS IS FREE! ASSERT BUSY BEFORE A BUS SETTLE DELAY  000316  012377    0              PCI       TO   D24       ASSERT OUR ID ONTO THE DATA BUS  000317  000100    0              DATA      ID6            WE ARE SCSI ID 6  000320  152200    0              IM(0)     TO   ATNV      WAIT A ARB DELAY FROM ASSERT OF BSY  000321  152200    0              IM(0)     TO   ATNV  000322  152200    0              IM(0)     TO   ATNV  000323  141424    0              D24       TO   R3        LOOD AT DATA BITS  000324  123777    0              PCI       TO   TAND3     MASK OFF ALL BUT BIT FOR ID7  000325  000200    0              DATA      ID7  000326  154603    0              RE(ARBWON) TO  RTZE      WE WON ARBITRATION  000327  012600    0              IM(0)     TO   D25       WE HAVE LOST ARBITRATION (ID7 WAS ASSERTED)  000330  012200    0              IM(0)     TO   D24       CLEAR SIGNAL AND DATA LINES  000331  154254    0              RE(ARBIT1) TO  RTRA      RETURN TO STEP 1 - WAIT FOR BUS FREE CONDITION                    0  000332  012777    0     ARBWON:  PCI       TO   D25       WE WON ARBITRATION  000333  000042    0              DATA      (BSY\SEL)      ASSERT SEL NOW  000334  152200    0              IM(0)     TO   ATNV      MAKE SURE WE WAIT AT LEAST A BUS SETTLE DELAY AFTER ASSERTING SELECT  000335  012200    0              IM(0)     TO   D24       CEASE ARBITRATION                    0            New England Digital ABLE Series Assembler                 page 9     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        SELECTION                    0     *          000336  141716    0              R16       TO   R3        PICK UP SCSI ID OF TARGET  000337  103617    0              IM(17)    TO   AND3      JUST THE SCSI ID                    0  000340  140601    0              IM(1)     TO   R1        BIT ENCODE THE ID  000341  154201    0              RE(SELEC3) TO  RTRA      CHECK TERMINATION CONDITION  000342  104701    0     SELEC2:  R1        TO   ADD1      SHL  000343  107601    0     SELEC3:  IM(1)     TO   SUB3      SEE IF DONE  000344  157675    0              RE(SELEC2) TO  RTPL                    0  000345  114777    0              PCI       TO   OR1       ADD IN OUR ID  000346  000100    0              DATA      ID6            WE'RE SCSI ID 6  000347  012301    0              R1        TO   D24       ASSERT OUR ID AND THE TARGET'S ID ON THE SCSI DATA BUS  000350  012777    0              PCI       TO   D25       ASSERT ATN  000351  000043    0              DATA      BSY\SEL\ATN  000352  012777    0              PCI       TO   D25       RELEASE BSY  000353  000041    0              DATA      SEL\ATN  000354  140777    0              PCI       TO   R1        SET TIMEOUT OF APPROX. 250 MS  000355  077777    0              DATA      77777                    0  000356  141425    0     SELECT:  D25       TO   R3        WAIT FOR TARGET TO ASSERT BSY  000357  123602    0              IM(BSY)   TO   TAND3  000360  156602    0              RE(SELEC1) TO  RTNZ      WE'VE SELECTED IT  000361  106601    0              IM(1)     TO   SUB1      HAVEN'T HEARD FROM THE DEVICE YET  000362  156673    0              RE(SELECT) TO  RTNZ                    0  000363  012200    0     SELEC1:  IM(0)     TO   D24       RELEASE DATA BUS  000364  120701    0              R1        TO   TLOA1     DID WE TIMEOUT?  000365  156602    0              IM(2)     TO   RTNZ      NO  000366  012600    0              IM(0)     TO   D25       WE TIMED OUT - FREE SIGNAL BUS  000367  154235    0              RE(IDERR) TO   RTRA      AND ABORT  000370  012601    0              IM(ATN)   TO   D25       RELEASE SEL  000371  140712    0              R12       TO   R1        RESTORE R1 HERE                    0     *                            0     *        IDENTIFY                    0     *          000372  141425    0     IDENT:   D25       TO   R3        WAIT FOR REQ  000373  123777    0              PCI       TO   TAND3  000374  000200    0              DATA      REQ  000375  154674    0              RE(IDENT) TO   RTZE                    0  000376  012600    0              IM(0)     TO   D25       RELEASE ATN  000377  141716    0              R16       TO   R3        PICK UP SCSI LUN  000400  131777    0              PCI       TO   BSOR3     MOVE TO LOWER AND OR IN IDENTIFY MESSAGE  000401  000200    0              DATA      200            IDENTIFY MESSAGE (NO DISCONNECT)  000402  103777    0              PCI       TO   AND3      KEEP ONLY THE LUN AND IDENTIFY  000403  000217    0              DATA      217  000404  013303    0              R3        TO   D26       SEND IDENTIFY MESSAGE                    0  000405  141425    0     IDENT2:  D25       TO   R3        WAIT FOR REQ  000406  123777    0              PCI       TO   TAND3  000407  000200    0              DATA      REQ  000410  154674    0              RE(IDENT2) TO  RTZE                    0  000411  141425    0              D25       TO   R3        SEE IF WE'RE IN COMMAND PHASE OR STATUS PHASE  000412  103777    0              PCI       TO   AND3      KEEP ONLY THE SIGNAL LINES  000413  000573    0              DATA      SIGMSK  000414  127777    0              PCI       TO   TSUB3     SEE IF STATUS PHASE  000415  000502    0              DATA      PSTAT  000416  156610    0              RE(ISSRD) TO   RTNZ      NO, WE SUCCESSFULLY CONNECTED - ISSUE READ COMMAND                    0  000417  145301    0              R1        TO   R12       STASH R1 INTO R12 AGAIN IN CASE OF RETRY  000420  141427    0              D27       TO   R3        READ THE STATUS TO CLEAR THE BUS  000421  127777    0              PCI       TO   TSUB3     SEE IF THE DEVICE IS BUSY  000422  004000    0              DATA      DEVBSY  000423  154777    0              PCI       TO   RTZE      IF SO, TRY TO CONNECT AGAIN  000424  177660    0              DATA      ARBITE-.-1                    0  000425  024207    0     IDERR:   IM(7)     TO   D50       AND BEEP FOREVER  000426  154276    0              IM(-2)    TO   RTRA            New England Digital ABLE Series Assembler                 page 10     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        ISSUE EXTENDED READ COMMAND                    0     *                            0     *        AT THIS POINT:                    0     *        	R0  = LS SECTOR                    0     *        	R1  = MEMORY LOCATION TO READ TO                    0     *        	R2  = WORDS (RFIRST, RRESTN, RREST) OR SECTORS (RSWAP) TO READ                    0     *        	R3  = FREE                    0     *        	R16 = DEVICE ADDRESS (LUN, BOARD, TARGET)                    0     *        	R10 = READ STATE (RCAT, RFIRST, ETC.)                    0     *        	R5  = MS SECTOR (EXCEPT IF STATE == RCAT)                    0     *        	R15 = NEGATVE NUMBER OF SECTORS REMAINING ON DISK                    0     *        	  000427  013377    0     ISSRD:   PCI       TO   D26       ISSUE EXTENDED READ  000430  000050    0              DATA      EXTRD          EXTENDED READ  000431  141716    0              R16       TO   R3        PICK UP LUN  000432  103777    0              PCI       TO   AND3      JUST THE LUN  000433  007400    0              DATA      7400  000434  133600    0              IM(0)     TO   SHRA3     SHR 8-5 (MOVE INTO PLACE)  000435  133600    0              IM(0)     TO   SHRA3  000436  133600    0              IM(0)     TO   SHRA3  000437  013303    0              R3        TO   D26       SEND THE LUN  000440  101710    0              R10       TO   LOA3      PICK UP READ STATE  000441  127600    0              IM(RCAT)  TO   TSUB3     SEE IF READ CATALOG STATE  000442  156602    0              RE(ISSRD3) TO  RTNZ      NO  000443  013600    0              IM(0)     TO   D27       MS STARTING SECTOR IS ZERO FOR CATALOG  000444  154201    0              RE(ISSRD4) TO  RTRA  000445  013705    0     ISSRD3:  R5        TO   D27       SEND MS STARTING SECTOR  000446  013700    0     ISSRD4:  R0        TO   D27       SEND LS STARTING SECTOR  000447  013200    0              IM(0)     TO   D26       RESERVED  000450  127601    0              IM(RFIRST) TO  TSUB3     SEE IF READ FIRST SECTOR STATE  000451  154615    0              RE(ISSRD1) TO  RTZE      YES, LENGTH IS ONE (### ASSUMES RFIRST = 1!!! ###)  000452  127604    0              IM(RSWAP) TO   TSUB3     SEE IF READING SWAP FILE  000453  141702    0              R2        TO   R3        PICK UP WORDS (OR SECTORS) TO COPY  000454  154605    0              RE(ISSRD2) TO  RTZE      WE'RE READING THE SWAP FILE - R2 IS IN SECTORS  000455  105777    0              PCI       TO   ADD3      ROUND UP  000456  000377    0              DATA      377  000457  131600    0              IM(0)     TO   BSOR3     DIVIDE BY 256  000460  103777    0              PCI       TO   AND3  000461  000377    0              DATA      377                    0  000462  125715    0     ISSRD2:  R15       TO   TADD3     SEE IF WE'RE GOING PAST THE END OF THIS DISK  000463  157203    0              RE(ISSRD1) TO  RTNC      WE'RE OKAY  000464  154602    0              RE(ISSRD1) TO  RTZE  000465  117715    0              R15       TO   LCM3      RESTRICT LENGTH TO AMOUNT LEFT ON DISK  000466  105601    0              IM(1)     TO   ADD3                    0  000467  013703    0     ISSRD1:  R3        TO   D27       SEND NUMBER OF SECTORS                    0     *                            0     *        INFORM INTERPRETER WHAT'S ABOUT TO GO DOWN...                    0     *          000470  156224    0              IM(24)    TO   RTNV      INVOKE NATIVE ROUTINE #20                    0     *                            0     *        NOW START THE SCSI COMMAND                    0     *          000471  013200    0              IM(0)     TO   D26       AND A NULL CONTROL BYTE                    0     *                            0     *        WAIT RIGHT HERE FOR FIRST REQ.  IF WE GO DIRECTLY TO STATUS PHASE, PRESUMABLY DEVICE                    0     *        HAS A UNIT ATTENTION FOR US.  JUST RE-ISSUE THE COMMAND IN THIS CASE.                    0     *                            0     *        WE COULD CHECK FOR NOT READY AND ISSUE A START-UNIT IF WE HAD THE INCLINATION                    0     *        TO DO SO...                    0     *          000472  141425    0     ISSRD5:  D25       TO   R3        GET SIGNAL BUS STATUS  000473  123777    0              PCI       TO   TAND3     WAIT FOR REQ  000474  000200    0              DATA      REQ  000475  154674    0              RE(ISSRD5) TO  RTZE                    0  000476  103777    0              PCI       TO   AND3      KEEP ONLY THE SIGNAL LINES  000477  000573    0              DATA      SIGMSK  000500  127777    0              PCI       TO   TSUB3     SEE IF DATA IN PHASE  000501  000402    0              DATA      PDATIN  000502  154611    0              RE(RDSCSI) TO  RTZE      IF SO, BEGIN READ...                    0  000503  141427    0              D27       TO   R3        GET PRESUMED STATUS PHASE  000504  141777    0              PCI       TO   R3  000505  000144    0              DATA      144            New England Digital ABLE Series Assembler                 page 11     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS  000506  001600    0     ISSRD6:  IM(0)     TO   D3        CHILLL...  000507  107601    0              IM(1)     TO   SUB3  000510  156675    0              RE(ISSRD6) TO  RTNZ  000511  145301    0              R1        TO   R12       STASH ADDRESS IN R12 AGAIN  000512  154377    0              PCI       TO   RTRA  000513  177571    0              DATA      ARBITE-.-1     AND BACK TO ARBITRATE            New England Digital ABLE Series Assembler                 page 12     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        NOW READ DATA FROM THE SCSI WINCHESTER                    0     *          000514  141425    0     RDSCSI:  D25       TO   R3        GET SIGNAL BUS STATUS  000515  123777    0              PCI       TO   TAND3     WAIT FOR REQ  000516  000200    0              DATA      REQ  000517  154674    0              RE(RDSCSI) TO  RTZE                    0  000520  103777    0              PCI       TO   AND3      KEEP ONLY THE SIGNAL LINES  000521  000573    0              DATA      SIGMSK  000522  127777    0              PCI       TO   TSUB3     SEE IF DATA IN PHASE  000523  000402    0              DATA      PDATIN  000524  156777    0              PCI       TO   RTNZ      NOT ANYMORE - WE'RE DONE  000525  000113    0              DATA      WIN3-.-1                    0     *                            0     *        HANDLE DATA IN PHASE - READ DATA  000526  104201    0              IM(1)     TO   ADD0      INCREMENT PHYSICAL SECTOR NUMBER  000527  157201    0              IM(1)     TO   RTNC      IF NO NEED TO INCREMENT MSB  000530  152325    0              R5I       TO   ATNV      INCREMENT MSB IF NECESSARY                    0  000531  101710    0              R10       TO   LOA3      PICK UP READ STATE  000532  127604    0              IM(RSWAP) TO   TSUB3     ARE WE READING THE SWAP FILE?  000533  156615    0              RE(WIN10) TO   RTNZ      NO, READ THE NEXT SECTOR OF THE OBJECT FILE                    0     *                            0     *        READ DATA FROM SCSI WINCHESTER TO EXTERNAL MEMORY                    0     *          000534  141717    0              R17       TO   R3        GET WHERE WE ARE EXECUTING  000535  105612    0              IM(WIN12-.) TO ADD3      ADD IN OFFSET TO WIN12  000536  156225    0              IM(25)    TO   RTNV      HAVE INTERPRETER HYPERSPACE TO WIN12 IF RUNNING (AND INCREMENTING D60/61)                    0  000537  141777    0              PCI       TO   R3        READ ONE SECTOR IN (HIGH SPEED?) LOOP  000540  000100    0              DATA      100  000541  031427    0     WIN11:   D27       TO   D63       TO THE EXTENDED MEMORY  000542  031427    0              D27       TO   D63  000543  031427    0              D27       TO   D63  000544  031427    0              D27       TO   D63  000545  107601    0              IM(1)     TO   SUB3      COUNT THE 16-WORD BLOCKS  000546  156672    0              RE(WIN11) TO   RTNZ      READ UNTIL DONE                    0  000547  107201    0     WIN12:   IM(1)     TO   SUB2      JUST READ ANOTHER SECTOR  000550  154217    0              RE(WIN8)  TO   RTRA      GET READY FOR NEXT SECTOR                    0     *                            0     *        READ DATA FROM WINCHESTER TO MEMORY                    0     *                            0     WIN10:   WIN10  000551  141717    0              R17       TO   R3        GET WHERE WE ARE EXECUTING  000552  105612    0              IM(WIN13-.) TO ADD3      ADD IN OFFSET TO WIN13  000553  156226    0              IM(26)    TO   RTNV      HAVE INTERPRETER HYPERSPACE TO WIN13 IF RUNNING (AND INCREMENTING R1)                    0  000554  141777    0              PCI       TO   R3        SET COUNTER  000555  000100    0              DATA      100                    0  000556  170427    0     WIN9:    D27       TO   MR1I      READ  000557  170427    0              D27       TO   MR1I      4 WORDS  000560  170427    0              D27       TO   MR1I      64   000561  170427    0              D27       TO   MR1I      TIMES = 256 WORDS = 1 SECTOR  000562  107601    0              IM(1)     TO   SUB3      COUNTER  000563  156672    0              RE(WIN9)  TO   RTNZ      GO BACK                    0     *          000564  107377    0     WIN13:   PCI       TO   SUB2      CHECK LENGTH FIELD  000565  000400    0              DATA      400            BY 256  000566  155201    0              IM(1)     TO   RTRC  000567  141200    0              IM(0)     TO   R2        IF LESS THAN 256 SET LENGTH TO ZERO            New England Digital ABLE Series Assembler                 page 13     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        FINISH SECTOR READ - PREPARE FOR NEXT SECTOR                    0     *          000570  121302    0     WIN8:    R2        TO   TLOA2     SEE IF DONE WITH READ  000571  154777    0              PCI       TO   RTZE      IF DONE, PREPARE TO EXIT  000572  000046    0              DATA      WIN3-.-1  000573  101710    0              R10       TO   LOA3      CHECK THE READ STATE  000574  127601    0              IM(RFIRST) TO  TSUB3     ARE WE READING THE FIRST SECTOR?  000575  156630    0              RE(WIN4)  TO   RTNZ      NO, KEEP GOING  000576  143737    0              R17I      TO   R7        WE ARE IN STATE RFIRST - PROCEED TO NEXT STATE  000577  154231    0              RE(WIN4A) TO   RTRA      <= RETURN HERE (SKIP THE CALL - FALL THROUGH)                    0     *                            0     *        END OF RFIRST STATE - R11 POINTS TO THE SECTOR WE JUST READ IN; R7 IS RETURN                    0     *          WHEN WE RETURN, R2 WILL BE THE REMAINING LENGTH OF THE OBJECT FILE OR WILL                    0     *          BE SET TO ZERO IF FILE WAS 1 SECTOR IN LENGTH                    0     *          AND R10 WILL BE THE NEW STATE.                    0     *                            0     *        TO CALL THIS SUBROUTINE:                    0     *          R17I      TO R7 SAVE RETURN IN R7                    0     *          RE(RETRN) TO RTRA <= RETURN HERE!                    0     *          RE(ENDRF) TO RTRA CALL THIS ROUTINE                    0     *          RETRN: ...                    0     *          000600  144202    0     ENDRF:   IM(RRESTN) TO  R10       CHANGE STATE TO READ REST OF OBJECT - ASSUME NO CONFIGURATION  000601  141751    0              MR11      TO   R3        CHECK FOR VALID XPL CONFIG - GET FIRST WORD OF PROGRAM  000602  127777    0              PCI       TO   TSUB3     MAKE SURE IT MATCHES THE FIRST INSTRUCTION OF ALL XPL PROGRAMS  000603  100377    0              PCI       TO   LOA0      <<---- THIS IS THE FIRST INSTRUCTION OF ALL XPL PROGRAMS ---->>  000604  152707    0              R7        TO   ATNZ      DOESN'T MATCH - NO CONFIG                    0  000605  141601    0              IM(CONTAB) TO  R3        POINT TO POINTER TO CONFIG TABLE  000606  105711    0              R11       TO   ADD3      ADD IN ADDRESS WHERE WE READ THIS SECTOR  000607  101743    0              MR3       TO   LOA3      POINT TO CONFIG TABLE  000610  150707    0              R7        TO   ATZE      ZERO - NO CONFIG  000611  127603    0              IM(3)     TO   TSUB3     THE POINTER MUST BE GREATER THAN THREE  000612  153307    0              R7        TO   ATNC      NOT GREATER THAN THREE (ILE TEST) - NO CONFIG  000613  127777    0              PCI       TO   TSUB3     MAKE SURE POINTER'S IN RANGE  000614  000230    0              DATA      400-TABLEN     HAS TO FIT WITHIN FIRST SECTOR  000615  151307    0              R7        TO   ATRC      OUT OF RANGE - INVALID CONFIG                    0  000616  105604    0              IM(OBJLEN) TO  ADD3      POINT TO OBJECT LENGTH IN CONFIG  000617  141343    0              MR3       TO   R2        PICK UP ACTUAL OBJECT FILE LENGTH  000620  107377    0              PCI       TO   SUB2      BUT SUBTRACT OUT THE SECTOR WE JUST READ  000621  000400    0              DATA      400  000622  155201    0              IM(1)     TO   RTRC      CHECK FOR 1 SECTOR FILES  000623  101200    0              IM(0)     TO   LOA2      SET 1 SECTOR FILE LENGTH TO ZERO (THE SECTOR HAS BEEN READ)  000624  144203    0              IM(RREST) TO   R10       CHANGE STATE TO READ REST OF OBJECT - VALID CONFIG  000625  150307    0              R7        TO   ATRA      RETURN HERE                    0     *                            0     *        CHECK FOR END OF DISK                    0     *          000626  120335    0     WIN4:    R15I      TO   TLOA0     CHECK FOR END OF DISK  000627  156777    0              PCI       TO   RTNZ      IF NOT, THEN GO BACK AND READ NEXT SECTOR  000630  177663    0              DATA      RDSCSI-.-1  000631  141427    0     WIN4A:   D27       TO   R3        PICK UP READ STATUS  000632  103777    0              PCI       TO   AND3      EXTRACT JUST THE STATUS  000633  007400    0              DATA      STAMSK  000634  156602    0              RE(WIN5)  TO   RTNZ      BAD STATUS - DIE  000635  154377    0     WIN4B:   PCI       TO   RTRA      OKAY STATUS, SELECT THE NEXT DRIVE AND CONTINUE READING  000636  177315    0              DATA      WINSEL-.-1                    0  000637  024207    0     WIN5:    IM(7)     TO   D50       BEEP FOREVER  000640  154276    0              RE(WIN5)  TO   RTRA            New England Digital ABLE Series Assembler                 page 14     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        DONE WITH THE READ - CHECK STATUS                    0     *          000641  141427    0     WIN3:    D27       TO   R3        PICK UP READ STATUS  000642  103777    0              PCI       TO   AND3      EXTRACT JUST THE STATUS  000643  007400    0              DATA      STAMSK  000644  156672    0              RE(WIN5)  TO   RTNZ      BAD STATUS - DIE  000645  101710    0              R10       TO   LOA3      TEST READ STATE  000646  154777    0              PCI       TO   RTZE      ZERO MEANS SEARCHING FOR A FILE (READING THE CATALOG)  000647  000121    0              DATA      (CAT-.-1)  000650  127601    0              IM(RFIRST) TO  TSUB3     READ FIRST SECTOR OF OBJECT FILE?  000651  156605    0              RE(WIN3A) TO   RTNZ      NO, KEEP LOOKING  000652  143737    0              R17I      TO   R7        SET UP TO CALL END OF RFIRST STATE ROUTINE (SAVE RETURN IN R7)  000653  154202    0              RE(WIN3B) TO   RTRA      <= RETURN HERE  000654  154377    0              PCI       TO   RTRA      CALL END OF RFIRST STATE ROUTINE  000655  177722    0              DATA      (ENDRF-.-1)                    0  000656  141710    0     WIN3B:   R10       TO   R3        MOVE THE NEW STATE INTO R3                    0  000657  127602    0     WIN3A:   IM(RRESTN) TO  TSUB3     READ REST OF OBJECT FILE, NO CONFIG?  000660  150711    0              R11       TO   ATZE      YES, WE'RE ALL SET - START UP TARGET PROGRAM HERE  000661  127603    0              IM(RREST) TO   TSUB3     READ REST OF OBJECT FILE, VALID CONFIG?  000662  156777    0              PCI       TO   RTNZ      NO, GO COPY CONFIG  000663  000050    0              DATA      (ERSWAP-.-1)  000664  121302    0              R2        TO   TLOA2     CHECK TO SEE IF WE'VE COPIED IT ALL  000665  156647    0              RE(WIN4B) TO   RTNZ      NO, GO COPY MORE   000666  143737    0              R17I      TO   R7        SET UP TO CALL END OF RREST ROUTINE (SAVE RETURN IN R7)  000667  154245    0              RE(WIN4B) TO   RTRA      <= RETURN HERE (SKIP THE CALL - FALL THROUGH)                    0     *                            0     *        END OF STATE RREST - PREPARE TO READ IN THE SWAP FILE; R1, R2, AND R3 ARE FREE                    0     *          R11 POINTS TO THE OBJECT FILE JUST READ IN; R7 IS THE RETURN                    0     *          WHEN WE RETURN, R2 WILL CONTAIN THE SECTOR LENGTH OF THE SWAP FILE AND                    0     *          BOTH D60 AND R4 WILL CONTAIN THE ADDRESS OF THE SWAP FILE.                    0     *                            0     *        NOTE:  IF THERE IS NO SWAP FILE, THIS ROUTINE DOES NOT RETURN!                    0     *                            0     *        TO CALL THIS SUBROUTINE:                    0     *          R17I      TO R7 SAVE RETURN IN R7                    0     *          RE(RETRN) TO RTRA <= RETURN HERE!                    0     *          RE(ENDRR) TO RTRA CALL THIS ROUTINE                    0     *          RETRN: ...                    0     *          000670  141601    0     ENDRR:   IM(CONTAB) TO  R3        POINT TO POINTER TO CONFIGURATION  000671  105711    0              R11       TO   ADD3      ADD IN BASE OF OBJECT FILE  000672  101743    0              MR3       TO   LOA3      PICK UP CONFIGURATION POINTER  000673  105606    0              IM(SWPLEN) TO  ADD3      POINT TO SWAP FILE LENGTH  000674  142303    0              R3        TO   R4  000675  101343    0              MR3       TO   LOA2      PICK UP LENGTH (IN SECTORS)  000676  154636    0              RE(CPYFIG) TO  RTZE      NO SWAP FILE - GET OUT                    0  000677  141717    0              R17       TO   R3        GET CURRENT LOCATION  000700  105777    0              PCI       TO   ADD3      POINT TO EXTERNAL MEMORY SIZE IN HIGHCORE  000701  000514    0              DATA      (MEMDIF-EMSIZE-(.-1))  000702  100743    0              MR3       TO   LOA1      PICK UP EXTENDED MEMORY SIZE  000703  156602    0              IM(2)     TO   RTNZ      NON-ZERO - WE HAVE EXTENDED MEMORY  000704  024207    0     SWERR:   IM(7)     TO   D50       NO EXTENDED MEMORY OR SWAP FILE TOO LARGE  000705  154276    0              RE(SWERR) TO   RTRA      BEEP FOREVER  000706  141701    0              R1        TO   R3  000707  106702    0              R2        TO   SUB1      FIND STARTING SECTOR FOR SWAP FILE IN EXTENDED MEMORY (FROM TOP)  000710  155673    0              RE(SWERR) TO   RTMI      TOO LARGE                    0                    0     *        R1 TO R4 SAVE SWAP FILE START                    0  000711  030302    0              R2        TO   D60       R2 = LENGTH OF SWAP FILE; STORE IN D60 TEMPORARILY (UGH!!!)  000712  141311    0              R11       TO   R2        PICK UP POINTER TO WHERE OBJ FILE SITS IN MEMORY (E.G. 0)  000713  105201    0              IM(1)     TO   ADD2      PLUS 1 - E.G. CONFIG POINTER  000714  101342    0              MR2       TO   LOA2      PICK UP CONFIG POINTER; WHY; WE JUST GOT IT UP ABOVE  000715  105221    0              IM(21)    TO   ADD2      OFFSET TO WORD 17. - PICK UP OPTIONS WORD  000716  101342    0              MR2       TO   LOA2      PICK UP OPTIONS WORD  000717  131200    0              IM(0)     TO   BSOR2     BRING TO LOWER HALF  000720  103207    0              IM(7)     TO   AND2      EXTRACT 3 BITS - THESE ARE THE PROCESSOR TYPE - 0: MODEL A, 1: MODEL B, 2: MODEL C  000721  127203    0              IM(3)     TO   TSUB2     LOOK FOR MODELS A-C: LEAVE SWAP FILE LENGTH INTACT (E.G. SKIP)  000722  155604    0              IM(4)     TO   RTMI      NON-MODEL D: LEAVE SWAP FILE LENGTH AS IS  000723  102777    0              PCI       TO   AND1      MODEL D ONLY: AND START OF SWAP FILE IN EXT MEMORY  000724  174000    0              DATA      (174000)       DOWN TO M512K CARD BOUNDARY  000725  107701    0              R1        TO   SUB3      SUBTRACT THAT FROM EXAMOUNT - E.G. ROUND SWAP FILE LENGTH UP!!!  000726  162303    0              R3        TO   MR4       STORE ROUNDED UP SECTOR LENGTH OF SWAP FILE            New England Digital ABLE Series Assembler                 page 15     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS  000727  141060    0              D60       TO   R2        RESTORE R2 (UGH!!!)                    0  000730  142301    0              R1        TO   R4        SAVE POINTER TO SWAP FILE DESTINATION IN R4; FOR STARTUP CODE  000731  030301    0              R1        TO   D60       LOAD MAM POINTER WHERE TO PUT STUFF                    0  000732  144204    0              IM(RSWAP) TO   R10       CHANGE STATE TO READ SWAP FILE  000733  150307    0              R7        TO   ATRA      AND GO READ IN THE SWAP FILE (RETURN)            New England Digital ABLE Series Assembler                 page 16     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        END OF RSWAP - RESET D60 (EARLY BOARDS WOULD CRASH TO D61 AFTER LOADING)                    0     *          000734  030304    0     ERSWAP:  R4        TO   D60       RESET D60 TO START OF SWAP FILE                    0     *                            0     *        COPY CONFIGURATION                    0     *          000735            0     CPYFIG:  ...                      VALIDATE/COPY THE CONFIGURATION AND START UP THE PROGRAM  000735  141717    0              R17       TO   R3        GET CURRENT LOCATION  000736  105777    0              PCI       TO   ADD3      POINT TO THE MAGIC NUMBER IN HIGHCORE  000737  000616    0              DATA      (MEMDIF-MAGIC-(.-1))  000740  141743    0              MR3       TO   R3        PICK UP MAGIC NUMBER FROM HIGHCORE  000741  127777    0              PCI       TO   TSUB3     MAKE SURE IT'S CORRECT  000742  030071    0              DATA      30071          THIS IS 12345 DECIMAL  000743  152711    0              R11       TO   ATNZ      IF NOT, DON'T COPY CONFIG (AS HIGHCORE ISN'T THERE)                    0  000744  140601    0              IM(CONTAB) TO  R1        POINT TO POINTER TO CONFIG TABLE  000745  104711    0              R11       TO   ADD1      OFFSET POINTER FROM START OF OBJECT FILE  000746  100741    0              MR1       TO   LOA1      POINT TO CONFIG TABLE  000747  104614    0              IM(CURTRK) TO  ADD1      POINT TO HEAD POSITION POINTER                    0  000750  141317    0              R17       TO   R2        GET CURRENT LOCATION  000751  105377    0              PCI       TO   ADD2      POINT TO HIGHCORE HEAD POSITIONS  000752  000444    0              DATA      (MEMDIF-HDPOS-(.-1))  000753  160702    0              R2        TO   MR1       UPDATE LOWCORE HEAD POS POINTER TO POINT TO HIGHCORE                    0     *                            0     *        COPY THE CONFIGURATION                    0     *          000754  140601    0              IM(CONTAB) TO  R1        POINT TO CONFIGURATION POINTER  000755  104711    0              R11       TO   ADD1      ADD IN OBJECT FILE BASE  000756  140741    0              MR1       TO   R1        PICK UP CONFIGURATION POINTER  000757  104620    0              IM(CONINF) TO  ADD1      POINT TO THE FIRST WORD TO COPY  000760  141317    0              R17       TO   R2        GET OUR CURRENT POSITION  000761  105377    0              PCI       TO   ADD2      AND POINT TO THE HIGHCORE CONFIGURATION TABLE  000762  000440    0              DATA      (MEMDIF-CTABOF-(.-1))  000763  140377    0              PCI       TO   R0        GET NUMBER OF WORDS TO COPY  000764  000130    0              DATA      TABLEN-CONINF  000765  170762    0              MR2I      TO   MR1I      AND COPY THE CONFIGURATION  000766  106201    0              IM(1)     TO   SUB0      SEE IF WE'RE DONE  000767  156675    0              IM(-3)    TO   RTNZ      NOT DONE YET  000770  150311    0              R11       TO   ATRA      DONE - START UP PROGRAM            New England Digital ABLE Series Assembler                 page 17     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        LOOK FOR FILE NAME                    0     *          000771  140200    0     CAT:     IM(0)     TO   R0        INITIALIZE COUNT                    0  000772  140700    0     CAT1:    R0        TO   R1        R0 CONTAINS OFFSET OF FILE ENTRY IN CATALOG  000773  141361    0              MR1I      TO   R2        GET DATA  000774  107304    0              R4        TO   SUB2  000775  156625    0              RE(CAT2)  TO   RTNZ      NOT US  000776  141361    0              MR1I      TO   R2        GET DATA  000777  107305    0              R5        TO   SUB2  001000  156622    0              RE(CAT2)  TO   RTNZ  001001  141361    0              MR1I      TO   R2        GET DATA  001002  107306    0              R6        TO   SUB2      EQUAL  001003  156617    0              RE(CAT2)  TO   RTNZ      NOT US  001004  141361    0              MR1I      TO   R2        GET DATA  001005  107307    0              R7        TO   SUB2      EQUAL  001006  156614    0              RE(CAT2)  TO   RTNZ      NOT US  001007  140361    0              MR1I      TO   R0        GET BASE SECTOR  001010  104601    0              IM(1)     TO   ADD1      SKIP NEXT  001011  141361    0              MR1I      TO   R2        AND GET FILE LENGTH = NUMBER OF WORDS TO READ  001012  140741    0              MR1       TO   R1        GET MS SECTOR/MS SECTOR LENGTH/TYPE  001013  130600    0              IM(0)     TO   BSOR1     MOVE MS SECTOR TO LOWER  001014  102777    0              PCI       TO   AND1      AND KEEP KUST THE MS SECTOR  001015  000377    0              DATA      377  001016  142701    0              R1        TO   R5        SAVE IT  001017  140600    0              IM(0)     TO   R1        AND START AT MEMORY LOCATION 0  001020  144201    0              IM(RFIRST) TO  R10       SET STATE TO READ FIRST SECTOR OF OBJECT FILE  001021  154377    0              PCI       TO   RTRA      GO READ IN THE FILE  001022  177130    0              DATA      DSKRD-.-1                    0  001023  104210    0     CAT2:    IM(10)    TO   ADD0      INCREMENT MEMORY POINTER  001024  126377    0              PCI       TO   TSUB0     SEE IF DONE  001025  002000    0              DATA      CATLEN         LENGTH OF THE WINCHESTER CATALOG  001026  156643    0              RE(CAT1)  TO   RTNZ      IF NOT DONE,  GO BACK  001027  024207    0              IM(7)     TO   D50  001030  154276    0              IM(-2)    TO   RTRA            New England Digital ABLE Series Assembler                 page 18     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        CORE-TO-CORE COPY:                    0     *          R0: SOURCE ADDRESS                    0     *          R1: DESTINATION ADDRESS                    0     *          R2: LENGTH                    0     *          001031  144701    0     CCOPY2:  R1        TO   R11       MOVE STARTING ADDRESS FOR LATER TRANSFER  001032  144201    0              IM(RFIRST) TO  R10       SET STATE TO READ FIRST SECTOR                    0  001033  141777    0              PCI       TO   R3        READ IN FIRST SECTOR  001034  000400    0              DATA      400                    0  001035  107303    0              R3        TO   SUB2      SAVE AMOUNT REMAINING TO BE COPIED (AFTER FIRST SECTOR)  001036  155201    0              RE(CCOPY3) TO  RTRC  001037  141200    0              IM(0)     TO   R2        NO WORDS LEFT TO COPY, SET TO ZERO                    0  001040  170760    0     CCOPY3:  MR0I      TO   MR1I      COPY ONE WORD AT A TIME  001041  107601    0              IM(1)     TO   SUB3      KEEP TRACK OF HOW MUCH WE'VE COPIED  001042  156675    0              RE(CCOPY3) TO  RTNZ      LOOP UNTIL COUNTER EQUALS ZERO                    0  001043  141710    0              R10       TO   R3        CHECK STATE  001044  127601    0              IM(RFIRST) TO  TSUB3     READING FIRST SECTOR?  001045  156606    0              RE(CCOPY8) TO  RTNZ                    0  001046  143737    0              R17I      TO   R7        CALL END OF RFIRST ROUTINE (SAVE RETURN IN R7)  001047  154202    0              RE(CCOPY4) TO  RTRA      <= RETURN HERE  001050  154377    0              PCI       TO   RTRA      AND CALL END OF RFIRST ROUTINE  001051  177526    0              DATA      (ENDRF-.-1)                    0  001052  101702    0     CCOPY4:  R2        TO   LOA3      SET REMAINING LENGTH  001053  156664    0              RE(CCOPY3) TO  RTNZ      BEGIN COPYING REMAINING CODE                    0  001054  141710    0     CCOPY8:  R10       TO   R3        MOVE THE NEW STATE INTO R3  001055  127603    0              IM(RREST) TO   TSUB3     DID WE JUST READ THE REST OF THE OBJECT FILE (WITH VALID CONFIG)?  001056  152711    0              R11       TO   ATNZ      NO, START UP THE PROGRAM HERE (STATES RFIRST AND RRESTN)  001057  143737    0              R17I      TO   R7        CALL END OF RREST ROUTINE (SAVE RETURN IN R7)  001060  154202    0              RE(CCOPY5) TO  RTRA      <= RETURN HERE (IF WE RETURN)  001061  154377    0              PCI       TO   RTRA      AND CALL END OF RREST ROUTINE  001062  177605    0              DATA      (ENDRR-.-1)                    0  001063  121760    0     CCOPY5:  MR0I      TO   TLOA3     FIND THE END OF THE LAST SECTOR OF THE OBJECT FILE  001064  154676    0              RE(CCOPY5) TO  RTZE      ENDS WHEN WE FIND A NON-ZERO WORD  001065  106201    0              IM(1)     TO   SUB0      AND BACK UP R0 (WE OVERSTEPPED BY ONE)                    0  001066  141777    0     CCOPY6:  PCI       TO   R3        SET WORD COUNTER  001067  000400    0              DATA      400            TO ONE SECTOR  001070  031760    0     CCOPY7:  MR0I      TO   D63       COPY THE NEXT WORD  001071  107601    0              IM(1)     TO   SUB3      DECREMENT WORD COUNT  001072  156675    0              RE(CCOPY7) TO  RTNZ      LOOP UNTIL THE WHOLE SECTOR IS COPIED  001073  107201    0              IM(1)     TO   SUB2      DECREMENT SECTOR COUNT  001074  156671    0              RE(CCOPY6) TO  RTNZ      LOOP UNTIL WHOLE SWAP FILE COPIED  001075  154377    0              PCI       TO   RTRA      AND GO TO IT  001076  177635    0              DATA      (ERSWAP-.-1)            New England Digital ABLE Series Assembler                 page 19     HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS                    0              EJECT                    0     *                            0     *        EXTERNAL MEMORY-TO-CORE COPY:                    0     *          R0: SOURCE SECTOR IN EXTERNAL MEMORY                    0     *          R1: DESTINATION ADDRESS IN MAIN MEMORY                    0     *          R2: LENGTH TO COPY                    0     *          001077  144701    0     ECOPY2:  R1        TO   R11       MOVE STARTING ADDRESS FOR LATER TRANSFER  001100  030300    0              R0        TO   D60       SEND STARTING SECTOR NUMBER TO EXTERNAL MEMORY  001101  144201    0              IM(RFIRST) TO  R10       SET STATE TO READ FIRST SECTOR                    0  001102  141777    0              PCI       TO   R3        READ IN FIRST SECTOR  001103  000400    0              DATA      400                    0  001104  107303    0              R3        TO   SUB2      SAVE AMOUNT REMAINING TO BE COPIED (AFTER FIRST SECTOR)  001105  155201    0              RE(ECOPY3) TO  RTRC  001106  141200    0              IM(0)     TO   R2        NO WORDS LEFT TO COPY, SET TO ZERO                    0  001107  170463    0     ECOPY3:  D63       TO   MR1I      COPY ONE WORD AT A TIME  001110  107601    0              IM(1)     TO   SUB3      KEEP TRACK OF HOW MUCH WE'VE COPIED  001111  156675    0              RE(ECOPY3) TO  RTNZ      LOOP UNTIL COUNTER EQUALS ZERO                    0  001112  141710    0              R10       TO   R3        CHECK STATE  001113  127601    0              IM(RFIRST) TO  TSUB3     READING FIRST SECTOR?  001114  156606    0              RE(ECOPY8) TO  RTNZ      COPY COMPLETED?                    0  001115  143737    0              R17I      TO   R7        CALL END OF RFIRST ROUTINE (SAVE RETURN IN R7)  001116  154202    0              RE(ECOPY4) TO  RTRA      <= RETURN HERE  001117  154377    0              PCI       TO   RTRA      AND CALL END OF RFIRST ROUTINE  001120  177457    0              DATA      (ENDRF-.-1)                    0  001121  101702    0     ECOPY4:  R2        TO   LOA3      SET REMAINING LENGTH  001122  156664    0              RE(ECOPY3) TO  RTNZ      BEGIN COPYING REMAINING CODE                    0  001123  141710    0     ECOPY8:  R10       TO   R3        MOVE THE NEW STATE INTO R3  001124  127603    0              IM(RREST) TO   TSUB3     DID WE JUST READ THE REST OF THE OBJECT FILE (WITH VALID CONFIG)?  001125  152711    0              R11       TO   ATNZ      NO, START UP THE PROGRAM HERE (STATES RFIRST AND RRESTN)                    0  001126  140301    0              R1        TO   R0        SAVE MEMORY POINTER  001127  141460    0              D60       TO   R3        MOVE TO THE END OF THE LAST SECTOR OF THE OBJECT FILE  001130  121461    0              D61       TO   TLOA3     SEE IF NON-ZERO WORD POINTER  001131  154601    0              IM(1)     TO   RTZE      IT'S ZERO  001132  105601    0              IM(1)     TO   ADD3      NONZERO, POINT TO NEXT SECTOR  001133  145303    0              R3        TO   R12       SAVE START OF SWAP FILE (ENDRR TRASHES D60)  001134  143737    0              R17I      TO   R7        CALL END OF RREST ROUTINE (SAVE RETURN IN R7)  001135  154202    0              RE(ECOPY5) TO  RTRA      <= RETURN HERE (IF WE RETURN)  001136  154377    0              PCI       TO   RTRA      AND CALL END OF RREST ROUTINE  001137  177530    0              DATA      (ENDRR-.-1)                    0  001140  145460    0     ECOPY5:  D60       TO   R13       SET DESTINATION SECTOR ADDRESS ASIDE  001141  030312    0              R12       TO   D60       POINT BACK TO THE START OF THE SWAP FILE IN EXTENDED MEMORY  001142  140700    0              R0        TO   R1        SET MEMORY POINTER                    0  001143  141777    0              PCI       TO   R3        SET WORD COUNTER  001144  000400    0              DATA      400            TO ONE SECTOR  001145  170463    0     ECOPY6:  D63       TO   MR1I      COPY THE NEXT WORD  001146  107601    0              IM(1)     TO   SUB3      DECREMENT WORD COUNT  001147  156675    0              RE(ECOPY6) TO  RTNZ      LOOP UNTIL THE WHOLE SECTOR IS COPIED                    0  001150  145060    0              D60       TO   R12       SAVE NEW SOURCE SECTOR ADDRESS  001151  030313    0              R13       TO   D60       SET DESTINATION SECTOR ADDRESS  001152  140700    0              R0        TO   R1        SET MEMORY POINTER                    0  001153  141777    0              PCI       TO   R3        SET WORD COUNTER  001154  000400    0              DATA      400            TO ONE SECTOR  001155  031761    0     ECOPY7:  MR1I      TO   D63       COPY THE NEXT WORD  001156  107601    0              IM(1)     TO   SUB3      DECREMENT WORD COUNT  001157  156675    0              RE(ECOPY7) TO  RTNZ      LOOP UNTIL THE WHOLE SECTOR IS COPIED                    0  001160  107201    0              IM(1)     TO   SUB2      DECREMENT SECTOR COUNT  001161  156656    0              RE(ECOPY5) TO  RTNZ      LOOP UNTIL WHOLE SWAP FILE COPIED  001162  154377    0              PCI       TO   RTRA      AND GO TO IT  001163  177550    0              DATA      (ERSWAP-.-1)            New England Digital ABLE Series Assembler                 page 20     Assembly statisticsLength of object code : 001164 octalNumber of errors      : 0Total symbols defined : 127Symbol table ACK      000004    ARB6      005000    ARB7      001000    ARBIT1    000306    ARBITE    000305    ARBWON    000332 ATN      000001    BLKLEN    000004    BSY       000002    BUSFRE    000042    BUSMSK    000777    CAT       000771 CAT1     000772    CAT2      001023    CATLEN    002000    CCOPY     000005    CCOPY2    001031    CCOPY3    001040 CCOPY4   001052    CCOPY5    001063    CCOPY6    001066    CCOPY7    001070    CCOPY8    001054    CD        000100 CHKDEV   000076    CHKDV2    000102    CHKDV3    000110    CHKERR    000106    CONERR    000303    CONINF    000020 CONN1    000304    CONN2     000271    CONN3     000272    CONNECT   000260    CONTAB    000001    CPYFIG    000735 CTABOF   000357    CURDEV    000350    CURTRK    000014    DATMSK    000377    DECODE    000065    DEVBSY    004000 DRVCON   000003    DSKRD     000153    ECOPY     000010    ECOPY2    001077    ECOPY3    001107    ECOPY4    001121 ECOPY5   001140    ECOPY6    001145    ECOPY7    001155    ECOPY8    001123    EMSIZE    000364    ENDRF     000600 ENDRR    000670    ERSWAP    000734    EXTRD     000050    FBOOT     000016    FNDBL1    000117    FNDBLK    000130 HDPOS    000363    ID6       000100    ID7       000200    IDENT     000372    IDENT2    000405    IDERR     000425 IO       000400    ISSRD     000427    ISSRD1    000467    ISSRD2    000462    ISSRD3    000445    ISSRD4    000446 ISSRD5   000472    ISSRD6    000506    MAGIC     000224    MEMDIF    002000    MSG       000020    NBOOT     000027 OBJLEN   000004    OVLAY     000013    PDATIN    000402    PSTAT     000502    RCAT      000000    RDSCSI    000514 REQ      000200    RFIRST    000001    RREST     000003    RRESTN    000002    RST       000010    RSWAP     000004 SEL      000040    SELEC1    000363    SELEC2    000342    SELEC3    000343    SELECT    000356    SELENA    010000 SELMSK   007400    SETUP     000042    SIGMSK    000573    STAMSK    007400    STRDEV    000347    STREND    000227 SWERR    000704    SWPLEN    000006    SYSCYL    000002    SYSSPC    000001    SYSTYP    000000    TABLEN    000150 WIN0     000171    WIN10     000551    WIN11     000541    WIN12     000547    WIN13     000564    WIN2      000231 WIN3     000641    WIN3A     000657    WIN3B     000656    WIN4      000626    WIN4A     000631    WIN4B     000635 WIN5     000637    WIN6      000254    WIN7      000257    WIN8      000570    WIN9      000556    WINERR    000174 WINSEL   000154
TTL HIGH MEMORY PROGRAM FOR SCSI WINCHESTER SYSTEMS**  20 Nov 85: Wrote SCSI driver from original IMI driver [KJC]*   2 Jun 86: Updated for -7 catalog structure [KJC]*  12 Feb 94: Arbitrate as ID6 instead of ID7 [PFF]**Note:  The total number of sectors in the system is limited to 16,777,216.*****THIS PROGRAM RESIDES IN THE LOWER 768 OF THE UPPER 1024 WORDS OF MEMORY.*READ DATA FROM THE WINCHESTER AS REQUIRED:*RE(FBOOT) TO RTRA LOCATION 0 - LOAD 'MONITOR' FROM DRIVE ZERORE(OVLAY) TO RTRA LOCATION 1 - OVERLAY A PROGRAM (AC0=MS SECTOR, AC1=LS SECTOR, AC2=DEST, AC3=LENGTH)RE(NBOOT) TO RTRA LOCATION 2 - LOADS SPECIAL FILE NAME (PASSED IN AC0-AC3)RE(CCOPY) TO RTRA LOCATION 3 - PERFORMS CORE TO CORE COPY (AC0=SOURCE, AC1=DEST, AC2=LENGTH)RE(ECOPY) TO RTRA LOCATION 4 - PERFORMS EXTMEM TO CORE COPY (AC0=SECTOR, AC1=DEST, AC2=LENGTH)**CATLEN:EQU 2000 WINCHESTER CATALOG LENGTH (4 SECTORS)MEMDIF:EQU 2000 (MEM.SIZ - TOP OF THIS ROUTINE) [1024]CONTAB:EQU 1 POINTER TO LOCATION OF LOWCORE CONFIGURATION TABLETABLEN:EQU 150 104 WORDS IN THE CONFIGURATION TABLEOBJLEN:EQU 4 POINTER TO OBJECT CODE LENGTH (LOWCORE ONLY)SWPLEN:EQU 6 POINTER TO SWAP FILE LENGTH IN SECTORS (LOWCORE ONLY)CURTRK:EQU 14 POINTER TO DISKREAD/DISKWRITE HEAD POSITIONS (LOWCORE ONLY)CTABOF:EQU 357 LOCATION OF HIGHCORE CONFIGURATION = (MEM.SIZ - LOC.CTAB) [239]CONINF:EQU 20 CONFIGURATION INFO STARTS HERE IN CONTABCURDEV:EQU (CTABOF-27+CONINF) OFFSET FOR CURRENT DEVICESTRDEV:EQU (CTABOF-30+CONINF) OFFSET FOR STORAGE DEVICE TABLESYSTYP:EQU 0 OFFSET TO TYPE WORD IN STORAGE DEVICE TABLESYSSPC:EQU 1 OFFSET TO SECTORS/CYLINDER ENTRY IN STORAGE DEVICE TABLESYSCYL:EQU 2 OFFSET TO TOTAL CYLINDERS ENTRY IN STORAGE DEVICE TABLEDRVCON:EQU 3 OFFSET TO DRIVE/CONTROLLER WORD IN STORAGE DEVICE TABLEBLKLEN:EQU 4 LENGTH OF STORAGE DEVICE TABLE ENTRYSTREND:EQU (CTABOF-TABLEN+CONINF) END OF STORAGE DEVICE TABLE PLUS ONEHDPOS: EQU 363 OFFSET FOR TRUE HEAD POSITIONS (USED BY DISKREAD/DISKWRITE) [243]MAGIC: EQU 224 LOCATION OF MAGIC NUMBER IN HIGHCORE [148]EMSIZE:EQU 364 OFFSET FOR AVAILABLE EXTENDED MEMORY SIZE IN SECTORS [244]***Read states (for DSKRD routine):**  Since the overlay mechanism will now automatically load any swap file*  into extended memory for the calling program, various "read states"*  have been added to the DSKRD routine.  These states describe what*  is expected of the read routine.**  Note:  The swap file is read into the very top portion of the*         extended memory.*RCAT:   equ 0 read catalogRFIRST: equ 1 read first sector of the object file (### ISSRD assumes this is 1!!! ###)RRESTN: equ 2 read the rest of the object file - no configurationRREST:  equ 3 read the rest of the object file - valid configuration foundRSWAP:  equ 4 read the swap file into the extended memoryeject***D24 control bits and masks*SELENA: equ 10000 select enable (D24)SELMSK: equ 7400 select bits mask (D24)DATMSK: equ 377 data bus mask (D24)ID6:    equ 100 SCSI ID 6 (D24)ID7:    equ 200 SCSI ID 7 (D24)ARB6:   equ 5000 arbitrate for SCSI ID 6 (D25)ARB7:   equ 1000 arbitrate for SCSI ID 7 (D25)BUSMSK: equ 777 signal bus mask (D25)EXTRD:  equ 50 extended read command (D26)DEVBSY: equ 4000 device busy status (D27)STAMSK: equ 7400 status bits mask (D27)***SCSI signal lines (just the ones we use)*ATN: equ 1 attentionBSY: equ 2 busyACK: equ 4 acknowledgeRST: equ 10 resetMSG: equ 20 messageSEL: equ 40 selectCD:  equ 100 C/D (control/data)REQ: equ 200 requestIO:  equ 400 I/OSIGMSK: equ (ATN\BSY\RST\MSG\SEL\CD\IO) signal mask for status phasesPSTAT:  equ (BSY\CD\IO) status phasePDATIN: equ (BSY\IO) data in phaseBUSFRE: equ (BSY\SEL) bus free state when these are both zeroEJECT**CORE TO CORE COPY ROUTINE*CCOPY:...IM(-20) TO D1 MAKE SURE INTERRUPTS ARE OFFPCI TO RTRA TRANSFER TO THE CORE-TO-CORE COPY ROUTINEDATA (CCOPY2-.-1)**EXTERNAL MEMORY TO CORE COPY:*ECOPY:...IM(-20) TO D1 DISABLE INTERRUPTSPCI TO RTRA TRANSFER TO THE EXTERNAL MEMORY-TO-CORE COPY ROUTINEDATA (ECOPY2-.-1)**OVERLAY A FILE*OVLAY:...IM(-20) TO D1 DISABLE INTERRUPTS FOR SURE FOR OVERLAYIM(RFIRST) TO R10 SET STATE TO READ FIRST SECTOR OF OBJECT FILERE(SETUP) TO RTRA GO READ IT IN**LOAD PROGRAM CALLED 'MONITOR'*FBOOT:...IM(-20) TO D1 MAKE SURE INTERRUPTS ARE OFFPCI TO R0DATA 47515 LOAD PROGRAM NAME INTO R0-R3 FOR LATER CODEPCI TO R1DATA 44516PCI TO R2DATA 47524PCI TO R3DATA 122**LOAD PROGRAM AS SPECIFIED IN AC0-AC1-AC2-AC3*NBOOT:...IM(-20) TO D1 MAKE SURE INTERRUPTS ARE OFFR0 TO R4R1 TO R5R2 TO R6R3 TO R7 MOVE NAME TO REGISTERS 4-7**SET UP FOR DISK READ*IM(0) TO R0 SET THE DEVICE ADDRESS TO THE SYSTEM DEVICEIM(0) TO R1 START READ FROM SECTOR 0 OF WINCHESTERIM(0) TO R2 READ CATALOG INTO START OF MEMORYPCI TO R3 THIS IS THE CATALOG'S LENGTHDATA CATLENIM(RCAT) TO R10 SET STATE TO READ IN THE CATALOGEJECT**SET UP FOR READING THE DISK - MAP LOGICAL DEVICE TO PHYSICAL DEVICE*SETUP:...im(-1)	to	R12		try to find the device/drive ID for the device passed in R0R0		to	R14		set the logical drive ID asidePCI		to	AND0	extract just the logical device codedata	177000 		(LSB in upper byte is the logical drive number - ignore it as well)re(DECODE) to RTNZ	nonzero device type - go decode itR17 	to	R0		get our current locationPCI 	to 	ADD0	point to current device - following word is system devicedata (MEMDIF-CURDEV-(.-1))R0		to	R12		save this pointerR14		to	R0		recover the logical drive IDPCI 	to 	TAND0 	see if the drive number is onedata	400	LSB		in upper byteim(1)	to	RTNZ	if non-zero, we want the current device (already point to it)R12I	to	ATNV	otherwise, want system device - point to itMR12	to	R0		pick up desired devicePCI		to	AND0	keep just the device typedata 377R0		to	R12 and set asidere(CHKDEV) to RTRA and go check the device's validityDECODE: PCI to TSUB0 decode the device typedata 3000 Winchester?re(CHKDEV) to RTNZ no, we aren't interested in decoding any other devicesim(1) to R12 set Winchester device code in R12R14 to R0 pick up logical device againPCI to TAND0 check drive numberdata 400re(CHKDEV) to RTZE no drive number - R12 is the deviceim(21) to R12 set it to Winchester one (normally, we'd OR this bit in)CHKDEV: R12 to R0 pick up resultim(17) to AND0 extract just the device typeim(1) to TSUB0 make sure it's a Winchesterre(CHKERR) to RTNZ not a WinchesterCHKDV2: D51 to R0 pick up computer device bitsPCI to TAND0 make sure we have a SCSI interfacedata 40000 (SCSI interface bit)re(CHKDV3) to RTNZ we have an interfaceCHKERR: im(7) to D50 no interface - beep foreverim(-2) to RTRACHKDV3: R10 to R0 pick up read stateim(RCAT) to TSUB0 read catalog?re(FNDBL1) to RTZE yes, don't set the MS sectorR14 to R0 pick up device/MS sectorPCI to AND0 keep just MS sectordata 377R0 to R5 save in R5eject**Look for drive's configuration*FNDBL1: R1 to R14 save R1R2 to R11 save R2R17 to R0 get our current locationPCI to ADD0 point to the highcore storage device tabledata (MEMDIF-STRDEV-BLKLEN-(.-1)) or thereaboutsR17 to R2 get our current locationPCI to ADD2 point to the end of the highcore storage device tabledata (MEMDIF-STREND-(.-1))im(-1) to R13 initialize block pointerFNDBLK: R13I to ATNV point to next blockim(BLKLEN) to ADD0 here tooR2 to TSUB0 see if we went over the topre(CHKERR) to RTZE if we did, we're in troubleMR0 to R1 pick up device typePCI to AND1 extract just the device typedata 377R12 to TSUB1 is it the device we're looking for?re(FNDBLK) to RTNZ no, keep lookingMR0 to R0 pick up device type word againim(0) to BSOR0 move Winchester type to lowerim(3) to AND0 keep Winchester type onlyim(1) to TSUB0 see if SCSIre(CHKERR) to RTNZ it isn'tR14 to R1 restore R1R11 to R2 restore R2*R1 to R0 shift everything down so the code that only had an LS sector worksR2 to R1R3 to R2 R3 is now free***READ DATA FROM WINCHESTER*  R0 = STARTING SECTOR*  R1 = CORE LOCATION*  R2 = LENGTH*  R5 = MS STARTING SECTOR (except state RCAT)*  R10= READ STATE (0: read catalog, 1: read first sector of file, etc.)*  R13= LOGICAL DRIVE NUMBER TO START AT*DSKRD:...R1 TO R11 SAVE STARTING MEMORY LOCATION**The following finds the appropriate Winchester in the configuration*and selects it.  The following registers are used:*   R0:  Logical or Physical sector number on current disk at entry*        Physical sector number on current disk after selection*   R1:  Location to copy to - Used as temp during selection (but preserved)*   R2:  Length to copy - Used as temp during selection (but preserved)*   R3:  Temporary*   R4-R7: Name of file to overlay to (state RCAT only)*   R4:  Address of swap file (state RSWAP only - passed to target program)*   R5:  MS Logical or Physical sector number on current disk (all states except RCAT)*   R6:  Unused (all states except RCAT)*   R7:  Subroutine return address (all states except RCAT in which no subroutines are called)*   R10: Read state - See definitions above*   R11: Original location to copy to (R1 at OVLAY entry) - Target for transfer*   R12: Temporary (used only in selection to preserve R1)*   R13: Current logical drive number (storage device block number)*   R14: Temporary (used only in selection to preserve R2)*   R15: Negative number of sectors remaining on the current drive*   R16: Logical drive code of drive we're overlaying to (used only in selection)*eject**Select the next (logical) Winchester*WINSEL:... select the next (logical) WinchesterR1 to R12 preserve R1R17 TO R3 GET OUR CURRENT LOCATIONPCI TO ADD3 AND POINT TO STORAGE DEVICE TABLE IN HIGHCORE CONFIGDATA (MEMDIF-STRDEV-(.-1))R13 TO ADD3 POINT TO CURRENT LOGICAL DRIVER13 TO ADD3 [FOUR (BLKLEN) WORDS/TABLE ENTRY]R13 TO ADD3R13 TO ADD3**Find the logical drive that this sector is on*		R2 			to 		R14 	preserve R2		MR3 		to		R2		pick up logical drive code of drive we're looking for		PCI 		to		AND2	extract just the type		data		377		R2			to		R16 	set aside logical drive code of drive we're looking forWIN0: 	PCI 		to 		TSUB3 	are we at the end of the table?		data (MEMDIF-STREND-(.-1))		im(2) 		to 		RTNZ	no, keep lookingWINERR: im(7) 		to 		D50		yes, the specified sector is beyond the end of the disk		re(WINERR) 	to 		RTRA 	bomb out		MR3 		to 		R2 		pick up logical drive/type word		PCI 		to 		AND2 	extract just the device type		data 377		R16 		to 		TSUB2 	is this a drive we're looking for?		re(WINERR) 	to 		RTNZ 	no, either at end of table (-1) or past W0's list				R3 			to 		R2 		get block pointer for current logical drive		im(SYSSPC) 	to 		ADD2 	point to sectors/cylinder		MR2I		to		R15		pick up and save sectors/cylinder (and point to total cylinders)		R0			to		D5 		divide the logical sector number (or physical if we're crossing a disk boundary)		R10			to 		R1		see if reading catalog		im(RCAT)	to 		TSUB1		im(1) 		to		RTZE 	if so, MS is zero		R5 			to 		D4 		(MS as well)		R15 		to 		D7 		by the number of sectors/cylinder		D5 			to 		R1 		to get the logical cylinder number (assumes cylinder number < 64K)		MR2 		to		TSUB1 	see if the target cylinder is on the current logical drive		re(WIN2) 	to 		RTNC 	the cylinder is on this drive (always exit first time from RCAT)		MR2 		to 		SUB1 	not on this drive; reduce the logical cylinder number by length of this drive		D4 			to 		R2 		save remainder from division above		R1 			to 		D5		multiply new logical cylinder number by sectors/cylinder		R2 			to 		D4 		and add in sector remainder		R15 		to 		D6 		to get new logical sector number		D5 			to 		R0 		and move that to R0		D4 			to 		R5 		MS to R5		im(BLKLEN) 	to 		ADD3 	point to the next drive (block)		R13I 		to 		ATNV 	increment the logical drive as well		re(WIN0) 	to 		RTRA 	and keep lookingEJECT**Save target cylinder here*WIN2: 	D4 			to 		R16 	save remainder - this is the physical sector number on this cylinder		R1			to		D5 		multiply the physical cylinder number by sectors/cylinder		R16I 		to 		D4 		and add in the physical sector number on this drive (and make R16 be that plus one)		R15 		to 		D6 		perform the multiplication, then the addition		D5 			to 		R0 		the result is the physical sector number on this logical drive		R10 		to 		R2 		see if reading catalog		im(RCAT)	to 		TSUB2		im(1) 		to 		RTZE 	if so, MS is zero		D4 			to 		R5 		MS to R5**Find the negative number of sectors remaining on this drive*		im(SYSCYL)	to		ADD3 	point to total cylinders on disk		MR3I 		to 		SUB1 	compute negative number of cylinders left on drive (and point to drive/controller)		R1			to		D5		place negative number of cylenders left on drive in d5		R15			to		D6		times sectors per cylinder = yields neg sectors on remaining cyls		D4			to		R2		read the masb		R15			to		SUB2	compute the msb correctly by applying signed mult correction		IM(1)		to		ADD2	see if was minus 1		RE(WIN6)	to		RTZE	if was minus 1, then no overflow problem occurs		IM(1)		to		R15		else simulate 65535 sectors remaining on drive		RE(WIN7)	to		RTRA	done with this nastinessWIN6:	D5			to		R2		pick up negative number of sectors on remaining cylinders		R16			to		ADD2	add in startinc sector-in-cyl plus 1		R2			to		R15		yields negative number of cylinders on drive after this oneWIN7:	R14 		to 		R2 		restore R2 here**Attempt to connect with the specified drive*CONNECT: MR3 to R16 pick up D24 ID, SCSI ID, SCSI LUN of driveR16 to R3 move to R3im(32)		to		rtnv		invoke native routine #26 - inform interpreter of pending SCSI activityim(0) to SHRA3 get D24 ID (shr 4)im(0) to SHRA3im(0) to SHRA3im(0) to SHRA3im(17) to AND3 extract just the IDim(1) to R1 bit encode the IDre(CONN3) to RTRA check termination conditionCONN2: R1 to ADD1 SHLCONN3: im(1) to SUB3 see if donere(CONN2) to RTPLPCI to BSOR1 move to upper and add in select enabledata SELENA select enable bitR1 to D24 select the appropriate D24D24 to R3 see if that D24 was actually therePCI to TAND3 make sure we get the bit backdata SELMSK (select bits)re(CONN1) to RTNZ the board is thereCONERR: im(7) to D50 no board - beep onceCONN1: im(0) to D24 clear SCSI data bus**Arbitration***Re-enter from below to reissue command**Registers here:**	R16 = device address (lun, board, target)*	R12 = holds saved copy of R1 (e.g. mem load address)*ARBITE: im(0) to R1 set timeout of approx. 500 msARBIT1: im(1) 			to 			SUB1 		decrement timer		re(CONERR) 		to 			RTZE 		timed out - beep once and try again (forever loop)		D25 			to 			LOA3 		latch the scsi bus		D25 			to 			OR3 		check it twice		PCI 			to 			TAND3 		test for bus free bits		data 		BUSFRE		RE(ARBIT1) 		to 			RTNZ 		bus not free yet, keep trying		im(BSY)			to			D25 		bus is free! assert busy before a bus settle delay		PCI 			to 			D24 		assert our id onto the data bus		data 		ID6							we are scsi id 6		im(0) 			to 			ATNV 		wait a arb delay from assert of bsy		im(0) 			to 			ATNV		im(0) 			to 			ATNV		D24 			to 			R3 			lood at data bits		PCI 			to 			TAND3 		mask off all but bit for ID7		data 		ID7		RE(ARBWON) 		to 			RTZE 		we won arbitration		im(0) 			to 			D25 		we have lost arbitration (ID7 was asserted)		im(0) 			to 			D24 		clear signal and data lines		RE(ARBIT1) 		to 			RTRA 		return to step 1 - wait for bus free conditionARBWON: PCI 			to 			D25 		we won arbitration		data 		(BSY\SEL) 					assert sel now		im(0) 			to 			ATNV 		make sure we wait at least a bus settle delay after asserting select		im(0) 			to 			D24 		cease arbitrationEJECT**Selection*		R16 		to 		R3 			pick up SCSI ID of target		im(17) 		to 		AND3 		just the SCSI ID		im(1) 		to 		R1 			bit encode the ID		re(SELEC3) 	to		RTRA 		check termination conditionSELEC2: R1 			to 		ADD1 		SHLSELEC3: im(1) 		to 		SUB3 		see if done		re(SELEC2) 	to		RTPL		PCI			to OR1 add in our ID		data 		ID6 we're SCSI ID 6		R1 			to D24 assert our ID and the target's ID on the SCSI data bus		PCI 		to D25 assert ATN			data 	BSY\SEL\ATN		PCI 		to D25 release BSY			data 	SEL\ATN		PCI 		to R1 set timeout of approx. 250 ms			data 	77777SELECT: D25 to R3 wait for target to assert BSYim(BSY) to TAND3re(SELEC1) to RTNZ we've selected itim(1) to SUB1 haven't heard from the device yetre(SELECT) to RTNZSELEC1:	im(0) 		to 		D24 	release data bus		R1 			to 		TLOA1 	did we timeout?		im(2)		to		RTNZ 	no		im(0) 		to 		D25 	we timed out - free signal bus		re(IDERR) 	to 		RTRA 	and abort		im(ATN) 	to 		D25 	release SEL		R12 		to 		R1 		restore R1 here**Identify*IDENT: 	D25 to R3 wait for REQ		PCI to TAND3		data REQ		re(IDENT) to RTZE		im(0)	to D25 release ATN		R16 	to R3 pick up SCSI LUN		PCI 	to BSOR3 move to lower and or in identify message		data 	200 identify message (no disconnect)		PCI 	to AND3 keep only the LUN and identify		data 217		R3		to D26 send identify messageIDENT2: D25 		to R3 wait for REQ		PCI 		to TAND3			data 	REQ		re(IDENT2) 	to RTZE		D25 		to R3 see if we're in command phase or status phase		PCI 		to AND3 keep only the signal lines			data SIGMSK		PCI 		to TSUB3 see if status phase		data PSTAT		re(ISSRD) 	to RTNZ no, we successfully connected - issue read command		R1			to R12		stash R1 into R12 again in case of retry		D27 		to R3		read the status to clear the bus		PCI 		to TSUB3	see if the device is busy			data DEVBSY		PCI to RTZE		if so, try to connect again			data ARBITE-.-1IDERR: im(7) to D50 and beep foreverim(-2) to RTRAeject**Issue EXTENDED READ command**At this point:*	R0  = LS sector*	R1  = memory location to read to*	R2  = words (RFIRST, RRESTN, RREST) or sectors (RSWAP) to read*	R3  = free*	R16 = Device Address (LUN, Board, Target)*	R10 = Read state (rcat, rfirst, etc.)*	R5  = MS sector (except if state == rcat)*	R15 = negatve number of sectors remaining on disk*	ISSRD:	PCI			to		D26			issue extended read		data 		EXTRD 				extended read		R16			to 		R3 			pick up LUN		PCI 		to 		AND3		just the LUN		data 		7400		im(0) 		to 		SHRA3 		shr 8-5 (move into place)		im(0) 		to 		SHRA3		im(0) 		to 		SHRA3		R3 			to 		D26 		send the LUN		R10 		to 		LOA3		pick up read state		im(RCAT)	to		TSUB3		see if read catalog state		re(ISSRD3)	to 		RTNZ		no		im(0)		to		D27			MS starting sector is zero for catalog		re(ISSRD4)	to		RTRAISSRD3: R5 			to 		D27			send MS starting sectorISSRD4: R0 			to 		D27			send LS starting sector		im(0)		to		D26			reserved		im(RFIRST)	to		TSUB3		see if read first sector state		re(ISSRD1)	to 		RTZE		yes, length is one (### assumes RFIRST = 1!!! ###)		im(RSWAP)	to		TSUB3		see if reading swap file		R2			to		R3			pick up words (or sectors) to copy		re(ISSRD2)	to		RTZE		we're reading the swap file - R2 is in sectors		PCI			to		ADD3		round up		data		377		im(0)		to		BSOR3 		divide by 256		PCI			to		AND3		data		377ISSRD2: R15 		to		TADD3 		see if we're going past the end of this disk		re(ISSRD1) 	to		RTNC 		we're okay		re(ISSRD1) 	to		RTZE		R15 		to 		LCM3 		restrict length to amount left on disk		im(1) 		to 		ADD3ISSRD1: R3 			to 		D27			send number of sectors**Inform interpreter what's about to go down...*		im(24)		to		rtnv		invoke native routine #20**Now start the scsi command*		im(0)		to		D26 		and a null control byte**Wait right here for first req.  If we go directly to status phase, presumably device*has a unit attention for us.  Just re-issue the command in this case.**We could check for not ready and issue a start-unit if we had the inclination*to do so...*ISSRD5: D25 		to 		R3 			get signal bus status		PCI			to		TAND3 		wait for REQ		data 		REQ		re(ISSRD5) 	to 		RTZE		PCI 		to 		AND3		keep only the signal lines		data 		SIGMSK		PCI 		to 		TSUB3		see if data in phase		data		PDATIN		re(RDSCSI) 	to 		RTZE		if so, begin read...				D27			to		R3			get presumed status phase		pci			to		R3		data		144ISSRD6:	im(0)		to		D3			chilll...		im(1)		to		SUB3		re(ISSRD6)	to		RTNZ		R1			to 		R12			stash address in R12 again		PCI			to		RTRA		data		ARBITE-.-1			and back to arbitrateEJECT**Now read data from the SCSI Winchester*RDSCSI: D25 		to 		R3 			get signal bus status		PCI			to		TAND3 		wait for REQ		data 		REQ		re(RDSCSI) 	to 		RTZE		PCI 		to 		AND3 keep only the signal lines		data 		SIGMSK		PCI 		to 		TSUB3 see if data in phase		data		PDATIN		PCI 		to		 RTNZ not anymore - we're done		data 		WIN3-.-1**Handle data in phase - read data		im(1) to ADD0 increment physical sector number		im(1) to RTNC if no need to increment msb		R5I to ATNV increment msb if necessary				R10 to LOA3 pick up read state		im(RSWAP) to TSUB3 are we reading the swap file?		re(WIN10) to RTNZ no, read the next sector of the object file**Read data from SCSI Winchester to external memory*		R17 		to 		R3		get where we are executing		im(WIN12-.) to 		ADD3	add in offset to WIN12		im(25)		to		RTNV	have interpreter hyperspace to WIN12 if running (and incrementing D60/61)		PCI to R3  read one sector in (high speed?) loop		data 100		WIN11: D27 to D63 to the extended memory		D27 to D63		D27 to D63		D27 to D63		im(1) to SUB3 count the 16-word blocks		re(WIN11) to RTNZ read until doneWIN12:	im(1) to SUB2 just read another sector		re(WIN8) to RTRA get ready for next sector**READ DATA FROM WINCHESTER TO MEMORY*WIN10:		R17 		to 		R3		get where we are executing		im(WIN13-.) to 		ADD3	add in offset to WIN13		im(26)		to		RTNV	have interpreter hyperspace to WIN13 if running (and incrementing R1)		PCI TO R3 set counter		DATA 100WIN9:	D27 TO MR1I READ		D27 TO MR1I      4 WORDS		D27 TO MR1I      64 		D27 TO MR1I      TIMES = 256 WORDS = 1 SECTOR		IM(1) TO SUB3 COUNTER		RE(WIN9) TO RTNZ GO BACK*WIN13:	PCI TO SUB2 CHECK LENGTH FIELD		DATA 400 BY 256		IM(1) TO RTRC		IM(0) TO R2 IF LESS THAN 256 SET LENGTH TO ZEROEJECT**FINISH SECTOR READ - PREPARE FOR NEXT SECTOR*WIN8:R2 TO TLOA2 SEE IF DONE WITH READPCI to RTZE if done, prepare to exitdata WIN3-.-1R10 to LOA3 check the read stateim(RFIRST) to TSUB3 are we reading the first sector?re(WIN4) to RTNZ no, keep goingR17I to R7 we are in state RFIRST - proceed to next statere(WIN4A) to RTRA <= return here (skip the call - fall through)**End of RFIRST state - R11 points to the sector we just read in; R7 is return*  When we return, R2 will be the remaining length of the object file or will*  be set to zero if file was 1 sector in length*  and R10 will be the new state.**To call this subroutine:*  R17I      to R7 save return in R7*  re(RETRN) to RTRA <= return here!*  re(ENDRF) to RTRA call this routine*  RETRN: ...*ENDRF: im(RRESTN) to R10 change state to read rest of object - assume no configurationMR11 to R3 check for valid XPL config - get first word of programPCI to TSUB3 make sure it matches the first instruction of all XPL programsPCI TO LOA0 <<---- this is the first instruction of all XPL programs ---->>R7 TO ATNZ doesn't match - no configim(CONTAB) to R3 point to pointer to config tableR11 to ADD3 add in address where we read this sectorMR3 to LOA3 point to config tableR7 to ATZE zero - no configim(3) to TSUB3 the pointer must be greater than threeR7 to ATNC not greater than three (ILE test) - no configPCI to TSUB3 make sure pointer's in rangedata 400-TABLEN has to fit within first sectorR7 to ATRC out of range - invalid configim(OBJLEN) to ADD3 point to object length in configMR3 to R2 pick up actual object file lengthPCI to SUB2 but subtract out the sector we just readdata 400IM(1) TO RTRC CHECK FOR 1 SECTOR FILESIM(0) TO LOA2 SET 1 SECTOR FILE LENGTH TO ZERO (THE SECTOR HAS BEEN READ)im(RREST) to R10 change state to read rest of object - valid configR7 to ATRA return here**Check for end of disk*WIN4: R15I to TLOA0 check for end of diskPCI TO RTNZ IF NOT, THEN GO BACK AND READ NEXT SECTORDATA RDSCSI-.-1WIN4A: D27 to R3 pick up read statusPCI to AND3 extract just the statusdata STAMSKre(WIN5) to RTNZ bad status - dieWIN4B: PCI to RTRA okay status, select the next drive and continue readingdata WINSEL-.-1WIN5: im(7) to D50 beep foreverre(WIN5) to RTRAEJECT**Done with the read - check status*WIN3:	D27			to		R3		pick up read status		PCI 		to		AND3	extract just the status		data		STAMSK		re(WIN5) 	to 		RTNZ	bad status - die		R10			TO		LOA3	TEST READ STATE		PCI			TO		RTZE	ZERO MEANS SEARCHING FOR A FILE (READING THE CATALOG)		DATA (CAT-.-1)		im(RFIRST)	to		TSUB3	read first sector of object file?		re(WIN3A)	to		RTNZ	no, keep looking		R17I		to		R7		set up to call end of RFIRST state routine (save return in R7)		re(WIN3B)	to		RTRA	<= return here		PCI			to		RTRA	call end of RFIRST state routine		data (ENDRF-.-1)WIN3B: R10 to R3 move the new state into R3WIN3A: im(RRESTN) to TSUB3 read rest of object file, no config?R11 to ATZE yes, we're all set - start up target program hereim(RREST) to TSUB3 read rest of object file, valid config?PCI to RTNZ no, go copy configdata (ERSWAP-.-1)R2 TO TLOA2 CHECK TO SEE IF WE'VE COPIED IT ALLRE(WIN4B) TO RTNZ NO, GO COPY MORE R17I to R7 set up to call end of RREST routine (save return in R7)re(WIN4B) to RTRA <= return here (skip the call - fall through)**End of state RREST - prepare to read in the swap file; R1, R2, and R3 are free*  R11 points to the object file just read in; R7 is the return*  When we return, R2 will contain the sector length of the swap file and*  both D60 and R4 will contain the address of the swap file.**Note:  If there is no swap file, this routine does NOT return!**To call this subroutine:*  R17I      to R7 save return in R7*  re(RETRN) to RTRA <= return here!*  re(ENDRR) to RTRA call this routine*  RETRN: ...*ENDRR: im(CONTAB) to R3 point to pointer to configurationR11 to ADD3 add in base of object fileMR3 to LOA3 pick up configuration pointerim(SWPLEN) to ADD3 point to swap file lengthR3 to R4MR3 to LOA2 pick up length (in sectors)re(CPYFIG) to RTZE no swap file - get outR17 to R3 get current locationPCI to ADD3 point to external memory size in highcoredata (MEMDIF-EMSIZE-(.-1))MR3 to LOA1 pick up extended memory sizeim(2) to RTNZ non-zero - we have extended memorySWERR: im(7) to D50 no extended memory or swap file too largere(SWERR) to RTRA beep foreverR1 to R3R2 to SUB1 find starting sector for swap file in extended memory (from top)re(SWERR) to RTMI too large*R1 to R4 save swap file startR2        TO   D60      R2 = LENGTH OF SWAP FILE; STORE IN D60 TEMPORARILY (UGH!!!)R11       TO   R2		PICK UP POINTER TO WHERE OBJ FILE SITS IN MEMORY (E.G. 0)IM(1)     TO   ADD2		PLUS 1 - E.G. CONFIG POINTERMR2       TO   LOA2		PICK UP CONFIG POINTER; WHY; WE JUST GOT IT UP ABOVEIM(21)    TO   ADD2		OFFSET TO WORD 17. - PICK UP OPTIONS WORDMR2       TO   LOA2		PICK UP OPTIONS WORDIM(0)     TO   BSOR2	BRING TO LOWER HALFIM(7)     TO   AND2		EXTRACT 3 BITS - THESE ARE THE PROCESSOR TYPE - 0: Model A, 1: Model B, 2: Model CIM(3)     TO   TSUB2	LOOK FOR MODELS A-C: LEAVE SWAP FILE LENGTH INTACT (E.G. SKIP)IM(4)     TO   RTMI		NON-MODEL D: LEAVE SWAP FILE LENGTH AS ISPCI       TO   AND1		MODEL D ONLY: AND START OF SWAP FILE IN EXT MEMORYDATA	  (174000)		DOWN TO M512K CARD BOUNDARYR1        TO   SUB3		SUBTRACT THAT FROM EXAMOUNT - E.G. ROUND SWAP FILE LENGTH UP!!!R3        TO   MR4		STORE ROUNDED UP SECTOR LENGTH OF SWAP FILED60       TO   R2		RESTORE R2 (UGH!!!)R1        TO   R4		SAVE POINTER TO SWAP FILE DESTINATION IN R4; FOR STARTUP CODER1		  TO   D60		LOAD MAM POINTER WHERE TO PUT STUFFim(RSWAP) to R10 change state to read swap fileR7 to ATRA and go read in the swap file (return)EJECT**End of RSWAP - reset D60 (early boards would crash to D61 after loading)*ERSWAP: R4 to D60 reset D60 to start of swap file**COPY CONFIGURATION*CPYFIG:... VALIDATE/COPY THE CONFIGURATION AND START UP THE PROGRAMR17 TO R3 GET CURRENT LOCATIONPCI TO ADD3 POINT TO THE MAGIC NUMBER IN HIGHCOREDATA (MEMDIF-MAGIC-(.-1))MR3 TO R3 PICK UP MAGIC NUMBER FROM HIGHCOREPCI TO TSUB3 MAKE SURE IT'S CORRECTDATA 30071 THIS IS 12345 DECIMALR11 TO ATNZ IF NOT, DON'T COPY CONFIG (AS HIGHCORE ISN'T THERE)IM(CONTAB) TO R1 POINT TO POINTER TO CONFIG TABLER11 TO ADD1 OFFSET POINTER FROM START OF OBJECT FILEMR1 TO LOA1 POINT TO CONFIG TABLEIM(CURTRK) TO ADD1 POINT TO HEAD POSITION POINTERR17 TO R2 GET CURRENT LOCATIONPCI TO ADD2 POINT TO HIGHCORE HEAD POSITIONSDATA (MEMDIF-HDPOS-(.-1))R2 TO MR1 UPDATE LOWCORE HEAD POS POINTER TO POINT TO HIGHCORE**COPY THE CONFIGURATION*IM(CONTAB) TO R1 POINT TO CONFIGURATION POINTERR11 TO ADD1 ADD IN OBJECT FILE BASEMR1 TO R1 PICK UP CONFIGURATION POINTERIM(CONINF) TO ADD1 POINT TO THE FIRST WORD TO COPYR17 TO R2 GET OUR CURRENT POSITIONPCI TO ADD2 AND POINT TO THE HIGHCORE CONFIGURATION TABLEDATA (MEMDIF-CTABOF-(.-1))PCI TO R0 GET NUMBER OF WORDS TO COPYDATA TABLEN-CONINFMR2I TO MR1I AND COPY THE CONFIGURATIONIM(1) TO SUB0 SEE IF WE'RE DONEIM(-3) TO RTNZ NOT DONE YETR11 TO ATRA DONE - START UP PROGRAMEJECT**LOOK FOR FILE NAME*CAT:IM(0) TO R0 INITIALIZE COUNTCAT1:R0 TO R1 R0 CONTAINS OFFSET OF FILE ENTRY IN CATALOGMR1I TO R2 GET DATAR4 TO SUB2RE(CAT2) TO RTNZ NOT USMR1I TO R2 GET DATAR5 TO SUB2RE(CAT2) TO RTNZMR1I TO R2 GET DATAR6 TO SUB2 EQUALRE(CAT2) TO RTNZ NOT USMR1I TO R2 GET DATAR7 TO SUB2 EQUALRE(CAT2) TO RTNZ NOT USMR1I TO R0 GET BASE SECTORIM(1) TO ADD1 SKIP NEXTMR1I TO R2 AND GET FILE LENGTH = NUMBER OF WORDS TO READMR1 to R1 get MS sector/MS sector length/typeim(0) to BSOR1 move MS sector to lowerPCI to AND1 and keep kust the MS sectordata 377R1 to R5 save itIM(0) TO R1 AND START AT MEMORY LOCATION 0IM(RFIRST) TO R10 SET STATE TO READ FIRST SECTOR OF OBJECT FILEPCI TO RTRA GO READ IN THE FILEDATA DSKRD-.-1CAT2:IM(10) TO ADD0 INCREMENT MEMORY POINTERPCI TO TSUB0 SEE IF DONEDATA CATLEN LENGTH OF THE WINCHESTER CATALOGRE(CAT1) TO RTNZ IF NOT DONE,  GO BACKIM(7) TO D50IM(-2) TO RTRAEJECT**Core-to-core copy:*  R0: source address*  R1: destination address*  R2: length*CCOPY2: R1 to R11 move starting address for later transferim(RFIRST) to R10 set state to read first sectorPCI to R3 read in first sectordata 400R3 to SUB2 save amount remaining to be copied (after first sector)re(CCOPY3) to RTRCim(0) to R2 no words left to copy, set to zeroCCOPY3: MR0I to MR1I copy one word at a timeim(1) to SUB3 keep track of how much we've copiedre(CCOPY3) to RTNZ loop until counter equals zeroR10 to R3 check stateim(RFIRST) to TSUB3 reading first sector?re(CCOPY8) to RTNZ R17I to R7 call end of RFIRST routine (save return in R7)re(CCOPY4) to RTRA <= return herePCI to RTRA and call end of RFIRST routinedata (ENDRF-.-1)CCOPY4: R2 to LOA3 set remaining lengthre(CCOPY3) to RTNZ begin copying remaining codeCCOPY8: R10 to R3 move the new state into R3im(RREST) to TSUB3 did we just read the rest of the object file (with valid config)?R11 to ATNZ no, start up the program here (states RFIRST and RRESTN)R17I to R7 call end of RREST routine (save return in R7)re(CCOPY5) to RTRA <= return here (if we return)PCI to RTRA and call end of RREST routinedata (ENDRR-.-1)CCOPY5: MR0I to TLOA3 find the end of the last sector of the object filere(CCOPY5) to RTZE ends when we find a non-zero wordim(1) to SUB0 and back up R0 (we overstepped by one)CCOPY6: PCI to R3 set word counterdata 400 to one sectorCCOPY7: MR0I to D63 copy the next wordim(1) to SUB3 decrement word countre(CCOPY7) to RTNZ loop until the whole sector is copiedim(1) to SUB2 decrement sector countre(CCOPY6) to RTNZ loop until whole swap file copiedPCI to RTRA and go to itdata (ERSWAP-.-1)EJECT**External memory-to-core copy:*  R0: source sector in external memory*  R1: destination address in main memory*  R2: length to copy*ECOPY2: R1 to R11 move starting address for later transferR0 to D60 send starting sector number to external memoryim(RFIRST) to R10 set state to read first sectorPCI to R3 read in first sectordata 400R3 to SUB2 save amount remaining to be copied (after first sector)re(ECOPY3) to RTRCim(0) to R2 no words left to copy, set to zeroECOPY3: D63 to MR1I copy one word at a timeim(1) to SUB3 keep track of how much we've copiedre(ECOPY3) to RTNZ loop until counter equals zeroR10 to R3 check stateim(RFIRST) to TSUB3 reading first sector?re(ECOPY8) to RTNZ copy completed?R17I to R7 call end of RFIRST routine (save return in R7)re(ECOPY4) to RTRA <= return herePCI to RTRA and call end of RFIRST routinedata (ENDRF-.-1)ECOPY4: R2 to LOA3 set remaining lengthre(ECOPY3) to RTNZ begin copying remaining codeECOPY8: R10 to R3 move the new state into R3im(RREST) to TSUB3 did we just read the rest of the object file (with valid config)?R11 to ATNZ no, start up the program here (states RFIRST and RRESTN)R1 to R0 save memory pointerD60 to R3 move to the end of the last sector of the object fileD61 to TLOA3 see if non-zero word pointerim(1) to RTZE it's zeroim(1) to ADD3 nonzero, point to next sectorR3 to R12 save start of swap file (ENDRR trashes D60)R17I to R7 call end of RREST routine (save return in R7)re(ECOPY5) to RTRA <= return here (if we return)PCI to RTRA and call end of RREST routinedata (ENDRR-.-1)ECOPY5: D60 to R13 set destination sector address asideR12 to D60 point back to the start of the swap file in extended memoryR0 to R1 set memory pointerPCI to R3 set word counterdata 400 to one sectorECOPY6: D63 to MR1I copy the next wordim(1) to SUB3 decrement word countre(ECOPY6) to RTNZ loop until the whole sector is copiedD60 to R12 save new source sector addressR13 to D60 set destination sector addressR0 to R1 set memory pointerPCI to R3 set word counterdata 400 to one sectorECOPY7: MR1I to D63 copy the next wordim(1) to SUB3 decrement word countre(ECOPY7) to RTNZ loop until the whole sector is copiedim(1) to SUB2 decrement sector countre(ECOPY5) to RTNZ loop until whole swap file copiedPCI to RTRA and go to itdata (ERSWAP-.-1)
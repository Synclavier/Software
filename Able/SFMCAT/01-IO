/* 01-IO  $TITLE  SFM I/O Primitives */

/* Copyright 1985 by New England Digital Corporation */

dcl interruptio lit '1'; /* interrupt io */    

dcl #mode fixed; /* 0=transparent, 1=alpha, 2=vector, 3=point */

dcl #transparent        lit '0';
dcl #alpha              lit '1';
dcl #vector             lit '2';
dcl #point              lit '3';

dcl idle.tty      fixed; /* true if terminal must be idle (control-s) */
dcl idle          fixed; /* true if terminal output is idle */
dcl pfkey         fixed; /* 1-4 if pf key 1 to 4 pressed */
dcl aux.key       fixed; /* 1=ENTER, 2=, 3=-, 4=. 6-15=0-9  (keypad application mode) */

dcl rl.arrow      fixed; /* to receive arrow key */
dcl ud.arrow      fixed;
dcl break.rcvd    fixed; /* set true if break pressed */
dcl wait.for.scan fixed; /* flag for cr received */

dcl holdbuf1.len  lit '8'; 
dcl holdbuf(holdbuf1.len) fixed; /* to buffer echoed characters during plotting */
dcl (rhold,shold) fixed; /* read and write pointers */
rhold=0; shold=0;

dcl in.buf.len            lit '128';    
dcl in.buf(in.buf.len/2)  fixed; /* current command line */
dcl out.buf1.len          lit '32';
dcl out.buf(out.buf1.len) fixed;
dcl (rptr,sptr)           fixed; /* read and write pointer for output buffer */
idle=1; rptr=0; sptr=0; /* initialize */

dcl prompt      data('--> ');

dcl arrow.count fixed;
dcl arrow.rcvd  fixed;
dcl save.arrow  fixed;
dcl byte.ptr    fixed;

dcl milliseconds   fixed; /* timer in milliseconds */
dcl p.milliseconds fixed; /* last sampled time */
dcl clock.inc      fixed; /* increment of d03 */

when d03int then begin; /* d03 timer, needed to blink lights */ 
   dcl tics fixed;
   milliseconds=milliseconds+clock.inc;
   tics=tics+1;
   if tics=30 then do; /* 150 msec */
      tics=0;
      if ((arrow.rcvd=0)&(save.arrow=0)) then arrow.count=1; /* two tics with no arrow */
      else if (arrow.rcvd=save.arrow) then do; /* two tics in same direction */
         arrow.count=arrow.count+1;
         if arrow.count>50 then arrow.count=50;
      end;
      save.arrow=arrow.rcvd;
      arrow.rcvd=0;
   end;
end; /* of d03int */

boot_tty:proc; /* (interrupts will be disabled when called) */
  if rptr=sptr then idle=1;
  else do;
    write("50")=out.buf(rptr);
    rptr=(rptr+1)&(out.buf1.len-1);
    idle=0;
  end;  
end boot_tty;

tty_wait:proc;    
  do while rptr<>sptr;
    interp_run_host_at_level();
  end;                  
end tty_wait;

wait:proc(time); /* waits "time" milliseconds after output buffer empty */
  dcl time fixed;
  dcl now  fixed;
  call tty_wait;
  disable; now=milliseconds; enable;
  do while (milliseconds-now)<=time;
    interp_run_host_at_level();
  end;
end wait;

pc:proc(chr); 			/* doesn't change interrupt status */
   dcl chr  fixed;
   dcl save fixed; 	/* save interrupt register */

   do while ((sptr+1)&(out.buf1.len-1))=rptr; 
      if (read("314")&8)=0 then do; 	/* ints off - check for output */
         if read("51") then do;     	/* output check 					 */
            write("51")=0; if idle.tty=0 then call boot_tty;
         end;
      end;
	   interp_run_host_at_level();
   end; 					/* wait for read pointer to advance */
   save=read("314");
   disable;
   out.buf(sptr)=chr;
   sptr=(sptr+1)&(out.buf1.len-1);
   if (idle.tty=0)&idle then call boot_tty;
   write("314")=save; /* restore interrupt status */
   write(1)=save;
end pc;

dump_hold:proc;
   call tty_wait;
   do while shold<>rhold;
      call pc(holdbuf(rhold));
      rhold=(rhold+1)&(holdbuf1.len-1);
   end;
end dump_hold;

when ttoint then do;
  if idle.tty=0 then call boot_tty;
end;

erase_line:proc; /* erase to end of line */
   call pc(A.ESC); call pc(A.LBRACKET); call pc(A.0); call pc(A.K); 
end;

in_chr:proc(chr); /* process an input char (handle escape seqs) */
   dcl chr              fixed; /* input char */
   dcl esc.status       fixed; /* status in esc seq processing */
   dcl look.for.refresh boolean; /* true if esc seq might be a refresh from Macintosh emulation program */
   dcl i                fixed;

   intercept:proc(chr);  
      dcl chr fixed;                   
      
      if ((shold+1)&(holdbuf1.len-1))<>rhold then do;
         holdbuf(shold)=chr;
         shold=(shold+1)&(holdbuf1.len-1);
      end;
   end intercept;     

   erase_line:proc; /* erase to end of line */
      call intercept(A.ESC); call intercept(A.LBRACKET);
      call intercept(A.0);   call intercept(A.K); 
   end;

   chr=chr&"177"; /* save character without parity */
   if      chr=A.DC3 then idle.tty=1; /* control-s -- idle the output */
   else if chr=A.DC1 then do; /* control q */
      if idle.tty then do; /* (ignore extraneous control q) */
         idle.tty=0; call boot_tty;
      end;  
   end;

   else if esc.status=1 then do; /* middle char of escape seq */
      if (chr=A.LBRACKET) then look.for.refresh=true; /* just to be sure we see a refresh */
      else look.for.refresh=false; /* can't be a refresh (ESC [ E) */
      esc.status=2; /* got a middle character in the sequence */
   end;
   else if chr=A.ESC then esc.status=1; /* got an escape */

   else if esc.status=2 then do; /* process escape seq */
      if (chr<=A.D or (chr>=A.A+"40" and chr<=A.D+"40")) then do; /* arrow key */
         chr=(chr&"137")-"100"; /* get 1,2,3,4 */
         if chr<3 then ud.arrow=3-chr-chr; /* +1 for up,    -1 for down */
         else          rl.arrow=7-chr-chr; /* +1 for right, -1 for left */
         arrow.rcvd=rl.arrow;
         if arrow.rcvd<>save.arrow then arrow.count=1; /* opposite direction */
      end;  
      else if (chr>=A.P) and (chr<=A.S) then pfkey=chr-A.O; /* pf key */
      else if  chr= A.M                   then aux.key=1;
      else if (chr>="154") and (chr<="171") then aux.key=chr-"152";
      else if (look.for.refresh and (chr=A.E)) then do; /* Macintosh emulation program startup signal */
         call pbyte(in.buf,0,A.C); /* stuff the buffer with "CAT" command */
         call pbyte(in.buf,1,A.A); /* A */
         call pbyte(in.buf,2,A.T); /* T */
         in.buf(0)=3; /* set the length to 3 */
         wait.for.scan=1; /* force a CR so command gets executed */
      end;
      esc.status=0; /* clear escape seq */
   end;

   else if chr=0 then do; /* break key hit */
      break.rcvd=1;
      do i=1 to 60; write(3)=0; end; /* pause 300 msec to allow terminal to recover */
   end;
   else if wait.for.scan then;
   else if chr=A.CR then wait.for.scan=1;   /* CR */
   else if chr=A.CAN then do; /* control-x */
      in.buf(0)=0;
      call intercept(A.CR); /* cr */
      do i=0 to prompt(0)-1; call intercept(byte(prompt,i)); end;  
      call erase_line;
   end;   
   else if (chr=A.BS) or (chr=A.DELETE) then do; /* backspace or delete */
      if in.buf(0)>0 then do; /* chars in buffer to delete */
         in.buf(0)=in.buf(0)-1; /* get rid of last char */
         call intercept(A.BS); /* backspace */
         call intercept(A.SP); call intercept(A.BS); /* space, backspace */
         /* call erase_line; */ /* try the above line instead */
      end;
   end; /* of backspace or delete */
   else if chr="1" then begin; /* CTRL-A: dump out SFM high-core */
      dcl (i,j,k)        fixed;
      dcl clear.sequence data(4,shl("33",8)\"35",shl("30",8)\"14");
      dcl scroll.seq     data(7,shl("133",8)\"33",shl("73",8)\"61",shl("64",8)\"62","162");
      dcl activate       data('Enter 0 to print this info, 1 to skip it');

      print string(scroll.seq),;
      print string(clear.sequence),; /* first clear the screen */
      do i=1 to 30; write(3)=0; end;
      print 'CORE(LOC.RST    ):  ',core(loc.rst);
      print 'CORE(LOC.EMSIZE ):  ',core(loc.emsize);
      print 'CORE(LOC.SYNRTPN):  ',core(loc.synrtpn),'  "',string(location(loc.synrtpn)),'"';
      print 'CORE(LOC.SYNMED ):  ',core(loc.synmed);
      print 'CORE(LOC.SYNMISC):  ',core(loc.synmisc);
      print 'CORE(LOC.SYNTIMB):  ',core(loc.syntimb);
      print 'CORE(LOC.SYNSEQ ):  ',core(loc.synseq);
      print 'CORE(LOC.SYNSTAT):  ',core(loc.synstat);
      print 'CORE(LOC.SYNRET ):  ',core(loc.synret);

      /* 1.  print out SFM high core */
      print; print 'SFM High-Core Data: -->',string(activate),; input i; print;
      if i=0 then do;
         j=mem.siz-1134;
         do while j<>loc.load;
            print 'CORE(MEM.SIZ-',mem.siz-j,'):  ',core(j),' (',octal(core(j)),')',;
            if j=mem.siz-1111 then do;
               print '  "',string(location(j)),'"';
               j=mem.siz-1045;
            end;
            else print;
            j=j+1;
         end;
      end;

      /* 2.  dump out FCB info       */
      print; print 'SFM FCB Data: -->',string(activate),; input i; print;
      if i=0 then do;
         j=file.block.loc; k=0;
         do while j<>(file.block.loc+max.file.blocks*file.block.len);
            if (k mod file.block.len)=0
            then print 'Info for FCB #',(k/file.block.len)+1;
            print '   FCB Word #',k mod file.block.len,'):  ',core(j),' (',octal(core(j)),')',;
            if (k mod file.block.len)=0
            then print '  "',string(location(j)),'"';
            else print;
            j=j+1; k=k+1;
            if (k mod file.block.len)=0 then print;
         end;
      end;

      /* 3.  dump out Header info    */
      print; print 'SFM Header Info: -->',string(activate),; input i; print;
      if i=0 then do;
         j=f.headptr;
         do while j<>(f.headptr+256);
            print 'CORE(F.HEADPTR+',int(j-f.headptr),'):  ',core(j),' (',octal(core(j)),')',;
            if j=(f.headptr+127) then do;
               print '  "',string(location(j)),'"';
               j=f.headptr+255;
            end;
            else print;
            j=j+1;
         end;
      end;

      /* 4.  dump out Symbol info    */
      print; print 'SFM Symbol Info: -->',string(activate),; input i; print;
      if i=0 then do;
         j=f.headptr+256;
         do while j<>(f.headptr+(3*256));
            print 'CORE(F.SYMBOLPTR+',int(j-(f.headptr+256)),'):  ',core(j),' (',octal(core(j)),')';
            j=j+1;
         end;
      end;
   end;
   else if in.buf(0)=in.buf.len-1 then; /* input buffer full */
   else if chr>=A.SP then do; /* store printing chars */
      call pbyte(in.buf,in.buf(0),chr);
      in.buf(0)=in.buf(0)+1;
      if in.buf(0)<=80 then call intercept(chr);
   end; 
end in_chr;

when ttiint then call in_chr(rcvdcharacter);

dcl keypad_application lit 'do; call pc(a.esc); call pc(a.equals); end';
dcl keypad_numeric     lit 'do; call pc(a.esc); call pc("76"); end';

dcl restore procedure; /* to restore old and new command lines after clear */

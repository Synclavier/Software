/* 43-FUN  $TITLE  Main Driver for Function Generation *//* Copyright 1985 by New England Digital Corporation *//* data buffers */dcl in.main.module lit '0';dcl sector.size    lit '256';dcl buf1.len       lit '65';dcl buf2.len       lit '32';dcl databuf1(buf1.len*sector.size+1) fixed;dcl databuf2(buf2.len*sector.size+1) fixed;insert ':-xpl:literals'; 	/* system literals */insert ':-xpl:asciilit'; 	/* ASCII literals */insert ':-xpl:catrtns';  	/* catalog routines */insert ':-xpl:strings';  	/* string handling */insert ':-xpl:intrprtr';	/* interpreter interface */insert ':sfmcat:00-sfm';   /* SFM upper memory definitions and overlay routine */insert ':sfmcat:01-io';    /* ascii definitions, interrupt I/O */insert ':sfmcat:02-plot';  /* VT-640 plotting procedures */insert ':sfmcat:04-angle'; /* fast sine/cosine routine */ insert ':sfmcat:04-ifast'; /* Fast Fourier analysis */insert ':sfmcat:05-ifsst';insert ':sfmcat:06-globl'; /* global variables */insert ':sfmcat:07-util';  /* utility procedures */insert ':sfmcat:08-symbl'; /* symbol procedures for labeling time domain display */insert ':sfmcat:09-files'; /* utility procedures which access catalog */  insert ':sfmcat:10-set';   /* input time values and process set menu */insert ':sfmcat:21-extct'; /* sound segment extraction routine */insert ':sfmcat:40-windo'; /* boxcar, hanning and hamming windows */insert ':sfmcat:44-rev';   /* time REVERSAL of sound file */insert ':sfmcat:41-gen';   /* function generation routines */insert ':sfmcat:42-add';   /* command line intrepreter */dcl catalog_buffer (c#dir_max - 1) fixed; /* catalog buffer */dcl i                              fixed;   call set_catbuf (addr(catalog_buffer(0)), 0); /* set up catalog buffer */mem.siz=memory.size; /* look up configured memory size */enable;if core(loc.rst)<>3 then do;    psr('Function generation can only be invoked through SFM');   call tty_wait; /* allow chars to be printed before quitting */   call exit(-1);end;  i=core(c#contab+c#vstart)+core(c#contab+c#vlngth)+core(c#contab+c#stklen);if i IGE ((60*1024)-1928) then do;   /* this check will catch errors where the program is too large for 60K systems */   clear;   ps('SYSTEM PROGRAMMING ERROR:  This module of SFM is too large to run.');   call tty_wait; call exit(-1); /* quit with stop status */end;clock.inc=10/d03_speed;                    /* compute real time clock period */any.kbd  =(d130_present and d160_present); /* configured for keyboard */dq640    =((terminal.type=t#dq640) and (terminal.graphics=g#dq640));if dq640 then punits(799,479);else          punits(639,479); /* prevent display aliasing */file1;if f.name.bytes=0 then call return_to_sfm(7); /* error */call read_system_file (SINTAB.FILE,sintable,sintable.len+intpol.len+1); /* read sine table */call assign(in.buf,location(old.buf));call scan_input;
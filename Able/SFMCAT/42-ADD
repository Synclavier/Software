/* 42-ADD  $TITLE  Add Function Command Scanner and Driver *//* Copyright 1985 by New England Digital Corporation */dcl current.command fixed; /* last command */return_to_sfm:proc(flag);  dcl flag fixed;  call tty_wait;  disable;  ovl.error=error.flag;  sfm.intact=1; /* means high-core info is still valid */  core(loc.rst)=flag;  call overlay(core(loc.p1+1),core(loc.p1),core(loc.p1-1)); /* return to main module of SFM */end return_to_sfm;scan_input:proc; /* input scanner and driver */   dcl command(2) fixed;   dcl name(4)    fixed;   dcl valid      data('ADD IMP AUT CEP REV EXT '); /* commands handled by this module */   dcl (time1,time2) (2) fixed;   dcl i          fixed;   byte.ptr=0; /* reset to start of command */   call get_command(in.buf,command);   call assign(local,in.buf); /* copy line into local buffer */   in.buf(0)=0;   call dump_hold;   nl; /* scroll command line */   ps(prompt); /* prompt */   wait.for.scan=0; /* can do new line */   current.command=interpret_command(command,valid,1); /* decode command */   do case current.command; /* branch to carry out command */                          do; /* 0:  command not recognized */        call return_to_sfm(7); /* return - signal error */      end;      do; /* 1:  ADD in function */        call get_command(local,name); /* get function type */        i=interpret_command(name,'RAN SIN SQU SAW IMP FOU FRE ',1);        if i=0 then call return_to_sfm(7); /* return - signal error */        else        call add_function(zero.vector,location(data.end),i); /* add it in */     end; /* of add in function */     do; /* 2:  IMPULSE response from spectral file */        call get_word(local,name,8);           if add_spectrum(name,1) then call return_to_sfm(7);     end;     do; /* 3:  AUTOCORRELATION from spectral file */        call get_word(local,name,8);           if add_spectrum(name,0) then call return_to_sfm(7);     end;     do; /* 4:  CEPSTRUM from spectral file */        call get_word(local,name,8);           if add_spectrum(name,2) then call return_to_sfm(7);     end;     do;  /* 5:  REVERSE a sound file */        file1;        if f.name.bytes=0 then do;           ovl.error=e.no.file; call return_to_sfm(7);        end;        else if reverse        then call return_to_sfm(7);     end;     do; /* 6:  EXTRACT a segement of a sound file */        if localbytes=byte.ptr then do; /* no arguments */           call copy_vector(time1,mark.start,3); /* use start play marker */           call copy_vector(time2,mark.end,  3); /* use end   play marker */        end;        else if not read_time(time1) then do; /* get first time */           if (localbytes=byte.ptr)         /* at end of line */           then call copy_vector(time2,time1,3); /* move time1 into time2 */           else do;                         /* have more chars to parse */              call get_command(local,name); /* get next token */              if interpret_command(name,'TO  ',1)=1 then do; /* if word 'to' */                 if read_time(time2) then error.flag=e.format; /* read second time */              end;                else error.flag=e.format;     /* not expecting anything but 'TO' */           end;        end;          else error.flag=e.format;        if error.flag<>0 then do;           ovl.error=error.flag; call return_to_sfm(7);        end;        if extract_times(attack,decay,time1,time2) then do;           ovl.error=error.flag; call return_to_sfm(7); /* extract bombed out */        end;     end;   end; /* of do case */   call copy_vector(total.length,zero.vector,3); /* zero these out since file has changed */   call copy_vector(loop.length ,zero.vector,3);   call return_to_sfm(6); /* return - signal no error */end scan_input;
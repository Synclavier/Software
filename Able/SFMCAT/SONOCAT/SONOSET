/* Sonograph Analysis Function    File:  VOICE    Length:  2.00 seconds

Type PF1 to start sonograph, or PF2 to return to SFM

Run Title:      Mongolian Singing

FFT length:     8192         Window TYPe:    HAMMING 
Window LENgth:  0.200 000    Window OFFset:  1.222 333
Pixels/frame:   8  

------------------------------------------------------------------------

Window 1    Width:          250   
            Analysis Type:  Amplitude    Display Mode:  LINEAR
            Lower Limit:    400          Upper Limit:   100

Reference Lines: 
      3.000solid     -5.000dotted    4500  solid     5600  dashed
     8700  dotted    9000  dotted    9300  solid     10400 solid 
     11600 solid     12000 solid     13000 dashed    14000 dashed


Press PF4 to see next window
*/

/* SONOSET  $TITLE  Set Menu Processing Module */

set_menu:  proc; /* menu processor */
   dcl ms.file.location        fixed; /* location of .SONODAT file after found */
   dcl ls.file.location        fixed;
   dcl (screen.row,screen.col) fixed; /* actual pos on screen */
   dcl (table.row, table.col)  fixed; /* table address */
   dcl c.w                     fixed; /* current window number */

   dcl row.table data (-1,-1,-1,-1,0,-1,1,2,3,  -1,-1,-1,
   4,5,6, -1,-1, 7,7,7,7);

   dcl column.table data (
   16, 0, 0, 0, 0, 0, 0, 0, /* title line */
   16,44, 0, 0, 0, 0, 0, 0, /* fft, type */
   16,44, 0, 0, 0, 0, 0, 0, /* length, offset */
   16, 0, 0, 0, 0, 0, 0, 0, /* pixels.frame */
   28, 0, 0, 0, 0, 0, 0, 0, /* width */
   28,56, 0, 0, 0, 0, 0, 0, /* type, mode */
   28,56, 0, 0, 0, 0, 0, 0, /* lower, upper */
   05,11,21,27,37,43,53,59); /* value, dotcode */

   dcl type.table data (
   1,0,0,0,0,0,0,0,
   2,3,0,0,0,0,0,0,
   4,5,0,0,0,0,0,0,
   6,0,0,0,0,0,0,0,
   7,0,0,0,0,0,0,0, /* width */
   8,9,0,0,0,0,0,0,
   11,10,0,0,0,0,0,0,
   12,13,12,13,12,13,12,13);

   dcl (i,j,w)   fixed;

   rchar:  proc; /* wait for and return next input char */
      dcl ch fixed;

      rl.arrow=0; ud.arrow=0; pfkey=0; aux.key=0; /* clear */
      wait.for.scan=0;

      do while (in.buf(0)=0) and (pfkey=0) and (aux.key=0)
      and (wait.for.scan=0) and (rl.arrow=0) and (ud.arrow=0);
         interp_run_host_at_level();
      end; /* wait for char */

      ch=0;
      if in.buf(0)>0 then do; /* received char */
         ch=byte(in.buf,0); /* get char */
         in.buf(0)=0; /* clear buffer */
      end;
      return ch;
   end rchar;

   rpos:  proc(line,col); /* pos based on (0,0) as upper left corner */
      dcl (line,col) fixed;

      call pc(A.ESC); call pc(A.LBRACKET);
      pnum(line+1);
      call pc(a.semicolon);
      pnum(col+1);
      call pc(a.h);
   end rpos;

   rnum:  proc(value); /* print a value left justified in a filled five char field */
      dcl value fixed;
      dcl i     fixed;

      pnum(value);
      do i=1 to 6-num_count(value); call pc(A.SP); end;
   end rnum;

   show.field:  proc(type); /* print value at current location */
      dcl type    fixed;
      dcl temp(2) fixed;

      show_value:  proc(v);
         dcl v fixed;

         if swindow.type(c.w)=AMP_TYPE then do; /* 11 lower */
            call fprint(v*5./32767.,1,3); /* volts */
         end;
         else do; /* spect */
            i=v*rate/fft.len*10; /* bins to hz */
            if swindow.mode(c.w)=M.LINEAR
            then call rnum(i);
            else do; call pc("10"); call fprint(freq_to_pitch(i),1,3); end;
         end;
      end show_value;

      do case type; /* branch on type */
         ; /* 0 */
         do; ps(sono.title); call erase_line; end; /* 1:  title */
         call rnum(fft.len); /* 2: fft length */
         do case window.type; /* 3:  window type */
            ps('Boxcar ');
            ps('Hanning');
            ps('Hamming');
         end;
         do; /* 4:  window length */
            temp(0)=0; temp(1)=0; temp(2)=window.length;
            call index_to_time(temp,temp,period.index);
            call print_time(temp,1,1);
         end;
         do; /* 5:  window offset */
            temp(0)=0; temp(1)=0; temp(2)=window.offset;
            call index_to_time(temp,temp,period.index);
            call print_time(temp,1,1);
         end;
         call rnum(pixels.frame); /* 6 */
         call rnum(swindow.width(c.w)); /* 7 */
         do case swindow.type(c.w); /* 8 */
            ps('Amplitude');
            ps('Sonogram ');
            ps('Frequency');
         end;
         do case swindow.mode(c.w); /* 9 */
            ps('Linear');
            ps('Log   ');
         end;

         call show_value(swindow.upper(c.w)); /* 10 upper */
         call show_value(swindow.lower(c.w)); /* 11 lower */

         do; /* 12:  reference line value */
            i=swindow.lbins(c.w*16+table.col/2+(screen.row-17)*4);
            if i=0 then ps('      ');
            else        call show_value(i);
         end;
         do; /* 13:  reference line code */
            i=swindow.lbins(c.w*16+table.col/2+(screen.row-17)*4);
            if i>0 then do case swindow.ltypes(c.w*16+table.col/2+(screen.row-17)*4);
               ps('solid ');
               ps('dotted');
               ps('dashed');
            end;
            else        ps('      ');
         end;
      end; /* of do case */
   end show.field;

   get_string:  procedure(buff,len); /* read in a string */
      dcl buff     fixed array;
      dcl (ch,len) fixed;

      buff(0)=0; /* clear buffer */
      do while 1;
         ch=rchar; /* get char */
         if      ch<"40" then return; /* exit */
         else if ch=127 then do; /* rubout */
            if buff(0) > 0 then do; /* if chars have been typed */
               buff(0) = buff(0) - 1;
               call pc("10"); call pc("40"); call pc("10");
            end;
         end;
         else if buff(0) < len then do; /* accept char */
            call pc(ch);
            call pbyte(buff,buff(0),ch);
            buff(0)=buff(0)+1;
         end;
      end; /* of do forever */
   end get_string;

   window.rewrite:  proc; /* put up the values for the current window */
      dcl (save1,save2,save3,save4) fixed;

      call rpos(12,0);
      ps('Window '); call pc(A.0+1+c.w);
      ps('    Width:          ');         call show.field(7); nl;
      ps('            Analysis Type:  '); call show.field(8);
      ps('    Display Mode:  ');          call show.field(9); nl;
      ps('            Lower Limit:    '); call show.field(11);
      call rpos(14,39);
      ps('  Upper Limit:   ');            call show.field(10); nl;
      nl; /* blank line */
      psr('Reference Lines:');
      save1=table.row; save2=screen.row; save3=table.col; save4=screen.col;
      table.row=7;
      do screen.row=17 to 20; /* four lines */
         do table.col=0 to 7;
            screen.col=column.table(table.row*8+table.col);
            call rpos(screen.row,screen.col);
            call show.field(type.table(table.row*8+table.col));
         end;
      end;
      table.row=save1; screen.row=save2; table.col=save3; screen.col=save4;
      call rpos(screen.row,screen.col); /* return to initial pos */
   end window.rewrite;

   edit.field:  proc(type); /* get new value for current entry */
      dcl (type,i) fixed;
      dcl change   fixed;
      dcl str(40)  fixed;

      decode_input:  proc fixed; /* decode string value, depending on type and mode */
         dcl v floating;

         change=1; /* signal for change */
         if swindow.type(c.w)=AMP_TYPE then do; /* amp window */
            v = str.to.flt(str); /* floating volts */
            if abs(v)<=5.0 then return int(v/5.*32767.);
            else                return 32767;
         end;
         else do; /* spect window */
            if swindow.mode(c.w)=M.LINEAR then do; /* linear */
               i = str.to.fix(str); /* hz */
            end;
            else do; /* log */
               v = str.to.flt(str); /* 8.pc */
               i = int(pitch_to_freq(v)); /* convert to hz */
            end;
            i=i*fft.len/rate/10; /* convert to bins */
            if i>fft.len/2 then i=fft.len/2; /* apply bin limits */
            if i<0         then i=0;
            return i;
         end;
      end decode_input;

      change=0; /* assume no change */
      str(0)=0; /* clear string work area */

      do case type; /* branch on type */
         ; /* 0:  null type */
         do; /* 1:  run title */
            call get_string(str,80); /* get it */
            if str(0)>0 then do;
               call assign(sono.title,str);
               change=1;
            end;
         end;
         i=rchar; /* 2:  fft length */
         i=rchar; /* 3:  window type */
         i=rchar; /* 4:  window length */
         i=rchar; /* 5:  window offset */
         do; /* 6:  pixels.frame */
            call get_string(str,6);
            if str(0)>0 then do;
               i = str.to.fix(str);
               if (i>0) and (i<=max.pixels.frame) then pixels.frame=i;
               change=1;
            end;
         end;
         do; /* 7:  window width */
            call get_string(str,6);
            if str(0)>0 then do;
               i = str.to.fix(str);
               i=(i/10)*10; /* round down to multiple of 10 */
               if (i>=0) and (i<=max.swindow.width) then swindow.width(c.w)=i;
               change=1;
            end;
         end;
         do; /* 8:  analysis type */
            i = rchar;
            do while i>="40"; /* printable character */
               swindow.type(c.w)=(swindow.type(c.w)+1) mod 3; /* bump to next type */
               call window.rewrite;
               i = rchar; /* get next */
            end;
         end;
         do; /* 9:  analysis mode */
            i = rchar;
            do while i>="40"; /* printable character */
               swindow.mode(c.w)=swindow.mode(c.w) xor 1; /* toggle */
               call window.rewrite;
               i = rchar; /* get next */
            end;
         end;

         do; /* 10:  upper limit */
            call get_string(str,6);
            if str(0)>0 then swindow.upper(c.w)=decode_input; /* got a string */
         end;
         do; /* 11:  lower limit */
            call get_string(str,6);
            if str(0)>0 then swindow.lower(c.w)=decode_input; /* got a string */
         end;
         do; /* 12:  ref line location */
            call get_string(str,6);
            if str(0)>0
            then swindow.lbins(c.w*16+table.col/2+(screen.row-17)*4)=decode_input;
         end;

         do; /* 13:  reference line type */
            i = rchar;
            do while i>="40"; /* printable character */
               i=c.w*16+table.col/2+(screen.row-17)*4;
               swindow.ltypes(i)=(swindow.ltypes(i)+1) mod 3; /* bump to next type */
               call rpos(screen.row,screen.col);
               call show.field(13);
               call rpos(screen.row,screen.col);
               i = rchar; /* get next */
            end;
         end;
      end; /* of do case */
      if change then do; /* update with new value */
         call rpos(screen.row,screen.col);
         call show.field(type); /* show the new value */
         if type=12 then call show.field(13); /* special case to update the type */
      end;
   end edit.field;

   /* start of main code */

   special_clear; /* clear screen */

   call pc(A.ESC); call pc(A.LBRACKET); call pc(A.0+7); call pc(l.m);
   ps('Sonograph Analysis Function');
   call pc(A.ESC); call pc(A.LBRACKET); call pc(A.0+0); call pc(l.m);

   ps('    File:  '); ps(f.name); ps('    Length:  ');
   call print_time(location(data.end),3,1); psr(' Secs.');
   nl; /* blank */

   if ((ls.file.location=0) and (ms.file.location=0)) then do; /* first time - must set up menu and file */
      if locate('.SONODAT',1) then do; /* found it */
         ms.file.location=f#ms_sector; /* store its location */
         ls.file.location=f#ls_sector;
         call readdata(f#ms_sector,f#ls_sector,location(addr(start.sonodata)+1),
            addr(end.sonodata)-addr(start.sonodata)-1); /* read it */
      end;
      else do; /* not there - create file and defaults */
         pixels.frame=8; 

         /* create dummy windows */
         swindow.type(0)  =amp_type;  swindow.width(0)=50;
         swindow.lower(0) =(-32768);  swindow.upper(0)=32767;
         swindow.mode(0)=M.LINEAR;

         swindow.type(1)  =spec_type; swindow.width(1)=300;
         swindow.lower(1) =0;         swindow.upper(1)=fft.len/8;
         swindow.mode(1)=M.LINEAR;

         swindow.type(2)  =freq_type; swindow.width(2)=200;
         swindow.lower(2) =0;         swindow.upper(2)=fft.len/8;
         swindow.mode(2)=M.LINEAR;

         do i=0 to n.swindows*num.ref.lines-1; /* clear ref lines */
            swindow.lbins(i)=0;
         end;

         ps('Computing Logarithm Table...Please Wait'); call pc(A.CR);
         call init.logtab; /* set up log look-up table */
         call replace('.SONODAT',t#data,0,2,512,1); /* create the file */
         call writedata(f#ms_sector,f#ls_sector,location(addr(start.sonodata)+1),
            addr(end.sonodata)-addr(start.sonodata)-1); /* save menu information */
         ms.file.location=f#ms_sector; /* store its location */
         ls.file.location=f#ls_sector;
      end;
   end; /* of first time */

   psr('Hit PF1 to start sonograph, or PF2 to return to SFM');
   nl;
   ps('Run Title:      ');       call show.field(1); nl;
   nl;
   ps('FFT Length:     ');       call show.field(2);
   ps('      Window TYPe:    '); call show.field(3); nl;
   ps('Window LENgth:  ');       call show.field(4);
   ps('   Window OFFset:  ');    call show.field(5); nl;
   ps('Pixels/frame:   ');        call show.field(6); nl;
   nl;
   psr('------------------------------------------------------------------');

   c.w=0; /* start with window 1 */
   call window.rewrite; /* put up initial window */

   in.buf(0)=0; /* clear out the input buffer */
   table.col=0; screen.row=4;
   call rpos(22,0); ps('Press PF4 to see next window');

   do while 1; /* loop over input chars */
      table.row=row.table(screen.row);
      if type.table(table.row*8+table.col)=0 then table.col=0;
      screen.col=column.table(table.row*8+table.col);

      call rpos(screen.row,screen.col);

      call edit.field(type.table(table.row*8+table.col));

      if pfkey=1 then do; /* done with menu - start analysis */
         pfkey=0;
         goto BREAK.OUT;
      end;
      else if pfkey=2 then do; /* back to SFM */
         call writedata(ms.file.location,ls.file.location,location(addr(start.sonodata)+1),
            addr(end.sonodata)-addr(start.sonodata)-1); /* save menu information */
         call return_to_sfm(10);
      end;
      else if pfkey=4 then do; /* advance to next window */
         c.w=(c.w+1) mod 3; /* generate next number */
         call window.rewrite;
         table.col=0; screen.row=12; /* reposition the cursor */
         pfkey=0;
      end;

      else if (ud.arrow=(+1)) and (screen.row>4) then do; /* move up */
         screen.row=screen.row-1;
         do while (row.table(screen.row)=(-1)) and (screen.row>4);
            screen.row=screen.row-1;
         end;
      end;
      else if (ud.arrow=(-1)) and (screen.row<20) then do; /* move down */
         screen.row=screen.row+1;
         do while (row.table(screen.row)=(-1)) and (screen.row<20);
            screen.row=screen.row+1;
         end;
      end;
      else if rl.arrow=(+1) then do; /* move right */
         if (table.col<7) and type.table(table.row*8+table.col+1)>0
         then table.col=table.col+1;
      end;
      else if rl.arrow=(-1) then do; /* move left */
         if table.col>0 then table.col=table.col-1;
      end;

		interp_run_host_at_level();

   end; /* of do while 1 */

   BREAK.OUT:
   call writedata(ms.file.location,ls.file.location,location(addr(start.sonodata)+1),
      addr(end.sonodata)-addr(start.sonodata)-1); /* save menu information */
end set_menu;

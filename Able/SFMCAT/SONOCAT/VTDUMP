/* VTDUMP  $TITLE  Hardcopy Output Routine without Formfeeds Between Pages *//* Copyright 1985 by New England Digital Corporation */HARDCOPY:  procedure(START,STOP,SLEW); /* dumps screen to PAPER TIGER/PRISM series printer */   dcl START              fixed; /* first pixel line of screen to dump */   dcl STOP               fixed; /* last  pixel line of screen to dump */   dcl SLEW               fixed; /* set true to generate formfeed at end of print */   dcl GON                lit 'character(03)';   dcl GOFF               lit 'GON,character(02)';   dcl LINEFEED           lit 'GON,character(14)';   dcl FORMFEED           lit 'GON,character(A.FF)';   dcl STORAGE(454)       fixed;   dcl (POINTER,BUFF) (6) fixed;   dcl (WORD,LAST)        fixed;   dcl (I,J,K,L)          fixed;   /* set up pointers to each line of storage array */   do I = 0 to 6;  POINTER(I) = addr(STORAGE(I*65));  end;   vector_mode; alpha_mode; send GON,; /* begin graphics mode on printer */   do I = 0 to (START-STOP) by 7; /* loop over (7 pixel high) regions on screen */      do J = 0 to 454;  STORAGE(J) = 0;  end; /* clear storage array */      LAST = -1; /* no last column with bit set */      do J = 0 to 6; /* loop over 7 lines of pixels */         K = START-I-J; /* compute pixel line reference */         if K>=0 then do; /* if not off of screen */            enable;            call pc(A.ESC); ps('"0;'); pnum(K); ps(';128c'); /* emit readback command */            call tty_wait;            disable;            do L = 0 to 127; /* loop over (5 pixel horizontal) groups */               WORD = read ("50"); /* get five pixels of data */               if WORD = A.DOLLAR then do; /* repeat code for zero pixel blocks */                  WORD = read ("50"); /* get repeat count */                  L = L + (WORD & "000077") - 1; /* advance by repeat count */               end;               else do; /* regular data value */                  call pbyte(location(POINTER(J)),L,WORD); /* put into STORAGE */                  if L > LAST then LAST = L; /* indicate that a pixel has been set in this line */               end;            end; /* of loop over (5 pixel horizontal) groups */         end; /* of if not off of screen */      end;  /* of loop over 7 lines of pixels */      if LAST <> (-1) then do; /* if non-blank line */         /* this logic converts the (5 pixels horizontal) groups read back */         /* from the terminal, to the (7 pixels vertical) groups required  */         /* by the printer.                                                */         do J = 1 to 10;  send character(0),;  end; /* send leading nulls */         do J = 0 to LAST; /* loop over (5 pixel horizontal) groups */            do K = 0 to 6; /* get from storage, rotating left-most bit to lsb */               BUFF(K) = byte(location(POINTER(K)), J);               BUFF(K) = rot(BUFF(K),12);            end;            do K=1 to 5; /* create and emit the (7 pixel vertical) groups */               WORD = "000000"; /* start with zero */               do L = 0 to 6; /* loop over 7 pixels */                  WORD = shl(WORD,1) \ (BUFF(6-L)&1); /* shift and or in next pixel */                  BUFF(6-L) = rot(BUFF(6-L),1); /* adjust for next vertical group */               end;               if WORD = 3 then send GON,; /* special case in printer logic */               send character(WORD),; /* emit the word */            end; /* of create and emit group */         end; /* of loop over horizontal groups */      end; /* of if non-blank line */      send LINEFEED,; /* begin new line on printer */   end; /* of loop over (7 pixel high) regions on screen */   if SLEW then send FORMFEED,; /* send formfeed command */   send GOFF,; /* exit graphics mode */   enable;   transparent_mode;end HARDCOPY;
/*	:SYNMAINS:BLD-DAEE  -  $TITLE  Build Audio Event Editor version (all screens)Modified:1999/10/10 - TY  - Added Conductor Screen1989/08/08 - MWH - Move	public declaration out of dummy "Z" page procedure1988/10/04 - LSS - screens O, P and AEE are included/deleted together1988/06/06 - MWH - Rename from "SYN-ANY"1988/02/10 - MWH - Author*//*                                      1         2         3         4         5     *//*                             123456789012345678901234567890123456789012345678901234 *//* dcl Trace.Message data public('NED - Master Copy - 05/26/88    '); */dcl modelc lit 'modelD'; /* MODEL D stuff here *//* $f *//*	insert ':debug';	*/dcl x lit '/*';/* To include a given screen (or group of screens), mark an x in the   literal for the screen; to exclude a screen set the "no_..."   literal to x.  Exactly ONE of each pair must be set to x! */                                         /* (approx size in sectors) */dcl    dir#screen   lit 'x';  /* A = Timbre Directory           (37) */dcl no_dir#screen   lit ' ';  /* C = Sequence Directory              */                              /* D = Subcatalog Directory            */                              /* M = Missing Sound File Display      */                              dcl    stor#screen  lit 'x';  /* B = Sound File Directory      (175) */dcl no_stor#screen  lit ' ';dcl    tds#screen   lit 'x';  /* F = FM Timbre Display Screens  (95) */dcl no_tds#screen   lit ' ';dcl    rec#screen   lit 'x';  /* G = Recorder Screen            (54) */dcl no_rec#screen   lit ' ';dcl    rout#screen  lit 'x';  /* H = Multichannel Screen        (31) */dcl no_rout#screen  lit ' ';  /* J = Midi Screen                     */dcl    patch#screen lit 'x';  /* I = Patch Assignment Screen    (26) */dcl no_patch#screen lit ' ';dcl    mnot#screen  lit 'x';  /* K = Music Notation Screen      (71) */dcl no_mnot#screen  lit ' ';dcl    stm#screen   lit 'x';  /* L = STM Sound File Editor     (234) */dcl no_stm#screen   lit ' ';dcl    sys#screen   lit 'x';  /* E = System Screen               (7) */dcl no_sys#screen   lit ' ';dcl    edit#screen  lit 'x';  /* S = Sequence Editor           (118) */dcl no_edit#screen  lit ' ';dcl    aud#screen   lit 'x';  /* Q = Audio Event Editor        (503) */dcl no_aud#screen   lit ' ';  /* O = DTD Project Directory           */                              /* P = DTD Track Display               */dcl    arch#screen  lit 'x';  /* R = Optical Disk Directory     (62) */dcl no_arch#screen  lit ' ';dcl	 cond#screen	lit ' ';	/*	T = Conductor Tools Screen				*/dcl no_cond#screen	lit 'x';dcl    map#screen   lit ' ';  /* Y = Keyboard Mapping Screen         */dcl no_map#screen   lit 'x';dcl    dbug#screen  lit ' ';  /* Z = Internal RealTime Debugger (23) */dcl no_dbug#screen  lit 'x';                              /* Basic real-time code          (812) */insert ':synlits:comlits';insert ':synlits:globlits';insert ':synmods:globdcl';insert ':synmods:syncldcl';insert ':synmods:mousedcl';insert ':synmods:tprimdcl';insert ':synmods:welcdcl';no_dir#screen   insert ':synmods:dirdcl';dir#screen  */dir#screen   TIMBRE.DIRECTORY.SCREEN       :proc (arg)             public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   SEQUENCE.DIRECTORY.SCREEN     :proc (arg)             public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   SUBCAT.DIRECTORY.SCREEN       :proc (arg)             public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   MISSING.SOUND.FILE.SCREEN     :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_dir#screen  */no_stor#screen   insert ':synmods:stordcl';stor#screen  */stor#screen   RECALL.SOUND.FILE.SCREEN      :proc (arg1,arg2,arg3)  public swapable;      dcl (arg1,arg2,arg3) fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_stor#screen  */no_tds#screen   insert ':synmods:tdsgdcl';   insert ':synmods:tdsndcl';tds#screen  */tds#screen   TDS.NUMERIC.DISPLAY           :PROC(arg) public swapable;        dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   TDS.TIMBRE.FRAME.DISPLAY      :proc(arg) public swapable;        dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   TDS.GRAPHIC.DISPLAY           :proc(arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   TDS.3D.DISPLAY                :proc(arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   TDS.PARTIAL.DISPLAY           :proc(arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_tds#screen  */no_rec#screen   insert ':synmods:recdcl';rec#screen  */rec#screen   RECORDER.SCREEN               :proc(arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_rec#screen  */no_rout#screen   insert ':synmods:routdcl';rout#screen  */rout#screen   MULTICHANNEL.DISPLAY          :proc(arg) public swapable;        dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   MIDI.DISPLAY                  :proc(arg) public swapable;        dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_rout#screen  */no_patch#screen   insert ':synmods:patchdcl';patch#screen  */patch#screen   PATCH.ASSIGNMENT.SCREEN       :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   KBD.PATCH.ASSIGNMENT.SCREEN   :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   ASSIGNMENT.HELP.SCREEN        :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_patch#screen  */no_mnot#screen   insert ':synmods:mnotdcl';mnot#screen  */mnot#screen   MUSIC.NOTATION.SCREEN         :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_mnot#screen  */no_stm#screen   insert ':synmods:stmdcl';stm#screen  */stm#screen   STM.SCREEN                    :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_stm#screen  */no_sys#screen   insert ':synmods:sysdcl';sys#screen  */sys#screen   SYSTEM.SCREEN                 :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_sys#screen  */no_edit#screen   insert ':synmods:editdcl';edit#screen  */edit#screen   SEQ.EDIT.SCREEN :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_edit#screen  */no_aud#screen   insert ':synmods:auddcl';aud#screen  */aud#screen   DIRECT.TO.DISK.SONG.DIRECTORY :proc(arg) public swapable;        dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   DIRECT.TO.DISK.TRACK.DISPLAY  :proc(arg) public swapable;        dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;   AUDIO.EVENT.EDITOR.SCREEN :proc (arg) public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_aud#screen  */no_arch#screen   insert ':synmods:archdcl';arch#screen  */arch#screen   LASERDISK.ARCHIVE.SCREEN  :proc    (arg) public swapable;      dcl (arg) fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_arch#screen  */no_cond#screen	insert ':synmods:conddcl';cond#screen	*/cond#screen	CONDUCTOR.SCREEN					:proc (arg)	public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_cond#screen	*/no_map#screen	insert ':synmods:mapdcl';map#screen	*/map#screen	KEYBOARD.MAPPING.SCREEN			:proc (arg)	public swapable;      dcl arg fixed;      call draw.message('Feature Is Not Available'); return -1;   end;no_map#screen	*/no_dbug#screen	insert ':synmods:dbugdcl';dbug#screen	*/dbug#screen	dcl seqdbug(9)	fixed	public;	DBUG.SCREEN							:proc (arg)	public swapable;		dcl arg	fixed;		call draw.message('Feature Is Not Available'); return -1;	end;no_dbug#screen  */call initialization;call mouse.init;call welcome.screen(0);
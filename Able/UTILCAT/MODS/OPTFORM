/* OPTFORM  $SUBTITLE Optical Media Formatting Routines *//* Modification:      10/05/96 - CWJ - ignored failure of mode select (required for T4-2600      07/23/90 - LSS - created this module      Original format code: Kip J. Olson*/module format_optical;configuration modelC, MULDIV;insert ':-xpl:literals'; 	/* literals */insert ':-xpl:syslits';  	/* system literals */insert ':-xpl:termrout'; 	/* terminal utilities */insert ':-xpl:scsi';     	/* SCSI commands */insert ':-xpl:scsicmds'; 	/* SCSI commands */insert ':-xpl:devutil';  	/* device handlers */insert ':-xpl:optical';  	/* optical drivers */insert ':-xpl:strings';  	/* string utilities */insert ':-xpl:intrprtr';dcl rpt        lit  '"10"';									/* repeat counter */dcl repeat     lit  'write(rpt)=';							/* repeat macro */dcl wt1        lit  'write(ScsiWord) = read(r0)';		/* Write one word to SCSI bus */dcl fastwrite  lit  'repeat 255; wt1';						/* Write 256 words in a hurry *//* This routine writes a pattern every block of the magneto media. */write_media: proc (DevAdr, ms_length, ls_length) returns (fixed);	dcl DevAdr    fixed;   dcl ms_length fixed; /* MS word of number of blocks on the media to format */   dcl ls_length fixed; /* LS word; note this is native block size; e.g. number of 1024 or 512 blocks... */   dcl (ms_start, ls_start) fixed; /* where to start writing */   dcl NumBlocks            fixed; /* number of blocks to write at one time */	dcl Stat                 fixed;   SlowWrite: procedure;      dcl i fixed;      do while ( (read(ScsiBus) and (S$REQ | S$ACK)) != S$REQ ); end; /* Wait for our hardware to release ACK, and target to assert REQ */       do while ((read(ScsiBus) and S$SigMask) = S$DataOut); /* Repeat until phase changes */         write(R0) = "H6363";                 /* pattern that is being written to disk */         fastwrite;                           /* Write a 256 word sector */     		do while ( (read(ScsiBus) and (S$REQ | S$ACK)) != S$REQ ); end; /* Wait for our hardware to release ACK, and target to assert REQ */      end;                                    /* of Repeat until phase change */   end SlowWrite;   WriteCommand: proc (DevAdr, Blocks);	   dcl DevAdr    fixed;      dcl Blocks    fixed; /* number of blocks to write */      dcl Stat      fixed; /* status */		Stat = S$UnitAttention;				while (Stat == S$UnitAttention)		{			interp_write_blank_pattern();			/* tell interpreter to write blanks */						Stat = BusConnect(DevAdr);				/* Connect to SCSI bus */			if Stat <> S$GoodConnect then return (Stat);				/* Send Write command */			write(ScsiByte) = S$ExtendedWrite;   /* Operation code */			write(ScsiByte) = S$BusConnectLUN;   /* LUN */			write(ScsiWord) = ms_start;          /* MSW of starting block */			write(ScsiWord) = ls_start;          /* LSW of starting block */			write(ScsiByte) = 0;                 /* Reserved */			write(ScsiWord) = blocks;            /* No. blocks to write */			write(ScsiByte) = 0;                 /* Control byte */				call SlowWrite;							 /* Write as much data as it will take... */						Stat = GetStatus(DevAdr);     		 /* Get status of command */		}				return (Stat);   end WriteCommand;   /* Main code of WRITE_MEDIA */   ms_start = 0; ls_start = 0;				/* format always starts at zero */   do while (ms_length <> 0) or (ls_length <> 0);		if ((ms_length !=  0  )		||  (ls_length IGT 100))			NumBlocks = 100;		else			NumBlocks = ls_length;			      Stat = WriteCommand (DevAdr, NumBlocks);				if (Stat != 0)			return (Stat);			      ls_start = ls_start + NumBlocks;      if ls_start ilt NumBlocks then ms_start = ms_start + 1;				if (NumBlocks IGT ls_length)			ms_length = ms_length - 1;		ls_length = ls_length - NumBlocks;				interp_run_host_250();   end;		return (S$Good);end write_media;/* FORMAT_OPTICAL_MEDIA is called by FORMAT and returns the following:     -1: some SCSI connect error (should not occur)      0: format happened OK      1: user aborted format process      2: no media in the drive      3: media in drive is not 1024 bytes/sector format      4: media in drive is write-protected      5: a medium error   occurred during the format process      6: some other error occurred during the format process*/format_optical_media: proc(Level) returns (fixed) public; /* format a 5-inch optical media */   dcl Level			fixed;   dcl Stat             fixed; /* Status Word */   dcl buf(9)           fixed; /* mode select buffer */   dcl (ms_len, ls_len) fixed; /* number of blocks on media */   dcl ibuf(2)          fixed; /* input buffer */   dcl force_SCSI       boolean; /* force a slip sector format even if media already written to */   dcl i                fixed;   dcl blocksize        fixed;   dcl DevAdr				fixed;		force_SCSI  = false;	ms_len      = 0;	ls_len      = 0;		i = find_device (level);						/* find the device */	if (i == 0) return (-1);						/* system error of unknown sort */	DevAdr = core(i + s#devadr);					/* get scsi device address	*/	   stat = Inquiry(DevAdr, 4, buf);				/* get inquiry data */   if stat <> S$Good then return (-1);			/* can't inquire: big trouble */	if ((byte(buf,0) & 0x1F) != 0)				/* make sure still not a WORM! */		return (-1);		   Stat = TestUnitReady(DevAdr); 				/* see if device is ready */   if stat = S$NotReady then   return ( 2); 	/* probably no media in the drive */   else if stat <> S$Good then return (-1); 	/* some other problem */	/* here we try and detect the early T-1 drives, and mode-select them as needed 	*/	/* skip this stuff for new drives																*/		stat = ReadCapacity(DevAdr, buf);			/* read capacity */	if (stat != S$Good || buf(0) != 8)			/* if can't get capacity. I don't know how the T-1 responds	*/		blocksize = 0;									/* in all cases...														*/	else		blocksize = shl(byte(buf,6),8) or byte(buf,7);	if (blocksize != 512)  												/* try to do mode sense */ 		stat = ModeSense(DevAdr, "H2A", 16, buf);					/* get sense bytes if it could be T-1 */	if (blocksize != 512 && stat == S$Good && buf(0) == 16)	/* if could do so, look further */	{      if (byte(buf,10) = "H02")   then return (3);				/* media is not 1024 bytes/sector format */      if (shr(byte(buf,2),7) = 1) then return (4);				/* media is write-protected */      if (shr(byte(buf,14),1) = 1) then force_SCSI = true;	/* LNR bit is set, need to force slip sector format */      else                              force_SCSI = false; /* already formatted */      ms_len = byte(buf,5);											/* MSB number of blocks on media */      ls_len = ((shl(byte(buf,6),8)) or byte(buf,7));			/* LSB number of blocks on media */				if (force_scsi != 0)												/* if LNR bit set, do mode select to turn it off */		{			/* Mode Select: In page H2A, turn off LNR bit.  We want the format to use				slipping defect management, not linear replacement. */				buf(0) = 17;                   							/* byte length of data in buffer */			buf(1) = shl(3, 8);            							/* medium type == optical rewritable */			buf(2) = 0;														/* no block descriptor length; e.g. we skip it on the select */			buf(3) = shl("HB",8) or "H2A"; 							/* page length, page code */			do i = 4 to 9; buf(i) = 0; end; 							/* clear rest of buffer */				ModeSelect(DevAdr,0,17,buf); 								/* send sense bytes; tough tootsies if no go */		}   }		/* begin format pass */		pstringr ('*** Beginning SCSI Format Pass ...'); flush_term;		stat = IssueFormat (DevAdr); /* issue SCSI format command */	if stat = S$Good	then do;		pstringr ('    ...Completed.'); crlf;	end;	else do;		pstringr ('    ...FAILED!!'); crlf;		if stat = S$MediumError then return (5);		else return (6);													/* some other SCSI error occurred */	end;			/* Now write the blank pattern: */	   stat = ReadCapacity(DevAdr, buf);								/* check final capacity				*/		if (stat == S$Good && buf(0) == 8)								/* if could get capacity...		*/	{      ms_len = shl(byte(buf,0),8) or byte(buf,1);				/* note: capacity is in native block size at this point!! */      ls_len = shl(byte(buf,2),8) or byte(buf,3);   	ls_len = ls_len + 1; 											/* add one to get total no. blocks */   	if ls_len ilt 1 then ms_len = ms_len + 1;	}		else if (ms_len == 0 && ls_len == 0)							/* couldn't get capacity			*/		return (7);		   pstringr ('*** Beginning NED Format Pass ...'); flush_term;   stat = write_media (DevAdr, ms_len, ls_len);					/* try to write to every block	*/	init_optical_controller();											/* re-init type & size now 		*/	if stat = S$Good	then do;		pstringr ('    ...Completed.'); crlf;	end;	else do;		pstringr ('    ...FAILED!!'); crlf;		if stat = S$MediumError then return (5);		else return (6);													/* some other SCSI error occurred */	end;   		return (0); /* format was successful */end format_optical_media;end format_optical;
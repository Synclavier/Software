/*	:SYNMODS:MATHDCL  $TITLE  HIGH PRECISION MATH ROUTINESModified:2000/01/23 - TY  - Added external declarations and library statement for MATHMOD01991/02/04 - PF  - added dcl for FRACTDIV321989/11/15 - MWH - Make "neg32" public1988/04/26 - JSS - "times" (linear) <=> dB (log) amplitude mapping routines1987/10/30 - MWH - ADD and SUB routines for FEET, SMPTE and BEATS1987/06/11 - MWH - Added 32 bit math function names*/DCL (BITMSB,BITLSB)		FIXED	EXTERNAL;DCL (MUL.LLSB)				FIXED	EXTERNAL;DCL (MULTIPLY.RESULT)	ARRAY	EXTERNAL;DCL MULTIPLY					PROC(FIXED,FIXED,FIXED,FIXED)	EXTERNAL;	/*	SCALE BITMSB BITLSB BY A.BCD	*/DCL UNROUND						PROC									EXTERNAL;	/*	PROCEDURE TO PROVIDE TRUNCATED RESULT	*/DCL RATIOMULTIPLY				PROC(FIXED,FIXED)					EXTERNAL;DCL LONGINVERT					PROC(FIXED,FIXED,FIXED,FIXED)	EXTERNAL;DCL MULTIPLE.PRECISION.ADD	PROC(ARRAY,ARRAY,ARRAY,FIXED)	EXTERNAL;DCL FRACTDIV32					PROC(ARRAY,ARRAY,ARRAY)			EXTERNAL;dcl film.fps				data	EXTERNAL;	/*	frames per sec  indexed by FOOTAGE MODE	*/dcl film.fpf				data	EXTERNAL;	/*	frames per foot indexed by FOOTAGE MODE	*/DCL FRAMES.PER.SECOND	DATA	EXTERNAL;	/*	FRAMES PER SECOND (INDEXED BY SMPTE MODE)	*/DCL BITS.PER.MSEC.A		DATA	EXTERNAL;DCL BITS.PER.MSEC.B		DATA	EXTERNAL;DCL BITS.PER.MSEC.C		DATA	EXTERNAL;DCL BITS.PER.MSEC.D		DATA	EXTERNAL;DCL MSECS.PER.BIT.A		DATA	EXTERNAL;DCL MSECS.PER.BIT.B		DATA	EXTERNAL;DCL MSECS.PER.BIT.C		DATA	EXTERNAL;DCL MSECS.PER.BIT.D		DATA	EXTERNAL;/*	NOTE - C.HRS, C.MIN, C.SEC, C.FRA, C.BIT MUST BE DECLARED IN ORDER			*/DCL C.HRS	FIXED	EXTERNAL;	/*	GLOBALS USED BY SMPTE COMPUTATION ROUTINES	*/DCL C.MIN	FIXED	EXTERNAL;DCL C.SEC	FIXED	EXTERNAL;DCL C.FRA	FIXED	EXTERNAL;DCL C.BIT	FIXED	EXTERNAL;DCL SMPTE.TO.SBITS		proc(array,fixed,array)							external;DCL SBITS.TO.SMPTE		proc(array,fixed,array)							external;DCL SBITS.TO.MSEC			proc(array,fixed,fixed,fixed,array)			external;DCL MSEC.TO.SBITS			proc(array,fixed,fixed,fixed,array)			external;DCL MSEC.TO.SMPTE			proc(array,fixed,fixed,fixed,array,array)	external;DCL SMPTE.TO.MSEC			proc(array,fixed,fixed,fixed,array,array)	external;DCL FEET.TO.FBITS			proc(array,fixed,array)							external;	/*	converts footage to 80ths of film frames	*/DCL FBITS.TO.FEET			proc(array,fixed,array)							external;	/*	converts 80ths of frames to footage	*/DCL FBITS.TO.MSEC			proc(array,fixed,fixed,fixed,array)			external;	/*	converts film footage subframe bits to Synclavier msec	*/DCL MSEC.TO.FBITS			proc(array,fixed,fixed,fixed,array)			external;	/*	converts Synclavier msec to film footage subframe bits	*/DCL MSEC.TO.FEET			proc(array,fixed,fixed,fixed,array,array)	external;	/*	converts Synclavier msec to Film Footage	*/DCL FEET.TO.MSEC			proc(array,fixed,fixed,fixed,array,array)	external;	/*	converts Film Footage to Synclavier msec	*/DCL SEC.TO.MSEC			proc(array,fixed,array)			external;DCL MSEC.TO.SEC			proc(array,fixed,array)			external;DCL BEATS.TO.MSEC			proc(array,fixed,fixed,array)	external;DCL MSEC.TO.BEATS			proc(array,fixed,fixed,array)	external;DCL MSEC.TO.DURATION		proc(array) returns(fixed)		external;dcl COMPARE_TIMES			proc(fixed array,fixed array,fixed) returns (fixed)	external;	/*	compares two times, return 0 if equal, 1 if a>b, -1 if a<b	*/dcl TIME_NORMALIZE		proc(fixed array)					external;dcl COPY_TIME				proc(fixed array,fixed array)	external;		/*	=====>	*/dcl NORMALIZE.SMPTE		proc(array,fixed)					external;dcl NORMALIZE.FEET		proc(array,fixed)					external;dcl NORMALIZE.BEATS		proc(array)							external;dcl NORMALIZE.SF.TIME	proc(array)							external;dcl ADD.SMPTE				proc(array,array,array,fixed)	external;dcl SUB.SMPTE				proc(array,array,array,fixed)	external;dcl ADD.FEET				proc(array,array,array,fixed)	external;dcl SUB.FEET				proc(array,array,array,fixed)	external;dcl ADD.BEATS				proc(array,array,array)			external;dcl SUB.BEATS				proc(array,array,array)			external;dcl ADD.SF.TIME			proc(array,array,array)			external;dcl SUB.SF.TIME			proc(array,array,array)			external;dcl Convert.SF.Len.To.Samples	proc(array,array)			external;dcl Convert.Samples.To.SF.Len	proc(array,array)			external;DCL STR32					proc(fixed,fixed,array)			external;DCL ADD16					proc(fixed,array)					external;DCL SUB16					proc(fixed,array)					external;DCL ADD32					proc(array,array,array)			external;DCL SUB32					proc(array,array,array)			external;DCL COM32					proc(array,array) returns (fixed)	external;DCL COM16					proc(fixed,array) returns (fixed)	external;DCL COPY32					proc(array,array)					external;DCL SHL32					proc(array,fixed)					external;DCL SHR32					proc(array,fixed)					external;DCL NEG32					proc(array)							external;DCL MSEC.To.DTD.Sample.#			proc (Array, Fixed, Fixed, Fixed, Array, Array)	external;												/*	Sample#, Format, Speed, Rate, Base, Msec	*/DCL DTD.Sample.#.To.Msecs			proc (Array, Fixed, Fixed, Fixed, Array, Array)	external;DCL Signed.DTD.Sample.#.To.Msecs	proc (Array, Fixed, Fixed, Fixed, Array, Array)	external;dcl map_times_to_dB		proc (fixed) returns (fixed)	external;dcl map_dB_to_times		proc (fixed) returns (fixed)	external;dcl Remove.Zero.Time.Offset	proc(array)					external;dcl Add.Zero.Time.Offset		proc(array)					external;INSERT  ':SYNAUXS:MATHLITS';//	External declarations for MATHMOD0dcl sqroot				proc (fixed)	returns (fixed)	external;dcl print_u32			proc (fixed array,boolean)			external;dcl ratio_multiply	proc (fixed,fixed)					external;dcl mul_32by32			proc (fixed array,fixed array)	external;dcl div_64by32			proc (fixed array,fixed array)	external;LIBRARY ':SYNLIBS:MATHLIB';	//	module MATHMODLIBRARY ':SYNLIBS:MATHLIB0';	//	module MATHMOD0
/*Title           : M128/M512K test module  - inserted in LOGGER                  (modified M128test)Project Engineer: William LeathersProject Start   : Feb 1986New England Digital Corporation*//***************************************************************************//************     Required for stand - alone compilation    ****************//*insert ':-xpl:asciidef';insert ':-xpl:termutil';insert ':-xpl:intrprtr';insert ':NEWDIAGS:sysinit';dcl status_line1 lit '18,10';  dcl status_line2 lit '19,10'; dcl status_line3 lit '20,10';  dcl status_line4 lit '21,10'; dcl erase_status_lines lit 'call clr_status';clr_status: proc;  pos(status_line4); erase_line;  pos(status_line3); erase_line;  pos(status_line2); erase_line;  pos(status_line1); erase_line;end clr_status;*//* Global variables */dcl (#randomlsb,#randommsb) fixed; /* seed for random number generator */dcl #last_seed_msb         fixed; /* copy of last seed */dcl #last_seed_lsb         fixed; /* copy of last seed */dcl external_memory_errors fixed;/***************************************************************************/dcl test_external_memory lit 'call #test_external_memory';#test_external_memory: proc;  /* D4567 Hardware Multiply/Divide Board Literals */  dcl load lit 'write(5)='; dcl mul  lit 'write(6)=';  dcl div  lit 'write(7)='; dcl res  lit 'read(5)';  dcl mam  lit '"60"';      /* memory address msb */  dcl mal  lit '"61"';      /* memory address lsb */  dcl md   lit '"62"';      /* memory data                */  dcl mdi  lit '"63"';      /* memory data with increment */  dcl examount fixed;       /* number of sectors of external memory */  dcl (rnd#,rnd_temp)       fixed;  dcl (buf,buf1) (255) fixed; /* two buffers                          */  dcl low_sector       fixed;  dcl high_sector      fixed;  dcl sec              fixed; /* current sector being tested          */  dcl mem              fixed; /* value of last word read from ext mem */  dcl (i,j,k,delay)    fixed;  /***************************************************************************/  XMREAD:PROC(MSW,LSB); /* M128K READ SETUP ROUTINE */     DCL (MSW,LSB) FIXED;     WRITE(MAM)=MSW; WRITE(MAL)=LSB;  END XMREAD;  /***************************************************************************/  XMWRITE:PROC(MSW,LSB); /* M128K WRITE SETUP ROUTINE */     DCL (MSW,LSB) FIXED;     WRITE(MAM)=MSW; WRITE(MAL)=LSB;  END XMWRITE;  /**********************************************************************/  /**********************************************************************/  /* writes from addr pointed to by R13 to ext mem */  dcl w1  lit 'write(mdi)=read("373")';  dcl w8  lit 'w1; w1; w1; w1; w1; w1; w1; w1';  dcl w64 lit 'w8; w8; w8; w8; w8; w8; w8; w8';  dcl write_256_words_to_ext_mem lit 'w64; w64; w64; w64';  /* copies from ext mem to addr pointed to by R13 */  dcl r1  lit 'write("373")=read(mdi)';  dcl r8  lit 'r1; r1; r1; r1; r1; r1; r1; r1';  dcl r64 lit 'r8; r8; r8; r8; r8; r8; r8; r8';  dcl read_256_words_from_ext_mem lit 'r64; r64; r64; r64';  /**********************************************************************/  /**********************************************************************/  /* writes from addr pointed to by R13 to ext mem */  dcl xwrite_256_words_to_ext_mem lit 'call #write_256_words';  #write_256_words: proc;     dcl i fixed;     do i = 0 to 255;  write(mdi) = read("373");  end;  end #write_256_words;  /**********************************************************************/  /* copies from ext mem to addr pointed to by R13 */  dcl xread_256_words_from_ext_mem lit 'call #read_256_words';  #read_256_words: proc;     dcl i fixed;     do i = 0 to 255; write("373")=read(mdi); end;  end #read_256_words;  /**********************************************************************/  dcl generate_32_random_numbers lit 'call #generate_32';  #generate_32: proc;    dcl root lit '16807';    dcl i fixed;    do i = 0 to 32;      load root; mul #randomlsb; rnd_temp = read(4); #randomlsb = res;   /* a */      load root; mul #randommsb; #randommsb = rnd_temp+res;              /* b */      if #randommsb ILT res then rnd_temp = shl(read(4)+1,1);         /* c */      else                      rnd_temp = shl(read(4),1);           /* d */      rnd_temp = rnd_temp + ((#randommsb&"100000")<>0);                 /* e */      #randomlsb = #randomlsb + rnd_temp;                               /* f */      if #randomlsb ILT rnd_temp then #randommsb = #randommsb + 1;        /* g */      #randommsb = #randommsb & "077777";                                /* h */      write("373") = (shl(#randommsb,1) + ((#randomlsb&"100000")<>0));   /* i */    end;  end #generate_32;  /**********************************************************************/  initialize_seed:  proc; /* initializes random number generator seed */     #randommsb=1; #randomlsb=57921; /* initialize seed to 123457 */     #last_seed_msb=#randommsb; #last_seed_lsb=#randomlsb; /* save seed */  end initialize_seed;  /***************************************************************************/  dcl log_memory_error lit 'call #log_memory_error';  #log_memory_error:  proc;     if external_memory_errors = 0 then do;       pos(status_line4); erase_line;       pstring('  - External memory error found  ');     end;     if external_memory_errors <> "HFFFF" then        external_memory_errors = external_memory_errors + 1;  end #log_memory_error;  /***************************************************************************/  /* $SUBTITLE  Initialization and Memory Addressing Test Code */  examount  = #_external_memory_sectors;   low_sector =0;          /* first sector to test                            */  high_sector=examount-1; /* last sector to test                             */  if iteration_number = 1 then  call initialize_seed;   /* set random number generator seed                */  erase_status_lines;  pstring('Testing external computer memory ... ');  pos(status_line2);   pstring('  - System contains '); unum(examount,0);  pstring(' sectors of external memory.'); pos(status_line3);      /*******************************************************************/      /* 1.  First fill each location of memory with its own address mod 64K */      pos(status_line3); erase_line;      pstring('  - Doing Addressing Test...');      pos(status_line4);      call xmwrite(low_sector,0);     /* set ptrs to start of ext mem */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;       /* a character was typed */         do i=0 to 255;          /* load BUF with 256 addresses numbers */            buf(i)=shl(sec,8)+i;         end;         write("313")=addr(buf(0));   /* reset R13 to start of BUF */         write_256_words_to_ext_mem;  /* dump from BUF to ext memory */         sec=sec+1;      end;      /* 2.  Now read external memory to make sure data is still correct */      call xmread(low_sector,0);      /* set ptrs to start of ext mem */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;         write("313")=addr(buf(0));   /* load R13 with ptr to BUF */         read_256_WORDS_from_ext_mem; /* read from ext mem to temp array */         do i=0 to 255;          /* compare data read to data written */            if buf(i)<>(shl(sec,8)+i) then log_memory_error;         end;         sec=sec+1;      end;      /******************************************************************/      /* $SUBTITLE  Write/Read Test */      /* 1.  First zero out external memory */      pos(status_line3); erase_line;      pstring('  - Doing Write/Read Test...');      pos(status_line4);      write("313")=addr(buf(0));   /* set R13 to start of BUF */      do i=0 to 255;               /* load BUF with alternating all 1's and all 0's */         buf(i)=0;      end;      call xmwrite(low_sector,0);     /* set ptrs to start of ext mem */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;         write("313")=addr(buf(0));   /* reset R13 to start of BUF */         write_256_words_to_ext_mem;  /* dump from BUF to ext memory */         sec=sec+1;      end;      /* 2.  Now do the write followed by read test */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;         write("60")=sec;              /* set ptr to sector start */         do i=0 to 255 by 2;          /* now do writes followed by reads */            /* first rewrite (-1) to even locations -- forces auto-increment */            write(mdi)=-1;            write("313")=read(mdi);   /* now read and increment */            if read("313")<>0 then do; /* presumably did not do previous auto-increment properly */               log_memory_error;            end;         end;         sec=sec+1;      end;      /***************************************************************/      /* $SUBTITLE  Random Number Test Code */      /* 3.  Next fill external memory with random numbers */      pos(status_line3); erase_line;      pstring('  - Filling Memory with Random Numbers...');      pos(status_line4);      call xmwrite(low_sector,0);     /* set ptrs to start of ext mem */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;         write("313")=addr(buf(0));   /* set R13 to start of BUF */         do i=1 to 8;                 /* load BUF with 256 random numbers */            generate_32_random_numbers;         end;         write("313")=addr(buf(0));   /* reset R13 to start of BUF */         write_256_words_to_ext_mem;  /* dump from BUF to ext memory */         sec=sec+1;      end;      /* 4.  Read memory and make sure it contains the same random numbers as above */      pos(status_line3); erase_line;      pstring('  - Testing Memory...');      pos(status_line4);      #randommsb=#last_seed_msb; #randomlsb=#last_seed_lsb; /* restore seed */      call xmread(low_sector,0);      /* reset ptrs to start of ext mem */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;         write("313")=addr(buf(0));   /* load R13 with ptr to BUF */         do i=1 to 8;                 /* load BUF with 256 random numbers */            generate_32_random_numbers;         end;         write("313")=addr(buf1(0));  /* now load R13 with ptr to BUF1 */         read_256_WORDS_from_ext_mem; /* copy from ext mem to temp array */         do i=0 to 255 ;          /* compare the two arrays */            if buf(i)<>buf1(i) then log_memory_error;         end;         sec=sec+1;      end;      /* 5.  Next fill external memory with random numbers using random access */      pos(status_line3);      pstring('  - Filling Memory Using Random Access...');      pos(status_line4); erase_line;      #last_seed_msb=#randommsb; #last_seed_lsb=#randomlsb; /* save last seed */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;       /* a character was typed */         write("313")=addr(buf(0));   /* set R13 to start of BUF */         do i=1 to 8;                 /* load BUF with 256 random numbers */            generate_32_random_numbers;         end;         do i=0 to 255;            j=255-i;            write(mam)=sec; write(mal)=j; /* write numbers in reverse order */            write(mdi)=buf(i);         end;         sec=sec+1;      end;      /* Now delay for about a minute to see if things mess up */      pos(status_line3); erase_line;      pstring('  - Waiting');      do k=1 to 30;         if peek<>(-1) then return;       /* a character was typed */         pstring('.');         do delay = 1 to 30000; do i = 1 to 10; end; end;      end;      /* 6.  Read memory using random access to see if numbers are correct */      pos(status_line3); erase_line;      pstring('    Testing Memory Using Random Access...');      #randommsb=#last_seed_msb; #randomlsb=#last_seed_lsb; /* restore seed */      sec=low_sector;      do while sec ILE high_sector;   /* loop over sectors of external memory */         if peek<>(-1) then return;       /* a character was typed */         write("313")=addr(buf(0));   /* load R13 with ptr to BUF */         do i=1 to 8;                 /* load BUF with 256 random numbers */            generate_32_random_numbers;         end;         do i=0 to 255;            j=255-i;            write(mam)=sec; write(mal)=j; /* read numbers in reverse order */            buf1(i)=read(mdi);         end;         do i=0 to 255;          /* compare the two arrays */            if buf(i)<>buf1(i) then log_memory_error;         end;         sec=sec+1;      end;   #last_seed_msb=#randommsb; #last_seed_lsb=#randomlsb; /* save last seed */end #test_external_memory;/***************************************************************************//*clear_screen; test_external_memory;  crlf; pnum(external_memory_errors,0); flush_term;*/
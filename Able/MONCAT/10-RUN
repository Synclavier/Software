/* 10-RUN  $TITLE  Module to Process 'RUNNING' of Files */DCL COMPLETE BOOLEAN; /* TRUE IF ALL FILES WERE FOUND */DCL IS_NOT_ON_DISK DATA (' is not on disk');DCL MAY_NOT_BE_RUN DATA (' may not be run');DCL ROGRAM_MAY_NOT DATA ('rogram may not be executed by this Monitor version');DCL NOT_ENOUGH_INTERNAL DATA ('Not enough internal memory to run ');DCL NOT_ENOUGH_EXTERNAL DATA ('Not enough external memory to run ');VALID.TO.OVERLAY:  PROC(DEVICE) RETURNS (BOOLEAN); /* RETURNS TRUE IF DEVICE IS COMPATIBLE WITH SYSTEM DEVICE */   DCL DEVICE FIXED;   DEVICE = SHR(DEVICE,8); /* GET DEVICE */   IF ((SYSTYP = 0) AND (DEVICE < 6)) /* VALID FLOPPY TYPES */   THEN RETURN (TRUE);   IF ((SYSTYP = 1) AND (DEVICE > 5)) THEN DO; /* VALID WINCHESTER TYPES */      IF (CORE(FIND_DEVICE(DEVICE)) AND "1400") = (CORE(FIND_DEVICE(0)) AND "1400")      THEN RETURN (TRUE);   END;   RETURN (FALSE); /* NOT VALID TO OVERLAY */END VALID.TO.OVERLAY;OPENFILE:  PROC(NAM,LOC,ERR); /* OPEN A SYSTEM FILE */   DCL NAM   FIXED ARRAY; /* NAME OF FILE TO OPEN */   DCL LOC   FIXED; /* CORE LOCATION TO STORE INFORMATION IF FILE IS FOUND */   DCL ERR   BOOLEAN; /* TRUE TO PRINT AN ERROR MESSAGE WHEN FILE NOT FOUND */   DCL FOUND BOOLEAN; /* TRUE IF A FILE IS FOUND */   FOUND = LOCATE(NAM,-2); /* SEARCH PATH CATALOG */   IF NOT FOUND THEN FOUND = LOCATE(NAM,0); /* SEARCH SYSTEM CATALOG */   IF NOT FOUND THEN FOUND = (VALID.TO.OVERLAY(UDEV)) AND LOCATE(NAM,1); /* SEARCH USER CATALOG */   IF FOUND THEN DO; /* FILE FOUND, SO STORE INFORMATION */      CORE(LOC + 1) = F#MS_SECTOR;      CORE(LOC    ) = F#LS_SECTOR;      CORE(LOC - 1) = F#WORDS;   END;   ELSE DO; /* FILE NOT FOUND */      CORE(LOC + 1) = 0; /* SET STARTING SECTOR TO ZERO */      CORE(LOC    ) = 0;      CORE(LOC - 1) = 0; /* SET LENGTH TO ZERO */      IF ERR THEN DO; /* IF WE SHOULD PRINT AN ERROR MESSAGE */         CALL PCN; CALL PSTR ('System file '); CALL PSTR (NAM);         CALL PSTRINGR (IS_NOT_ON_DISK);         COMPLETE = FALSE; /* ALL FILES WERE NOT FOUND */      END;   END;END OPENFILE;OPENUSER:  PROC(NAM,LOC); /* OPEN A USER FILE - DOES NOT CHECK VALID.TO.OVERLAY */   DCL NAM   FIXED ARRAY; /* NAME OF FILE TO OPEN */   DCL LOC   FIXED; /* CORE LOCATION TO STORE INFORMATION IF FILE IS FOUND */   DCL FOUND BOOLEAN; /* TRUE IF A FILE IS FOUND */      FOUND = LOCATE(NAM,1); /* SEARCH USER CATALOG */   IF NOT FOUND THEN FOUND = LOCATE(NAM,0); /* IF NOT THERE, TRY SYSTEM CATALOG */   IF FOUND THEN DO; /* FILE FOUND, SO STORE INFORMATION */      CORE(LOC + 1) = F#MS_SECTOR;      CORE(LOC    ) = F#LS_SECTOR;      CORE(LOC - 1) = F#WORDS;   END;   ELSE DO; /* FILE NOT FOUND */      CORE(LOC + 1) = 0; /* SET STARTING SECTOR TO ZERO */      CORE(LOC    ) = 0;      CORE(LOC - 1) = 0; /* SET LENGTH TO ZERO */      CALL CAT.ERROR;      COMPLETE = FALSE; /* ALL FILES WERE NOT FOUND */   END;END OPENUSER;VERIFY.STORED:  PROC; /* VERIFY THAT FILE IS STILL ON DISK */   IF (STORED AND (CORE(LOC.STRN + 1) <> 0)) THEN DO; /* IF POSSIBLY STORED */      IF SHR(FILDEV,8) = SHR(UDEV,8) /* IF FILE SHOULD BE ON USER DEVICE */      THEN IF LOCATE(LOCATION(LOC.STRN),1) /* AND NAME IS PRESENT */      THEN IF ((FILDEV = F#MS_SECTOR) AND (FILSEC = F#LS_SECTOR)) /* AND FILE IS AT CORRECT LOCATION */      THEN RETURN; /* LOOKS LIKE STILL SAVED */      IF SHR(FILDEV,8) = SHR(SDEV,8) /* IF FILE SHOULD BE ON SYSTEM DEVICE */      THEN IF LOCATE(LOCATION(LOC.STRN),0) /* AND NAME IS PRESENT */      THEN IF ((FILDEV = F#MS_SECTOR) AND (FILSEC = F#LS_SECTOR)) /* AND FILE IS AT CORRECT LOCATION */      THEN RETURN; /* LOOKS LIKE STILL SAVED */   END;   STORED = 0; /* OOPS - MUST ASSUME FILE NO LONGER STORED - USER MUST HAVE CHANGED DISKS */END VERIFY.STORED;RUN:  PROC(STS,TYPE); /* PASS STATUS, TYPE */   /* STS CODES:   0=RUN, 1=COMPILE, 2=PATCH (OBSOLETE), 3=PLOT, 4=REV */   /* TYPE CODES:  0=RUN, 1=SCRIPT, 2=SFM, 3=SED, 4=ASM, 5=HFORM,  */   /*              6=LSP, 7=DSK,    8=SYN, 9=TRANSIENT (TREENAME IN STR2) */   DCL (STS,TYPE)  FIXED;   DCL REDFLAG     FIXED; /* REDIRECTION FLAG */   DCL (I,J,K,L,M) FIXED;   dcl exec_name (f#name_len) FIXED;   /* $PAGE */   STORE.FILE:  PROC RETURNS (BOOLEAN); /* STORE THE FILE ON DISK (RETURNS 0 IF IT SUCCEEDS) */      CALL DELETE (SYS_DUMMY, 0); /* TRY TO DELETE FROM SYSTEM CATALOG */      IF ((C#STATUS <> E#NONE) AND (C#STATUS <> E#NO_FILE)) THEN DO; /* FATAL CATALOG ERROR OCCURRED */         CALL CAT.ERROR; /* DISPLAY ERROR */         RETURN (FALSE); /* FILE WAS NOT SAVED */      END;      IF FILNS = 0 THEN DO; /* DON'T ACTUALLY SAVE ZERO-LENGTH DUMMY FILES */         F#MS_SECTOR = 0; F#LS_SECTOR = 0; /* SET BASE TO SECTOR ZERO OF SYSTEM CATALOG */      END;      ELSE DO; /* ATTEMPT TO SAVE THE FILE */         IF NOT REPLACE(SYS_DUMMY,FILTP,0,FILNS,FILNG,0) THEN DO; /* TRY TO SAVE IN SYSTEM CATALOG */            CALL PCN; CALL PCHAR (a.BEL); /* ERROR OCCURRED */            CALL PSTR (NDSMS); CALL PSTRINGR ('current file');            CALL PSTRINGR ('You must save your file in order to proceed');            RETURN (FALSE); /* FILE WAS NOT SAVED */         END; /* OF UNABLE TO SAVE IN SYSTEM CATALOG */         CALL WRITEOUT(F#MS_SECTOR,F#LS_SECTOR); /* WRITE OUT FILE */      END; /* OF ATTEMPTING TO SAVE THE FILE */      STORED = 1; /* INDICATE FILE IS NOW STORED ON DISK */      FILDEV = F#MS_SECTOR; /* FILE IS SAVED HERE */      FILSEC = F#LS_SECTOR;      FILMED = 0; /* FILE IS ON DISK */      RETURN (TRUE); /* FILE WAS SAVED */   END STORE.FILE;  /*** MAIN RUN CODE ***/  IF NO_OVERLAY THEN DO; /* OVERLAY ROUTINE IS MISSING */     CALL PCN;     CALL PSTR ('File '); CALL PSTR (LOADER.NAME);     CALL PSTRINGR (' missing - no programs can be executed');     RETURN;  END;  REDFLAG = 0; /* ASSUME NO REDIRECTED OUTPUT */  IF (((TYPE = 0) OR (TYPE = 4) OR (TYPE = 9)) AND (INCH = a.comma)) THEN DO; /* IF COMMA, SCAN FOR ,PRINTER */     CALL GET.CHAR.UPCASE; CALL SKIPSPA; /* SKIP COMMA AND SPACES */     IF INCH = a.P THEN REDFLAG = 1; /* INDICATES REDIRECTED OUTPUT */  END;  CALL SKIPEND; /* SCAN TO END OF COMMAND LINE */  CORE(LOC.USR2) = TYBP - CORE(LOC.USR1) - 1; /* USR2 IS THE LENGTH OF NAME PLUS ARG LIST */  CALL SORT; /* SORT ALTERS INTO CURRENT FILE */  CALL STORE.NAME(CNAM); /* STORE CURRENT FILE NAME IN MEMORY */  IF (TYPE = 0) AND (FILNS = 0) THEN DO; /* ZERO LENGTH FILE */    CALL PCN; CALL PSTRINGR (EMPMS); RETURN;  END;  IF ((STS = 1) OR ((TYPE > 2) AND (TYPE < 7))) /* COM, CON, SED, ASM, HFO, LSP */  AND (FILTP <> T#TEXT) THEN DO; /* FILE IS NOT TEXT */    CALL PCN; CALL PSTRINGR (NTXTMS); RETURN;  END;  IF (TYPE = 1) AND (FILTP <> T#TEXT) AND (FILTP <> T#SYNC) THEN DO; /* WRONG TYPE FOR PLAY */    CALL PCN; CALL PSTRINGR ('Current file is not a SCRIPT or Sequence file');    RETURN;  END;  IF ((TYPE = 1) OR (TYPE = 8)) AND (CORE(LOC.SYNRTPN) = 0) THEN DO; /* NO RTP SET FOR PLAY OR SYN */    CALL PCN; CALL PSTRINGR ('No Real-Time Program specified - use SET RTP command');    RETURN;  END;  IF (TYPE = 0) AND (FILTP > T#EXEC) THEN DO; /* RUN OF NON-TEXT, NON-EXEC FILE */    CALL PCN; CALL PSTR ('Current file'); CALL PSTRINGR (MAY_NOT_BE_RUN); RETURN;  END;  CALL VERIFY.STORED; /* SEE IF CURRENT FILE IS REALLY STORED */  CALL SET_WIN_SIZE(6); /* poll winchesters in case new media has different size... */  CALL SET_WIN_SIZE(7); /* and to lock media for use by overlayed program...		*/  IF (TYPE = 0) AND (FILTP = T#EXEC) THEN DO; /* RUN OF EXECUTABLE FILE */     IF (WORKMED = 1) OR ((FILNS ILT 256) AND (FILNG ILE FBUFSZ)) THEN DO; /* FILE IS IN MEMORY */       IF FILNG ILE FBUFSZ THEN DO; /* IN CURRENT FILE BUFFER */          I = FBUF(0); J = FBUF(1);          IF J ILT 256 THEN DO; /* IF VALID CONFIG. TABLE */             K = FBUF(J + C#SWPLEN);             L = FBUF(J + C#VERSION);             M = FBUF(J + C#VSTART) + FBUF(J + C#VLNGTH) + FBUF(J + C#STKLEN);          END;       END;       ELSE DO; /* IN WORK FILE BUFFER */          I = CORE(WORKSEC); J = CORE(WORKSEC + 1);          IF J ILT 256 THEN DO;             K = CORE(WORKSEC + J + C#SWPLEN);             L = CORE(WORKSEC + J + C#VERSION);             M = CORE(WORKSEC + J + C#VSTART) + CORE(WORKSEC + J + C#VLNGTH) + CORE(WORKSEC + J + C#STKLEN);          END;       END;     END; /* OF FILE IN MEMORY */     ELSE DO; /* FILE IS ON DISK */       CALL READDATA(WORKDEV,WORKSEC,CBUF,256); /* READ FIRST SECTOR */       CALL ENABLE_CACHE(CACHE.NUM); /* CAUSE DISK READ NEXT TIME */       I = CBUF(0); J = CBUF(1);       IF J ILT 256 THEN DO;          K = CBUF(J + C#SWPLEN);          L = CBUF(J + C#VERSION);          M = CBUF(J + C#VSTART) + CBUF(J + C#VLNGTH) + CBUF(J + C#STKLEN);       END;     END;     IF (I = "100377") AND (J ILE 256 - C#CONLEN) THEN DO; /* XPL PROGRAM */       IF L <> C#CURRENT_VERSION THEN DO; /* OLD TYPE OF XPL PROGRAM */         CALL PCN; CALL PCHAR (A.P); CALL PSTRINGR (ROGRAM_MAY_NOT);         RETURN;       END;       IF M IGT LOC.LOAD THEN DO; /* NOT ENOUGH INTERNAL MEMORY */         CALL PCN; CALL PSTR (NOT_ENOUGH_INTERNAL); CALL PSTRINGR ('file');         RETURN;       END;       IF K IGT EMSIZE THEN DO; /* NOT ENOUGH EXTERNAL MEMORY FOR SWAP FILE */         CALL PCN; CALL PSTR (NOT_ENOUGH_EXTERNAL); CALL PSTRINGR ('file');         RETURN;       END;     END; /* OF XPL PROGRAM */     IF ((STORED = 0) AND ((SYSTYP = 1) OR (SAVED = 0))) /* FILE NOT STORED AND (WINCHESTER OR NOT SAVED BY USER) */     THEN IF NOT STORE.FILE THEN RETURN; /* TRY TO SAVE FILE ON DISK */     CORE(LOC.RST) = 2; /* INDICATES NORMAL TERMINATION STATUS */     CORE(LOC.MAGIC) = 12345; /* SET THE NUMBER NOW */     CORE(LOC.CTAB+C#REDRCT-C#OFFSET) = REDFLAG; /* REDIRECT OUTPUT IF REQUESTED */	 interp_set_quit_menu(CNAM);	      CALL OBJOVERLAY(FBUF,FBUFSZ); /* OVERLAY WORK FILE */  END; /* OF RUN EXECUTABLE FILE */  /* HANDLE SYSTEM COMMANDS SUCH AS 'RUN', 'COMPILE', 'SED' */  IF (SAVED = 0) AND (STS = 1) THEN DO; /* MUST SAVE PROGRAMS TO COMPILE THEM */    CALL PCN; CALL PSTRINGR ('Please SAVE your program before compiling');    RETURN;  END;  IF SYSTYP = 0 THEN DO; /* START FLOPPY MOTORS FOR FLOPPY SYSTEM */    DO WHILE READ("100"); END; /* WAIT FOR CURRENT DISK ACTIVITY TO STOP */    WRITE("104") = 0; WRITE("104") = 1; /* TURN BOTH DRIVES ON FOR COMPILATION */  END;  /* $SUBTITLE  Open Files for Command Execution */  /* WE HAVE SET UP THE FILE NAME, AND WRITTEN THE CURRENT FILE OUT TO DISK.     NOW OPEN UP THE SYSTEM FILES (XPL COMPILER, ETC.) AND STORE POINTERS     TO THEM IN MAIN MEMORY. */  COMPLETE = TRUE; /* ASSUME ALL FILES ARE PRESENT */  IF LOCATE(MONNM,0) THEN DO; /* LOOK ON SYSTEM DEVICE FOR MONITOR */     CORE(LOC.MON + 1) = F#MS_SECTOR; /* SAVE DEVICE AND MS STARTING SECTOR */     CORE(LOC.MON    ) = F#LS_SECTOR; /* SAVE LS STARTING SECTOR */     CORE(LOC.MON - 1) = F#WORDS + (F#WORDS = 0); /* SAVE LENGTH (SET NONZERO TO 1 TO INDICATE FOUND) */  END;  ELSE DO; /* OOPS - DIDN'T FIND IT */     COMPLETE = FALSE;     CORE(LOC.MON + 1) = 0; CORE(LOC.MON) = 0; CORE(LOC.MON - 1) = 0; /* ZERO-OUT THIS AREA */     CALL PCN; CALL PSTR ('System file '); CALL PSTR (MONNM);     CALL PSTRINGR (IS_NOT_ON_DISK);  END;  DO CASE (TYPE); /* BRANCH ON TYPE AND OPEN FILES (ALWAYS OPEN LOC.P1 LAST!) */    DO; /* 0:  RUN/COM (XPL) */      CALL OPENFILE('.P2-7',LOC.P2,TRUE); /* PASS2 */      CALL OPENFILE('.P3-7',LOC.P3,TRUE); /* PASS3 */      CALL OPENFILE('.ST-7',LOC.ST,TRUE); /* SYMBOL TABLE */      IF PROCESSOR_TYPE < 2 /* CHECK PROCESSOR TYPE */      THEN CALL OPENFILE('.RTB-7',LOC.RT,TRUE); /* USE MODEL B RTP */      ELSE CALL OPENFILE('.RTC-7',LOC.RT,TRUE); /* USE MODEL C OR LATER RTP */      CALL OPENFILE('.P1-7',LOC.P1,TRUE); /* PASS1 */	  move.name('XPL', exec_name);    END; /* RUN/COM (XPL) */    DO; /* 1:  SCRIPT */      CALL OPENFILE(LOCATION(LOC.SYNRTPN),LOC.P2,TRUE); /* CHOSEN RTP */      CALL OPENFILE('.STAB-7',LOC.P3,TRUE); /* SYNCLAVIER TABLES */      CALL OPENFILE('.SSYM-7',LOC.ST,TRUE); /* SCRIPT SYMBOL TABLE */      CALL OPENFILE('.SCON-7',LOC.RT,TRUE); /* CONVERSION PROGRAM */      CALL OPENFILE('.SPLT-7',LOC.MPLT,FALSE); /* MUSIC PLOT */      CALL OPENFILE('.SCOM-7',LOC.P1,TRUE); /* SCRIPT COMPILER */	  move.name(LOCATION(LOC.SYNRTPN), exec_name);    END; /* SCRIPT */    {CALL OPENFILE('.SFM-7', LOC.P1,TRUE); move.name('SFM', exec_name);} 		/* 2:  SFM ROOT FILE */    {CALL OPENFILE('.ED-7',  LOC.P1,TRUE); move.name('SED', exec_name);} 		/* 3:  SED FILE */    {CALL OPENFILE('.ASM-7', LOC.P1,TRUE); move.name('ASM', exec_name);} 		/* 4:  ASSEMBLER FILE */    {CALL OPENFILE('.ROFF-7',LOC.P1,TRUE); move.name('HFORM', exec_name);} 		/* 5:  HFORM FILE */    {CALL OPENFILE('.LISP-7',LOC.P1,TRUE); move.name('LISP', exec_name);} 		/* 6:  LISP MAIN FILE */    {CALL OPENFILE('.DESK-7',LOC.P1,TRUE); move.name('DESK', exec_name);} 		/* 7:  DESK IMAGE EDITOR */    {CALL OPENFILE('.SYN-7', LOC.P1,TRUE); move.name('RESYN', exec_name);} 		/* 8:  ANALYSIS PROGRAM */    DO; /* 9:  TRANSIENT COMMAND */      IF STS = 2 /* SIMPLE RUN (STS MUST MATCH NORMAL RUN) */      THEN CALL OPENUSER(STR2,LOC.P1); /* RUN USER FILE */      ELSE CALL OPENFILE(STR2,LOC.P1,TRUE); /* RUN SYSTEM FILE */	  move.name(f#name, exec_name);    END; /* TRANSIENT COMMAND */  END; /* OF DO CASE */  IF COMPLETE THEN DO; /* ALL FILES FOUND, SO OVERLAY */     IF ((F#TYPE <> T#EXEC) OR (NOT VALID.TO.OVERLAY (F#MS_SECTOR)))     THEN DO; /* CHECK LOC.P1's TYPE - LOC.P1 MUST BE OPENED LAST! */        CALL PCN; CALL PSTR ('File '); CALL PSTR (F#NAME); CALL PSTRINGR (MAY_NOT_BE_RUN);        RETURN;     END;     CALL READDATA(CORE(LOC.P1+1),CORE(LOC.P1),CBUF,256); /* GET FIRST SECTOR OF FILE */     CALL ENABLE_CACHE(CACHE.NUM); /* CAUSE DISK READ NEXT TIME */     J = CBUF(1); /* POINT TO CONFIGURATION TABLE */     IF (CBUF(0)="100377") AND (J ILE 256 - C#CONLEN) THEN DO; /* XPL PROGRAM */       IF CBUF(J + C#VERSION) <> C#CURRENT_VERSION THEN DO; /* OLD TYPE OF XPL PROGRAM */         CALL PCN; CALL PSTR ('System p'); CALL PSTRINGR (ROGRAM_MAY_NOT);         RETURN;       END;       M = CBUF(J + C#VSTART) + CBUF(J + C#VLNGTH) + CBUF(J + C#STKLEN);       IF M IGT LOC.LOAD THEN DO; /* NOT ENOUGH INTERNAL MEMORY */         CALL PCN; CALL PSTR (NOT_ENOUGH_INTERNAL); CALL PSTRINGR ('system program');         RETURN;       END;       IF CBUF(J + C#SWPLEN) IGT EMSIZE THEN DO; /* NOT ENOUGH EXTERNAL MEMORY FOR SWAP FILE */         CALL PCN; CALL PSTR (NOT_ENOUGH_EXTERNAL); CALL PSTRINGR ('system program');         RETURN;       END;     END; /* OF XPL PROGRAM */     IF STORED = 0 /* MUST SAVE FILE ON DISK FOR COMPILER */     THEN IF NOT STORE.FILE THEN RETURN; /* TRY TO SAVE IT */	 interp_set_quit_menu(exec_name);    	 CORE(LOC.MAGIC)=12345; /* SET MAGIC NUMBER NOW */     CORE(LOC.RST)=STS; /* PATCH RUN STATUS IN SPECIAL LOCATION */     CORE(LOC.CTAB+C#REDRCT-C#OFFSET)=REDFLAG; /* REDIRECT OUTPUT IF REQUESTED */     CALL OVERLAY(CORE(LOC.P1+1),CORE(LOC.P1),CORE(LOC.P1-1));  END; /* OF ALL FILES FOUND SO OVERLAY */END RUN;
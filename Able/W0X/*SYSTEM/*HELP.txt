$$HELP COMMANDThe HELP command gives you on-line information about the Synclavier Terminal Support Options.  By typing HELP and then a command or a topic, you may learn about these Options as you go.Type HELP TERMINAL and press the RETURN key to learn how to use the terminal.Or type HELP and one of the topics listed below.      MODULES       the software that runs the Synclavier.      COMMANDS      the special words you type.      MONITOR       the Ready > program that interprets your commands.      PLAY          the command that turns on the keyboard and                    calls up the terminal menus.Each topic will point you to related HELP topics.  Also, any word printed in capital letters is a HELP topic.  Type HELP CONTENTS for a complete list of all HELP topics.$PIf a topic runs on for more than one screen, you press RETURN to see succeeding screens. You can return to the first screen of the topic by pressing the DELETE or RUBOUT key.When you have finished reading a topic, you may press BREAK and return to the Ready > prompt. Then you can enter a different HELP command or any other command. You can also press BREAK to stop printing in the middle of a topic and return immediately to the Ready > prompt.This on-line manual will show you around the terminal and introduce concepts and commands. However, there are many details and special operating hintsthat you will find only in the on-paper documentation.$$CONTENTSYou may find HELP on any topic in the following list.  Just type HELP followed by the topic name. Then press RETURN.The HELP program looks at all the characters in the topic name that you type, including spaces, slashes, and hyphens.  So be sure to type in the characters exactly as listed.  This way you can learn about both TIMBRE-FILE and TIMBRE DISPLAY SYSTEM, or ENTER KEY and ENTER COMMAND.ANALYSIS MODULEAPPEND COMMANDARROW KEYSBOOT COMMANDBREAK KEYBUILD COMMANDCAPSLOCK KEYCATALOG COMMANDSCAT ALL (CATALOG MODIFIER)$PCAT FILE (CATALOG MODIFIER)CAT OF (CATALOG MODIFIER)CAT LENGTH (CATALOG MODIFIER)CAT SLENGTH (CATALOG MODIFIER)CAT SNAMES (CATALOG MODIFIER)CAT SORIGIN (CATALOG MODIFIER)CAT STYPE (CATALOG MODIFIER)CHANGE COMMANDCLS COMMANDCOMMAND-FILECOMMANDSCOMPILE COMMANDCOMPILER MODULECONFIGUR PROGRAMCONVERT COMMANDCREATE COMMANDCTRL KEYCURRENT-CATALOG$PCURRENT-DEVICECURRENT-FILEDELETE COMMANDDELETE KEYDESEQUENCE COMMANDDEVICEDISPLAY COMMANDSDRENAME COMMANDDO COMMANDEDITING COMMANDSENTER KEYENTER COMMANDESC KEYEXTRACT COMMANDFILE MANAGEMENT COMMANDSFILENAME$PFILESFORMCOPY PROGRAMGUITAR PERFORMANCE MODULEHELP COMMANDHIDDEN-FILEJOIN COMMANDKEYPAD KEYSLAST COMMANDLENGTH COMMANDLINEFEED KEYLIST COMMANDLISTING PROGRAMLOCATE COMMAND$PMAIN MENUMODULESMONITOR MODULEMOVE COMMANDMUSIC PRINTING MODULENAME COMMANDNEW COMMANDNOSCROLL KEYOLD COMMANDPAUSE COMMANDPERFORMANCE COMMANDSPF KEYSPLAY COMMANDPLOT COMMANDPRINT COMMANDPROFILE$PPROMPT COMMANDREAL-TIME PERFORMANCE MODULERECALL COMMANDRENAME COMMANDRESEQUENCE COMMANDREPLACE COMMANDRETURN KEYREV COMMANDREVERSE COMPILER MODULERTP VERSIONSRUBOUT KEYRUN COMMANDSAVE COMMANDSCREEN EDITOR MODULESCRIPT COMPOSITIONSCRIPT MODULESSEQUENCE COMMAND$PSED COMMANDSET CATALOG COMMANDSET COMMANDSSET ECHOSET LOGSET NAME COMMANDSET PATH COMMANDSET PROMPT COMMANDSET TERMINAL COMMANDSET RTP COMMANDSET-UP KEYSFM COMMANDSHIFT KEYSHOW COMMANDSSHOW ECHOSHOW HISTORYSHOW INFO COMMANDSHOW LOGSHOW MACROS$PSHOW NAME COMMANDSHOW PATH COMMANDSHOW PROMPT COMMANDSHOW TERMINAL COMMANDSHOW RTP COMMANDSHOW VERSIONSHUFFLE PROGRAMSIGNAL FILE MANAGER MODULESOUND-FILESTORE COMMANDSUBCATALOGSYMBOL EDITORSYN COMMANDSYNC-FILESYNCLAVIER SEQUENCESYSTEM COMMANDSTERMINAL USETEXT-FILE$PTIMBRE-FILEUNSAVE COMMANDUTILITY PROGRAMSWINCHESTER INSTALLATION PROGRAM$PWRITE COMMANDXPL* COMMAND$$TERMINAL USEYou will use the computer terminal in many ways in the Synclavier Digital Music System.  Sometimes you will use it to type short COMMANDS to the computer.  Sometimes you will make selections on interactive menus.  Other times you will use graphical displays.  You will also use the terminal to type in text, like a letter or a SCRIPTCOMPOSITION, or to edit a piece of transcribed notation.Each time you press a key, a code is transmitted to the computer.  If you are typing a command (like PLAY or SAVE) or text, the computer will "echo" the codes back to the terminal so that the letters appear on the screen.  This gives you the illusion that you are typing directly on the screen.  As you type, you'll see a small white or green square called the cursor on the screen.  The cursor shows you where the next printing character you type will appear on the screen.After typing the command word, you must press the RETURN KEY to complete the command to the computer.  If you are typing lines of text, pressing RETURN sends the cursor to the beginning of the next line.  See "Using the Monitor" in the instruction manual set.$PMany times you will enter commands and make selections on menus, which provide you with on-screen instructions that tell you what to do.  Thereis a set of menus that will help you in your work at the keyboard,another set for MUSIC PRINTING, and others for the UTILITY PROGRAMS.There are several special function keys, such as BREAK or ENTER, on the terminal keyboard.  Each time you press one of these, a signal is sent to the computer which causes an action.  However, nothing will appear on the screen.  The SCREEN EDITOR and the menus make heavyuse of these special function keys.For information on these keys, type HELP and any of the following:DELETE KEY   ARROW KEYS   ESC KEY    NOSCROLL KEY    SHIFT KEYRUBOUT KEY   RETURN KEY   PF KEYS    SET-UP KEY      CAPSLOCK KEYKEYPAD KEYS  BREAK KEY    CTRL KEY   LINEFEED KEY    ENTER KEY$$ARROW KEYSThe ARROW KEYS move the cursor around the screen in certain software MODULES.For instance, in the SCREEN EDITOR, you can position the cursor anywhere in the text in order to make an insertion, deletion, or a change.  On many terminals, you will find ARROW KEYS for moving the cursor.  These operate as you might expect them to.    Press the up arrow to move up one line.    Press the down arrow to move down one line.    Press the left arrow to move one character to the left.    Press the right arrow to move one character to the right.  On some terminals, there are no designated ARROW KEYS.  Instead,  Press CTRL and K to move up.     Press CTRL and J to move down.  Press CTRL and L to move right.  Press CTRL and H to move left.$PThe ARROW KEYS, or the CRTL KEYs, can also be used to move forwards orbackwards a full screen of text.         N     There are also many other ways to move the           O    cursor in big leaps throughout a long            T   document.  See "Using the Screen Editor"            E  in the instruction manual set.The ARROW KEYS are also used about the menus in other software MODULES and, in MUSIC PRINTING, to move around the score.$$BREAK KEYThe BREAK KEY brings back the Ready > prompt.You are now using the MONITOR to print out HELP information on your screen.  If you wish to interrupt a topic, you may press BREAK and the Ready > prompt will return.  You can then enter a different HELP topic or any MONITOR command.You may also use the MONITOR to LIST the CURRENT-FILE on the screen.  To interrupt this listing, press BREAK and bring back the Ready > prompt.Pressing BREAK will also interrupt the operation of software MODULES and restore the MONITOR program.  For instance, if you are using the REAL-TIME PERFORMANCE MODULE, pressing BREAK will return you to the MONITOR and give you a Ready > prompt.$$ESC KEYThe ESC KEY is used on ADM terminals only.  It is not active on VT100terminals.You will press ESC twice (ESC ESC) to return to the MAIN MENU in the REAL-TIME PERFORMANCE MODULE from any of the other real-time menus.  You will also use ESC along with a number key to activate different software MODULES.Press ESC followed by 1 to activate the REVERSE COMPILER from the REAL-TIME PERFORMANCE MODULE.Press ESC followed by 2 to activate the REAL-TIME PERFORMANCE MODULE from the REVERSE COMPILER.$$PF KEYSThe PF KEYs on VT100 terminals may be used to activate different software MODULES as follows:     Press PF1 to activate the REVERSE COMPILER.     Press PF2 to activate REAL-TIME PERFORMANCE.     Press PF3 to activate MUSIC PRINTING.     Press PF4 to activate the SIGNAL FILE MANAGER.These commands may be used from any MODULE except the MONITOR, whereyou type SYSTEM COMMANDS to activate the MODULES.$$CTRL KEYThe CTRL, or control, KEY does not transmit information by itself.  You press it along with another key to send a command to the computer.  For example, if you are typing a line of text at the MONITOR and make a mistake, you can hold down CTRL and press X to tell the computer to erase the whole line you are currently on.You will use CTRL commands on the REAL-TIME PERFORMANCE menus and in boththe SCREEN EDITOR and MUSIC PRINTING.Avoid pressing the CTRL and S keys at the same time.  Doing so will "freeze" your screen.  If you do freeze it accidentally, you may "unfreeze" it by pressing the CTRL and Q keys simultaneously.$$NOSCROLL KEYThe NOSCROLL KEY on the VT100 and the VT640 will freeze the display on your screen.  That is, the computer will stop printing characters on the screen and receiving characters from the keyboard until you press NOSCROLL again.  You should be especially careful not to press the NOSCROLL KEY accidentally.  If you do press NOSCROLL in the wrong sequence with other keys, the system may refuse to respond to all keyboard commands.$$SET-UP KEYThe SET-UP KEY on VT100 terminals is used as part of the terminal initialization procedure described in the "Setup Instructions" in theinstruction manual set.  You can also press SET-UP and then 0 to clearthe terminal screen without affecting anything in memory.  This is helpfulsometimes in MUSIC PRINTING and the SYMBOL EDITOR. Be sure to let thescreen settle down before you press another key.NOTE: The MONITOR command CLS may also be used to clear the screen.$$LINEFEED KEYThe LINEFEED KEY is used in the MONITOR to scroll one line of text at a time onto the screen when LISTing a TEXT-FILE.It is also used in the SCREEN EDITOR to move down the screen.$$CAPSLOCK KEYThe CAPSLOCK KEY found on many terminal keyboards (e.g., the VT100) is "locked" to type only upper case letters.  To return to lower case, release CAPSLOCK.Other terminals (e.g., the ADM-3A) have a switch you must set in order to transmit only upper case.  To return to lower case, reset the switch.Number or symbol keys will not be affected by either the CAPSLOCK or upper/lower case switch.  The upper symbols can only be accessed with the SHIFT KEY.$$SHIFT KEYYou can type on most terminals in either upper or lower case, using the SHIFT KEY just as on a typewriter.  Hold down the SHIFT KEY to type the upper case letter or the upper symbol on a key.$$DELETE KEYAny mistakes that you make while typing COMMANDS or text in a line can beeasily corrected by pressing the DELETE KEY to erase one letter at a timebackwards from right to left.Remember, you can return to the first screen of information on any HELP topic by pressing DELETE.The DELETE key also has special functons in MUSIC PRINTING and in theSYMBOL EDITOR.$$RETURN KEYRETURN is the most used special function key on your terminal keyboard.  You will use it all the time.You will press the RETURN KEY to complete commands.  For example, to use the HELP COMMAND, you must type HELP and then press RETURN.  Pressing RETURN sends the command to the computer.  You will use RETURN in this way in MONITOR commands, in MUSIC PRINTING editing commands, and in SIGNAL FILE MANAGER commands.When you are typing text in a TEXT-FILE, pressing RETURN completes the line of text and puts the cursor at the beginning of the next empty line,just like when you press the carriage return on a typewriter.  This is trueboth in the MONITOR and in the SCREEN EDITOR.In the UTILITY PROGRAMS, pressing RETURN will initiate the action of the program.  For instance, in FORMCOPY, you make selections on a menu and then press RETURN to start the actual copying process.$$RUBOUT KEYAny mistakes that you make while typing COMMANDS or text in a line can beeasily corrected by pressing the RUBOUT KEY to erase one letter at a timebackwards from right to left.  On the ADM-3, you will press SHIFT-RUB.Remember, you can return to the first screen of information on any HELP topic by pressing RUBOUT.$$ENTER KEYThe ENTER KEY, found on VT terminals and on ADM-11 terminals, is used for different functions in different software MODULES.When you are using the REAL-TIME PERFORMANCE MODULE, press ENTER to return to the MAIN MENU from any of the other real-time menus.When you are using the REVERSE COMPILER, press ENTER to begin the process of turning a SYNCLAVIER SEQUENCE into a SCRIPT COMPOSITION.In MUSIC PRINTING, press ENTER to return to the Music Printing Main Menu.$$KEYPAD KEYSMost terminals have, to the right of the regular keyboard, an additional set of keys called the keypad.  The VT100/640 keypad includes the numerals 0 to 9, a period, a comma and a minus sign, along with an ENTER or RETURN KEY.  The keypad is used extensively in MUSIC PRINTING and inthe SYMBOL EDITOR.$$MODULESThe Synclavier is run by software MODULES, a series of interrelated computer programs that control the keyboard unit, terminal, printer, and all other Synclavier hardware.  The MODULES are activated one at a time from the terminal.  MONITOR     the Ready > program that carries out COMMANDS typed in               at the terminal.  You are using the MONITOR right now!  REAL-TIME   the program that runs the keyboard and displays menus on  PERFORMANCE the terminal screen.  This program can be used to play              and record synthesized sounds and/or sampled sounds.              There are many different versions of this program,              depending on your musical input device.  SCRIPT      a group of programs that allow you to type in compositions              at the terminal and play them at the keyboard.  Or record               at the keyboard and edit at the terminal.$P  REVERSE     the program that takes a keyboard or guitar performance  COMPILER    and translates it into a text SCRIPT COMPOSITION.  MUSIC       the program that takes a keyboard or guitar performance  PRINTING    and transcribes it into standard music notation.  SIGNAL      the program that runs the Sample-to-Disk system.  FILE MANAGER  ANALYSIS    the "resynthesis" program that turns recorded sounds into              Synclavier synthesized timbres.  UTILITY     a group of programs which prepare, copy, and organize  PROGRAMS    diskettes and print out listings of programs.  SCREEN      a program that is used to enter and edit text.  You     EDITOR      can position the cursor anywhere on a screen of text.$P  SYMBOL      a program that is used to draw and modify musical  EDITOR      symbols for use in Music Printing.See HELP topics on individual MODULES.  Type HELP SYSTEM COMMANDS fora list of commands that activate MODULES.  Each command is alsoa separate HELP topic.$$SYMBOL EDITORThe SYMBOL EDITOR is a graphical tool which can be used to design your own symbols for use in Music Printing. The actual SYMBOL EDITOR program is called "Symed" and is stored on your Winchester disk.  To use the program, you must typeReady > ENTER :Ready > SYMEDComplete instructions on designing with the SYMBOL EDITOR may be foundin the instruction manual set.$$MONITOR MODULEThe MONITOR is the central terminal software program for running and manipulating FILES.  It is activated when you press BREAK from any other software module except the SCREEN EDITOR, where you press .E from the command column.You use the MONITOR to activate other MODULES, to run programs, and to create, display, edit, store, and recall FILES.$PThe MONITOR saves the previous 26 commands you have typed so you canuse them again, or edit a mistake.  Each command is assigned a letter,A-Z.  The command:   Ready > SHOW HISTORYwill display these commands and their associated letter.  The command   Ready > .Xwill execute previous command "X" (where "X" can be any letter, A-Z)   Ready > ,XWill similarly recall a previous command, but allows you to change it beforepressing RETURN to execute it.$PThe MONITOR allows you to edit text on the command line using commandssimilar to SED (the standard SCREEN EDITOR).  You may use:   CTRL-A  Toggle insert/overstrike mode (initially in insert mode)   CTRL-D  Delete one character to the right (if any)   CTRL-E  Delete remainder of line to the right   CTRL-G  Global replace of string in current line "*>"   CTRL-H, LEFT-ARROW  Move cursor left one character   CTRL-I, TAB         Move forward to next word   CTRL-J, DOWN-ARROW  Fetch next command from history   CTRL-K, UP-ARROW    Fetch previous command from history   CTRL-L, RIGHT-ARROW Move cursor right one character   CTRL-P  [CHAR]      Adds "fast" MACRO command to current command   CTRL-R, PF1         Cursor to start of line OR recall previous command   CTRL-W  [A-Z] Add history recall to current command (like ,X)   CTRL-Y  Single replace of string in current line "1>"   CTRL-X  Delete entire command line   CTRL-/  Search back in history for last command containing stringPress <RETURN> from anywhere in a command line to execute that entire line.$PThe MONITOR allows you to define MACROS.  These are single-characterequivalents for commands you often use.  MACROS are defined in the text file":USER:MACROS".  Here is a sample MACROS file:   E = sed   F = formcopy   H = show history   P = show rtp; new j; playNotice that the first character on each line is the single character beingdefined.  Following the <space> = <space> is the command (or commandsseparated by semicolons) to be executed whenever that key is typed.  To usethe above macro to run FORMCOPY, for example, type:   Ready > FThis command will display all of the currently defined macros:   Ready > SHOW MACROS$$SCRIPT MODULESThe SCRIPT software MODULES allow you to use the terminal to type in SCRIPT COMPOSITIONs and to edit SYNCLAVIER SEQUENCEs played on the keyboard.  You can use either the MONITOR or the SCREEN EDITOR as the "front end" to create, edit, store, and recall your SCRIPT COMPOSITIONs.  The other SCRIPT MODULES are: COMPILER    This program turns the text SCRIPT COMPOSITION              in computer memory into a SYNCLAVIER SEQUENCE. REAL-TIME   This program runs the keyboard unit and plays your PERFORMANCE translated SCRIPT COMPOSITION. REVERSE     This program takes a keyboard or guitar performance COMPILER    and translates it into text which you can edit.                     MUSIC       This program takes a keyboard or guitar performance or PRINTING    a SCRIPT COMPOSITION and transcribes it into standard             music notation.$$COMPILER MODULEThe SCRIPT COMPILER turns the SCRIPT COMPOSITION in computer memory into a SYNCLAVIER SEQUENCE.  First, it checks for spelling or syntax errors.  If there are no errors, the SCRIPT COMPOSITION is turned into a SYNCLAVIER SEQUENCE that can be played by the memory recorder.The COMPILER is automatically activated when you type the command PLAY (or .P if you are using the SCREEN EDITOR).  After successful compilation, either of these commands will also activate the REAL-TIME PERFORMANCE MODULE and start playing the SYNCLAVIER SEQUENCE.The CONVERT COMMAND also activates the COMPILER.  However, it merely compiles the SCRIPT COMPOSITION and returns the MONITOR without activating the REAL-TIME PERFORMANCE MODULE.  It leaves a compiled SYNCLAVIER SEQUENCE as the CURRENT-FILE.  You may SAVE the compiled sequence with the STORE COMMAND.$$REAL-TIME PERFORMANCE MODULEThe REAL-TIME PERFORMANCE MODULE runs the keyboard unit.  It is activated when you load the system.It may also be activated from the MONITOR when you type the command PLAY (or from the SCREEN EDITOR when you type the command .P).If you have typed in a SCRIPT COMPOSITION (or recalled one from the disk),you can type PLAY to turn your SCRIPT COMPOSITION into a SYNCLAVIER SEQUENCEand then play it.  If your SCRIPT COMPOSITION has mistakes in it, the MONITORwill tell you so. Correct your mistakes and type PLAY again.You may also press the PF2 KEY to activate the REAL-TIME PERFORMANCE MODULEfrom these software MODULES:     SIGNAL FILE MANAGER      MUSIC PRINTING     ANALYSIS MODULE          REVERSE COMPILER$PWhen the REAL-TIME PERFORMANCE MODULE is activated, there will be a sign-on message in the keyboard display window.  This message tells you the software release you are using, the number of voices in your system, as well as the amount of memory your software is configured for (typeHELP CONFIGUR).  The Velocity/Pressure Keyboard is now ready for you toplay and record.  Complete instructions on the keyboard unit may be foundin the instruction manual set.At the same time, the terminal may be used to help you in your work. AWelcome Menu will appear on the terminal.  From this screen you canselect timbre, SOUND-FILE, and sequence directories which you canuse to recall sounds and recorded sequences to the keyboard.  You can also select the MAIN MENU from which you may access these three directories as well as additional displays.  All the real-time menus and displays have on-screen instructions.  For further information, see the documentation updates for the current release.$PWhen you are finished with REAL-TIME PERFORMANCE, you may press BREAK from any menu to go to the MONITOR (or the SCREEN EDITOR if that's what you're using as a "front end").  However, the keyboard timbre and the SYNCLAVIER SEQUENCE in the memory recorder will be lost unless you have saved them on disk (using the buttons on the keyboard).From any menu you may also:    Press PF1 (or ESC and 1) to go to the REVERSE COMPILER.   Press PF3 to go to MUSIC PRINTING.   Press PF4 to go back to the SIGNAL FILE MANAGER.(NOTE: These options are all listed on the System Commands Display whichyou may call up from either the Welcome Menu or the Main Menu.)Note that there are several versions of the REAL-TIME PERFORMANCE MODULE.You should use the correct version for your particular set of options:Velocity keyboard or original keyboard, guitar, Polyphonic Sampling,Sample-to-Disk, etc.  Type HELP RTP VERSIONS.$$REVERSE COMPILER MODULEThe REVERSE COMPILER is a program that converts the SYNCLAVIER SEQUENCE in the memory recorder into a SCRIPT COMPOSITION which can then be editedon the terminal screen.It can be activated at any time from the REAL-TIME PERFORMANCE MODULE bypressing the PF1 key or ESC followed by 1.Once it is activated, the REVERSE COMPILER menu will appear on the screen.This menu features options which determine the form of the SCRIPTCOMPOSITION, whether it will be in SCRIPT music notation or the computermusic format, the time signature, and so forth.After making selections on the menu, you press the ENTER or ESC KEY to begin processing of your SYNCLAVIER SEQUENCE.  At the end, the MONITOR will be restored and the converted sequence will replace the CURRENT-FILE.  A dollar sign will be added to the end of the name of the CURRENT-FILE to prevent you from accidentally replacing a file with the same name.  (E.g., a file called TUNE will be turned into TUNE$.)$POnce you have been returned to the MONITOR, you may use the LIST COMMAND to display the reverse compiled SCRIPT COMPOSITION on the terminal screen.  You may use the EDIT COMMANDS to change anything you want, such as the length or pitch of a note.  You may also use SCRIPT statements to change the length or tempo of a piece in order to synchronize it to film or tape.You may also use the SCREEN EDITOR to view and edit the SCRIPT COMPOSITION.It is also possible to activate the REVERSE COMPILER directly from the MONITOR by typing the REV COMMAND. You should first use the RECALL COMMAND so that your CURRENT-FILE is a SYNCLAVIER SEQUENCE to to reverse compile.$$MUSIC PRINTING MODULEThe MUSIC PRINTING MODULE is a program that takes a SCRIPT COMPOSITION or a SYNCLAVIER SEQUENCE and transcribes it into standard music notation.  It is activated from the MONITOR by typing the PLOT COMMAND or from the REAL-TIME PERFORMANCE MODULE or REVERSE COMPILER menu by pressing PF3.You can use MUSIC PRINTING to create almost any kind of notation from a single instrumental part to a complete sixty-four part score.To learn about MUSIC PRINTING, see the "Music Printing User Guide" and "Music Printing Reference Manual" in the instruction manual set.$$SIGNAL FILE MANAGER MODULEThe SIGNAL FILE MANAGER serves as the "MONITOR program" for the Sample-to-Disk system.  You activate the SIGNAL FILE MANAGER from the MONITOR by typing the command SFM or from the REAL-TIME PERFORMANCEMODULE or the ANALYSIS MODULE by pressing the PF4 key.From then on you will use a different set of commands for recording, playing, displaying, analyzing and manipulating recorded sounds, or SOUNDFILES.  These commands are not covered in the HELP topics.  See the "Musician's Guide to the Sample-to-Disk System" in the instruction manualset.$$SCREEN EDITOR MODULEThe SCREEN EDITOR is a tool for convenient editing of text, SCRIPT COMPOSITIONs, programs, letters and so forth.  Type SED to activate it from the MONITOR.  The CURRENT-FILE will then be printed on the screen in 22-line segments.  Using the ARROW KEYS, you move the cursor to any place in the text and start typing.          command      A texttexttexttexttexttexttext          column ----->B texttexttexttexttexttexttext                       C texttexttexttexttexttexttext                       D texttexttexttexttexttexttext                       E texttexttexttexttexttexttext                       F texttexttexttexttexttexttext                       G texttexttexttexttexttexttextYou may also move the cursor to any letter in the command column, which is the leftmost column on the screen, and issue many commands.  For example, from the command column, you can play the SCRIPT COMPOSITION youare composing or editing or you can save and recall files.$PThese are the main SCREEN EDITOR commands:   .P activates REAL-TIME PERFORMANCE MODULE, plays SCRIPT COMPOSITION   .X runs program   .O recalls file   .R stores file   .N creates new file   .U unsaves file   .E returns MONITORRemember, you must move the cursor to the command column before you type the command.  Otherwise, the command will be inserted into the TEXT-FILE.NOTE: If you activate REAL-TIME PERFORMANCE from the SCREEN EDITOR, pressing BREAK will return you to the SCREEN EDITOR.$$UTILITY PROGRAMSThe UTILITY PROGRAMS help you prepare disks for use, as well as perform other utilitarian duties.  They include:   FORMCOPY     formats floppy diskettes or tape cartridges                and copies FILES from one storage device to another.   SHUFFLE      reorganizes the contents of a storage device                to make room for more FILES.   CONFIGUR     customizes the software for a particular                hardware setup.   LISTING      prints out listings of XPL programs.   WINCHESTER   formats Winchester disks and copies system   INSTALLATION FILES onto a Winchester.$PThese are all applications programs, rather than MODULES programs.  They may be found on a special XPL user diskette and in the :.SYSTEM catalog of the Winchester disk.  To use one of the UTILITY PROGRAMS, you must type its name.  For example to use the program for copying disks, type     Ready > FORMCOPYNOTE: We recommend that you type HELP FORMCOPY before running it thefirst time you use the program.  This way you can prevent accidental erasures.$$MAIN MENUWhen you activate the REAL-TIME PERFORMANCE MODULE, a Welcome Menu willappear on the terminal, giving you some of your options during REAL-TIME PERFORMANCE.  One of the options is to call up the MAIN MENU.From the MAIN MENU, you may proceed in many different directions.  You may access different directories (timbre, SOUND-FILE, sequence, and SUBCATALOGs).You may access displays for timbre programming, recording, routing the Multichannel Outputs, and for setting up a keyboard "patch" of several SOUND-FILEs.You may also "name" your timbre and turn the terminal "beep" on and off.Finally, you may call up any other software MODULE.$$GUITAR PERFORMANCE MODULE                                             The Synclavier Digital Guitar Option provides an interface between the Synclavier Digital Music System and the Roland guitar.  The hardware for the option consists of the Digital Guitar Control Unit and a remote button panel for the guitar.The software for the Digital Guitar Option is a special version of the REAL-TIME PERFORMANCE MODULE which accepts code from the Digital Guitar Control Unit and remote button panel along with that from the keyboard.  You can perform on the guitar alone or with the keyboard.  You can record, store and recall timbres and sequences, and use all kinds of real-time effects, all from the guitar and the button panel.  Programming sounds is still done at the keyboard control panel.To use this special software, you must use the SET RTP command to change thedefault REAL-TIME version to one of the guitar versions (see RTP VERSIONS). You can also change the SET RTP statement in the PROFILE to automatically activate the guitar software each time you load.$$XPLThe XPL language is used to program the Synclavier MODULES.  It is a high-level, structured language similar to PL/I.  For instructions on writing programs in XPL, see the "Scientific XPL Reference Manual."An XPL system diskette is used to RUN programs written in the Scientific XPL language.  The diskette contains the files for the compiler for the language.  These files are also present on the Winchester disk. $$ANALYSIS MODULEThe ANALYSIS MODULE is part of the software for the Sample-to-Disk (TM) system.  It is used to analyze a sampled sound and convert it into a Synclavier resynthesis timbre definition. With this program you can synthesize life-like acoustic instrument timbres as well as a range of new timbres unrealizable on any other digital synthesizer.The ANALYSIS MODULE enables you to accurately measure the pitch, spectrum, and volume of a sampled sound at various points in time. Once these measurements have been made, the ANALYSIS MODULE converts them into a timbre definition with a series of timbre frames. Each frame representsthe pitch, harmonic structure, and volume of the sound as it changes.  Then, the REAL-TIME PERFORMANCE MODULE is accessed, the new timbre is activated, and the sound may be played on the keyboard or guitar, modified, and recorded just like any other timbre.You activate the ANALYSIS MODULE from the SIGNAL FILE MANAGER or from theMONITOR by typing the command SYN.$PBefore doing so, however, you must put in special labels on the points inthe SOUND-FILE that you want analyzed and converted into frames.  Complete instructions on this process and on the ANALYSIS MODULE may be found in the "Resynthesis on the Synclavier (R) - the SFM Analysis Program" in the instruction manual set.All but one or two of the preset timbres that have frames have been created with the help of the ANALYSIS MODULE.  You may use these just like any other Synclavier timbre.$$COMMANDSThe MONITOR will respond to many different commands.  They fall intothe following categories (each category is a HELP topic, as is each command).   SYSTEM     commands that activate MODULES, such as               REAL-TIME PERFORMANCE (keyboard) or MUSIC PRINTING.   FILE       commands which create, recall, and store FILES   MANAGEMENT (blocks of information) on the disk.    CATALOG    commands that organize the storage space on              your disk and that display directories of the               contents of the storage areas.    PERFORM    commands that run application programs               and perform other tasks.   EDIT       commands that change the text in a TEXT-FILE.$P   DISPLAY    commands that print something on the screen.   SET        commands that allow you to set the values of certain              aspects of the system or CURRENT-FILE.   SHOW       commands that show you the values that you have set              with SET COMMANDS.       To use each command, type the command (or the first three letters of the command) and press RETURN.$$SYSTEM COMMANDSYou use SYSTEM COMMANDS to activate different software MODULES from the MONITOR.   SED        activates SCREEN EDITOR.   PLAY       activates REAL-TIME PERFORMANCE MODULE.   PLOT       activates MUSIC PRINTING.   REV        activates REVERSE COMPILER.   SFM        activates SIGNAL FILE MANAGER (Sample-to-Disk (TM)).   SYN        activates ANALYSIS MODULE (Sample-to-Disk (TM)) from              MONITOR and SIGNAL FILE MANAGER.Other SYSTEM COMMANDS return you to the MONITOR.   .E         restores MONITOR from SCREEN EDITOR.   BREAK KEY  restores MONITOR from all MODULES but SCREEN EDITOR.   BREAK KEY  restores SCREEN EDITOR from REAL-TIME and MUSIC              PRINTING if you got there by typing .P.$POther SYSTEM COMMANDS move you around between every MODULE except the MONITOR: PF1 KEY       activates REVERSE COMPILER from REAL-TIME and MUSIC ESC and 1     PRINTING. PF2 KEY       activates REAL-TIME from MUSIC PRINTING, REVERSE COMPILER, ESC and 2     and ANALYSIS. PF3 KEY       activates MUSIC PRINTING from REAL-TIME and REVERSE               COMPILER. PF4 KEY       activates SIGNAL FILE MANAGER from REAL-TIME and ANALYSIS.$$FILE MANAGEMENT COMMANDSThe FILE MANAGEMENT COMMANDS are used to create FILES and save and recallthem from a storage DEVICE.   NEW <FILENAME>     creates new CURRENT-FILE.   OLD <FILENAME>     copies file from disk, makes it CURRENT-FILE.   SAVE <FILENAME>    stores CURRENT-FILE on disk.   UNSAVE <FILENAME>  erases file stored on disk.   REPLACE <FILENAME> stores revised copy of file on disk.   RENAME <FILENAME>  changes name of CURRENT-FILE.   DRENAME <old FILENAME><new FILENAME>                      changes name of stored file on disk.   STORE <sequence #>  stores compiled SYNCLAVIER SEQUENCE on disk.   RECALL <sequence #> recalls compiled SYNCLAVIER SEQUENCE from disk.   LENGTH             prints number of words in CURRENT-FILE.   NAME               prints name of CURRENT-FILE.   LAST               prints number of last line of CURRENT-FILE.$PWhenever you store or recall a FILE from a storage DEVICE, you willbe accessing the CURRENT-DEVICE and the CURRENT-CATALOG.  Formore on these topics, type HELP DEVICE and HELP SUBCATALOG.$$SET COMMANDSThe SET COMMANDS allow you to set the values of certain aspects of thesystem or your CURRENT-FILE.  They include: SET NAME <FILENAME>       changes name of CURRENT-FILE. SET TYPE <Text> or <Data> changes type of CURRENT-FILE.           or <Sync> SET PATH <SUBCATALOG>     tells computer where system files are stored. SET TERM [lines]          tells computer terminal screen size. SET RTP <FILENAME>        changes name of default REAL-TIME PERFORMANCE                           version. SET CATALOG <SUBCATALOG>  establishes CURRENT-CATALOG and/or                            CURRENT-DEVICE. SET PROMPT <STRING>       changes prompt. SET ECHO <On> or <Off>    sets command echo during DO file execution SET LOG  <On> or <Off>    adds command history letters to monitor prompt$$SHOW COMMANDSThe SHOW COMMANDS allow you to see information about the CURRENT-FILE,CURRENT-CATALOG or operating system.  The following SHOW COMMANDSall have corresponding SET COMMANDS: SHOW NAME        displays name of CURRENT-FILE. SHOW TYPE        displays type of CURRENT-FILE. SHOW PATH        tells you where system files are stored. SHOW TERM        displays current setting for screen size. SHOW RTP         displays name of current REAL-TIME PERFORMANCE version. SHOW CATALOG     displays name of CURRENT-CATALOG. SHOW PROMPT      displays prompt. SHOW ECHO        displays whether DO echo mode is On or Off. SHOW LOG         displays if command history letters are added to prompt.$PThese SHOW COMMANDS do not have SET COMMANDS: SHOW VERSION     displays information about the operating system. SHOW INFO        displays name, length, type and status of CURRENT-FILE                    and name of CURRENT-CATALOG. SHOW MACROS      displays any monitor macros defined. SHOW HISTORY     displays the previous 26 commands typed.$$CATALOG COMMANDSThe CATALOG COMMANDS are used to organize the storage space onyour storage DEVICE(s) into small areas, or SUBCATALOGs, eachcontaining a group of FILES.  They are also used to look at thedirectory(ies) of your SUBCATALOGs.The first two CATALOG COMMANDS create and access SUBCATALOGs.   CREATE        creates and saves SUBCATALOG on storage DEVICE.   ENTER         accesses DEVICE (makes it your CURRENT-DEVICE)                 and SUBCATALOG (makes it your CURRENT-CATALOG).The remaining CATALOG COMMANDS produce directories of the contentsof SUBCATALOGs.   CATALOG       displays directory of CURRENT-CATALOG.   CAT ALL       displays directory of all FILES in current                  catalog, including HIDDEN-FILES.   CAT LENGTH    displays directory which includes length of                  each file.$P   CAT FILE      places copy of directory of CURRENT-CATALOG                 in CURRENT-FILE.   CAT OF        displays directory of another specified SUBCATALOG.   CAT STYPE     displays directory with FILES sorted by type.   CAT SORIGIN   displays directory with FILES sorted by sector number.   CAT SLENGTH   displays directory with FILES sorted by length, from                  shortest to longest.   CAT SNAME     displays directory with FILES sorted alphabetically.              $$SUBCATALOGA SUBCATALOG is merely a section of a storage DEVICE, set up for storage of FILES, rather like a drawer in a file cabinet.  You organize your storage DEVICE into SUBCATALOGs of files you will likely want to access at the same time.  For example, you could put your letters in one SUBCATALOG, your drum sound samples in another, and so on.Only one SUBCATALOG is available for use at a time.  This will be your CURRENT-CATALOG.  When you first load the system, your CURRENT-CATALOG will be the "top-level" catalog on the Winchester.  This catalog includes the whole disk (that is, the whole file cabinet).  If you type the commandReady > CATALOG you will see a directory for the entire disk.  It will include some FILES(such as the UTILITY PROGRAMS) as well as some SUBCATALOGs (such as "scrptcat").  The "scrptcat" SUBCATALOG contains several demonstration SCRIPT COMPOSITIONs.$PYou may recall the FILES in the "top level" catalog immediately with the OLD COMMAND.  To use the FILES in a SUBCATALOG, you must first access theSUBCATALOG with the ENTER COMMAND.  TypeReady > ENTER SCRPTCATto make SCRPTCAT the CURRENT-CATALOG.  Now if you typeReady > CAT you will see listed several FILES.  These are demonstration SCRIPT COMPOSITIONs which you may recall with the OLD COMMAND.To return to the top-level catalog, typeReady > ENTER :This special command with the colon will always return you to the top.$PYou may use the CREATE COMMAND to create your own SUBCATALOGs.  You may create any size SUBCATALOG and choose whether you want the SUBCATALOG to hold either up to 32 FILES or up to 128 FILES.  In any SUBCATALOG, you may have one TIMBRE-FILE and up to eight SEQUENCE-FILES.  There are no limits on other kinds of files.$$PERFORMANCE COMMANDSThe PERFORMANCE COMMANDS are used to perform a variety of functions.The following are PERFORMANCE COMMANDS for XPL programs.   COMPILE      turns XPL source file into executable machine code.   RUN          compiles and executes XPL source file or executes                previously compiled program.The following are PERFORMANCE COMMANDS for SCRIPT COMPOSITIONs.   CONVERT      turns SCRIPT COMPOSITION into SYNCLAVIER SEQUENCE.   PLAY         turns SCRIPT COMPOSITION into SYNCLAVIER SEQUENCE (if                appropriate) and activates REAL-TIME PERFORMANCE MODULE.The following are PERFORMANCE COMMANDS for the MONITOR.   DO           executes COMMAND-FILE.   BOOT         initializes operating system (loads the system).$$EDITING COMMANDSThe EDITING COMMANDS are used to edit a TEXT-FILE. BUILD       starts automatic line-numbering. RESEQUENCE  renumbers lines, starting with 100 and incrementing by 10's. SEQUENCE    renumbers lines, starting with 1 and incrementing by 1's. DESEQUENCE  removes line numbers. DELETE      removes specified lines from CURRENT-FILE. EXTRACT     removes all but specified lines from CURRENT-FILE. MOVE        moves specified lines to a new location and RESEQUENCEs. JOIN        appends specified file to end of CURRENT-FILE. APPEND      appends specified file to end of CURRENT-FILE and RESEQUENCEs. LOCATE      locates the specified character string. CHANGE      changes specified character string.The SCREEN EDITOR can be used to perform most of these editing functionsas well as many others.$$DISPLAY COMMANDSThe DISPLAY COMMANDS affect the display on the screen.  (We havealso included the PRINT COMMAND which affects the hardcopy printout.)   LIST     prints CURRENT-FILE on screen in 22-line segments.   PRINT    prints CURRENT-FILE on printer.   PROMPT   changes Ready> to specified text (same as SET PROMPT).The next few DISPLAY COMMANDS are mostly designed for use in COMMAND-FILES.   WRITE    prints specified text on screen.   PAUSE    prints specified text, then waits for user to press any key.   CLS      clears screen.   *        causes following text to be ignored; used to make comments.$$FILESA file is simply a block of information that can be processed by the computer and that can be stored on the disk.  A file can be a letter, a SCRIPT COMPOSITION, a bank of timbres, or a computer program.  You need to know about the following kinds of FILES.    CURRENT-FILE       the file you are working on, the one in memory.    TEXT-FILE          a file which holds lines of text.    DATA-FILE          a file which holds binary code, or 1's and 0's.    SYNC-FILE          a DATA-FILE which holds a SYNCLAVIER SEQUENCE.    TIMBRE-FILE        a DATA-FILE which holds banks of timbres.    SOUND-FILE         a DATA-FILE which holds a sampled sound.    HIDDEN-FILE        any file whose name begins with a period.     COMMAND-FILE       a TEXT-FILE which contains a series of COMMANDS.Each file has a FILENAME.  Files can be grouped together on the disk in SUBCATALOGs and can be moved from storage DEVICE to storage DEVICE.$$HFWI - HAVE FUN WITH ITThis is a technical term used in the computer industry to encourageall programmers in their quest for XPL excellence. It is mostfrequently applied to projects of dubious merit or unprecedentedobscurity, and as such is invoked quite often.For more information on this topic, see Jones, Cameron.$$CURRENT-FILEThe CURRENT-FILE is the file that you are working on, the file that is currently in computer memory.  There can only be one file in memory at a time, and since it will only stay there until you recall another file (or turn off the computer) it can be thought of as the temporary, or working, copy.To create a new CURRENT-FILE, you use the NEW COMMAND.  This command opens up a space in memory for a TEXT-FILE (lines of text) that you will type in.  Once you have typed in your text, you may use the SAVE COMMAND to make a permanent copy of the CURRENT-FILE on the disk.  To recall a saved file from the disk into memory, and make it the CURRENT-FILE, you use the OLD COMMAND.  Whenever you use the NEW or OLD COMMANDs, you will lose the previous CURRENT-FILE.Whenever you type a character or make a change in the text, you are only changing the CURRENT-FILE.  The copy on the disk is not changed until you use the REPLACE COMMAND to replace the stored version with the revised version.$$CURRENT-CATALOGThe CURRENT-CATALOG is the area on the disk that the MONITOR will access whenever you use any FILE MANAGEMENT or CATALOG commands. Whenyou first load the system, the CURRENT-CATALOG will be the entire storage space on the disk. This is called the top-level catalog.The top-level catalog may be partitioned into smaller areas, called SUBCATALOGs, containing FILES you wish to store together, such as a group of similar SOUND-FILEs.You create a SUBCATALOG with the CREATE COMMAND. However, before you can use a SUBCATALOG to store FILES, you must access it with the ENTER COMMAND.  The SUBCATALOG that you access in this way will be your new CURRENT-CATALOG.$$CURRENT-DEVICEJust as there is a CURRENT-FILE and a CURRENT-CATALOG, there is also a CURRENT-DEVICE.  Your Synclavier system can include several storage DEVICEs.  The CURRENT-DEVICE will be the DEVICE that the MONITOR will access whenever you use any FILE MANAGEMENT (e.g., OLD or SAVE) COMMANDS or any CATALOG COMMANDS.  When you first load the system, the default CURRENT-DEVICE will be your Winchester disk, if you have one, or the auxiliary or right-hand disk if you use dual floppies.You may access another device with the ENTER COMMAND, so that your FILE MANAGEMENT COMMANDS will all go to a different device.  By typingReady > ENTER F0:the "Floppy Drive 0" will become the CURRENT-DEVICE.  You couldnow use the CATALOG command to see all the FILES on "Floppy Drive 0".$PYou can also access different devices without changing the CURRENT-DEVICE by using the device specifier in the command.For instance, if your Winchester is your CURRENT-DEVICE, youcan use the CAT OF COMMAND to see FILES on "Floppy Drive 0", by typingReady > CAT OF F0:without changing the CURRENT-DEVICE.$$TEXT-FILEA TEXT-FILE is a file which consists of lines of text.  Each line starts with a line number.  TEXT-FILEs can be SCRIPT COMPOSITIONs, XPL programs, letters, reports and so forth.Here is how to enter a short TEXT-FILE with the MONITOR.  First open up anew CURRENT-FILE by typingReady > NEW FILEand press RETURN.  FILE is the FILENAME you will be giving to the new CURRENT-FILE.  Now type in your first line, starting with the line number10.  It's a good idea to number by 10's in case you want to add something between lines.  TypeReady > 10 This is the first line.and press RETURN.  You must complete each numbered line by pressing RETURN!$PNow type your second line.Ready > 20 This is the second line.You can add a line between line 10 and line 20.  TypeReady > 15 This is in between.To see the lines of text in the CURRENT-FILE, typeReady > LISTand you will see        10 This is the first line.        15 This is in between.        20 This is the second line.$PYou may enter and edit text in the CURRENT-FILE with the MONITOR in this way or use the SCREEN EDITOR.You may also use the REVERSE COMPILER to convert a SYNCLAVIER SEQUENCE into a TEXT-FILE which you can edit (either with the MONITOR or the SCREEN EDITOR).TEXT-FILEs, like all files, can be stored with the SAVE and REPLACE COMMANDs and recalled with the OLD COMMAND.$$DATA-FILEA DATA-FILE contains binary code or a series of 0's and 1's thatcan be processed by the computer.  Timbres, sequences, sampledsounds are all stored in DATA-FILEs and cannot be directlyedited at the computer terminal.$$SYNC-FILEAs you know, you store and recall SYNCLAVIER SEQUENCEs from the disk at the keyboard, using the Timbre/Sequence Storage buttons.  You may also use the Sequence Directory to recall SYNCLAVIER SEQUENCEs at the terminal during REAL-TIME PERFORMANCE and use use the STORE and RECALL COMMANDS at the MONITOR.  Each time you store and recall you are accessing what we call a SYNC-FILE, or special "sequence file" set up to store the timbres and notes of a SYNCLAVIER SEQUENCE.You have eight empty 92-sector SYNC-FILEs on your Winchester disk, one for each numbered button on the keyboard.  You may use these right away to store sequences in the top-level catalog.  You may also copy them into SUBCATALOGs to store additional sequences.In addition, there are eight SYNC-FILEs on each superfloppy timbre diskette.For double density floppies, there are two Master Sequence Storage Disks.  You may copy any of these SYNC-FILEs into SUBCATALOGs on your Winchester and/or onto formatted floppy diskettes.$PSYNC-FILEs have FILENAMES that start with ".sq" followed by a number and "data".  For more on ".sq?data" and the buttons they referto, see "Storing-Creating Files" in the instruction manual set.$$TIMBRE-FILEYou recall and store timbres from the disk at the keyboard, using the buttons under Timbre/Sequence Storage.  Each time you store and recall you are accessing what we call a TIMBRE-FILE, a special file set up on the Winchester or timbre diskette used to store Synclavier timbres.  EachTIMBRE-FILE may hold up to eight banks of timbres.  Each bank may hold up to eight timbres.There is one TIMBRE-FILE on your Winchester and one on each Timbre Diskette.  The Master Timbre Diskette contains an empty TIMBRE-FILE that you may copy into SUBCATALOGs on the Winchester and onto formatted floppy diskettes to create storage space for your own timbres.TIMBRE-FILEs have the FILENAME ".newdata".  For more on ".newdata", see "Storing-Creating Files" in the instruction manual set.$$SOUND-FILEWhen a sound is recorded by the Sample-to-Disk system, its waveform is stored in a SOUND-FILE on the Winchester in the form of a series of precise digital samples.  These samples may be displayed and analyzed, edited and manipulated, and converted back into an analog signal, that is, "played."  The samples in the SOUND-FILE may be viewed in both time (or signal) displays and frequency (or spectral) displays.You use SIGNAL FILE MANAGER commands to manage your SOUND-FILEs.The Assignment Display, which you access from the MAIN MENU during REAL-TIME PERFORMANCE, can be used to create a patch of SOUND-FILEs to be played on the keyboard.A SOUND-FILE can be also converted into a Synclavier synthesized timbre by means of the ANALYSIS program.$$HIDDEN-FILEA HIDDEN-FILE is any file whose name begins with a period.  It is "hidden" because its name will not appear in the directory when you type the CATALOG COMMAND even though it is actually in the SUBCATALOG you are looking at.  It will appear if you type the CATALOG ALL command.Most of the files you will receive on your Winchester and system diskettes are HIDDEN-FILES.  They include the software MODULES (or system files), the TIMBRE-FILEs, and the SYNC-FILEs.$$FILENAMEEvery file has a name.  When you create a file with the NEW command, you will give it a name with up to eight characters, letters or numbers, such as "QUARTET", "PROG1", or "12BAR".   Any space inserted in a FILENAME and any letters after the space will be ignored by the MONITOR.  Also, any characters over the eight allowed will be ignored.  That is, SYMPHONY1 and SYMPHONY2 will both be interpreted by the MONITOR as SYMPHONY.Besides letters and numbers, the following symbol characterscan also be included in a FILENAME:  "  #  $  _  -  .  '  (  )  [  ]  {  }  ~  ^ `These symbol characters, however, cannot be used in a FILENAME:  ?  !  :  ;  ;  /  \  <  >  +  =  %  &  *  |  @All these rules apply to SUBCATALOG names as well.$PIf you PLAY a SCRIPT COMPOSITION, and then REVERSE COMPILE it, the FILENAME of the reverse compiled file will be that of the original SCRIPTCOMPOSITION, except that a dollar sign will be placed at the end of the name (e.g., TUNE will become TUNE$).If you CONVERT a SCRIPT COMPOSITION, the FILENAME of the converted file will be that of the original SCRIPT COMPOSITION, except that a period will be placed at the end of the name (e.g., TUNE will become TUNE.).If you COMPILE an XPL program, the CURRENT-FILE will change from a TEXT-FILE to an executable file and a period will be added to the end of the FILENAME (e.g., PROGRAM will become PROGRAM.).You will find a period in front of many FILENAMES of the files you receive from New England Digital.  All the FILENAMES for software MODULESas well as all TIMBRE- and SYNC-FILEs are preceded with periods so that they are not normally listed with the CATALOG COMMAND.  However, with the CATALOG ALL COMMAND, these files are listed as well.$$DEVICEA DEVICE is a component of your system.  The devices that are of prime interest are the storage devices: the floppy drives and Winchester disks.Each DEVICE has a name, or identifier, that you can use in MONITOR commands.  By using the correct DEVICE identifier you can store and recall FILES from any DEVICE in your system. The identifiers are:  FO  Floppy diskette in drive connected to "Floppy Drive 0"  F1  Floppy diskette in drive connected to "Floppy Drive 1"  W0  Winchester disk(s) connected to "Winchester 0"  W1  Winchester disk(s) connected to "Winchester 1"  R0  Floppy diskette in remote drive 0 (custom installations only)  R1  Floppy diskette in remote drive 1 (custom installations only)In a command, a device name is always followed by a colon to indicate that it is not a FILENAME (e.g., F0: or R1:).$POne DEVICE is the CURRENT-DEVICE.  All file operations will reference the CURRENT-DEVICE unless otherwise specified.  If you have a Winchester, the Winchester will be the default CURRENT-DEVICE.  If you have dual floppies, the diskette in the drive connected to "Floppy Drive 1" will be the default CURRENT-DEVICE. To change the CURRENT-DEVICE, use the ENTER COMMAND.  For example, typeReady > ENTER F0:to direct all subsequent FILE MANAGEMENT COMMANDS at the diskette in thedrive connected to "Floppy Drive 0".To reference a different DEVICE in a particular command without changing the CURRENT-DEVICE, precede the FILENAME with the DEVICE name. For example, typeReady > OLD FO:FORMCOPYto call up the FORMCOPY program off the disk in the F0 drive. $$SYNCLAVIER SEQUENCEA SYNCLAVIER SEQUENCE consists of the timbres and notes of a piece of music held in the memory recorder.  Permanent copies of a SYNCLAVIER SEQUENCE may be stored on the disk in SYNC-FILEs.You may record a SYNCLAVIER SEQUENCE at the keyboard.  Or, you may enter or recall a SCRIPT COMPOSITION at the terminal and then PLAY it to place a SYNCLAVIER SEQUENCE in the memory recorder.You may store and recall SYNCLAVIER SEQUENCEs with the storage buttons on the keyboard.  You may also use the STORE and RECALL COMMANDS to store and recall SYNCLAVIER SEQUENCEs from the terminal.  The CONVERT COMMAND is used to convert a SCRIPT COMPOSITION into a SYNCLAVIER SEQUENCE without leaving the MONITOR.A SYNCLAVIER SEQUENCE may be converted into a SCRIPT COMPOSITION by activating the REVERSE COMPILER. Type REV from the MONITOR or press   PF1 from other MODULES.$PA SYNCLAVIER SEQUENCE may be transcribed into standard notation by activating MUSIC PRINTING.  Type PLOT from the MONITOR or press PF3 from other MODULES.$$SED COMMANDThe SED COMMAND is used to activate the SCREEN EDITOR from the MONITOR.  The CURRENT-FILE under the MONITOR will become the CURRENT-FILE under the SCREEN EDITOR (if it is a TEXT-FILE; the SCREEN EDITOR does not accept compiled files) and the first 22 lines of the CURRENT-FILE will be displayed on the screen.To use the command, typeReady > SEDIf you have just loaded the system, the CURRENT-FILE will be empty.  The SCREEN EDITOR will now ask you for a FILENAME.  You may type in the name of a file stored on your disk.  You can also use the OLD COMMAND to call up a file before typing SED.For complete instructions on the SCREEN EDITOR, see "Using the Screen Editor" in the instruction manual set.$$PLAY COMMANDType PLAY to activate the REAL-TIME PERFORMANCE MODULE from the MONITOR.Also, type PLAY to hear a SCRIPT COMPOSITION.  This command activates theSCRIPT COMPILER which then converts the SCRIPT COMPOSITION in the CURRENT-FILE into a SYNCLAVIER (R) SEQUENCE.  When the conversion is complete, the SYNCLAVIER SEQUENCE will begin playing.  If there are errors in the SCRIPT COMPOSITION, you will be returned to the MONITOR.If there is no SCRIPT COMPOSITION (that is, you have an empty CURRENT-FILE), typing PLAY will simply activate the REAL-TIME PERFORMANCE MODULE as described above.There are several versions of the REAL-TIME PERFORMANCE system (Type HELPRTP VERSIONS for information on the different versions.)The PLAY COMMAND activates the REAL-TIME PERFORMANCE MODULE only from the MONITOR.  To access the REAL-TIME PERFORMANCE MODULE from the SCREEN EDITOR, type .P from the command column.  From the REVERSE COMPILER, MUSIC PRINTING, SIGNAL FILE MANAGER, or ANALYSIS MODULE, press the PF2 key.$$PLOT COMMANDThe PLOT COMMAND is used to activate MUSIC PRINTING.  If you have a SCRIPTCOMPOSITION as your CURRENT-FILE, it will be converted into a SYNCLAVIER SEQUENCE ready to be transcribed by MUSIC PRINTING.  If you have an emptyCURRENT-FILE, you can recall a SYNCLAVIER SEQUENCE for transcription fromthe MUSIC PRINTING Main Menu.When MUSIC PRINTING is activated, the Music Printing Main Menu will be displayed on the terminal screen.For complete instructions on MUSIC PRINTING, see the instruction manual set.$$SFM COMMANDThe SFM COMMAND activates the SIGNAL FILE MANAGER, which is used to operate the Sample-to-Disk System.  After you type SFM, you will then useSIGNAL FILE MANAGER commands rather than MONITOR commands to recall and save, perform and analyze SOUND-FILES.  All SIGNAL FILE MANAGER commands are explained in the "Musician's Guide to the Sample-to-Disk System."$$SYN COMMANDThe SYN COMMAND activates the ANALYSIS MODULE, which is part of the Resynthesis system.  This program allows you to convert a sampled SOUND-FILE into a Synclavier timbre.The SYN COMMAND can be used with either the MONITOR or the SIGNAL FILE MANAGER.  For complete instructions on the SFM ANALYSIS PROGRAM, see the section on "Resynthesis on the Synclavier (R), the SFM Analysis Program" in the instruction manual set.$$NEW COMMANDThe NEW COMMAND tells the MONITOR to create a new CURRENT-FILE.  When youtype NEW followed by a FILENAME, a space is created in computer memory ready to receive the numbered lines of your new file.  TypeReady > NEW <FILENAME>and press RETURN.  You may now start typing numbered lines.The NEW COMMAND is also used to clear out the CURRENT-FILE, which you will frequently want to do before activating the REAL-TIME PERFORMANCE MODULE.  You can just typeReady > NEW X to clear out whatever you had in there.  (Actually, you can type anythingyou want for the FILENAME.)  Then type PLAY to turn on the keyboard.$$OLD COMMANDThe OLD COMMAND instructs the MONITOR to make a copy of a file that has been previously stored on the floppy diskette or Winchester disk.  The copy will be placed in memory and will be your CURRENT-FILE.  To use the command, typeReady > OLD <FILENAME>using the FILENAME of the stored file.$$SAVE COMMANDYou may use the SAVE COMMAND to place a copy of the CURRENT-FILE along with its FILENAME onto the user diskette (the diskette in the right-hand drive) or the Winchester disk.  Simply typeReady > SAVEand the file will be stored on the disk.  Whenever you want to recall thefile later, you will use the OLD COMMAND followed by the FILENAME.To protect undesired erasures, the MONITOR will not accept this command when there is a file on the disk which has the same FILENAME as the CURRENT-FILE.  It will give you the error message.File <filename> already saved.You may then follow the SAVE COMMAND with a different (unused) FILENAME, as inReady > SAVE <filename>  $PAlternatively, you could use the REPLACE COMMAND if you wish to write over the file with the same name.  Or use the RENAME COMMAND to change thename of the CURRENT-FILE. Or use the DRENAME COMMAND to change the nameof the file stored on the disk.$$UNSAVE COMMANDUNSAVE is the inverse of SAVE.  The command removes a file from the diskette or Winchester.  To use the command, typeReady > UNSAVE <FILENAME>using the FILENAME of the file to be erased.  You can also type the UNSAVE COMMAND without a FILENAME.  In this case, the file on the disk that has the same name as the CURRENT-FILE will be erased.  The CURRENT-FILE will continue to exist in computer memory; only the stored version on your diskette or Winchester disk will have been erased.$$RENAME COMMANDThe RENAME COMMAND tells the MONITOR to change the name of the CURRENT-FILE.Simply type the command followed by the new name.Ready > RENAME <new FILENAME>This is handy when you want to SAVE more than one version of a file.$$DRENAME COMMANDThe DRENAME COMMAND tells the MONITOR to change the name of a file on the disk. TypeReady > DRENAME <old FILENAME> <new FILENAME>This is handy when you want to change the name of a file in the catalogwithout affecting the CURRENT-FILE.$$REPLACE COMMANDWhen you make changes on a file that you have already SAVEd, and then want to save the revised version, you will use the REPLACE COMMAND instead of the SAVE COMMAND.  TypeReady > REPLACEThis command will erase the original version of the file on the diskette or Winchester and REPLACE it with the revised version in computer memory.There must be a file on the disk with the same name as the CURRENT-FILE for this command to work.To write the contents of the CURRENT-FILE over a file with a different name, typeReady > REPLACE <FILENAME>$$LENGTH COMMANDThe LENGTH COMMAND is used to find out the length, in 16-bit words, of your CURRENT-FILE.  Every two letters of text requires one 16-bit word ofstorage.  Each line number, regardless of how many digits it contains, will also require a 16-bit word.$$NAME COMMANDIf you happen to forget the name of your CURRENT-FILE in the middle of a long session, simply type in the NAME COMMAND.$$LAST COMMANDThe LAST COMMAND tells the MONITOR to print the last line number of the CURRENT-FILE.  This is useful when you want to add to a file without having to LIST the entire file to see where you stopped.  When you type the LAST COMMAND, the MONITOR will send this message to the screen:  Last line number is [ln]You can use the LAST COMMAND with the LIST COMMAND to examine the final section of a file.  That is, use the LAST COMMAND to find out the line number of the last line.  Then, use the LIST COMMAND followed by the linenumbers immediately preceding the last line to look at the final section.$$STORE COMMANDThe STORE COMMAND is only used after you have used the CONVERT COMMAND toturn your SCRIPT COMPOSITION into a SYNCLAVIER SEQUENCE.  Then you may use the STORE COMMAND to store the converted SYNCLAVIER SEQUENCE in a SEQUENCE-FILE, so that it may be recalled from the keyboard unit or the terminal.  Follow the word STORE with a number corresponding to a button under Timbre/Sequence Storage.  For example, typeReady > STORE 1to store a SYNCLAVIER SEQUENCE for recall by Button 1.  Any number from 1to 8 can be used provided the user diskette or SUBCATALOG contains a SEQUENCE-FILE accessed by that button.  If a SEQUENCE-FILE with the number entered does not exist, the error message  Sequence not available on this diskwill be printed on the terminal screen.$PIf there are more notes in the converted SYNCLAVIER SEQUENCE than can be contained in the specified SEQUENCE-FILE, the error message  Sequence too long to storewill be printed on the terminal screen.$$RECALL COMMANDThe RECALL COMMAND, followed by a number from 1 to 8, recalls a SYNCLAVIER SEQUENCE from the specified SEQUENCE-FILE and places it in the CURRENT-FILE.  The number of the SEQUENCE-FILE will become the name of the CURRENT-FILE (and the contents of the previous CURRENT-FILE will be lost).First insert the diskette containing the desired SYNCLAVIER SEQUENCE (or enter the SUBCATALOG containing the SYNCLAVIER SEQUENCE), and then type RECALL followed by the Timbre/Sequence Storage button number.  For example, typeReady > RECALL 1to recall the SYNCLAVIER SEQUENCE accessed by button 1 under Timbre/Sequence Storage.  If there is no SEQUENCE-FILE with the number specified, an error message will be printed on the terminal screen.$$CREATE COMMANDThe CREATE COMMAND is used to create a new SUBCATALOG within the CURRENT-CATALOG.  TypeReady > CREATE <SUBCATALOG name>using a SUBCATALOG name with up to eight characters (type HELP FILENAME).  This command will create a SUBCATALOG with room for up to 32 FILES or SUBCATALOGs.You can also create a SUBCATALOG with room for 128 FILES or SUBCATALOGs by typingReady > CREATE <SUBCATALOG name>, LARGEThe number of sectors (399) automatically set aside for both small and large SUBCATALOGs allows the SUBCATALOG to be copied onto a double-densityminidiskette.$PYou can also use the CREATE COMMAND to create SUBCATALOGs with greater orfewer sectors.  TypeReady > CREATE <SUBCATALOG name>,SMALL norReady > CREATE <SUBCATALOG name>,LARGE nwhere n is the number of sectors to be reserved.  This number will depend on both the size of the FILES you are planning to save within the SUBCATALOG and the DEVICE on which you are planning to save backup copies.  See "Using the Monitor" in the instruction manual set.To actually use a new SUBCATALOG and store anything in it, you must firstaccess it with the ENTER COMMAND.  (Type HELP ENTER COMMAND.)$$CAT ALL (CATALOG MODIFIER)ALL is a CATALOG COMMAND modifier that instructs the MONITOR to list "all" the files stored in the CURRENT-CATALOG.  This includes all user files plus HIDDEN-FILEs.  You will generally use this option when checking on versions of the system files or when installing new system files.  TypeReady > CATALOG ALLorReady > CAT A$$CAT LENGTH (CATALOG MODIFIER)LENGTH is a CATALOG COMMAND modifier that tells the computer to include the length of each file in the CURRENT-CATALOG.  The length is listed in both words and sectors.Type Ready > CATALOG LENGTHorReady > CAT L$$CAT SNAMES (CATALOG MODIFIER)SNAMES is a CATALOG COMMAND modifier that tells the MONITOR to list the entries in the CURRENT-CATALOG alphabetically by name.TypeReady > CATALOG SNAMESorReady > CAT SN$$CAT SLENGTH (CATALOG MODIFIER)SLENGTH is a CATALOG COMMAND modifier that will bring up your directory sorted by length, beginning with the shortest file.  TypeReady > CATALOG SLENGTHorReady > CAT SL$$CAT STYPE (CATALOG MODIFIER)STYPE is a CATALOG COMMAND modifier that will list the entries in the current catalog sorted by type, such as text, or data, and so forth.Type Ready > CATALOG STYPEorReady > CAT ST$$CAT SORIGIN (CATALOG MODIFIER)SORIGIN is a CATALOG COMMAND modifier that will will bring up the entriesin the CURRENT-CATALOG sorted by origin.  That is, the files are listed inthe order they occur on the diskette.Type Ready > CAT SORIGINorReady > CAT SO$$CAT FILE (CATALOG MODIFIER)You may wish to print a copy of your CURRENT-CATALOG contents for archivepurposes.  This may be done by using the FILE modifier on the CATALOG COMMAND.  This modifier tells the MONITOR to replace your CURRENT-FILE bythe SUBCATALOG directory.  You can then use the PRINT COMMAND to produce a permanent copy.  NOTE: be sure to SAVE your CURRENT-FILE before using this command.TypeReady > CATALOG FILEorReady > CAT F$$CAT OF (CATALOG MODIFIER)OF is a CATALOG COMMAND modifier used to display a directory of a SUBCATALOG different from the CURRENT-CATALOG without leaving the CURRENT-CATALOG.  TypeReady > CATALOG OF <subcatalog name>using the name of the SUBCATALOG you want to display.If you are in a SUBCATALOG, you can look at the top-level catalog of theCURRENT-DEVICE by typingReady > CAT OF :The colon directs the MONITOR to the top-level catalog.You may also use CAT OF to look at a directory on a different DEVICE.  Forexample, to look at the floppy diskette in the "Floppy Drive 0", typeReady > CATALOG OF F0:$$ENTER COMMANDThe ENTER COMMAND is used to access a SUBCATALOG different from the CURRENT-CATALOG or a DEVICE different from the CURRENT-DEVICE.To access a SUBCATALOG listed in the CURRENT-CATALOG, typeReady > ENTER <SUBCATALOG name>using the name of the SUBCATALOG you want to make your new CURRENT-CATALOG.To return to the top-level catalog from any SUBCATALOG, typeReady > ENTER :The top-level catalog has no name.  Instead you use a colon.To access a different DEVICE, typeReady > ENTER <DEVICE name>:$Pusing the name of the DEVICE that you wish to make your CURRENT-DEVICE.The colon must be used to access the top-level catalog on the new DEVICE.To ENTER a SUBCATALOG which is not listed in the CURRENT-CATALOG, you will have to access it through the top-level catalog using the colon.  To access a SUBCATALOG listed in the top-level catalog on your current device, typeReady > ENTER :<SUBCATALOG name>and the MONITOR will look in the top-level catalog directory for the specified SUBCATALOG and will make this SUBCATALOG the new CURRENT-CATALOG.You can do the same thing on a different device.  TypeReady > ENTER <DEVICE name>:<SUBCATALOG name>to enter a SUBCATALOG on a different device.$PYou can use repeated colons in the same command to climb down a branch ofthe catalog structure and can ENTER a different DEVICE and SUBCATALOG at the same time.  For example, to access a SUBCATALOG within a SUBCATALOG on a different DEVICE, typeReady > ENTER <DEVICE name>:<SUBCATALOG1 name>:<SUBCATALOG2 name>where SUBCATALOG1 is listed in the directory of the top-level catalog on the different DEVICE and SUBCATALOG2 is listed in the directory of SUBCATALOG1.The ENTER COMMAND is equivalent to the SET CATALOG COMMAND.$$COMPILE COMMANDThe COMPILE COMMAND tells the XPL compiler to translate the source code of your XPL program statements into object code the computer can understand.  After compilation, the CURRENT-FILE contains object code.  The file is also renamed automatically.  Since object code is a set of machine language instructions using only 1's and 0's, a compiled file cannot be LISTed on your terminal screen.$$REV COMMANDThe REV COMMAND is used to activate the REVERSE COMPILER directly from the MONITOR. You would use it if you wished to reverse compile a previously recorded sequence without going to the keyboard.Use the RECALL COMMAND to recall your SYNCLAVIER SEQUENCE from aSEQUENCE-FILE. (Or the OLD COMMAND to recall a SYNCLAVIER SEQUENCEyou have previously RECALLed and then SAVEEd under a differentFILENAME.) Then typeReady > REVand the REVERSE COMPILER menu will appear on the screen.$$DO COMMANDThe DO COMMAND is used to execute a COMMAND-FILE.TypeReady > DO <COMMAND-FILE FILENAME>and press RETURN.  The commands within the COMMAND-FILE will be executed in the order in which they appear.$$COMMAND-FILEA COMMAND-FILE is like any other source file, except that it containsMONITOR commands which carry out a particular operation.  In effect, a COMMAND-FILE becomes a customized command.You create a COMMAND-FILE by entering the commands as lines of text, using either the MONITOR or the SCREEN EDITOR.  Give the COMMAND-FILE a FILENAME, just as you would any file, and SAVE it.  Then, when you want to have a COMMAND-FILE executed, use the DO COMMAND.The following COMMAND-FILE lists and shows the length of the CURRENT-FILE:   10 * This command-file lists a file.   20 LIST   30 WRITE   40 WRITE File length is:   50 LENGTHType HELP PROFILE to learn about a special kind of COMMAND-FILE.$$PROFILEThe PROFILE is part of your system software and is performed whenever you load the system, either by pressing the load button or by typing the BOOT COMMAND.  It is a special COMMAND-FILE consisting of COMMANDS which select an RTP VERSION (the SET RTP COMMAND) and activate it (the PLAY COMMAND).If you wish to change the RTP VERSION that is activated when you loadthe system, you may change the PROFILE as follows.First return to the top-level catalog by typingReady > ENTER :Then typeReady > OLD PROFILEThis recalls the file from the Winchester. Now typeReady > LIST$Pand you will see the a line-numbered COMMAND-FILE similar to the oneshown below:1 * This PROFILE command file initializes your system to run the Synclavier.2 *3 * The following command asks the user to be patient.4 *5 write Starting the Synclavier (r).  Please wait...6 *7 * The following command sets the default Synclavier (r) real-time package8 * to be SYN-96.  To change the default Synclavier (r) real-time9 * package, change the SYN-96 to the name of the Synclavier (r) real-time10 * package you wish to operate.11 *12 set rtp syn-9613 *14 * The following command starts up the default Synclavier (r) real-time15 * package.16 *17 play$PMost of this file consists of * COMMANDS (comments).  The three activeCOMMANDS are:    5 write Starting the Synclavier (r).  Please wait...which writes a "please wait" message on the screen,    12 set rtp syn-96which establishes the default RTP VERSION for the velocity/pressure keyboardwith Polyphonic Sampling. (This line will read differently, depending on yoursystem configuration and which release you are running).    17 playwhich activates the REAL-TIME PERFORMANCE MODULE and brings youto the Welcome Screen.$PTo change the default version, simply type a new line 12, specifying a different RTP VERSION. For example, typingReady > 12 SET RTP SYN-GTRwould select the RTP VERSION for the guitar and Polyphonic Sampling.Type HELP RTP VERSIONS for a list of all the possibilities.Once you have changed line 12 in the PROFILE, you typeReady > REPLACEto save the new PROFILE on the Winchester. Then typeReady > BOOTto reload your system with the new RTP VERSION.$PNote that you could also completely remove the PLAY COMMAND from thePROFILE and then start out at the MONITOR if you wanted.Note: You don't need to change the PROFILE to change the RTP VERSION temporarily. This can be done by entering a SET RTP COMMAND at the MONITOR.$$BOOT COMMANDThe BOOT COMMAND is the equivalent of pressing the LOAD button on your computer.  It initializes the system (and erases the CURRENT-FILE).  You can type BOOT when you're at the MONITOR to "turn on" the keyboard and get back to the Welcome Menu.$$RUN COMMANDThe RUN COMMAND instructs the MONITOR to execute the CURRENT-FILE or a named file.  If the CURRENT-FILE contains source code, that is, it has not been compiled, it will be loaded into the compiler for compilation.  Once it is compiled, the resulting machine language instructions will be loaded into memory and the program will be executed.If the CURRENT-FILE contains object code, that is, it has already been compiled, the program will be executed immediately.Even if you don't write your own programs, you can use the RUN COMMAND to run the UTILITY PROGRAMS.  For example, you can typeReady > OLD FORMCOPYReady > RUN...or...Ready > RUN FORMCOPYto activate the FORMCOPY program.$$CONVERT COMMANDWhen you type the MONITOR command CONVERT, the SCRIPT compiler converts the SCRIPT COMPOSITION in the CURRENT-FILE into a SYNCLAVIER SEQUENCE.  The converted SYNCLAVIER SEQUENCE becomes the new CURRENT-FILE with its FILENAME altered by a period (.).NOTE:  You should always SAVE your CURRENT-FILE before using the CONVERT COMMAND, since the command replaces the original TEXT-FILE with the converted SYNCLAVIER SEQUENCE.Since the converted file has a FILENAME different from the original TEXT-FILE, both can be stored on the same diskette or in the same SUBCATALOG.  You can also use the SET NAME COMMAND to give the converted file a different FILENAME.$$BUILD COMMANDThe BUILD COMMAND is used to enter text into the CURRENT-FILE without having to preface each line with a line number.  When you type the command BUILD, the computer enters a special mode where the line numbers are automatically assigned.  TypeReady > BUILDand you will see on your screen the information  Entering Build Mode Now  100The line numbers begin with 100 when you use BUILD to create a new file.  When you are through with the BUILD mode, press RETURN an extra time.  The computer will respond with the Ready > prompt and you can edit the file using EDIT COMMANDS.$$RESEQUENCE COMMANDThe RESEQUENCE COMMAND changes all the line numbers in the CURRENT-FILE.  The first line number will be 100 and the following lines will be numbered in increments of 10. Take the following lines:  10 This is the first line.  20 This is the second line.  30 This is the third line.If you type RESEQUENCE and LIST, the results will be  100 This is the first line.  110 This is the second line.  120 This is the third line.$$SEQUENCE COMMANDThe SEQUENCE COMMAND is similar to RESEQUENCE in that it renumbers the lines in the CURRENT-FILE.  However, SEQUENCE starts with 1 and the following lines will be numbered in increments of 1.  Take the following lines:  100 This is the first line.  110 This is the second line.  120 This is the third line.If you were to SEQUENCE and then LIST them, you would see  1 This is the first line.  2 This is the second line.  3 This is the third line.$$DESEQUENCE COMMANDDESEQUENCE removes the line number from each line in the CURRENT-FILE.  It is useful when you want to print a TEXT-FILE without having each line preceded by a line number.  Take the following lines:  1 This is the first line.  2 This is the second line.  3 This is the third line.  If you were to DESEQUENCE and LIST them, they would read  This is the first line.  This is the second line.  This is the third line.To continue working on your file after DESEQUENCing it, you will probablywant to type in the RESEQUENCE and LIST COMMANDs to display the file on the screen with line numbers.$$DELETE COMMANDThe DELETE COMMAND deletes individual lines, or groups of lines, from theCURRENT-FILE.  The line number or numbers of the line(s) to be DELETEd follow the command.  Individual lines are DELETEd by specifying the line number.  Several lines can be designated for DELETion by separating each line number by a comma (and no space).  Entire blocks of lines can be DELETEd by specifying the starting and ending line numbers separated by ahyphen.  For example, the command,Ready > DELETE 100,130,180-200will instruct the MONITOR to delete lines 100, 130, and all the lines between 180 and 200.  The line numbers must be specified in increasing order for the DELETE COMMAND.  Thus, the commandReady > DELETE 200,100,500-550,430will not perform correctly.  It should be instead be typed:Ready > DELETE 100,200,430,500-550$$EXTRACT COMMANDThe EXTRACT COMMAND is the opposite of the DELETE COMMAND.  The specifiedline, or groups of lines, will be EXTRACTed from the CURRENT-FILE.  All other lines will be lost.  For example,Ready > EXTRACT 50-150,200-270instructs the MONITOR to extract the lines from 50 to 150, inclusive, andthe lines 200 to 270, inclusive, and to erase all the other lines in the file.  As with DELETE, line numbers must be specified in increasing order.NOTE:  In both the DELETE and EXTRACT COMMANDs, you may not have a space following the comma between designated line numbers.  If you do include aspace, the MONITOR will indicate a formatting error.$$MOVE COMMANDThe MOVE COMMAND is used to move one line, or a block of lines, to a different section of the CURRENT-FILE.  RESEQUENCing is automatically performed after the MOVE.  For example, the commandReady > MOVE 50-100,200instructs the MONITOR to take lines 50 through 100 and move them to a position in the file after line 200.  The entire file will then be RESEQUENCEd.  It is possible to move a line or group of lines to an earlier position in the file as well as to a later one.$$JOIN COMMANDJOIN appends one or more files that have been SAVEd on diskette or Winchester disk to the end of the CURRENT-FILE.  The command is followed by the FILENAME or names separated by a comma as inReady > JOIN <filename-A>,<filename-B>In this case, the two files will be JOINed to the CURRENT-FILE.  Each file will still have its original line numbers, however.$$APPEND COMMANDAPPEND is similar to JOIN, except that the CURRENT-FILE is RESEQUENCEd automatically.  For example, the commandReady > APPEND <filename-A>,<filename-B>would cause the two named files to be appended to the CURRENT-FILE and the entire file to be RESEQUENCEd.$$LOCATE COMMANDThe LOCATE COMMAND tells the computer to LOCATE a character string you have specified in the CURRENT-FILE.  You can tell the MONITOR to LOCATE the string at its first occurrence, at all its occurrences in a specifiedline or group of lines, or all its occurrences in the file.  For example,Ready > LOCATE SAMPLEtells the MONITOR to LOCATE the word "SAMPLE" the first time it occurs inthe CURRENT-FILE.You can also specify a single line, group of lines or the whole file:Ready > LOCATE SAMPLE,20Ready > LOCATE SAMPLE,20-40 Ready > LOCATE SAMPLE,20-ENDReady > LOCATE SAMPLE,ALLThe case of the letters in the character string matters.  "SAMPLE" is notthe same as "sample".$$CHANGE COMMANDCHANGE operates similarly to LOCATE except that, in addition to LOCATing the first specified string in the CURRENT-FILE, it CHANGEs it to the specified second string.  Examples of the CHANGE COMMAND areReady > CHANGE SMPLE,SAMPLEReady > CHANGE SMPLE,SAMPLE,20Ready > CHANGE SMPLE,SAMPLE,20-100Ready > CHANGE SMPLE,SAMPLE,20-ENDReady > CHANGE SMPLE,SAMPLE,20-100,150-300Ready > CHANGE SMPLE,SAMPLE,ALLIn all these commands, the MONITOR is being instructed to respell SAMPLE correctly in the specified lines.  The case of the letters does matter."SAMPLE" is not the same as "sample".$$LIST COMMANDThe LIST COMMAND enables you to examine the lines of text in the CURRENT-FILE.  When you type LIST, the MONITOR will print out the text ofthe file on the terminal screen, with the line numbers in their proper numerical order regardless of the order you typed them in.When you LIST a long file, only the first 22 lines will appear on the terminal screen.  Press the LINEFEED key to view each of the following lines; as the screen fills up, the first lines will begin to scroll off the top.  If you want to scan blocks of text quickly, press the RETURN key.  Each time you press it the following 22 lines will be displayed.Note that you may use the SET TERMINAL COMMAND to change the number of lines in a single screen.You can also LIST specified lines as inReady > LIST 20,10-200,300$$PRINT COMMANDIf you have a printer, you can print out a hard copy of your CURRENT-FILEby using the PRINT COMMAND.  Simply typeReady > PRINTand your entire CURRENT-FILE will be printed.  You can also PRINT specified lines, as inReady > PRINT 20,100-200,300If your printer is not hooked up to the computer when you type in this command, the MONITOR will send the print-out to the printer connector anyway and the Ready > prompt will not appear until the file has been sent (into space).  If you do not have the D40 printer interface connected, the computer will simply stop.$$WRITE COMMANDThe WRITE COMMAND is used in a COMMAND-FILE to specify text that will be printed on the screen when the COMMAND-FILE is executed.  For example, the line10 WRITE File length is:will produceFile length is:The line20 WRITEwill produce a blank line.This command can also be used outside a COMMAND-FILE, causing the characters following it to be printed on the screen as soon as you press RETURN.$$* COMMANDThe * COMMAND is used in a COMMAND-FILE to add comments.  All text to theright of the * will be ignored by the MONITOR.A sample comment line would look like this:10 * This command-file prints a listing.$$CLS COMMANDThe CLS COMMAND is used in a COMMAND-FILE or any time to clear the screen and place the Ready > prompt at the top of the screen.For example, the following COMMAND-FILE clears the screen before displaying two directories.   10 * This command-file displays two directories.   20 CLS   30 CAT   40 CAT ALL$$PAUSE COMMANDThe PAUSE COMMAND is used in a COMMAND-FILE.  The word PAUSE is followed by a text string.  When the COMMAND-FILE is performed by a DO COMMAND, the string will be printed and the program will wait for the user to press a key on the keyboard before proceeding.For example, the following COMMAND-FILE runs through a few directory options, pausing between each until the user presses a key.  10 * This prints directories  20 CLS  30 CAT A SORIGIN  40 PAUSE This is the directory sorted by origin.  50 CAT A SNAMES  60 PAUSE This is the directory sorted by name.  70 CAT A SLENGTH  80 PAUSE This is the directory sorted by length.$$PROMPT COMMANDYou can create your own Ready > prompt by typing, at any time, the PROMPT COMMAND followed by the symbol or word you want as your own Ready prompt.  For example, if you typeReady >  PROMPT !!!your next Ready prompt will be!!!and will remain so until you change it with another PROMPT COMMAND, or until you reload your system.  The new Ready prompt can contain any combination of up to 8 letters, numbers and symbols.  The only restriction is the semicolon (;), which cannot be used as part of a prompt.$$SET NAME COMMANDThe SET NAME COMMAND changes the name of the CURRENT-FILE.  To use this command, typeReady > SET NAME <FILENAME>You may SAVE the file under its new name.  The file on the disk with the original filename will still be stored unless you UNSAVE it.$$SHOW NAME COMMANDThe SHOW NAME COMMAND shows you the name of the CURRENT-FILE.  SHOW NAME is the same as NAME.$$SET TYPE COMMANDWhen you use the CATALOG COMMAND, you will see a "Type" listed by each FILENAME.  This refers to the kind of information in the file.  There are numerous "types" built into the system, such as "Text," or "Data," or "Sync" (for SYNC-FILE or sequence file).In order to prevent the accidental replacement of a file of one type with a file of another type, the REPLACE COMMAND only operates when the type of the CURRENT-FILE matches the type of the file being replaced.There are situations when you may wish to alter the file type of the CURRENT-FILE so that the REPLACE COMMAND can operate.  You can do this with the SET TYPE COMMAND.  TypeReady > SET TYPE [text] or [data] or [sync]For more on this, look for "SCRIPT" in the instruction manual set.$$SHOW TYPE COMMANDThe SHOW TYPE COMMAND tells you the type of the CURRENT-FILE.  There are numerous "types" built into the system, such as "Text," or "Data," or "Sync" (for SYNC-FILE or sequence file).$$SET PROMPT COMMANDThe SET PROMPT COMMAND changes the prompt on your system.  To use the command, typeReady > SET PROMPT <string>NOTE: The SET PROMPT COMMAND is the same as the PROMPT COMMAND.$$SHOW PROMPT COMMANDThe SHOW PROMPT COMMAND tells you what the current prompt is.$$SET TERMINAL COMMANDWhen you LIST a file, you will normally see it broken into pages for 24-line CRT's.  You can change the way the file is broken by using the SET TERMINAL COMMAND.TypeReady > SET TERMINAL [number of lines]The command is handy if you have a 34-line terminal.  To cancel paging completely, enter 0 for the number of lines.  Then you can scroll quickly through a file (type CTRL-S to stop and CTRL-Q to start again).TERMINAL can be abbreviated to "TER".$$SHOW TERMINAL COMMANDThe SHOW TERMINAL COMMAND tells you how many lines have been set for the terminal screen.  The LIST COMMAND will break the CURRENT-FILE into pages of two lines fewer than this number.TERMINAL can be abbreviated to "TER".$$SET CATALOG COMMANDThe SET CATALOG COMMAND can be used to change the CURRENT-CATALOG and/or the CURRENT-DEVICE.  In effect, it performs the same function as an ENTER COMMAND.  To use the command, typeReady > SET CATALOG <DEVICE name>:<SUBCATALOG name>$$SHOW CATALOG COMMANDThe SHOW CATALOG COMMAND tells you the name of the CURRENT-CATALOG and the current drevice.$$SET RTP COMMANDThere are several RTP VERSIONS, or versions of the REAL-TIME PERFORMANCE MODULE.  (Type HELP RTP VERSIONS.) You use the SET RTP COMMAND to temporarily set the RTP VERSION that will be activated when you type the PLAY command.TypeReady > SET RTP <name of desired RTP VERSION>Then typeReady > PLAYto activate the selected version.This COMMAND will be in effect until you reload your system.  If you wish to change the default version permanently, type HELP PROFILE.$$SHOW RTP COMMANDThe SHOW RTP COMMAND tells you the name of the current real-time version. Type HELP RTP VERSIONS for more information.$$RTP VERSIONSEach release offers different versions of the REAL-TIME PERFORMANCE software.  Each of these versions has a special name that you may use in a SET RTP COMMAND to select the version that will be activated when you type PLAY.  You may also change the PROFILE to change the version that is activated when you load the system.Refer to the documentation for the Release you are currently using forthe names and uses of these RTP Versions.$$SET PATH COMMANDThe system files are the files that contain the software MODULES.  Normally, the WINCHESTER INSTALLATION program stores them in a SUBCATALOGcalled ".system."  Some "advanced" users may wish to move the system files into a separate SUBCATALOG or store them on a different DEVICE.  If you do so, you must then use the SET PATH COMMAND to tell the MONITOR where to look for the system files.To use the SET PATH COMMAND, typeReady > SET PATH <DEVICE name>:<SUBCATALOG name>CAUTION: DO NOT move either the files called "monitor" or ".work" into a SUBCATALOG.  These two system files MUST be in the top-level catalog in order for the system to load.$$SHOW PATH COMMANDThe SHOW PATH COMMAND tells you where the system files are located (whichDEVICE and at what sector the SUBCATALOG containing those files begins).$$SET ECHO COMMANDThe SET ECHO COMMAND controls whether or not commands are printed on theterminal during DO file execution.  Normally, the commands are not shown.This option is useful for debugging a DO file, or any time you need tosee exactly which commands are executed.To use the SET ECHO COMMAND, typeReady > SET ECHO <ON or OFF>$$SHOW ECHO COMMANDThe SHOW ECHO COMMAND displays whether commands will be echoed duringDO file execution.  If "On", they will be displayed, if "Off", theywill not be.$$SET LOG COMMANDThe SET LOG COMMAND controls whether or not the MONITOR prints commandhistory letters before the PROMPT.  Normally, the letters are not shown.If you often recall and edit MONITOR commands from the history, it isuseful to turn LOG on so you can see each command letter.To use the SET LOG COMMAND, typeReady > SET LOG <ON or OFF>To always display the history letters, put the lineSET LOG ONin your :PROFILE file on your system winchester.  The history letters looklike this:A! Ready > SET RTP SYN-96B! Ready > * Notice command "A" is "SET RTP SYN-96", "B" is this comment$$SHOW LOG COMMANDThe SHOW LOG COMMAND displays whether or not the MONITOR will printcommand history letters before the PROMPT.  If "On", they will bedisplayed, if "Off", they will not be.$$SHOW INFO COMMANDYou use the SHOW INFO COMMAND to find out the following information about the CURRENT-FILE: its name, length, type, and status (whether or not it has been changed since it was last saved on the disk).It also gives you the name of the CURRENT-DEVICE and CURRENT-CATALOG.$$SHOW VERSION COMMANDYou use the SHOW VERSION COMMAND to find out the configuration information in the operating system that has been loaded into computer memory.  This includes the amount of internal and external memory, the storage DEVICEs attached to the computer, and the processor model.This configuration information may or may not match the hardware in your system.  If it does not, use the CONFIGUR program to change the configuration information to agree with the actual hardware.See "CONFIGUR" in "Using the Utility Programs" in the instruction manualset.$$SHOW MACROS COMMANDThe MONITOR allows you to define MACROS.  These are single-characterequivalents for commands you often use.  MACROS are defined in the text file":USER:MACROS".This command will display all of the currently defined macros:   Ready > SHOW MACROSTo execute a macro, just type the letter shown at the beginning of the line.The entire command to the right of the '=' will be executed.Type "HELP MONITOR" for more information on defining MONITOR MACROS.$$SHOW HISTORY COMMANDThe MONITOR saves the previous 26 commands you have typed so you canuse them again, or edit a mistake.  Each command is assigned a letter,A-Z.  The command:   Ready > SHOW HISTORYwill display these commands and their associated letter.Type "HELP MONITOR" for more information on using the MONITOR's commandhistory.$$FORMCOPY PROGRAM    ______________________________CAUTION______________________________    |                                                                 |    | Carelessly used, FORMCOPY can obliterate valued information     |    | very quickly.  Please read the following instructions care-     |    | fully before using FORMCOPY.                                    |    |                                                                 |    | Do NOT use FORMCOPY to format your Winchester disk.  Winchester |    | formatting is done here at New England Digital.  Any future     |    | formatting should be done using the WINCHESTER INSTALLATION     |    | PROGRAM.                                                        |    |_________________________________________________________________|The FORMCOPY PROGRAM has two separate functions: formatting and copying.Formatting prepares the magnetic media on a storage DEVICEs (floppy diskette, Winchester disk or tape cartridge) for storage of data.  Whenever you format any of these DEVICEs, you will erase any previously stored information.$PIn addition to formatting, FORMCOPY copies FILES and SUBCATALOGs to and from any storage DEVICE in the system.  You can copy from main to auxiliary drive, from Winchester to floppy, from main drive to remote, from tape cartridge to CURRENT-CATALOG, etc.  You can copy a single file, a series of selected files, an entire SUBCATALOG or an entire floppy fromone DEVICE to another.  You can also copy any of the above into a SUBCATALOG.A copy of the FORMCOPY PROGRAM is stored on the Winchester and on the Utilities Diskette.  To use the Winchester version, typeReady > FORMCOPYThe FORMCOPY PROGRAM provides on-screen operating instructions.  For $Padditional information, see "Using the Utility Programs" in the instructionmanual set.  The manual also tells you how to proceed with dual floppies.$$SHUFFLE PROGRAMWhen you store files on the disk, empty spaces are often left between files.  After you have stored several files, you may attempt to SAVE a file and get an error message sayingNot enough contiguous spaceThis doesn't necessarily mean your Winchester, floppy disk, or SUBCATALOGis full.  There may be more than enough empty space scattered throughout the DEVICE or CURRENT-CATALOG, (although it does mean you can't save the file at that time in that catalog).The SHUFFLE PROGRAM packs the FILES and SUBCATALOGs together on a DEVICE or CURRENT-CATALOG and collects the empty sectors into a group at the end.The files on any storage DEVICE connected to the computer, except the tape drive, can be shuffled.  You can also rearrange the files so that specified files are collected into adjacent areas.$PA copy of the SHUFFLE PROGRAM is stored on the Winchester and on the Utilities Diskette.  To use the Winchester version, typeReady > SHUFFLEThen you will get a menu which will allow you to pack the FILES and SUBCATALOGS in the top-level catalog on the Winchester.  If you wish to shuffle the FILES within a SUBCATALOG, you must enter the SUBCATALOG first.  TypeReady > ENTER <SUBCATALOG name>Ready > SHUFFLE$PThe SHUFFLE PROGRAM provides on-screen operating instructions.  For additional information, see "Using the Utility Programs" in the instructionmanual set.  The manual also tells you how to proceed with dual floppies.For experienced users, the on-screen instructions may be bypassed andSHUFFLE run quickly.  Using the commandReady > SHUFFLE -Qyou can shuffle the catalog you are currently in without further interaction.Note that you must first enter the catalog you wish to shuffle and thenuse the "SHUFFLE -Q" command.  This also allows you to create a DO file toshuffle multiple catalogs automatically.$$CONFIGUR PROGRAM    ____________________________CAUTION_______________________________    |                                                                |    | Certain wrong responses when using the CONFIGUR PROGRAM can    |    | make a system diskette incapable of loading the computer.      |    | Please read the following carefully and use care when running  |    | CONFIGUR.                                                      |    |                                                                |    | ALSO!! The system software and the CONFIGUR program are        |    | released together.  You cannot use previous versions of        |    | CONFIGUR with new system software, nor can you use a           |    | new CONFIGUR program on old system software.                   |    |________________________________________________________________|All operating systems must be customized for the particular set of hardware in your Synclavier (r) Digital Music System.  This customizing is initially done here at New England Digital with the CONFIGUR PROGRAM.  You also have a copy of this program so that you can reconfigure your system diskette or Winchester disk whenever you change or expand your options.$PFor example, if you decide to add a printer or change the type of terminal you are using or add memory to the computer, you will use the CONFIGUR PROGRAM to tell the operating system about these changes.A copy of the CONFIGUR PROGRAM is stored on the Winchester and on the Utilities Diskette.  To use the Winchester version, typeReady > CONFIGURThen follow the instructions on the screen.  In general, you move the cursor around the screen using the arrow keys.  Pressing the spacebar causes the selected values to change.  For additional information, see "Using the Utilities" in the instruction manual set.$$LISTING PROGRAMThe LISTING PROGRAM is used to print out neatly formatted listings of XPL source files.  You may print a single file, selected files, or all the files on the Winchester, in a SUBCATALOG, or on a diskette.  If desired, your listing can also include an index, titles, and subtitles.A copy of the LISTING PROGRAM is stored on the Winchester and on the Utilities Diskette.  To use the Winchester version, typeReady > LISTINGThen follow the instructions on the screen.  In general, you move the cursor around the screen using the arrow keys.  Pressing the spacebar causes the selected values to change.  For additional information, see "Using the Utilities" in the instruction manual set.$$WINCHESTER INSTALLATION PROGRAM    ____________________________WARNING_______________________________    |                                                                |    | The WINCHESTER INSTALLATION PROGRAM has the capability of      |    | wiping out all the information on your Winchester disk.        |    | Do NOT attempt to use it without having read this section      |    | carefully.                                                     |    |________________________________________________________________|The Winchester Installation diskette contains a short program used to format the Winchester disk and to install system files onto it.  The diskette is used here at New England Digital to prepare the Winchester disk for operation.  You will use your copy to install software updates onto your Winchester disk and/or replace accidental erasures.To run the program on this diskette, simply place the diskette in the main drive and press the load button.  Then instructions will appear on the screen.$PFirst, you will be asked whether or not you want to format.      ____________________________CAUTION_______________________________    |                                                                |    | Formatting erases all information on your Winchester disk!!!!  |    |                                                                |    |________________________________________________________________|In general, you should only format your Winchester after a serious disk failure, such as a bad track or a catalog failure.  For most situations, you will skip formatting the disk and use the program to re-install the files which need to be updated.  Of course, if you want to erase everything and start from scratch, you should format the disk.  To do this without losing information, first save all user files on floppy diskettes or on a tape cartridge before using the WINCHESTER INSTALLATION PROGRAM.$PThe WINCHESTER INSTALLATION PROGRAM initially asks you some questionsabout the options in your system. It then guides you through an orderly installation of new system files.  Each prompt will tell you which diskette to insert into the main drive.At the end of the process you may use the Winchester Bootload diskette to load the Monitor and begin operation.$$SCRIPT COMPOSITIONA SCRIPT COMPOSITION is a piece of music written in text that can be listed on the terminal screen.  You may type the SCRIPT COMPOSITION in atthe terminal or you may record a piece at the keyboard and then convert it into a SCRIPT COMPOSITION with the REVERSE COMPILER.There are two formats for SCRIPT COMPOSITIONs.  The first is called SCRIPTmusic notation and consists of pitches and rhythms listed from left to right as in standard music notation.  We will describe this further below.The second is called the computer music format.  It consists of a list of the sounds on each track as they occur in time, with each note listed on a different line.  Refer to the SCRIPT manuals for more on the computer music format.Like other TEXT-FILES, SCRIPT COMPOSITIONS in SCRIPT music notation consist of lines of typed text that begin with line numbers.   Following each line number is a "SCRIPT word" that identifies a particular aspect of the SCRIPT COMPOSITION, such as pitch, rhythm, etc.  After the SCRIPT$Pword, alphanumeric expressions give the exact values for each musical aspect.  Here is a sample SCRIPT COMPOSITION.  It is in three parts:100 KEYSIG G   /* the key signature */110 TEMPO 4=126  /* the tempo */120 NOTELIST USING 8-1 /* the first part */130 P  G  A  B  D4  R  E  D  B3  A  G  A  G  D4 /* the pitches */ 140 R  2  4  4  4   4  4  4  4   8  8  4  4  1  /* the rhythmic values */150 END160170 NOTELIST USING 2-1 /* the second part */180 P  G3  E  D  C  B2  A   G   A   D3  E  F  G  F 190 R  4   4  4. 8  4   4   4   4   4.  8  4  4  1200 END210220 NOT USI 7-2  /* the third part */230 P [G1  D2] [G1  D2]   B1  C2  D  E   [D    A] /* the [ ]'s are chords */   240 R  1   1    1   1     4   4   4  4    1    1     250 END$PLet's examine it line by line:  100 KEYSIG G   /* the key signature */The KEYSIG statement establishes an overall key signature for all the succeeding notes.  As in standard notation, the actual signature is always major; if you are composing in a minor key, you will use its relative major as the key signature.  If you omit the KEYSIG statement altogether, the piece will be in the default key of C major (A minor).  110 TEMPO 4=126  /* the tempo */The TEMPO statement establishes a tempo for all succeeding notes.  This statement is similar to a metronome marking, with the 4 representing a quarter note and 126 the number of quarter notes to be sounded per minute.These two lines affect all three parts in the SCRIPT COMPOSITION.$PThis is the first part:  120 NOTELIST USING 8-1 /* the first part */  130 P  G  A  B  D4  R  E  D  B3  A  G  A  G  D4 /* the pitches */   140 R  2  4  4  4   4  4  4  4   8  8  4  4  1  /* the rhythmic values */  150 ENDA SCRIPT "notelist" consists of all the notes in one part of the SCRIPT COMPOSITION.  When the SCRIPT COMPOSITION is converted to a SEQUENCE, the notes on each notelist will be placed on a separate track in the memory recorder.Here the SCRIPT word NOTELIST alerts the COMPILER that the lines following will contain instructions regarding the pitch, rhythm and other music aspects of a series of notes.  The expression USING 2-1 means that, when the notelist is converted into a SYNCLAVIER SEQUENCE, this particular track in the SCRIPT COMPOSITION will use the timbre recalled from Bank 2, Entry 1 of the TIMBRE-FILE stored in the CURRENT-CATALOG or on your user diskette if you are using dual floppies.$P  130 P  G  A  B  D4  R  E  D  B3  A  G  A  G  D4 /* the pitches */   140 R  2  4  4  4   4  4  4  4   8  8  4  4  1  /* the rhythmic values */These two lines must appear together.  They specify the pitches and rhythmic values of the notes in Part 1.The SCRIPT word P tells the COMPILER that the letters following it on thatline are pitch values.  This particular notelist begins on the G above middle C.  A octave identifier is not necessary since the default octave in the SCRIPT music notation is the octave beginning on middle C (octave 3).The fourth note, D4 or the D a ninth above middle C, must have its identifying octave number. This range identifier affects all subsequent notes, so that the following E and D are also in the fourth octave.  The 3 after the B brings the range back to the third octave.The "R" following the first D4 indicates a rest.$P  130 P  G  A  B  D4  R  E  D  B3  A  G  A  G  D4 /* the pitches */   140 R  2  4  4  4   4  4  4  4   8  8  4  4  1  /* the rhythmic values */The SCRIPT word R tells the COMPILER that the numbers following it on that line identify the rhythmic values of the corresponding pitch values on the line above.  Each number represents the denominator of the fraction of a whole note.  Here, the 2 is a half note, each 4 a quarter note, each 8 an eighth note and the 1 a whole note.   150 ENDThe SCRIPT word END tells the COMPILER that all the notes for Part 1 have been entered.Notice that we did not break the SCRIPT COMPOSITION into bars or even indicate a time signature.  The SCRIPT COMPILER interprets the rhythm of a notelist in terms of beats.  All it needs to know is the tempo and the rhythmic value of each note.$P   160  Line 160 is a blank line that separates the first and second notelists.  It is not necessary, but makes reading through the piece easier.Here is the second part:  170 NOTELIST USING 2-1 /* the second part */  180 P  G3  E  D  C  B2  A   G   A   D3  E  F  G  F   190 R  4   4  4. 8  4   4   4   4   4.  8  4  4  1  200 ENDThe octave identifier affects all subsequent notes, including notes in a following notelist.  Thus, the 3 after the first G in line 180 is necessary because the last note in the preceding notelist was D4.  Notice that the F's in line 180 are actually a F#'s, since the key signature is G major.$P  190 R  4   4  4. 8  4   4   4   4   4.  8  4  4  1In line 190, there is a period after the rhythmic value 4.  Like a dotted value in standard notation, a period multiplies the original value by one and a half.  Thus, the 4 followed by a period is the equivalent of a dotted quarter note.Here is the third part:220 NOT USI 7-2  /* the third part */230 P [G1  D2] [G1  D2]   B1  C2  D  E   [D    A] /* the [ ]'s are chords */  240 R  1   1    1   1     4   4   4  4    1    1     250 ENDNotice the abbreviation of NOTELIST USING.  Most SCRIPT words can be abbreviated to the first three letters.  In line 230, the pitches enclosed in square brackets will sound simultaneously as chords.  However, each pitch still needs a rhythmic value.$PYou have just seen the basic elements of SCRIPT music notation.  There aremany more details.  For example, you may control the volume of each note with a V line, or the real-time effects with a T line.  You can also add tempo changes throughout and synchronization statements to sync your SCRIPT COMPOSITION to film or video.  See the SCRIPT Reference Manual.
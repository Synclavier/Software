/* FCODLITS  $TITLE  Function Code Literals for FM and PolySamp Synthesizers */

/*
   9/15/86 - CJ - CHANGED POLY REV FOR MOUSE PLAYBACK
*/

/*  SYNTHESIZER DEFINITIONS: ORIGINAL SYNCL II FM SYNTHESIZER
  
 THE SYNTHESIZER IS ACCESSED BY DEVICES 160,161, AND 163.  A CHANNEL NUMBER
 (0-63 FOR QUAD SYNTH SYSTEMS) IS WRITTEN TO DEVICE 160.  A FUNCTION CODE
 IS THEN WRITTEN TO DEVICE 161.  THERE ARE 16 FUNCTION CODES, SOME OF WHICH
 ARE NOT USED.  AN 8-BIT DATA WORD IS THEN WRITTEN TO DEVICE 162 */

// DCL AD    LIT '"163"';    /* AD CONVERTER    - OLD PANEL */
// DCL SW    LIT '"160"';    /* SWITCH REGISTER - OLD PANEL */

DCL CHA  LIT '"160"'; /* WRITE CHANNEL # */
DCL FUN  LIT '"161"'; /* WRITE FUNCTION CODE */
DCL DAT  LIT '"162"'; /* WRITE DATA HERE */

/* FUNCTION CODE DEFINITIONS: */

DCL INC  LIT '"00"'; /* INCREMENT */
DCL NNU  LIT '"01"'; /* NOTE NUMBER */
DCL ONU  LIT '"02"'; /* OCTAVE NUMBER */
DCL TIM  LIT '"04"'; /* TIMBRE BITS */
DCL ZMA  LIT '"06"'; /* ZERO MAR */
DCL MEM  LIT '"07"'; /* WAVE MEMORY */

/* EVEN CHANNELS ONLY: */

DCL IDIV LIT '"10"'; /* INDEX INTERP DIVISOR */
DCL IADD LIT '"11"'; /* INDEX ADDER NUMBER */
DCL ILIM LIT '"12"'; /* INDEX LIMIT */
DCL ISHC LIT '"13"'; /* INDEX SHIFT COUNT */

/* ODD CHANNELS ONLY: */

DCL EDIV LIT '"10"'; /* ENV DIVISOR */
DCL EADD LIT '"11"'; /* ENV ADDER NUMBER */
DCL ELIM LIT '"12"'; /* ENV LIMIT */
DCL VOL  LIT '"13"'; /* VOLUME */


/* $SUBTITLE  SYNTH FUNCTION CODE DEFINITIONS FOR POLY SYNTH */


/* POLY SYNTH IO: */

DCL PSC     LIT '"155"'; /* WRITE CHANNEL # */
DCL PSF     LIT '"156"'; /* WRITE FUNCTION CODE */
DCL PSD     LIT '"157"'; /* WRITE DATA HERE */
DCL PSX     LIT '"154"'; /* WRITE EXTENDED DATA HERE */

DCL PSWL    LIT ' 0';  /* FC  0 - MINUS WAVE TABLE LENGTH */
DCL PSBA    LIT ' 2';  /* FC  2 - WAVE TABLE BASE ADDRESS */
DCL PSLL    LIT ' 4';  /* FC  4 - MINUS LOOP LENGTH       */
DCL PSPI    LIT ' 6';  /* FC  6 - PHASE INCREMENT         */
DCL PSINC   LIT ' 8';  /* FC  8 - FREQUENCY INCRMENT      */
DCL PSMOD   LIT ' 9';  /* FC  9 - FREQUENCY MODULUS       */
DCL PSON    LIT '10';  /* FC 10 - ON/OFF                  */

DCL PSRON   LIT '11';  /* FC 11 - READ ON/OFF BITS (UGH!)   */
DCL PSNUMV  LIT '12';  /* FC 12 - READ APPROX # OF DA CARDS */

// Long play -
// To write memory, computer writes chanel then function = pswma.
// Then computer writes the first address to PSD; that increments function code to pswma_1
// Then computer writes the second address to PSD; that increments function code to psmwa_2

DCL PSWMA   LIT '16';  /* FC 16 - WRITE MEMORY ADDRESS    */ // Increments to 17 then 18
DCL PSRMA   LIT '20';  /* FC 20 - READ MEMORY  ADDRESS    */ // Increments to 21 then 22

DCL PSPAT   lit '24';  /* FC 24 - phase accumulator test    24->24    */
DCL PSCAT   lit '25';  /* FC 25 - comp addr high test       25->0     */

DCL PSTMOD  lit '26';  /* FC 26 - test mode for PST board   26->0     */
DCL PSTWEN  lit '27';  /* FC 27 - write envelope channel    27->28    */
DCL PSTREN  lit '28';  /* FC 28 - read envelope channel     28->28    */

// Envelope delay counter:  00500 counts in  20000 microseconds
// Envelope delay counter:  00050 counts in  02000 microseconds
// Envelope delay counter increments at 25 khz rate until 4095 is reached.

// Enveope interpolator documentation:

//	A 12 bit envelope/delay counter increments at a 25 khz. rate. The contents of this
// counter can be read via the PSECNT function code. When the counter reaches 4096 it
// wraps to the PSEMOD value. That is, the PSECNT register acts as a divide-by-N counter
// where N equals 4096 - the PSEMOD value.

// When the PSECNT register wraps, the 12-bit PSEACU register is incremented by the
// PSEINC value. When it wraps, it's remainder is left intact (e.g. it accumulates).
// Also when the PSEINC register wraps, the envelope curent value (PSEVAL) is moved towards
// the envelope current limit (PSELIM) by an amount equal to PSEDEL.

DCL PSECNT  LIT '32';  /* FC 32 - ENVELOPE/DELAY COUNTER  */
DCL PSEMOD  LIT '33';  /* FC 33 - ENVELOPE RATE MODULUS   */
DCL PSEACU  LIT '34';  /* FC 34 - ENVELOPE ACCUMULATOR    */
DCL PSEINC  LIT '35';  /* FC 35 - ENVELOPE INCREMENT      */
DCL PSELIM  LIT '36';  /* FC 36 - ENVELOPE LIMIT 0-4095   */
DCL PSEVAL  LIT '37';  /* FC 37 - ENVELOPE CURRENT VAL    */
DCL PSEDEL  LIT '38';  /* FC 38 - ENVELOPE CURRENT DELTA  */

// The hardware constantly moves the current value towards the destination value at a rate equal to 1/512 the difference
// between the destination value and the current value.
// Reaches 4095 after 1838 counts or 73.520  msecs

DCL PSRCVOL LIT '40';  /* FC 40 - RIGHT CUR  VOL          */
DCL PSRDVOL LIT '41';  /* FC 41 - RIGHT DEST VOL          */
DCL PSLCVOL LIT '42';  /* FC 42 - LEFT  CUR  VOL          */
DCL PSLDVOL LIT '43';  /* FC 43 - LEFT  DEST VOL          */

DCL PSINHON LIT '44';  /* FC 44 - INHIBIT ON              */

/* PSADC test function codes        */

DCL PSADNOP  lit '48';    /*  FC 48 - test FC, sends a NOP         */
DCL PSADREAD lit '49';    /*  FC 49 - test FC, sends a read        */
DCL PSADDOUT lit '50';    /*  FC 50 - test FC, sends a DATA OUT    */
DCL PSADCVRT lit '51';    /*  FC 51 - test FC, sends a CONVERT     */

/* A to D controller function codes */

DCL PSADMODE LIT '52';    /*  FC 52 - set mode for sampling        */
DCL PSADVOL  LIT '53';    /*  FC 53 - write volume                 */
DCL PSADACT  LIT '54';    /*  FC 54 - activate channel             */
DCL PSADID   LIT '55';    /*  FC 55 - identify                     */
DCL PSADSC0  LIT '56';    /*  FC 56 - read sample count of chan 0  */
DCL PSADSC32 LIT '57';    /*  FC 57 - read sample count of chan 32 */
DCL PSADMC   LIT '58';    /*  FC 58 - max number of sampling chans */
DCL PSADEVSM LIT '59';    /*  FC 59 - even stereo master           */
DCL PSADENV  LIT '60';    /*  FC 60 - envelope                     */

/* D to A controller function codes */

DCL PSMUTE   LIT '64';    /*  FC 64 - mute channel                 */
DCL PSCMAP   LIT '65';    /*  FC 65 - channel map                  */
DCL PSRPEAK  LIT '66';    /*  FC 66 - read peak                    */

/* D34GPI OUTPUT BITS: */

DCL B#PREROLL         LIT '10';         /* D34GPI BIT NUMBERS FOR RECORD TRIGGERS */
DCL B#REC_IN          LIT '9';
DCL B#REC_OUT         LIT '11';

/* SAMPLITS  $TITLE  Memory Management Literals for Poly/Mono Sampling Memory */
/* 

   Modified:
   15 Jun 1987    MWH   Add literals for multiple poly bins
   
*/


/* THE POLY SYNTH WAVE MEMORY IS MANAGED BY USING VARIABLE LENGTH
   BLOCKS.   THE FOLLOWING VARIABLES ARE USED:

      PSFIRST - POINTS TO THE SECTOR OF POLY MEMORY WHERE THE BLOCKS
                START.  IS MOST LIKEY ONE.   STARTING AT THIS
                SECTOR,  AND UP THROUGH (BUT NOT INCLUDING) PSLAST
                ARE A GROUP OF THESE VARIABLE LENGTH BLOCKS.  EACH
                BLOCK IS AN INTEGER NUMBER OF SECTORS LONG.
      PSLAST  - POINTS TO NEXT AVAILABLE SECTOR.
      PSMAX   - POINTS TO THE END OF THE POLY SYNTH MEMORY THAT IS
                AVAILABLE.   MEMORY SECTOR PSMAX-1 MAY BE USED.
      PSFREE  - INDICATES SECTORS OF POLY MEMORY THAT ARE UNUSED.
                SOME OF THESE SECTORS MAY CONTAIN A FILE BUT THAT
                FILE IS NOT BEING USED AT THE MOMENT.   A COMPLETE
                GARBAGE COLLECTION WILL ALWAYS YIELD PSFREE SECTORS.
      PSHERE  - A ROTARY POINTER USED TO INDICATE WHERE TO START LOADING
                FILES AND/OR GARBAGE COLLECTING.   PROVIDES LEAST RECENTLY
                USED ALGORITHM.

   AN IDENTICAL ALGORITHM (USING MSFIRST, MSLAST, MSMAX, MSFREE) IS
   USED TO MANAGE BLOCKS OF ATTACK BUFFERS IN EXTERNAL MEMORY FOR
   THE MONO SAMPLING CODE. */

DCL POLY.MAGIC      LIT '12345';     /* MAGIC NUMBER RESTORED WHEN POLY CONTAINS VALID DATA */
DCL POLY.REV        LIT '54336';     /* REV # FOR HELD MEMORY - COUNT UP */
DCL FIRST.BASE      LIT '   21';     /* START POLY MEM BLOCKS HERE       */

DCL PSMAXBINS       LIT '4';         /* MAXIMUM NUMBER OF POLY BINS PER SYSTEM */
DCL PSMAXPAGES      LIT '16';        /* MAXIMUM NUMBER OF 32MB PAGES OF POLY MEMORY -> 512 MB TOTAL */


/* $SUBTITLE  DEFINITIONS FOR POLY/MONO MEMORY BLOCKS */

DCL BL.LEN      LIT '  0';       /*   0 - BLOCK LENGTH IN SECTORS */
DCL BL.USERS    LIT '  1';       /*   1 - NUMBER OF PATCH LIST FRAMES USING THIS FILE/BUFFER */
DCL BL.FNAME    LIT '  2';       /*   2 - FILE NAME, FOR MATCHING PURPOSES */

DCL BL.DEV      LIT '  6';       /*   6 - ORIGINAL DEVICE WE CAME FROM TO DETECT SAME SOUND ON DIFFERENT DEVICES */
DCL BL.SEC      LIT '  7';       /*   7 - ORIGINAL SECTOR                                                        */

/* INFO FROM SOUND FILE:   (must match timbre lits) */

DCL BL.KEYTC    LIT '20';        /* HOLDS KEYTC FROM SOUND FILE */
DCL BL.VRATE    LIT '21';        /* HOLDS VRATE FROM SOUND FILE */
DCL BL.VDEPTH   LIT '22';        /* HOLDS VIB DEPTH             */
DCL BL.VAT      LIT '23';        /* HOLDS VIBRATO ATTACK TIME   */

/* PRECOMPUTED PITCH INFO: */

DCL BL.SRATE    LIT '24';        /* HOLDS FILE SAMPLE RATE CORRECTION FACTOR    */
DCL BL.PITCH    LIT '25';        /* SET OCTAVE PITCH CORRECTION FACTOR          */
DCL BL.TOFFS    LIT '26';        /* HOLDS OCTAVE CORRECTION WITH TRANSPOSITION  */

/* MONO SAMPLING ONLY:     */

DCL BL.START    LIT '27';        /* START OF VALID DATA FROM SECTOR+1 OF BLOCK */
DCL BL.ABUFL    LIT '28';        /* ATTACK BUFFER LEN WORDS        */
DCL BL.WDD      LIT '29';        /* W. DISK DEVICE                 */
DCL BL.WDS      LIT '30';        /* W. DISK START SECTOR           */
DCL BL.WDN      LIT '31';        /* W. DISK # OF SECTORS           */
DCL BL.FWRDS    LIT '32';        /* WORDS IN FINAL SECTOR          */

/* POLY SAMPLING ONLY:     */

DCL BL.WTABL    LIT '27';        // holds number of complete sectors of audio data that should be heard
                                 // holds number of additional words of audio data that should be heard
DCL BL.SOFS     LIT '29';        // hold sector offset from sfile.base of sector that contains the first sample to be heard
DCL BL.WOFS     LIT '30';        // holds word offset within the BL.SOFS sector of first sample that should be heard
DCL BL.LOOPL    LIT '31';        // holds duplicate copy of BL.WTABL. not really used. massaged in PT.LOOPL.
DCL BL.ONLOOP   LIT '33';        // holds a 1; massaged to 3 in PT.ONLOOP if a loop is required
DCL BL.MAX      LIT '34';        // holds duplicate copy of BL.WTABL. not really used. massaged in PT.MAX
DCL BL.CHECK    LIT '36';        // hold checksum
DCL BL.SFTL     LIT '37';        // holds sound file total length from sound file header, if any
DCL BL.SFLL     LIT '39';        // holds sound file loop  length from sound file header, if any
DCL BL.STEREO   LIT '41';        // true if stereo
DCL BL.KHZ      LIT '42';        // khz*10 for this file

DCL BL.COPYL    LIT '43';        /* NUMBER OF WORDS TO COPY INTO PARTIAL        */

DCL BL.SAVED    LIT '43';        /* POLY SAMPLING ONLY - TRUE IF FILE SAVED   */
DCL BL.LNAME    LIT '63';        /* POLY SAMPLING ONLY - LONG FILE NAME       */ // Able string - byte length goes here

DCL BL.MONO     LIT '256';       /*  256 - START MONO SAMPLING DATA HERE */
DCL BL.POLY     LIT '1024';      /* 1024 - START POLY SAMPLING DATA HERE */

DCL SF.HDR      LIT '1';         // offset of sound file header (in sectors) from start of allocated memory when file is in poly memory
											// also equals length of sound file header (in sectors)

DCL SF.SYM      LIT '2';         // offset of sound file symbol table (in sectors) from start of allocated memory when file is in poly memory
											// also equals length of symbol table area (in sectors)

/* SOUND FILE CACHE HEADER */

DCL BL.W0PTR       LIT '16';     /* POINTER TO BEGINNING OF W0 AREA IN CACHE */
DCL BL.W1PTR       LIT '17';     /* POINTER TO BEGINNING OF W1 AREA IN CACHE */

DCL BL.FILECOUNT   LIT '18';     /* NO. SOUND FILES IN CACHE */
DCL BL.CATCOUNT    LIT '19';     /* NO. CATEGORIES IN CACHE */
DCL BL.CACHEPTR    LIT '20';     /* NO. WORDS IN CACHE */
DCL BL.LINES       LIT '21';     /* START OF LINE COUNT ARRAY */
DCL BL.LINESMAX    LIT '16';     /* SIZE OF LINE COUNT ARRAY */

/* $SUBTITLE  Literal Dcls for Sound File Header Information */


dcl max.symbols           lit '64'; /* maximum number of symbols in the sound file symbol table */
dcl symbol_length         lit '8';  /* symbol description is eight words long */
dcl name_entry            lit '3';  /* point to the name entry location */

/* sound file header information */

dcl sf.compatibility         lit   '0';  /* sound file revision where */
dcl sf.file.data.type        lit   '1';  /* data type of the sound file where */
dcl sf.valid.data            lit   '2';  /* number of data points in file (sector_msb, sector_lsb, words) */
dcl sf.total.data            lit   '6';  /* total allocated data length (sector_msb, sector_lsb, words) should be sf.valid.data rounded up to the next sector */
dcl sf.data.end              lit   '9';  /* time corresponding to valid.data-1 (seconds, milliseconds, microseconds) */
dcl sf.keyboard.decay.number lit  '12';  /* a time value in milliseconds. */
dcl sf.semitones             lit  '13';  /* pitch bend range in semitones  */
dcl sf.vibrato.rate          lit  '14';  /* Hz*100; Vibrato is the periodic variation in pitch. */
dcl sf.vibrato.depth         lit  '15';  /* semitones*100; pitch range for Random wave shapes.*/
dcl sf.vibrato.attack        lit  '16';  /* vibrato wave attack time in milliseconds. */
dcl sf.vibrato.type          lit  '17';  /* twelve possible vibrato wave shapes */
dcl sf.hertz                 lit  '18';  /* 10*pitch frequency (i.e., 4400); The number of samples per second. */
dcl sf.octave                lit  '19';  /* floating point keyboard octave.cents set by user. */
dcl sf.period.index          lit  '21';  /* the number of clock ticks per sampling period */
dcl sf.nyquist.freq          lit  '22';  /* in Hz. */ 
dcl sf.mark.start            lit  '23';  /* marks where the sound begins. */
dcl sf.mark.end              lit  '26';  /* marks where the sound ends.   */
dcl sf.cursor.time           lit  '29';  /* the time of the current cursor location. */
dcl sf.gain.exponent         lit  '32';  /* for filters, the scale factor which scales the output in steps of 6 dB */
dcl sf.number.of.symbols     lit  '33';  /* number of symbols in sound file */
dcl sf.total.length          lit  '34';  /* perfect looping file length in 24-bit format */
dcl sf.loop.length           lit  '37';  /* perfect loop length in 24-bit format */
dcl sf.magic.number          lit  '40';  /* used to detect possible changes in file in SFM */
dcl sf.stereo                lit  '41';  /* indicates if stereo or not 1-> stereo*/
dcl sf.sample.rate           lit  '42';  /* sound file sampling rate in kHz * 10 */
dcl sf.smpte.mode            lit  '45';  /* SMPTE mode */
dcl sf.smpte.bits            lit  '46';  /* SMPTE start time bits */
dcl sf.smpte.secs.fra        lit  '47';  /* SMPTE start time of file */
dcl sf.smpte.hrs.min         lit  '48';  /* SMPTE start time of sound file */
dcl sf.mark.offset           lit  '49';  /* time corresponding to SMPTE offset in sound file */
dcl sf.index.base            lit  '52';  /* start of category index */
dcl sf.file.handle           lit  '53';  /* start of file handle name - C string */
dcl sf.file.handle.wl        lit  '64';  /* words of file handle */
dcl sf.file.handle.bl        lit '128';  /* bytes of file handle. This includes room for a trailing 0 so it is a legit C string */
dcl sf.id.field.bytes        lit '127';  /* byte count of sound file caption */
dcl sf.id.field              lit '128';  /* word string of user data or file caption. */

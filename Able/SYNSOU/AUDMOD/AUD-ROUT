/* AEE-ROUT  Audio Event Editor Routing Routines */dcl Routing.Screen.Space        fixed;dcl Routing.Group               fixed public;dcl Routing.Size.Box            fixed;dcl Routing.Drive.Label         fixed;dcl Routing.Input.Type          fixed;dcl Routing.Input.Table         fixed;dcl Routing.Output.Type         fixed;dcl Routing.Output.Table        fixed;dcl Update.Routing.Panel        proc recursive;DEFINE.ROUTING.PANEL: proc (row,size) swapable;   dcl row       fixed;   dcl size      fixed;   dcl i         fixed;   dcl lines(20) fixed;   call Copy.String('ROUTING CONTROL',lines);   call Print.Panel.Title(row,lines);   call Set.Auto.Allocation.Id(Routing.Alloc);   call Set.Default.Action(O#ACT.Middle.Press);   call Set.Default.Attr(0,ATTR#Normal\ATTR#AltIntensity);   call Set.Default.Attr(1,ATTR#Normal\ATTR#Reverse);   call                   Define.Graphics.Box(S#AA,gpos.x(-10),gpos.y((row-1)*100),gpos.x(8010),gpos.y((row+2)*100),0);   call                   Load.Close.Box.Icon(misc.buf);   Routing.Size.Box     = Define.Graphics.Icon(S#AA,0,(row*100),1,misc.buf);   call Activate.Object.Range(Routing.Alloc,Routing.Size.Box);   do i = Routing.Alloc to Routing.Size.Box;      call Update.Object(i);   end;   call                   Set.Default.Action(0);   Routing.Drive.Label  = Define.Label(S#AA,row,0,0,'Drive   01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16');   call                   Define.Label(S#AA,row+1,0,0,'Input');   call                   Define.Label(S#AA,row+2,0,0,'Output');   call                   Set.Default.Action(O#ACT.Middle.Press);   Routing.Input.Type   = Define.String(S#AA,row+1,7,3,0);   Routing.Input.Table  = Define.Table(S#AA,16,1,Routing.Input.Type);   Disable.Deposits = true;   do i = 0 to 15;      call Deposit.String(Routing.Input.Type,' --');      call Deposit.Table(Routing.Input.Table,i,0);   end;   Routing.Output.Type  = Define.Fixed.Point(S#AA,row+2,7,3,0,cf#right);   Routing.Output.Table = Define.Table(S#AA,16,1,Routing.Output.Type);   do i = 0 to 15;      call Deposit.Fixed.Point(Routing.Output.Type,i+1);      call Deposit.Table(Routing.Output.Table,i,0);   end;   Disable.Deposits = false;   Routing.Group        = Group.Objects(Routing.Group.Id,Routing.Alloc,Routing.Alloc+999,Get#Screen.Event);   call                   Activate.Object.Range(Routing.Alloc,Routing.Alloc+999);end DEFINE.ROUTING.PANEL;OPEN.ROUTING.PANEL: proc public swapable;   dcl (sid,row,size) fixed;  /*** Declare in Order ***/   if Routing.Group <> 0 then return;   if Allocate.Screen.Space(4,4,loc(addr(sid))) then do;      call Set.Panel.Menu.Highlight(7,1);      call Set.AEE.Panel.Info(7,row,size); /* find and set entry for panel */      call Define.Routing.Panel(row+1,size);      Routing.Screen.Space = sid;      call Update.Routing.Panel;   end;   else call Display.Notice(NT#NoMoreRoomOnScreen,ATTR#Normal,NulStr,0,0,0);end OPEN.ROUTING.PANEL;CLOSE.ROUTING.PANEL: proc public swapable;   if Routing.Group <> 0 then do;   /* Group is defined */      call Set.Panel.Menu.Highlight(7,0);      call Set.AEE.Panel.Info(7,0,0); /* mark entry as unused */      Routing.Screen.Space = Erase.Screen.Space(Routing.Screen.Space);      Routing.Group = Ungroup.Objects(Routing.Group);      call Undefine.Object.Range(Routing.Alloc,Routing.Alloc+999);      call Select.New.Cur.Obj(Corner.Label,-1,-1);   end;end CLOSE.ROUTING.PANEL;UPDATE.ROUTING.PANEL: proc public swapable;   dcl i          fixed;   dcl inputchan  fixed;   dcl tmp(2)     fixed;   if Send.For.Track.Directory then do;      do i = 0 to 15;         write(mam) = TRD.Ptr + shr(34+shl(i,4),8);         write(mal) = 34+shl(i,4);         inputchan  = read(mdi);         if inputchan > 0 then do;            tmp(1) = a.space \ shl((shr(inputchan-1,2)+a.1),8);            tmp(2) = ((inputchan-1)&3)+a.a;         end;         else do;            tmp(1) = a.space \ shl(a.minus,8);            tmp(2) = a.minus;         end;         tmp(0) = 3;         call Fetch.Table(Routing.Input.Table,i,0);         Disable.Deposits = true;         call Deposit.String(Routing.Input.Type,tmp);         call Deposit.Table(Routing.Input.Table,i,0);         Disable.Deposits = false;      end;   end;end UPDATE.ROUTING.PANEL;GET.ROUTING.EVENT: proc (event) returns (fixed) public swapable;   dcl event         fixed;   do while 1;      if event <> Get.Null.Event then do;         if Screen.Event.Group <> Routing.Group then return event;         if event = Get.Screen.Event then do;         end;      end;      event = Get.Next.Screen.Event;   end;end GET.ROUTING.EVENT;
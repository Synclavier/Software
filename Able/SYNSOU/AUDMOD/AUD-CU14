/* :SYNSOU:AUDMOD:AUD-CU14  $TITLE  Routines to Lock Mouse to Shuttle Editor Items	*/Indicate.Locked.Item.Status: proc (Item) swapable;   dcl Item fixed;   if Item = (-1) then do; /* turn off indicator display */      if Locate.Object(Locked.Item.Indicator.Id) then do;         call Erase.Object(Locked.Item.Indicator.Id);         call Undefine.Object(Locked.Item.Indicator.Id);      end;   end;   else do;                /* present current locked status */      if not Locate.Object(Locked.Item.Indicator.Id)      then do;   /* no indicator there yet, define it */         call Define.Label(Locked.Item.Indicator.Id,                           Shuttle.Row + Shuttle.Size,                           0,80,'');         call Set.Object.Attr(Locked.Item.Indicator.Id,0,ATTR#Reverse);         call Enable.Object  (Locked.Item.Indicator.Id);      end;      do case Item;         call Deposit.Label(Locked.Item.Indicator.Id,'Locked to CUE IN time');	/* Cue  In  Time */         call Deposit.Label(Locked.Item.Indicator.Id,'Locked to CUE OUT time');	/* Cue  Out Time */         call Deposit.Label(Locked.Item.Indicator.Id,'Locked to EDIT IN time');	/* Edit In  Time */         call Deposit.Label(Locked.Item.Indicator.Id,'Locked to EDIT OUT time'); /* Edit Out Time */      end;      call Update.Object(Locked.Item.Indicator.Id); /* make sure it gets displayed soon */   end;end Indicate.Locked.Item.Status;Select.Time.Field: proc (Item) public swapable;   dcl Item fixed;   if Item <= 3 then do; /* CUE IN, CUE OUT, EDIT IN, or EDIT OUT */      do case Item;         Item = Shuttle.Cue.In.Time.Id;   /* Cue  In  Time */         Item = Shuttle.Cue.Out.Time.Id;  /* Cue  Out Time */         Item = Shuttle.Edit.In.Time.Id;  /* Edit In  Time */         Item = Shuttle.Edit.Out.Time.Id; /* Edit Out Time */      end;      call Select.New.Cur.Obj(Item,-1,-1); /* select the time field */      call Update.Object     (Item);   end;end Select.Time.Field;dcl Old.Locked.Icon.Pix fixed;dcl New.Locked.Icon.Pix fixed;Highlight.Locked.Icon: proc (Code) swapable;   dcl Code          fixed;   dcl (x1,y1,x2,y2) fixed;   dcl miny          fixed;   dcl offset        lit '2';   miny = Fetch.Object.Info(Shuttle.Flag.Region,O#LRY); /* base y of flag area */   if (Code=0) or (Code=1) /* cue in or out icons */   then do;      x1 = Old.Locked.Icon.Pix - In.Out.Min.X - offset;      y1 = miny + In.Out.Max.Y + offset;      x2 = Old.Locked.Icon.Pix + In.Out.Max.X + offset;      y2 = miny + 1;   end;   else if (Code=2) then do;  /* edit in icon */      x1 = Old.Locked.Icon.Pix - Edit.In.Out.Min.X - offset;      y1 = miny + Edit.In.Out.Max.Y + offset;      x2 = Old.Locked.Icon.Pix + Edit.In.Out.Max.X + offset;      y2 = miny + 1;   end;   else if (Code=3) then do; /* edit out icon */      x1 = Old.Locked.Icon.Pix - Edit.In.Out.Max.X - offset;      y1 = miny + Edit.In.Out.Max.Y + offset;      x2 = Old.Locked.Icon.Pix + Edit.In.Out.Min.X + offset;      y2 = miny + 1;   end;   call Area.Fill(x1,y1,x2,y2,#dots.comp,0);end Highlight.Locked.Icon;Lock.Mouse.To.Item: proc (Code) public swapable;   dcl Code              fixed;   dcl (x1,y1,x2,y2)     fixed;   dcl (saved.object.id) fixed static;   dcl (l,r,u,d)         fixed static;   Restore.Object.Parameters: proc; /* restore settings in current object to saved values */      if Saved.Object.Id <> 0 then do;         call Set.Object.Arrow.Links(Saved.Object.Id,L,R,U,D); /* restore arrow links */         Saved.Object.Id = 0;       /* clear id after restore */      end;   end Restore.Object.Parameters;   if Shuttle.Group = 0 then return; /* shuttle editor must be open */   call Locate.Object(Shuttle.Flag.Region);    x1 = Read.Object(Object.Ptr+O#ULX)+gpix.x(600)+1; /* look up graphics coordinates */   x2 = Read.Object(Object.Ptr+O#LRX)-gpix.x(600)-1; /* of flag region so we can     */   y1 = Read.Object(Object.Ptr+O#ULY)            -1; /* highlight it correctly       */   y2 = Read.Object(Object.Ptr+O#LRY)            +1; /* to indicate special mode     */   if (code = (-1))          /* explicitly turning off item */   or (code = Locked.Item)   /* toggling item to unlock     */   then do;      if Locked.Item<>(-1)   /* need to un-highlight area */      then do;         /* call Get_Disable(Get.Arrow.Key); *//* disable raw arrow keys */         call Highlight.Locked.Icon(Code); /* un-highlight original position */         call Area.Fill(x1,y1,x2,y2,#dots.comp,0);         call Mouse.Switch(1); /* turn mouse cursor back on */      end;      call Restore.Object.Parameters;      Locked.Item = (-1);      call Disable.Object(Raw.Screen.Id);   end;   else do;                  /* lock to new item */      if Locked.Item=(-1)    /* need to highlight area */      then do;         /* call Get_Enable(Get.Arrow.Key); *//* enable for raw arrow keys */         call Area.Fill(x1,y1,x2,y2,#dots.comp,0);         call Mouse.Switch(0); /* turn mouse cursor off while locked */      end;      else call Highlight.Locked.Icon(Locked.Item); /* un-highlight original position */            call Restore.Object.Parameters;      Locked.Item = code;      call Enable.Object(Raw.Screen.Id);   end;   call Select.Time.Field (Locked.Item);   if Locked.Item <> (-1) then do;      do case Locked.Item;         Old.Locked.Icon.Pix = Coarse.Bar.In.Flag;         Old.Locked.Icon.Pix = Coarse.Bar.Out.Flag;         Old.Locked.Icon.Pix = Coarse.Bar.EIn.Flag;         Old.Locked.Icon.Pix = Coarse.Bar.EOut.Flag;      end;      call Highlight.Locked.Icon(Locked.Item); /* highlight current position */      Saved.Object.Id = Cur.Obj.Id;                  /* save id of the locked time field */      call Locate.Object(Saved.Object.Id);      L      = Read.Object(Object.Ptr + O#ObjLeft);  /* for action bits */      R      = Read.Object(Object.Ptr + O#ObjRight); /* and arrow links */      U      = Read.Object(Object.Ptr + O#ObjAbove);      D      = Read.Object(Object.Ptr + O#ObjBelow);      call Set.Object.Arrow.Links(Saved.Object.Id,0,0,0,0); /* turn off arrow links */   end;   call Indicate.Locked.Item.Status(Locked.Item);end Lock.Mouse.To.Item;/* $SUBTITLE Animate.Locked.Item *//* Routine is used to animate one of the shuttle icons *//* without actually clicking on the icon.              */Animate.Locked.Item:  proc (Code) public swapable; /* used to animate shuttle icon without clicking on it */   dcl Code   fixed; /* -1 means do nothing, otherwise codes     */                     /* match argument to Animate Flag Region    */                     /* and Handle.Flag.Area.Mouse.Select:       */                     /* 0  = animate cue in  flag                */                     /* 1  = animate cue out flag                */                     /* 2  = animate edit in  flag               */                     /* 3  = animate edit out flag               */                     /* 4  = animate E flag (not supported)      */                     /* 5  = not used                            */                     /* 6  = animate edit line (edit in and out) (not supported) */                     /* 7  = animate cue from cue in             */                     /* 8  = animate cue from cue out            */                     /* 9  = animate edit from edit in           */                     /* 10 = animate edit from edit out          */                     /* 11 = magnifier left                      */                     /* 12 = magnifier right                     */                     /* 13 = magnifer shuttle drag (in)          */                     /* 14 = magnifier shuttle drag (out)        */                     /* 15 = animate coarse bar box              */   dcl Scrub.Scan.Toggled fixed;   if Code = (-1) then return; /* spurious call */   call Select.Time.Field(Code);   /* make sure correct time field is selected */   if 0&Scrub.Scan.Mode = 1 then do; /* currently in scan mode */      Scrub.Scan.Mode = 0;         /* force to scrub mode for locked playback */      Scrub.Scan.Toggled = 1;      /* set flag to force restore below */   end;   call Handle.Flag.Area.Mouse.Select(Code);   do case Code;      New.Locked.Icon.Pix = Coarse.Bar.In.Flag;      New.Locked.Icon.Pix = Coarse.Bar.Out.Flag;      New.Locked.Icon.Pix = Coarse.Bar.EIn.Flag;      New.Locked.Icon.Pix = Coarse.Bar.EOut.Flag;   end;   if Old.Locked.Icon.Pix <> New.Locked.Icon.Pix then do; /* if it has moved */      call Highlight.Locked.Icon(Code); /* un-highlight original position */      Old.Locked.Icon.Pix = New.Locked.Icon.Pix;      call Highlight.Locked.Icon(Code); /* highlight current position */   end;   if Scrub.Scan.Toggled = 1                     /* software mode change above */   then Scrub.Scan.Mode = Scrub.Scan.Mode xor 1; /* restore to original mode */end Animate.Locked.Item;/* $SUBTITLE  Routines to Handle Function Key Playback Commands */Handle.Play.From.FKey: proc public swapable;   dcl Id fixed;   if Shuttle.Group=0 then return; /* shuttle editor must be open */   /* unknown results if flags are missing */   call Load.DTD.Temp.Cue(Current.Cue.Ptr);   Id = Cur.Obj.Id;   if			Id = Shuttle.Cue.In.Time.Id	then do;	/*	play cue in to cue out				*/      call Play.Current.Cue(1,0,4,Shuttle.Drive.Bits,1);   end;   else if	Id = Shuttle.Cue.Out.Time.Id	then do;	/*	play cue out to end of project	*/      call Play.Current.Cue(7,0,3,Shuttle.Drive.Bits,1);   end;                                                   else if	Id = Shuttle.Edit.In.Time.Id	then do;	/*	play edit in to edit out			*/      call Play.Current.Cue(2,0,1,Shuttle.Drive.Bits,1);   end;   else if	Id = Shuttle.Edit.Out.Time.Id	then do;	/*	play edit out to cue out			*/      call Play.Current.Cue(8,0,4,Shuttle.Drive.Bits,1);   end;   else if	Id = Shuttle.Time.Display		then do;	/*	anchor point to project end		*/      call Play.Current.Cue(4,0,3,Shuttle.Drive.Bits,1);   end;   else do; /* cannot play from current object */   end;end Handle.Play.From.FKey;Handle.Play.To.FKey: proc public swapable;   dcl Id fixed;   if Shuttle.Group=0 then return; /* shuttle editor must be open */   /* unknown results if flags are missing */   call Load.DTD.Temp.Cue(Current.Cue.Ptr);   Id = Cur.Obj.Id;   if			Id = Shuttle.Cue.In.Time.Id	then do;	/*	play up to cue in point		*/      call Play.Current.Cue(1,1,6,Shuttle.Drive.Bits,1);   end;   else if	Id = Shuttle.Cue.Out.Time.Id	then do;	/*	play up to cue out point	*/      call Play.Current.Cue(7,1,6,Shuttle.Drive.Bits,1);   end;                                                   else if	Id = Shuttle.Edit.In.Time.Id	then do;	/*	play up to edit in point	*/      call Play.Current.Cue(2,1,6,Shuttle.Drive.Bits,1);   end;   else if	Id = Shuttle.Edit.Out.Time.Id	then do;	/*	play up to edit out point	*/      call Play.Current.Cue(8,1,6,Shuttle.Drive.Bits,1);   end;   else if	Id = Shuttle.Time.Display		then do;	/*	play up to anchor point		*/      call Play.Current.Cue(4,1,6,Shuttle.Drive.Bits,1);   end;   else do; /* cannot play from current object */   end;end Handle.Play.To.FKey;Handle.Pause.FKey: proc public swapable;   if Shuttle.Group=0 then return; /* shuttle editor must be open */   if (Play<>0) or (Move<>0) then do; /* sequencer is running */      call Stop.Sequencer;       /* stop sequencer and most DTD playback */      if DTD.Play.State<>0       /* catch any playback missed above */      then call Stop.DTD.Playback;   end;   else if DTD.Play.State <> 0 then do;  /* We are playing; stop */      call Stop.DTD.Playback;   end;   else do;  /* We are not playing; continue */      call Load.DTD.Temp.Cue(Current.Cue.Ptr);      call Play.Current.Cue(0,0,3,Shuttle.Drive.Bits,1); /* current position play to project end */   end;end Handle.Pause.FKey;
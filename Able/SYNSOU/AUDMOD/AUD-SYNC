/*	:SYNSOU:AUDMOD:AUD-SYNC  Synchronization panel	*//*Modified:2001/02/19 - TY  - Made modifications needed for 24-hour wrap2000/04/16 - TY  - Made changes to distinguish SMPTE frames per beat from Film frames per beat1999/04/12 - TY  - Fixed minor bug in "OPEN.SYNC.PANEL"1998/06/25 - TY  - Fixed a bug in UPDATE.SYNC.PANEL.  The call to UPDATE.CLICK.STATE.VARS was after						 the call to DEPOSIT.SWITCH(Sync.Sync.Mode, Get.Synclav.Sync.Mode).  This prevented						 the switch from updating correctly when the click's mode or on/off status was changed						 from the keyboard.  I have reversed the order.					  - Also simplified OPEN.SYNC.PANEL.1991/02/06 - PF  - Update click rate displays for use with Tempo Maps1990/06/14 - LSS - changed pull-down display to NTSC 301990/05/02 - cj  - added "pull-down" smpte code1989/05/02 - TSS - Merged changes for Optical disk to DTD transfer project1988/10/03 - cj  - set correct display bits for live click track usage1988/09/08 - MWH - Add "real" DSP user interface1988/08/22 - cj  - used procedure call to update seq panel time formats1988/08/16 - cj  - removed seq#scrollStart time format setting1988/08/04 - CJ  - redesigned sync panel1988/06/16 - cj  - moved smpte offset take button to line up better1988/06/15 - CJ  - added GENERATE button to activate smpte generator1988/05/23 - MWH - Add take button for SMPTE offset*/dcl Sync.Group							fixed public;dcl Sync.Screen.Space				fixed;dcl Sync.Row							fixed;/*	Top Row:		*/dcl Sync.Display.Switch				fixed;dcl Sync.Smpte.Label					fixed;dcl Sync.SMPTE.Take					fixed;dcl Sync.SMPTE.Offset				fixed;dcl Sync.Smpte.In.Mode.Table		fixed;dcl Sync.Send.OMS.Table				fixed;dcl Sync.Enable.OMS.Table			fixed;/*	Second Row:	*/dcl Sync.Sync.Mode					fixed;dcl Sync.Click.On.Off.Switch		fixed;dcl Sync.Click.Rate					fixed;dcl Sync.Click.Mode.Switch			fixed;dcl Sync.BeatsPerMeas				fixed;dcl Sync.Speed							fixed;/*	Third Row:	*/dcl Sync.Command.Table				fixed;/*	For Dialog Boxes:	*/dcl Sync.Dialog.Mode					fixed;		/*	dialog box state	*/dcl Sync.Dialog.Take1				fixed;dcl Sync.Dialog.Take2				fixed;dcl Sync.Dialog.Time1				fixed;dcl Sync.Dialog.Time2				fixed;dcl Sync.Dialog.Switch1				fixed;dcl Sync.Dialog.Switch2				fixed;dcl Sync.Dialog.Switch.Settings	fixed;dcl Sync.Dialog.Switch1.Default	lit	'O#MSEC.Measures.Beats';dcl Sync.Dialog.Switch2.Default	lit	'O#MSEC.SMPTE';dcl Sync.Dialog.Disp.Mode.Table	fixed;dcl Sync.Dialog.Disp.Contents		fixed;dcl Sync.SMPTE.Disp.Mode			fixed;dcl Sync.Dialog.Ok.Button			fixed;dcl Sync.Dialog.Cancel.Button		fixed;/*	$page - Procedure to define basic sync panel:	*/DEFINE.SYNC.PANEL: proc(row,size) swapable;	dcl row				fixed;	dcl size				fixed;	dcl i					fixed;	dcl MR13i			lit 'write("373")';	dcl s1(40)			fixed;	dcl s2(32)			fixed;	dcl Sync.Size.Box	fixed;	call Copy.String('SYNCHRONIZATION AND TIME CONTROL',s1);	call Print.Panel.Title(row,s1);	write("313") = addr(misc.buf(0));	mr13i = O#Icon.Connect;	/*	horiz line under top row	*/		mr13i = 2250;		mr13i =    0;		mr13i = 8010;		mr13i =    0;	mr13i = O#Icon.Connect;	/*	horiz line under second row	*/		mr13i = - 10;		mr13i = -100;		mr13i = 8010;		mr13i = -100;	mr13i = O#Icon.Connect;	/*	horiz line under third row	*/		mr13i = - 10;		mr13i = -200;		mr13i = 8010;		mr13i = -200;	mr13i = O#Icon.Connect;	/*	vert line to right of display	*/		mr13i = 2250;			/*	mode and sync mode switches	*/		mr13i =  100;		mr13i = 2250;		mr13i = -100;	mr13i = O#Icon.Connect;	/*	vert line to right of smpte	*/		mr13i = 5050;			/*	offset and click info			*/		mr13i =  100;		mr13i = 5050;		mr13i = -100;  	mr13i = O#Icon.BlockModeOn;	mr13i = O#Icon.Connect;	/*	vert line to right of smpte	*/		mr13i = 7050;			/*	in mode select buttons			*/		mr13i =  100;		mr13i = 7100;		mr13i =    0;     mr13i = O#Icon.BlockModeOff;	mr13i = O#Icon.Connect;	/*	vert line to right of beats	*/		mr13i = 6050;			/*	per measure							*/		mr13i =    0;		mr13i = 6050;		mr13i = -100;  	mr13i = O#Icon.BlockModeOn;	mr13i = O#Icon.Connect;	/*	vert line to right of speed	*/		mr13i = 7150;		mr13i =    0;		mr13i = 7200;		mr13i = -100;     mr13i = O#Icon.BlockModeOff;	mr13i = O#Icon.Connect;	/*	vert line to right of command	*/		mr13i = 3600;			/*	table									*/		mr13i = -100;		mr13i = 3600;		mr13i = -200;	mr13i = O#Icon.End;	call Set.Auto.Allocation.Id(Sync.Alloc);	call Set.Default.Action	(O#ACT.Middle.Press			 );	call Set.Default.Attr	(0, ATTR#Normal				 );	call Set.Default.Attr	(1, ATTR#Normal\ATTR#Reverse);	call				  Define.Graphics.Box(S#AA,gpos.x(-10),gpos.y((row-1)*100),gpos.x(8010),gpos.y((row+size-1)*100),0);	i					= Define.Graphics.Icon(S#AA,0,(row*100),0,misc.buf);	call				  Update.Object(i);	call				  Load.Close.Box.Icon(misc.buf);	Sync.Size.Box	= Define.Graphics.Icon(S#AA,0,(row*100),1,misc.buf);	/*	Define Top Row:	*/	i = Define.Graphics.Button.Table	(S#AA, 0000, (row-1)*100, 700, row*100, 1, 1, 0);	call COPY.STRING('Display',	s1);	call COPY.STRING('Times In',	s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	Sync.Display.Switch = Define.Switch(S#AA, row, 7, 15, 0,	'Seconds|Minutes:Seconds|Beats|Measures:Beats|SMPTE|Feet:Frames');	Sync.Smpte.Label = Define.Graphics.Button.Table	(S#AA, 2300, (row-1)*100+10, 3200, row*100-10, 1, 1, 0);	call COPY.STRING('SMPTE Offset:',	s1);	call COPY.STRING('',						s2);	call Deposit.Graphics.Button.Table.Label(Sync.SMPTE.Label, 0, 0, 1, s1, s2);	call Load.Take.Icon(Misc.Buf);	Sync.SMPTE.Take	= Define.Graphics.Icon(S#AA,3200,row*100,1,Misc.Buf);	call Set.Default.Action	(O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.SMPTE.Offset	= Define.32Bit.Msec(S#AA,row,35,14,O#MSEC.SMPTE\O#Msec.Allow.Minus\O#MSEC.RealTime,cf#dur,cf#default,cf#default);	call Set.Object.Drag		(Sync.SMPTE.Offset,true,true);	call Set.Default.Action	(O#ACT.Middle.Press			 );	Sync.Smpte.In.Mode.Table = Define.Graphics.Button.Table	(S#AA, 5050, (row-1)*100, 7050, row*100, 5, 1, 1);	call COPY.STRING('30',	  s1);	call COPY.STRING('Frame', s2);	call Deposit.Graphics.Button.Table.Label(Sync.Smpte.In.Mode.Table, 0, 0, 1, s1, s2);	call COPY.STRING('NTSC',  s1);	call COPY.STRING('30',	  s2);	call Deposit.Graphics.Button.Table.Label(Sync.Smpte.In.Mode.Table, 0, 1, 1, s1, s2);	call COPY.STRING('Drop',  s1);	call COPY.STRING('Frame', s2);	call Deposit.Graphics.Button.Table.Label(Sync.Smpte.In.Mode.Table, 0, 2, 1, s1, s2);	call COPY.STRING('25',	  s1);	call Deposit.Graphics.Button.Table.Label(Sync.Smpte.In.Mode.Table, 0, 3, 1, s1, s2);	call COPY.STRING('24',	  s1);	call Deposit.Graphics.Button.Table.Label(Sync.Smpte.In.Mode.Table, 0, 4, 1, s1, s2);	if (interp_is_running != 0)	{		Sync.Send.OMS.Table = Define.Graphics.Button.Table		(S#AA, 7100, (row-1)*100, 8010, row*100, 2, 1, 1);		call COPY.STRING('Send',	 s1);		call COPY.STRING('OMS CLK', s2);		call Deposit.Graphics.Button.Table.Label(Sync.Send.OMS.Table, 0, 0, 0, s1, s2);		call COPY.STRING('Send',    s1);		call COPY.STRING('OMS MTC', s2);		call Deposit.Graphics.Button.Table.Label(Sync.Send.OMS.Table, 0, 1, 0, s1, s2);	}		/*	Second Row:	*/	i = Define.Graphics.Button.Table	(S#AA, 0000, row*100, 1100, (row+1)*100, 1, 1, 0);	call COPY.STRING('Synchronization:',	s1);	call COPY.STRING('',							s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	call Construct.Sync.Mode.Switch.String(s1);	Sync.Sync.Mode = Define.Switch(S#AA, row+1, 14, 8, 0, s1);	i = Define.Graphics.Button.Table	(S#AA, 2250, row*100, 2800, (row+1)*100, 1, 1, 0);	call COPY.STRING('Click',	s1);	call COPY.STRING('Track',	s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	Sync.Click.On.Off.Switch = Define.Switch(S#AA,row+1,28, 3,0,'OFF|ON');	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Click.Rate			= Define.Sound.File.Time(S#AA,row+1,32,9,4,2);	Sync.Click.Mode.Switch	= Define.Switch(S#AA,row+1,42,8,0,'Bts/Min|Sec/Beat|Film F/B|SmpteF/B|Ext. Clk|Live Clk');	call Set.Default.Action (O#ACT.Middle.Press );	i = Define.Graphics.Button.Table	(S#AA, 5050, row*100, 5700, (row+1)*100, 1, 1, 0);	call COPY.STRING('Beats Per',	s1);	call COPY.STRING('Measure:',	s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.BeatsPerMeas = Define.Fixed.Point(S#AA,row+1,57,3,0,cf#right);	call Set.Default.Action (O#ACT.Middle.Press );	i = Define.Graphics.Button.Table	(S#AA, 6050, row*100, 6500, (row+1)*100, 1, 1, 0);	call COPY.STRING('Speed:',	s1);	call COPY.STRING('',			s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Speed = Define.Fixed.Point(S#AA,row+1,65,6,3,cf#right);	call Set.Default.Action (O#ACT.Middle.Press );	if (interp_is_running != 0)	{		Sync.Enable.OMS.Table = Define.Graphics.Button.Table		(S#AA, 7200, row*100, 8010, (row+1)*100, 1, 1, 1);		call COPY.STRING('Enable OMS',	 s1);		call COPY.STRING('MIDI Input', s2);		call Deposit.Graphics.Button.Table.Label(Sync.Enable.OMS.Table, 0, 0, 1, s1, s2);	}	/*	Third Row:	*/	Sync.Command.Table = Define.Graphics.Button.Table	(S#AA, 0, (row+1)*100, 3600, (row+2)*100, 4, 1, 1);	call COPY.STRING('Set Display',	s1);	call COPY.STRING('Offset',			s2);	call Deposit.Graphics.Button.Table.Label(Sync.Command.Table, 0, 0, 1, s1, s2);	call COPY.STRING('Compute',		s1);	call COPY.STRING('SMPTE Offset',	s2);	call Deposit.Graphics.Button.Table.Label(Sync.Command.Table, 0, 1, 1, s1, s2);	call COPY.STRING('Event Time',	s2);	call Deposit.Graphics.Button.Table.Label(Sync.Command.Table, 0, 2, 1, s1, s2);	call COPY.STRING('Generate',		s1);	call COPY.STRING('SMPTE',			s2);	call Deposit.Graphics.Button.Table.Label(Sync.Command.Table, 0, 3, 1, s1, s2);	Sync.Group = Group.Objects(Sync.Group.Id,Sync.Alloc,Sync.Alloc+999,Get#Screen.Event);	call Activate.Object.Range(Sync.Alloc,Sync.Alloc+999);	call Set.Object.Arrow.Links(Sync.Smpte.Offset	, ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);	call Set.Object.Arrow.Links(Sync.Click.Rate		, ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);	call Set.Object.Arrow.Links(Sync.BeatsPerMeas	, ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);	call Set.Object.Arrow.Links(Sync.Speed,ARR#Auto	, ARR#Auto, ARR#Auto, ARR#Auto);end DEFINE.SYNC.PANEL;/*	$page - Procedure to define Sync Panel Dialog Lines:	*/Define.Set.Display.Offset:proc (row) swapable;	dcl row			fixed;	dcl (s1)	(16)	fixed;	dcl (s2)	(16)	fixed;	dcl t(1)			fixed;	dcl i				fixed;	dcl width		fixed;	dcl fps			fixed;	dcl map.mode	data (2,0,3,4,1);	/*	map sm.mode to button table	*/	/*	define 'Set Display Offset' line	*/	i = Define.Graphics.Button.Table	(S#AA, 0000, (row-1)*100, 700, row*100, 1, 1, 0);	call COPY.STRING('SMPTE Time',	s1);	call COPY.STRING('',					s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	call Load.Take.Icon(Misc.Buf);	Sync.Dialog.Take1 = Define.Graphics.Icon(S#AA,700,row*100,1,Misc.Buf);	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Dialog.Time1 = Define.32Bit.Msec(S#AA,row, 10, 14,							  O#MSEC.Smpte\O#MSEC.Allow.Minus\O#MSEC.RealTime, cf#dur, cf#default, cf#default);	call Set.Object.Drag		(Sync.Dialog.Time1,true,true);	call Set.Default.Action	(O#ACT.Middle.Press			 );	i = Define.Graphics.Button.Table	(S#AA, 2400, (row-1)*100, 3200, row*100, 1, 1, 0);	call COPY.STRING('Displays',	s1);	call COPY.STRING('',				s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	call Load.Take.Icon(Misc.Buf);	Sync.Dialog.Take2  = Define.Graphics.Icon(S#AA,3200,row*100,1,Misc.Buf);	if AEE.Time.Format = O#MSEC.Feet.Frames	then Sync.Dialog.Disp.Contents = O#MSEC.Feet.Frames;	else Sync.Dialog.Disp.Contents = O#MSEC.SMPTE;	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Dialog.Time2  = Define.32Bit.Msec(S#AA,row, 35, 14,								Sync.Dialog.Disp.Contents \ O#MSEC.Allow.Minus \ O#MSEC.RealTime,								cf#dur, cf#default, cf#default);	call Set.Object.Drag		(Sync.Dialog.Time2,true,true);	call Set.Default.Action	(O#ACT.Middle.Press			 );	if Sync.Dialog.Disp.Contents = O#MSEC.SMPTE	then do;		vector_mode;		call data_level(2);		call gbox (gpos.x(5000), gpos.y((row-1)*100+3),					  gpos.x(7000), gpos.y((row  )*100-3), 0);		call data_Level(0);		transparent_mode;		Sync.Dialog.Disp.Mode.Table = Define.Graphics.Button.Table		(S#AA, 5000, (row-1)*100+3, 7000, row*100-3, 5, 1, 1);		call COPY.STRING('30',		s1);		call COPY.STRING('Frame',	s2);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 0, 1, s1, s2);		call COPY.STRING('NTSC',	s1);		call COPY.STRING('30',		s2);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 1, 1, s1, s2);		call COPY.STRING('Drop',	s1);		call COPY.STRING('Frame',	s2);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 2, 1, s1, s2);		call COPY.STRING('25',		s1);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 3, 1, s1, s2);		call COPY.STRING('24',		s1);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 4, 1, s1, s2);	end;	else do;		vector_mode;		call data_level(2);		call gbox (gpos.x(5000), gpos.y((row-1)*100+3),					  gpos.x(6500), gpos.y((row  )*100-3), 0);		call data_Level(0);		transparent_mode;		Sync.Dialog.Disp.Mode.Table = Define.Graphics.Button.Table		(S#AA, 5000, (row-1)*100+3, 6500, row*100-3, 5, 1, 1);		call COPY.STRING('35',		s1);		call COPY.STRING('MM',		s2);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 0, 1, s1, s2);		call COPY.STRING('16',		s1);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 1, 1, s1, s2);		call COPY.STRING('30',		s1);		call COPY.STRING('FPS',		s2);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 2, 1, s1, s2);		call COPY.STRING('25',		s1);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 3, 1, s1, s2);		call COPY.STRING('24',		s1);		call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Disp.Mode.Table, 0, 4, 1, s1, s2);	end;	Sync.Dialog.Cancel.Button = Define.Graphics.Button.Table	(S#AA, 7400, (row-1)*100, 8000, row*100, 1, 1, 0);	call COPY.STRING('Done',	s1);	call COPY.STRING('',			s2);	call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Cancel.Button, 0, 0, 1, s1, s2);	vector_mode;	call data_level(2);	call gbox (gpos.x(7400), gpos.y((row-1)*100+3),				  gpos.x(8000), gpos.y((row  )*100-3), 0);	call data_Level(0);	transparent_mode;	Sync.Dialog.Ok.Button = Sync.Dialog.Cancel.Button;	/*	Put initial values in display offset line	*/	disable.deposits = 1;	/*	Put current smpte start time into smpte time.  Do not use	*/	/*	display offset here:														*/	s1(0) = GID(Sync.Compute.Event.Time  );	/*	look up saved sequence	*/	s1(1) = GID(Sync.Compute.Event.Time+1);	/*	point							*/	if (s1(0) = 0) and (s1(1) ilt Zero.Time)	/*	detect un-initialized	*/	then call STR32(0, Zero.time, S1);			/*	value							*/	if s1(0) < 0										/*	remove zero.time			*/	then call ADD16(Zero.time, s1);				/*	offset to get # of		*/	else call SUB16(Zero.time, s1);				/*	msecs from 0.000 (+/-)	*/	/*	Show Smpte Start Time (IE No Offset) in time1:	*/	call SMPTE.TO.MSEC(loc(addr(SM.HRS)), cf#dur, SAMP.SPEED, SM.MODE, Zero.Zero, S2);	call ADD32(S1, S2, S2);	call Deposit.32Bit.Msec(Sync.Dialog.Time1, Zero.Zerotime, S2);	if Sync.Dialog.Disp.Contents = O#MSEC.SMPTE	then do;		/*	Show displaced time in time2 always, whether or not	*/		/*	the display offset is enabled:								*/		call SMPTE.TO.SBITS(loc(addr(SM.HRS)), SM.MODE, S2);		write(mam) = BAS.PTR;		/*	look up display offset stored with seq	*/		write(mal) = SEQ.DOFFSET;	/*	get smpte display offset					*/		t(0)		  = read(mdi);		t(1)		  = read(mdi);		call ADD32(S2, T, S2);		/*	add in display offset (smpte bits)		*/		call SBITS.TO.MSEC(S2, cf#dur, SAMP.SPEED, SM.MODE, S2);		call ADD32(S1, S2, S2);		/*	add in where we are in sequence			*/		call Deposit.32Bit.Msec(Sync.Dialog.Time2, Zero.Zerotime, S2);		if Sync.SMPTE.Disp.Mode = 0	/*	if user has not selected a different	*/		then do;								/*	display mode, then use it					*/			call Highlight.Graphics.Button.Table			(Sync.Dialog.Disp.Mode.Table, bits(map.mode(SM.MODE)),  2, 0);		end;		else do;			call Highlight.Graphics.Button.Table			(Sync.Dialog.Disp.Mode.Table, bits(map.mode(Sync.SMPTE.Disp.Mode-1)), 2, 0);		end;	end;	else do;								/*	look up footage offset						*/		//	Note: if cf#time were passed to FEET.TO.MSEC() below, 3 words of zero would be needed in place of Zero.Zero		call FEET.TO.MSEC(S$Foffset, cf#dur, S$Speed, S$Fmode, Zero.Zero, s2);		call ADD32(S1, S2, S2);		/*	add in where we are in sequence			*/		call Deposit.32Bit.Msec(Sync.Dialog.Time2, Zero.Zerotime, S2);		if S$Fmode >= 3 then do;			width	= 1;			fps	= S$Fmode - 3;		end;		else do;			width	= 0;			fps	= S$Fmode;		end;		call Highlight.Graphics.Button.Table		(Sync.Dialog.Disp.Mode.Table, bits(width) \ bits(fps + 2), 2, 0);	end;	disable.deposits = 0;end Define.Set.Display.Offset;Define.Compute.Start.Time: proc (row) swapable;	dcl row			fixed;	dcl (s1)	(16)	fixed;	dcl (s2)	(16)	fixed;	dcl i				fixed;	i = Define.Graphics.Button.Table	(S#AA, 0000, (row-1)*100, 1000, row*100, 1, 1, 0);	call COPY.STRING('Sequence Time',	s1);	call COPY.STRING('',						s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	call Load.Take.Icon(Misc.Buf);	Sync.Dialog.Take1 = Define.Graphics.Icon(S#AA,1000,row*100,1,Misc.Buf);	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Dialog.Time1 = Define.32Bit.Msec(S#AA,row, 13, 14,							  AEE.Time.Format\O#MSEC.Allow.Minus\O#MSEC.RealTime,							  cf#time, cf#default, cf#default);	call Set.Object.Drag		(Sync.Dialog.Time1,true,true);	call Set.Default.Action	(O#ACT.Middle.Press			 );	i = Define.Graphics.Button.Table	(S#AA, 2700, (row-1)*100, 3500, row*100, 1, 1, 0);	call COPY.STRING('Syncs To',	 s1);	call COPY.STRING('SMPTE Time', s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	call Load.Take.Icon(Misc.Buf);	Sync.Dialog.Take2 = Define.Graphics.Icon(S#AA,3500,row*100,1,Misc.Buf);	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Dialog.Time2 = Define.32Bit.Msec(S#AA,row, 38, 14,							  O#MSEC.SMPTE \ O#MSEC.Allow.Minus \ O#MSEC.RealTime,							  cf#time, cf#default, cf#default);	call Set.Object.Drag		(Sync.Dialog.Time2,true,true);	call Set.Default.Action	(O#ACT.Middle.Press			 );	Sync.Dialog.OK.Button = Define.Graphics.Button.Table	(S#AA, 5300, (row-1)*100, 6200, row*100, 1, 1, 0);	call COPY.STRING('Compute',		s1);	call COPY.STRING('SMPTE Offset',	s2);	call Deposit.Graphics.Button.Table.Label(Sync.Dialog.OK.Button, 0, 0, 1, s1, s2);	vector_mode;	call data_level(2);	call gbox (gpos.x(5300), gpos.y((row-1)*100+3),				  gpos.x(6200), gpos.y((row  )*100-3), 0);	call data_Level(0);	transparent_mode;	Sync.Dialog.Cancel.Button = Define.Graphics.Button.Table	(S#AA, 7400, (row-1)*100, 8000, row*100, 1, 1, 0);	call COPY.STRING('Done',	s1);	call COPY.STRING('',			s2);	call Deposit.Graphics.Button.Table.Label(Sync.Dialog.Cancel.Button, 0, 0, 1, s1, s2);	vector_mode;	call data_level(2);	call gbox (gpos.x(7400), gpos.y((row-1)*100+3),				  gpos.x(8000), gpos.y((row  )*100-3), 0);	call data_Level(0);	transparent_mode;	/*	Deposit initial values	*/	disable.deposits = 1;	s1(0) = GID(Sync.Compute.Event.Time  );	s1(1) = GID(Sync.Compute.Event.Time+1);	if (s1(0) = 0) and (s1(1) ilt Zero.Time)	then call STR32(0, Zero.time, S1);	call Deposit.32Bit.Msec(Sync.Dialog.Time1, s1, Zero.Zero);	call Deposit.32Bit.Msec(Sync.Dialog.Time2, s1, Zero.Zero);	disable.deposits = 0;end Define.Compute.Start.Time;Define.Compute.Event.Time: proc(row) swapable;	dcl row			fixed;	dcl (s1)	(16)	fixed;	dcl (s2)	(16)	fixed;	dcl i				fixed;	dcl format		fixed;	dcl map.disp data (0,2,3,4,5,1);	/*	map aee time format to setting	*/	Sync.Dialog.Switch1 = Define.Switch(S#AA, row, 0, 15, 0,	'Seconds|Minutes:Seconds|Beats|Measures:Beats|SMPTE|Feet:Frames');	format = shr(Sync.Dialog.Switch.Settings, 8);	format = (format + Sync.Dialog.Switch1.Default) & 255;	disable.deposits = 1;	call Deposit.Switch(Sync.Dialog.Switch1, map.disp(format));	disable.deposits = 0;	call Load.Take.Icon(Misc.Buf);	Sync.Dialog.Take1 = Define.Graphics.Icon(S#AA,1600,row*100,1,Misc.Buf);	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Dialog.Time1 = Define.32Bit.Msec(S#AA,row, 19, 14,							  format \ O#MSEC.Allow.Minus \ O#MSEC.RealTime,							  cf#time, cf#default, cf#default);	call Set.Object.Drag		(Sync.Dialog.Time1,true,true);	call Set.Default.Action	(O#ACT.Middle.Press			 );	i = Define.Graphics.Button.Table	(S#AA, 3300, (row-1)*100, 3800, row*100, 1, 1, 0);	call COPY.STRING('Syncs',	s1);	call COPY.STRING('To',		s2);	call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);	call Set.Object.Mouse.Access (i, 0);	Sync.Dialog.Switch2 = Define.Switch(S#AA, row, 38, 15, 0,	'Seconds|Minutes:Seconds|Beats|Measures:Beats|SMPTE|Feet:Frames');	format = Sync.Dialog.Switch.Settings & 255;	format = (format + Sync.Dialog.Switch2.Default) & 255;	disable.deposits = 1;	call Deposit.Switch(Sync.Dialog.Switch2, map.disp(format));	disable.deposits = 0;	call Load.Take.Icon(Misc.Buf);	Sync.Dialog.Take2 = Define.Graphics.Icon(S#AA,5300,row*100,1,Misc.Buf);	call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);	Sync.Dialog.Time2 = Define.32Bit.Msec(S#AA,row, 56, 14,							  format \ O#MSEC.Allow.Minus \ O#MSEC.RealTime,							  cf#time, cf#default, cf#default);	call Set.Object.Drag		(Sync.Dialog.Time2,true,true);	call Set.Default.Action	(O#ACT.Middle.Press			 );	Sync.Dialog.OK.Button = Define.Graphics.Button.Table	(S#AA, 7400, (row-1)*100, 8000, row*100, 1, 1, 0);	call COPY.STRING('Done',	s1);	call COPY.STRING('',			s2);	call Deposit.Graphics.Button.Table.Label(Sync.Dialog.OK.Button, 0, 0, 1, s1, s2);	vector_mode;	call data_level(2);	call gbox (gpos.x(7400), gpos.y((row-1)*100+3),				  gpos.x(8000), gpos.y((row  )*100-3), 0);	call data_Level(0);	transparent_mode;	Sync.Dialog.Cancel.Button = Sync.Dialog.Ok.Button;	/*	deposit initial values:	*/	disable.deposits = 1;	s1(0) = GID(Sync.Compute.Event.Time  );	s1(1) = GID(Sync.Compute.Event.Time+1);	if (s1(0) = 0) and (s1(1) ilt Zero.Time)	then call STR32(0, Zero.time, S1);	call Deposit.32Bit.Msec(Sync.Dialog.Time1, s1, Zero.Zero);	call Deposit.32Bit.Msec(Sync.Dialog.Time2, s1, Zero.Zero);	disable.deposits = 0;end Define.Compute.Event.Time;DEFINE.SYNC.DIALOG: proc (row,message)  swapable;	dcl row		fixed;	dcl message	fixed;	dcl i			fixed;	/*	Message: 0 - erase dialog line	*/	/*				1 - Set Display Offset	*/	/*				2 - Compute Start Time	*/	/*				3 - Compute Event Time	*/	/*	Begin by entirely erasing the line between the panels	*/	call cpos(row, 0);		/*	erase entire transparent line	*/	call pc(27);	call ps('[K');	i = mouse.cursor.type;	/*	erase entire graphics	 line	*/	call Mouse.Switch(0);	call area.fill(gpos.x(    0), gpos.y((row  -1)*100)-1,						gpos.x( 8000), gpos.y((row+1-1)*100)+1, 1, 0);	call Mouse.Switch(i);	if message = 0			/*	undefine objects					*/	then do;		call Undefine.Object.Range(Sync.Alloc+500,Sync.Alloc+599);		call Select.New.Cur.Obj(Corner.Label,-1,-1);		call DISPLAY.NOTICE (NT#EraseNotice,ATTR#Normal,NulStr,0,0,0);		call REMOVE.ERR;		Sync.Dialog.Mode = 0;		return;	end;	/*	Define objects on dialog line:	*/	call Set.Auto.Allocation.Id (Sync.Alloc + 500);	call Set.Default.Action	(O#ACT.Middle.Press			 );	call Set.Default.Attr	(0, ATTR#Normal				 );	call Set.Default.Attr	(1, ATTR#Normal\ATTR#Reverse);	do case (message-1);		call Define.Set.Display.Offset(row);		call Define.Compute.Start.Time(row);		call Define.Compute.Event.Time(row);	end;	Sync.Dialog.Mode = message;	/*	must set up initial values	*/	/*	**************************	*/	call Activate.Object.Range(Sync.Alloc+500,Sync.Alloc+520);	call Set.Object.Arrow.Links(Sync.Dialog.Time1 , ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);	call Set.Object.Arrow.Links(Sync.Dialog.Time2 , ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);	call Select.New.Cur.Obj(Corner.Label,-1,-1);	return;end DEFINE.SYNC.DIALOG;/*	procedure to update values displayed on sync panel			*//*	dialog, if any, to match state of synclavier variables:	*/UPDATE.SYNC.PANEL.DIALOG: proc swapable;	dcl mode	fixed;	if Sync.Dialog.Mode=0 then return;	/*	only interested if it's up	*/	mode = Sync.Dialog.Mode;	call Define.Sync.Dialog(Sync.Row+3, 0);		/*	erase		*/	call Define.Sync.Dialog(Sync.Row+3, mode);	/*	redraw	*/end UPDATE.SYNC.PANEL.DIALOG;/*	$page - update sync panel on system changes			*//*	procedure to update values displayed on sync panel	*//*	to match state of synclavier variables:				*/UPDATE.SYNC.PANEL: proc (update_dialog) PUBLIC swapable;	dcl update_dialog	boolean;	dcl str(8)	fixed;	dcl t  (1)	fixed;	dcl i			fixed;	dcl j			fixed;	dcl k			fixed;	dcl l			fixed;	dcl map.disp	data (0,2,3,4,5,1);	/*	map aee time format to setting	*/													/*	of sync display switch				*/	dcl map.mode	data (2,0,3,4,1);		/*	map sm.mode to button table		*/	if Sync.Group = 0 then return;		/*	in case panel not there ...		*/	Disable.Deposits = true;	/*	Top Row:	*/	call Deposit.Switch(Sync.Display.Switch, map.disp(AEE.Time.Format));	/*	Show smpte start time with the display offset included (or	*/	/*	not depending on the display offset enable/disable)			*/	call SMPTE.To.Msec(S$Soffset, cf#dur, S$Speed, S$Smode, Zero.Zero, Str);	call Deposit.32Bit.Msec(Sync.SMPTE.Offset, Zero.Zerotime, Str);	/*	See if there is a display offset dialed in.  Highlight the label	*/	/*	if there is a display offset dialed in and we are using it.  Box	*/	/*	the label if there is a display offset but it is disabled.			*/	j = 0; k = 0;	write(mam) = BAS.PTR;		/*	look up display offset stored with seq	*/	write(mal) = SEQ.DOFFSET;	/*	get smpte display offset					*/	t(0)		  = read(mdi);	t(1)		  = read(mdi);	l			  = read(mdi);		/*	SEQ.DOFFDIS										*/	if (t(0)\t(1)) <> 0			/*	if display offset is <> 0, look			*/	then do;		if l <> 0 then	k = 1;	/*	nonzero, suppressed ==> BOX				*/		else				j = 1;	/*	nonzero, active	  ==> HIGHLIGHT		*/	end;	call Highlight.Graphics.Button.Table(Sync.Smpte.Label, j, 2, 0);	call Highlight.Graphics.Button.Table(Sync.Smpte.Label, k, 2, 1);	call Highlight.Graphics.Button.Table(Sync.Smpte.In.Mode.Table,													 bits(map.mode(SM.MODE)),  2, 0);		// Highlight Send OMS buttons	i = 0;							// Assume no highliting	if (midi.sync.out < 0)		// MIDI Sync output going to OMS	{		if (MIDI.SYNC.IS.TC == 0) i = 1;			// Midi Clocks		else							  i = 2;			// MIDI Time Code	}	if (interp_is_running != 0)	{		call Highlight.Graphics.Button.Table(Sync.Send.OMS.Table, i, 2, 0);		call Highlight.Graphics.Button.Table(Sync.Enable.OMS.Table, OMS.MIDI.ENABLED, 2, 0);	}		/*	Second Row:	*/	call Deposit.Switch(Sync.Sync.Mode, Get.Synclav.Sync.Mode);	call Update.Click.State.Vars;				/*	update variables based on click.track.mode	*/	call Deposit.Switch(Sync.Click.On.Off.Switch, Get.Synclav.Click.Sound);	do case (Get.Synclav.Click.Mode);		call deposit.switch(Sync.Click.Mode.Switch, Get.Synclav.Click.Disp.Format);				/*	0-bpm, 1-msec, 2-Film F/B, 3-SmpteF/B	*/		call deposit.switch(Sync.Click.Mode.Switch, 4);	/*	external		*/		call deposit.switch(Sync.Click.Mode.Switch, 5);	/*	live			*/	end;	disable.deposits = 0;						/*	for update click field	*/	call Update.Click.Field(Sync.Click.Rate, Fetch.Switch(Sync.Click.Mode.Switch));	/*	update click rate field	*/	disable.deposits = 1;						/*	because update click field change this	*/	call Deposit.Fixed.Point(Sync.BeatsPerMeas, Lookup.Beats.Per.Measure(loc(addr(sampled.actual.sequence.time.msb))));	call Deposit.Fixed.Point(Sync.Speed,		  SAMP.SPEED);	Disable.Deposits = false;	if update_dialog then call Update.Sync.Panel.Dialog;end UPDATE.SYNC.PANEL;/*	$page - routine to open sync panel	*/OPEN.SYNC.PANEL: proc public swapable;	dcl (sid,row,size)	fixed;	/*** Declare in Order ***/	dcl str	(8)			fixed;	if Sync.Group <> 0 then return;	if Allocate.Screen.Space(5,5,loc(addr(sid))) then do;		call Set.Panel.Menu.Highlight(6,1);		call Set.AEE.Panel.Info(6,row,size);	/*	find and set entry for panel	*/		call Define.Sync.Panel(row+1,size-1);		Sync.Screen.Space	= sid;		Sync.Row				= row+1;		Sync.Dialog.Mode	= 0;						/*	no dialog line is up yet	*/		if (Click.Track.Mode ilt 4)				/*	currently not in live click mode	*/		then call pid(live.click.track, 2);		/*	set up track 1 as eventual initial value	*/		call UPDATE.SYNC.PANEL(false);			/*	present initial values	*/	end;	else call Display.Notice(NT#NoMoreRoomOnScreen,ATTR#Normal,NulStr,0,0,0);end OPEN.SYNC.PANEL;CLOSE.SYNC.PANEL: proc public swapable;	if Sync.Group <> 0 then do;			/*	Group is defined		*/		call Set.Panel.Menu.Highlight(6,0);		call Set.AEE.Panel.Info(6,0,0);	/*	mark entry as unused	*/		if Sync.Dialog.Mode <> 0			/*	erase dialog line		*/		then call Define.Sync.Dialog(Sync.Row+3, 0);		Sync.Screen.Space = Erase.Screen.Space(Sync.Screen.Space);		Sync.Group = Ungroup.Objects(Sync.Group);		call Undefine.Object.Range(Sync.Alloc,Sync.Alloc+999);		call Select.New.Cur.Obj(Corner.Label,-1,-1);	end;end CLOSE.SYNC.PANEL;/*	Page - Set AEE Time Format	*//*	This routine updates the time format of all displayed variables	*//*	when the user switches time formats											*/SET.AEE.TIME.FORMAT: proc (format) public swapable;	dcl format			fixed;	dcl cueformat		fixed;	//	cue format for times		 (allow negative input if audition is on)	dcl durformat		fixed;	//	cue format for durations (disallow negative input regardless of audition mode)	dcl time_or_dur	fixed;	dcl i					fixed;	AEE.Time.Format = format;	PID(Saved.AEE.Time.Format, AEE.Time.Format);			/*	publish to real time software */   if (Current.Cue.Audition == false)   then cueformat = AEE.Time.Format|O#MSEC.RealTime|O#MSEC.Alt.Offset;	//	audition off: show alt offset (relative to DtoD) in cue time fields   else cueformat = AEE.Time.Format|O#MSEC.RealTime|O#MSEC.Allow.Minus;	//	audition on:  show seq offset and allow negative input	durformat = cueformat & !O#MSEC.Allow.Minus;									//	but disallow negative input for durations	call Sample.Syncl.Smgr.Globals;	/*	update smgr from synclav variables	*/	call Refresh.Big.Time.Display;	if Shuttle.Group <> 0 then do;		call Set.32Bit.MSEC.Display.Format(Shuttle.Time.Display,		 cueformat,   cf#time,		cf#default,	cf#default);		call Set.32Bit.MSEC.Display.Format(Shuttle.Cue.In.Time.Id,	 cueformat,   cf#time,		cf#default,	cf#default);		call Set.32Bit.MSEC.Display.Format(Shuttle.Edit.In.Time.Id,	 cueformat,   cf#time,		cf#default,	cf#default);		time_or_dur = Fetch.Switch(Shuttle.Cue.Out.Switch);		if (time_or_dur == 0) write("313") = cueformat;	//	time		else						 write("313") = durformat;	//	duration		call Set.32Bit.MSEC.Display.Format(Shuttle.Cue.Out.Time.Id,	 read("313"), time_or_dur,	cf#default,	cf#default);		time_or_dur = Fetch.Switch(Shuttle.Edit.Out.Switch);		if (time_or_dur == 0) write("313") = cueformat;	//	time		else						 write("313") = durformat;	//	duration		call Set.32Bit.MSEC.Display.Format(Shuttle.Edit.Out.Time.Id, read("313"), time_or_dur,	cf#default,	cf#default);		call Set.32Bit.MSEC.Display.Format(Shuttle.Cue.Sync.Time.Id, format|O#MSEC.RealTime|O#MSEC.Allow.Minus,cf#time,cf#default,cf#default);	end;	if Cue.Group <> 0 then do;		call Set.32Bit.MSEC.Display.Format(Cue.In.Time.Id,				 cueformat,   cf#time,		cf#default,	cf#default);		time_or_dur = Fetch.Switch(Cue.Out.Switch);		if (time_or_dur == 0) i = cueformat;	//	time		else						 i = durformat;	//	duration		call Set.32Bit.MSEC.Display.Format(Cue.Out.Time.Id,			 i,			  time_or_dur,	cf#default,	cf#default);		call Set.32Bit.MSEC.Display.Format(Cue.Offset.Time.Id,		 i,			  time_or_dur,	cf#default,	cf#default);		call Set.32Bit.MSEC.Display.Format(Cue.Sync.Time.Id,			 format|O#MSEC.RealTime|O#MSEC.Allow.Minus,cf#time,cf#default,cf#default);	end;	if Record.Group <> 0 then do;		call Set.32Bit.MSEC.Display.Format(Record.Disk.Start.Time,	 format\O#MSEC.Alt.Offset\O#MSEC.RealTime,cf#time,cf#default,cf#default);		call Set.32Bit.MSEC.Display.Format(Record.Disk.Stop.Time,	 format\O#MSEC.Alt.Offset\O#MSEC.RealTime,cf#time,cf#default,cf#default);		call Set.32Bit.MSEC.Display.Format(Record.Trig.Start.Time,	 format\O#MSEC.RealTime,cf#time,cf#default,cf#default);		call Set.32Bit.MSEC.Display.Format(Record.Trig.Stop.Time,	 format\O#MSEC.RealTime,cf#time,cf#default,cf#default);		call Set.32Bit.MSEC.Display.Format(Record.TSM.Length,			 format\O#MSEC.RealTime,cf#dur ,cf#default,cf#default);	end;	if Seq.Group <> 0 then do;		call UPDATE.SEQ.TIME.FORMATS;	end;	if Motion.Group <> 0 then do;		call Set.32Bit.MSEC.Display.Format(Locate.Time.Id,format,cf#time,cf#default,cf#default);	end;	if Sync.Group <> 0 then do;		if Sync.Dialog.Mode = 1 then do;			call Set.32Bit.MSEC.Display.Format(Sync.Dialog.Time1,								O#MSEC.Smpte\O#MSEC.Allow.Minus\O#MSEC.RealTime, cf#dur, cf#default, cf#default);			call Set.32Bit.MSEC.Display.Format(Sync.Dialog.Time2,								Sync.Dialog.Disp.Contents \ O#MSEC.Allow.Minus \ O#MSEC.RealTime,								cf#dur, cf#default, cf#default);		end;		if Sync.Dialog.Mode = 2 then do;			call Set.32Bit.MSEC.Display.Format(Sync.Dialog.Time1,								AEE.Time.Format\O#MSEC.Allow.Minus\O#MSEC.RealTime,								cf#time, cf#default, cf#default);			call Set.32Bit.MSEC.Display.Format(Sync.Dialog.Time2,								O#MSEC.SMPTE \ O#MSEC.Allow.Minus \ O#MSEC.RealTime,								cf#time, cf#default, cf#default);		end;		if Sync.Dialog.Mode = 3 then do;			i = FETCH.OBJECT.INFO(Sync.Dialog.Time1, O#MSEC.Format);			call Set.32Bit.MSEC.Display.Format(Sync.Dialog.Time1,								i \ O#MSEC.RealTime, cf#time, cf#default, cf#default);			i = FETCH.OBJECT.INFO(Sync.Dialog.Time2, O#MSEC.Format);			call Set.32Bit.MSEC.Display.Format(Sync.Dialog.Time2,								i \ O#MSEC.RealTime, cf#time, cf#default, cf#default);		end;	end;	if Optical.Group <> 0 then do;		call UPDATE.OPTICAL.PANEL;	end;end SET.AEE.TIME.FORMAT;
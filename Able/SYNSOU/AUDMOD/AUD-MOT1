/* AUD-MOT1 - routines to define motion panel   Modified:   03/26/91 - MWH - Add arg to Read Locate Stack routine   02/28/91 - MWH - Put more of AUD-MOT at the end of this file   10/03/88 - cj  - checked for live click track in locat time display   05/10/88 - EEG - Modified icon fills to work faster with termulator*/DEFINE.MOTION.PANEL.TOP.LINE: proc(row,size) swapable;   dcl row       fixed;   dcl size      fixed;   dcl lines(20) fixed;   dcl s1   (20) fixed;   dcl s2   (20) fixed;   dcl i         fixed;   dcl low.id    fixed;   dcl hi.id     fixed;   dcl (x1,y1)   fixed;   call Copy.String('SEQUENCER MOTION CONTROL',lines);   call Print.Panel.Title(row,lines);   call Set.Auto.Allocation.Id(Motion.Alloc);   call Set.Default.Action(O#ACT.Middle.Press);   low.id              = Define.Graphics.Box(S#AA,gpos.x(-10),gpos.y((row-1)*100),gpos.x(8010),gpos.y((row+size-1)*100),0);   call                  Load.Close.Box.Icon(misc.buf);   Motion.Size.Box     = Define.Graphics.Icon(S#AA,0,(row*100),1,misc.buf);   call Activate.Object.Range(Low.Id,Motion.Size.Box);   do i = Low.Id to Motion.Size.Box;      call Update.Object(i);   end;   /* Define Top Row */   call Set.Default.Attr(0,ATTR#Normal\ATTR#AltIntensity);   call Set.Default.Attr(1,ATTR#Normal\ATTR#AltIntensity\ATTR#Reverse);   call Set.Default.Action(O#ACT.Middle.Press\O#ACT.Prev.Obj);   /* define motion panel */   Motion.Control.Table = Define.Graphics.Button.Table   (S#AA, 0000, (row-1)*100, 2000, row*100, 5, 1, 1);   call COPY.STRING('START',s1);   call COPY.STRING('',     s2);   call Deposit.Graphics.Button.Table.Label(Motion.Control.Table, 0, 0, 1, s1, s2);   call COPY.STRING('STOP',s1);   call Deposit.Graphics.Button.Table.Label(Motion.Control.Table, 0, 1, 1, s1, s2);   call COPY.STRING('CONT',s1);   call Deposit.Graphics.Button.Table.Label(Motion.Control.Table, 0, 2, 1, s1, s2);   call COPY.STRING('REW',s1);   call Deposit.Graphics.Button.Table.Label(Motion.Control.Table, 0, 3, 1, s1, s2);   call COPY.STRING('FORWD',s1);   call Deposit.Graphics.Button.Table.Label(Motion.Control.Table, 0, 4, 1, s1, s2);   call Check.Next.Event;   /* define midi panel */   /* define midi track # field before midi table so we see */   /* mouse activity on it first                            */   x1 = gpos.x(3450)           /* middle of TRACK table cell   */        - shr(3*Hor.Char.Field(3) - Hor.Char.Gap(3),1) - 1; /* center a 3 char string */   y1 = gpos.y(row*100) + 11;  /* string position of lower row */   call Set.Default.Action(O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);   Midi.Recd.Track = DEFINE.GRAPHICS.STRING (S#AA, x1, y1, 3, 2, 0, 0);   call Set.Default.Action(O#ACT.Middle.Press\O#ACT.Prev.Obj);   Currently.Displayed.Recd.Trk = 0;   Midi.Control.Table = Define.Graphics.Button.Table   (S#AA, 2050, (row-1)*100, 3650, row*100, 4, 1, 1);   call COPY.STRING('MIDI', s1);   call COPY.STRING('RECRD',s2);   call Deposit.Graphics.Button.Table.Label(Midi.Control.Table, 0, 0, 1, s1, s2);   call COPY.STRING('PUNCH',s2);   call Deposit.Graphics.Button.Table.Label(Midi.Control.Table, 0, 1, 1, s1, s2);   call COPY.STRING('MIDI',s1);   call COPY.STRING('    ',s2);   call Deposit.Graphics.Button.Table.Label(Midi.Control.Table, 0, 2, 1, s1, s2);   call COPY.STRING('      ',s1);   call COPY.STRING('LOCATE',s2); /* smaller characters for locate */   call Deposit.Graphics.Button.Table.Label(Midi.Control.Table, 0, 2, 0, s1, s2);   call Check.Next.Event;   /* sequencer storage table */   Sequencer.Storage.Table = Define.Graphics.Button.Table   (S#AA, 3700, (row-1)*100, 5300, row*100, 4, 1, 1);   call COPY.STRING('DELETE', s1);   call COPY.STRING('',       s2);   call Deposit.Graphics.Button.Table.Label(Sequencer.Storage.Table, 0, 0, 0, s1, s2);   call COPY.STRING('RENAME', s1);   call Deposit.Graphics.Button.Table.Label(Sequencer.Storage.Table, 0, 1, 0, s1, s2);   call COPY.STRING('STORE' , s1);   call Deposit.Graphics.Button.Table.Label(Sequencer.Storage.Table, 0, 2, 0, s1, s2);   call COPY.STRING('RECALL', s1);   call Deposit.Graphics.Button.Table.Label(Sequencer.Storage.Table, 0, 3, 0, s1, s2);   call Check.Next.Event;   call                        Load.UpDown.Icon(Misc.Buf);   Sequencer.Switch.Button   = Define.Graphics.Icon(S#AA, 5300, row*100, 1, Misc.Buf);   x1 = gpos.x(5500)               /* tcol 56                  */      + shr(Hor.Char.Field(1),1);  /* with a 1/2 character gap */   y1 = gpos.y(row*100)            /* top row                  */      + 15                         /* centered                 */      - shr(Ver.Char.Size(1),1);   /* vertically center string */   call Set.Default.Action(0);   i = DEFINE.GRAPHICS.STRING (S#AA, x1, y1, 5, 1, 0, 0);   disable.deposits = 1;   call COPY.STRING('NAME:',Misc.Buf);   call DEPOSIT.GRAPHICS.STRING(i,Misc.Buf);   disable.deposits = 0;   x1 = gpos.x(5900);              /* tcol 59                  */   call Set.Default.Action(O#ACT.Middle.Press);   Sequencer.Name.Id = DEFINE.GRAPHICS.STRING (S#AA, x1, y1, 27, 1, 0, 0);   call Set.Default.Action(O#ACT.Middle.Press\O#ACT.Prev.Obj);   call Check.Next.Event;   Sequencer.Protect.Button = Define.Graphics.Button.Table   (S#AA, 7750, (row-1)*100, 8000, row*100, 1, 1, 0);   call COPY.STRING('P',s1);   call COPY.STRING('', s2);   call Deposit.Graphics.Button.Table.Label   (Sequencer.Protect.Button, 0, 0, 2, s1, s2);end DEFINE.MOTION.PANEL.TOP.LINE;Load.Motion.Divider.Icon:proc (arr) swapable;   dcl arr array;   write("313") = addr(arr(0));   /* there is a pattern here:  start at top row (first row) and go */   /* down to bottom row (ninth row).  for each row, draw any new   */   /* horizontal lines (beginning at left, going to right).  Then   */   /* draw any new vertical lines that start at the TOP of this     */   /* row (also going from left to right); draw them down as far    */   /* as they go                                                    */   /* top line */   MR13I     = O#ICON.Connect;        MR13i = - 10;            /* horiz bar under top line       */       MR13i =    0;            /* out to start of seq caption    */       MR13i = 5800;            /* area                           */       MR13i =    0;   MR13I = O#ICON.LineType;   MR13I = 1; /* dotted lines */   MR13I     = O#ICON.Connect;        MR13i = 5800;            /* horiz dotted bar between seq   */       MR13i =    0;            /* name and seq captions          */       MR13i = 7750;                   MR13i =    0;   MR13I = O#ICON.LineType;   MR13I = 0; /* solid  lines */   MR13I     = O#ICON.Connect;        MR13i = 7750;            /* solid horiz line under P       */       MR13i =    0;       MR13i = 8010;                   MR13i =    0;   MR13I     = O#ICON.Connect;  /* make it a double horiz line    */       MR13i = - 10;            /* out to verse name field        */       MR13i =   -3;       MR13i = 5800;       MR13i =   -3;   MR13i   = O#Icon.StartPoly;       MR13i    = "137";   MR13i    = O#Icon.MoveTo;   /* between FORWARD and MIDI section  */       MR13i = 2000;           /* through top row only              */       MR13i =  100;   MR13i  = O#Icon.Plot;       MR13i = 2000;       MR13i =    0;   /* double line for fill              */   MR13i    = O#Icon.MoveTo;         MR13i = 2050;       MR13i =    0;   MR13i  = O#Icon.Plot;       MR13i = 2050;                  MR13i =  100;   MR13i    = O#Icon.EndPoly;  /* filled                            */       MR13i = 2025;       MR13i =   50;   MR13i   = O#Icon.StartPoly;       MR13i    = "137";   MR13i    = O#Icon.MoveTo;  /* between MIDI secion and DELETE    */       MR13i = 3650;       MR13i =  100;   MR13i  = O#Icon.Plot;       MR13i = 3650;       MR13i =    0;   /* for fill                          */   MR13i    = O#Icon.MoveTo;         MR13i = 3700;       MR13i =    0;   MR13i  = O#Icon.Plot;       MR13i = 3700;                  MR13i =  100;   MR13i    = O#Icon.EndPoly;       MR13i = 3675;       MR13i =   50;   MR13i    = O#Icon.Connect;  /* between seq name and protect ind   */       MR13i = 7750;       MR13i =  100;       MR13i = 7750;       MR13i =    0;   /* second line */   MR13I     = O#ICON.Connect;  /* horiz line between locator label  */       MR13I = 2050;            /* and store/on/off items            */       MR13I =  -50;                   MR13I = 2850;       MR13I =  -50;   MR13I     = O#ICON.Connect;  /* vert bar between locator buttons  */       MR13I = 2050;            /* and store/on/off switches         */       MR13I =  -50;                   MR13I = 2050;       MR13I = -100;   MR13I     = O#ICON.Connect;  /* vert bar between locator label    */       MR13I = 2850;            /* and time field                    */       MR13I =  -50;                   MR13I = 2850;       MR13I = -100;   MR13I     = O#ICON.Connect;  /* vert bar between verse name       */       MR13I = 5800;            /* and sequence caption              */       MR13I =    0;                   MR13I = 5800;       MR13I = -100;   MR13I     = O#ICON.Connect;  /* make it a triple vertical line    */       MR13I = 5792;                   MR13I =    0;                   MR13I = 5792;       MR13I = -100;   MR13I     = O#ICON.Connect;  /* make it a triple vertical line    */       MR13I = 5808;                   MR13I =    0;                   MR13I = 5808;       MR13I = -100;   MR13I     = O#ICON.End;end Load.Motion.Divider.Icon;DEFINE.MOTION.PANEL.SECOND.LINE: proc(row) swapable;   dcl row       fixed;   dcl s1   (20) fixed;   dcl s2   (20) fixed;   dcl (i,j,k)   fixed;   dcl (x1,y1)   fixed;   dcl (vm)      fixed;   Locate.Button.Table = Define.Graphics.Button.Table   (S#AA, 0025, row*100+3, 2025, (row+1)*100, 10, 2, 0);   do i = 0 to 19;      load (i+1); div 10;      j = res; k = rem;      s1(0) = 2;      s1(1) = (asc.0+j) + shl(asc.0+k,8);      s2(0) = 0;      load i; div 10;      j = res; k = rem;      call Deposit.Graphics.Button.Table.Label      (Locate.Button.Table, j, k, 1, s1, s2);      if (i&3) = 3 then call Check.Next.Event;   end;   Currently.Highlighted.Locate.Button = 0;   Locator.Label.Button = Define.Graphics.Button.Table   (S#AA, 2050, row*100+3, 2850, row*100+50, 1, 1, 0);   call COPY.STRING('LOCATOR',s1);   call COPY.STRING(''       ,s2);   call Deposit.Graphics.Button.Table.Label(Locator.Label.Button, 0, 0, 0, s1, s2);   call Check.Next.Event;   Locate.Off.Store.Table = Define.Graphics.Button.Table   (S#AA, 2050, row*100+50, 2850, (row+1)*100, 2, 1, 1);   call COPY.STRING('STORE' ,s1);   call COPY.STRING(''      ,s2);   call Deposit.Graphics.Button.Table.Label(Locate.Off.Store.Table, 0, 0, 0, s1, s2);   call COPY.STRING('ON/OFF' ,s1);   call COPY.STRING(''       ,s2);   call Deposit.Graphics.Button.Table.Label(Locate.Off.Store.Table, 0, 1, 0, s1, s2);   call Set.Object.Mouse.Access(Locate.Off.Store.Table,O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);   Locate.Store.Button.Is.Active = 0;   call Check.Next.Event;   call                 Load.Take.Icon(Misc.Buf);   Locate.Take.Button = Define.Graphics.Icon(S#AA,2900, (row+1)*100, 1, Misc.Buf);   call Set.Default.Action(O#ACT.Middle.Press);   /* verse name fields */   vm = shr(30 - shl(Ver.Char.Size(1),1) - Ver.Char.Desc(1) , 1); /* vertical margin ver two row table cell for char size #1 */   x1 = gpos.x(4700);   y1 = gpos.y(row*100) - vm - Ver.Char.Size(1) + 2;   Verse.Name.Id.#1 = DEFINE.GRAPHICS.STRING (S#AA, x1, y1, 16, 1, 0, 0);   y1 = gpos.y((row+1)*100) + vm;   Verse.Name.Id.#2 = DEFINE.GRAPHICS.STRING (S#AA, x1, y1, 16, 1, 0, 0);   call Check.Next.Event;   Locate.Time.Id = Define.32Bit.MSEC(S#AA,row+1,32,14,AEE.Time.Format,cf#time,cf#default,cf#default);   call Set.Object.Mouse.Access(Locate.Time.Id,O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);   call Set.Object.Drag        (Locate.Time.Id,true,true);   vm = shr(30 - shl(Ver.Char.Size(1),1) - Ver.Char.Desc(1) , 1); /* vertical margin ver two row table cell for char size #1 */   x1 = gpos.x(5800)+shr(Hor.Char.field(1),1);   y1 = gpos.y(row*100) - vm - Ver.Char.Size(1) + 2;   Sequencer.Caption.#1 = DEFINE.GRAPHICS.STRING (S#AA, x1, y1, 32, 1, 0, 0);   y1 = gpos.y((row+1)*100) + vm;   Sequencer.Caption.#2 = DEFINE.GRAPHICS.STRING (S#AA, x1, y1, 32, 1, 0, 0);   call Check.Next.Event;end DEFINE.MOTION.PANEL.SECOND.LINE;DEFINE.MOTION.PANEL: proc(row,size) swapable;   dcl row       fixed;   dcl size      fixed;   call DEFINE.MOTION.PANEL.TOP.LINE(row, size);   call Load.Motion.Divider.Icon (Misc.Buf);   call Define.Graphics.Icon(S#AA,0,row*100,0,Misc.Buf);   call DEFINE.MOTION.PANEL.SECOND.LINE(row);   Motion.Group = Group.Objects(Motion.Group.Id,Motion.Alloc,Motion.Alloc+999,Get#Screen.Event);   call           Activate.Object.Range(Motion.Alloc,Motion.Alloc+999);   call Set.Object.Arrow.Links(Sequencer.Name.Id   ,ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Midi.Recd.Track     ,ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Verse.Name.Id.#1    ,ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Verse.Name.Id.#2    ,ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Sequencer.Caption.#1,ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Sequencer.Caption.#2,ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Locate.Time.Id,      ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);end DEFINE.MOTION.PANEL;dcl UPDATE.MOTION.PANEL    proc recursive;OPEN.MOTION.PANEL: proc public swapable;   dcl (sid,row,size) fixed;  /*** Declare in Order ***/   dcl tmp(AEE.Sequence.Name.Wlen) fixed;   if Motion.Group <> 0 then return;   if Allocate.Screen.Space(3,3,loc(addr(sid))) then do;      call SET.PANEL.MENU.HIGHLIGHT (9,1);      call Set.AEE.Panel.Info(9,row,size); /* find and set entry for panel */      call Define.Motion.Panel(row+1,size-1);      call Highlight.AEE.Sequencer.Motion.Panel;       call Highlight.AEE.Sequencer.Track.Display;      call Update.Motion.Panel.Mark.Start.Info;      call Read.In.Entire.AEE.Locate.Stack(1);            /* read in saved current sequence string */      call GID(AEE.Sequence.Name);      call COPY.IN(addr(tmp(0)), AEE.Sequence.Name.Wlen);      disable.deposits = 1;      call Deposit.Graphics.String(Sequencer.Name.Id, tmp);      disable.deposits = 0;      call Cache.Seq.Cat.If.Possible(tmp);      call Update.Motion.Panel;      Motion.Screen.Space = sid;      Motion.Row  = row+1;      Motion.Size = size-1;   end;   else call Display.Notice(NT#NoMoreRoomOnScreen,ATTR#Normal,NulStr,0,0,0);end OPEN.MOTION.PANEL;CLOSE.MOTION.PANEL: proc public swapable;   if Motion.Group <> 0 then do;       /* Group is defined */      call SET.PANEL.MENU.HIGHLIGHT (9,0);      if  (seq.group <> 0)      and (seq.row = motion.row + motion.size)      then do;         call SET.PANEL.MENU.HIGHLIGHT (5,0);      end;      call Set.AEE.Panel.Info(9,0,0);  /* mark entry as unused */      Motion.Screen.Space = Erase.Screen.Space(Motion.Screen.Space);      Motion.Group = Ungroup.Objects(Motion.Group);      call Undefine.Object.Range(Motion.Alloc,Motion.Alloc+999);      call Select.New.Cur.Obj(Corner.Label,-1,-1);      /* must close sequence panel if it abuts us, since we just */      /* erased the top of its box.  also other panels opend     */      /* just above it would not know where to put there         */      /* dialog boxes                                            */      if  (seq.group <> 0)      and (seq.row = motion.row + motion.size)      then do;         call CLOSE.SEQUENCER.PANEL;      end;   end;end CLOSE.MOTION.PANEL;UPDATE.MOTION.PANEL: proc public swapable;   if Motion.Group = 0 then return;end UPDATE.MOTION.PANEL;GET.MOTION.DIALOG: proc (nam,message,new,exists)  returns (fixed) swapable;   dcl nam                      array;  /* current seq name      */   dcl message                  fixed;  /* message #             */   dcl new                      array;  /* new name (for rename) */   dcl exists                   fixed;  /* true if exists        */   dcl row                      fixed;   dcl (i,j)                    fixed;   dcl Message.Label            fixed;   dcl OK.Button                fixed;   dcl Cancel.Button            fixed;   dcl New.Name                 fixed;   dcl exit                     fixed;   dcl col(1)                   fixed;   /* Message:  0 - delete sequence from disk                1 - rename sequence on disk                2 - store sequence to disk                3 - recall sequence from disk   */   /* put motion dialog box at bottom of sequence panel if */   /* it abbuts us.  otherwise put dialog box at bottom    */   /* of us                                                */   call Check.Next.Event;   if  (seq.group <> 0)   and (seq.row = motion.row + motion.size)   then row = Seq.Row    + Seq.Size;   else row = Motion.Row + Motion.Size;   call Set.Auto.Allocation.Id(Motion.Alloc+500);   call Set.Default.Action(O#ACT.Middle.Press);   call Set.Default.Attr(0,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);   call Set.Default.Attr(1,ATTR#Normal\ATTR#Reverse);   do case (message);      do;         call COPY.STRING('Click to UNSAVE sequence "',Misc.Buf);         call APPEND.TO.STR(Misc.Buf,Nam);         call APPEND.TO.STR(Misc.Buf,'"');      end;      do;         call COPY.STRING('Enter new name for sequence "',Misc.Buf);         call APPEND.TO.STR(Misc.Buf,Nam);         call APPEND.TO.STR(Misc.Buf,'" -->');      end;      do;         if exists then do;            call COPY.STRING('Click to REPLACE sequence "',Misc.Buf);            call APPEND.TO.STR(Misc.Buf,Nam);            call APPEND.TO.STR(Misc.Buf,'"');         end;         else do;            call COPY.STRING('Click to SAVE new sequence "',Misc.Buf);            call APPEND.TO.STR(Misc.Buf,Nam);            call APPEND.TO.STR(Misc.Buf,'"');         end;      end;      do;         call COPY.STRING('Click to RECALL sequence "',Misc.Buf);         call APPEND.TO.STR(Misc.Buf,Nam);         call APPEND.TO.STR(Misc.Buf,'"');      end;   end;   if misc.buf(0) > 60 then misc.buf(0) = 60;   Message.Label    = Define.Label(S#AA,Row,0,0,Misc.Buf);   if message <> 1   then OK.Button   = Define.Label(S#AA,Row,60,0,'[ OK ]'  );   else New.Name    = Define.String(S#AA, Row, Misc.buf(0)+1, 8, O#STR.General);   Cancel.Button    = Define.Label(S#AA,Row,70,0,'[CANCEL]');   call Deposit.Object.Info(Message.Label,O#EraseMethod,O#ERAS.Whole.Line);   call Set.Default.Attr(0,ATTR#Normal);   call Set.Default.Attr(1,ATTR#AltIntensity\ATTR#Reverse);   /* 10 Objects MAX in Dialog Bar for now */   call Activate.Object.Range(Motion.Alloc+500,Motion.Alloc+510);   if message = 1   then call Select.New.Cur.Obj(New.Name,-1,-1);   else call Select.New.Cur.Obj(Corner.Label,-1,-1);   do while exit = 0;      i = Get.Next.Screen.Event;      if (Screen.Event.Group = Motion.Group)      then do;         if i = Get.Screen.Event then do;            if Screen.Event.Id = OK.Button then do;               if (Screen.Event.Info = S#MouseSelect  )               or (Screen.Event.Info = S#MouseActivate)               then do;                  exit = 1;               end;            end;            else if (Screen.Event.Id = Cancel.Button) then do;               if Screen.Event.Info = S#MouseSelect               then exit = -1;            end;            else if (Screen.Event.Id = Sequencer.Storage.Table)            then do;               call Map.Graphics.Button.Table.Mouse.Press(Sequencer.Storage.Table, col);               if  (Screen.Event.Info = S#MouseSelect)               and (col(0) = message)               and (message <> 1    )               then exit = 1;               else do;                  call Display.Notice(NT#MustRespondToDialog,ATTR#Reverse,NulStr,1,0,0);                  if message = 1                  then call Select.New.Cur.Obj(New.Name,-1,-1);                  else call Select.New.Cur.Obj(Corner.Label,-1,-1);               end;            end;            else if Screen.Event.Id = New.Name then do;               if Screen.Event.Info = S#Deposit               then do;                  call Fetch.String(New.Name, new);                  exit = 1;               end;            end;            else if (Screen.Event.Info = S#MouseSelect)            or      (Screen.Event.Info = S#MouseActivate)            then do;               call Display.Notice(NT#MustRespondToDialog,ATTR#Reverse,NulStr,1,0,0);               if message = 1               then call Select.New.Cur.Obj(New.Name,-1,-1);               else call Select.New.Cur.Obj(Corner.Label,-1,-1);            end;         end;      end;      else do;  /* Outside group; <> Cue.Group */         if  (i = Get.Screen.Event) then do;            if ((Screen.Event.Info = S#MouseSelect)            or  (Screen.Event.Info = S#MouseActivate))            then do;               call Display.Notice(NT#MustRespondToDialog,ATTR#Reverse,NulStr,2,0,0);               if message = 1               then call Select.New.Cur.Obj(New.Name,-1,-1);               else call Select.New.Cur.Obj(Corner.Label,-1,-1);            end;         end;      end;   end;   call Erase.Object(Message.Label);  /* Erases message and whole line */   call Undefine.Object.Range(Motion.Alloc+500,Motion.Alloc+599);   call Select.New.Cur.Obj(Corner.Label,-1,-1);   call DISPLAY.NOTICE (NT#EraseNotice,ATTR#Normal,NulStr,0,0,0);   call REMOVE.ERR;      return (exit > 0);   /* if exit < 0 then return false; else true */end GET.MOTION.DIALOG;
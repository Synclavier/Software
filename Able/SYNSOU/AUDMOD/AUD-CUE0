/*	:SYNSOU:AUDMOD:AUD-CUE0  $TITLE  Combined Cue Trim & Cue Editor panels

Modified:
2001/02/19 - TY  - Make modifications needed for 24 hour wrap.
1991/06/21 - cj  - Added record audition control button
1989/07/11 - cj  - split code into system code (lod-cue1) and display
						 code (left here)
1989/05/20 - cj  - allow entry of cue fade in & out time
1989/05/17 - SGS - Fixed lots of bugs for alpha release
1989/05/05 - cj  - removed unused 'shuttle.cue.place.mode.button'
1989/05/02 - TSS - Merged changes for Optical disk to DTD transfer project
1988/10/03 - cj  - set remap bit for correct live click track display
1988/04/04 - MWH - Add buttons over left arrows of scroll bars for waves
1988/03/18 - MWH - Add LOD wave display data compression and transfer
1988/03/17 - SGS - Split AUD-CUE into AUE-CUEA and AUD-CUEB
*/

/*	Id's and variables for Cue Editor and Cue Trim:	*/

dcl Cue.Group						fixed public;
dcl Shuttle.Group					fixed public;

dcl Cue.Row							fixed;
dcl Cue.Size						fixed;

dcl Shuttle.Screen.Space		fixed;
dcl Shuttle.Row					fixed;
dcl Shuttle.Size					fixed;

dcl Cue.Size.Box					fixed;
dcl Shuttle.Size.Box				fixed;

/*	Cue Trim Panel Id's:	*/

/*	top row:	*/

dcl Cue.Protect.Indicator		fixed;
dcl Cue.Switch.Button			fixed;
dcl Cue.Name.Incr.Button		fixed;
dcl Cue.Name.Id					fixed;
dcl Cue.Comment.Id				fixed;

/*	second row:	*/

dcl Cue.Play.Button				fixed;
dcl Cue.Take.In.Button			fixed;
dcl Cue.Exchange.In.Button		fixed;
/*	 Cue.In.Label					*/
dcl Cue.In.Time.Id				fixed public;
/*	 Cue.Ramp.Up.Button			*/
dcl Cue.Fade.In.Time.Id			fixed;

dcl Cue.Take.Sync.Button		fixed;
/*	 Cue.Sync.Switch				*/
dcl Cue.Sync.Time.Id				fixed public;
dcl Cue.Sync.Lock.Id				fixed;
dcl Cue.Source.Table.Type		fixed;
dcl Cue.Source.Table.Id			fixed;

/*	third row	*/

dcl Cue.Pause.Button				fixed;
dcl Cue.Take.Out.Button			fixed;
dcl Cue.Exchange.Out.Button	fixed;
dcl Cue.Out.Switch				fixed public;
dcl Cue.Out.Time.Id				fixed public;
/*	 Cue.Ramp.Down.Button		*/
dcl Cue.Fade.Out.Time.Id		fixed;

dcl Cue.Take.Offs.Button		fixed;
dcl Cue.Offset.Switch			fixed;
dcl Cue.Offset.Time.Id			fixed public;
dcl Cue.Offset.Play.Id			fixed;

/*	fourth line	*/

dcl Cue.Backup.Button			fixed;
dcl Cue.Slow.Play.Button		fixed;
dcl Cue.Fast.Play.Button		fixed;
dcl Cue.Block.Button				fixed;
dcl Cue.Save.Button				fixed;
dcl Cue.Audition.Button			fixed;

dcl Cue.Place.Inc.Button		fixed;
dcl Cue.Place.Button				fixed;
dcl Cue.Place.Track.Field		fixed public;
dcl Cue.Place.Mode.Button		fixed;

dcl Cue.Recall.Button			fixed;
dcl Cue.Delete.Button			fixed;
dcl Cue.Rename.Button			fixed;
dcl Cue.STM.Button				fixed;

/*	Cue Editor Id's:	*/

/*	top row:	*/

dcl Shuttle.Switch.Button				fixed;
dcl Shuttle.Name.Incr.Button			fixed;
dcl Shuttle.Name.Id						fixed;

dcl Shuttle.Project.Switch				fixed;
dcl Shuttle.Proj.Capt.Switch			fixed;

dcl Shuttle.Comment.Id					fixed;
dcl Shuttle.Protect.Indicator			fixed;

dcl Shuttle.Project.Number				fixed;
dcl Shuttle.Project.Dot					fixed;
dcl Shuttle.Project.Name				fixed;

/*	second row:	*/

dcl Shuttle.Time.Display				fixed public;
dcl Shuttle.Symbol.Button				fixed;
dcl Shuttle.Flag.Region					fixed;
dcl Shuttle.Edit.Button					fixed;
dcl Shuttle.Disk.Table					fixed;

/*	Third row:	*/

dcl Shuttle.Play.Button					fixed;
dcl Shuttle.Zoom.In.Button				fixed;
dcl Shuttle.Zoom.Back.Button			fixed;
dcl Shuttle.Left.Scisors.Park			fixed;
dcl Shuttle.Right.Scisors.Park		fixed;


/*	Fourth row:	*/

dcl Shuttle.Pause.Button				fixed;
dcl Shuttle.Fast.Play.Button			fixed;
dcl Shuttle.Sbar.Control.Table		fixed;
dcl Shuttle.Coarse.Bar					fixed public;
dcl Shuttle.CWave.Button				fixed;

/*	Fifth row:	*/

dcl Shuttle.Stop.Button					fixed;
dcl Shuttle.Slow.Play.Button			fixed;
dcl Shuttle.Fine.Bar						fixed public;
dcl Shuttle.FWave.Button				fixed;
dcl Shuttle.Memory.Type					fixed;
dcl Shuttle.Memory.Table				fixed public;

/*	Sixth row:	*/

dcl Shuttle.Cue.Block.Button			fixed;
dcl Shuttle.Cue.Save.Button			fixed;
dcl Shuttle.Preview.Edit.Button		fixed;

dcl Shuttle.Reel.Table					fixed;
dcl Shuttle.Leader.Reel					fixed;
dcl Shuttle.Displaced.Audio.Reel		fixed;	/*	defined only during a SLIDE edit	*/
dcl Shuttle.Edit.Table					fixed;

dcl Shuttle.Cue.Play.Button			fixed;
/*	 Shuttle.In.Label						*/
dcl Shuttle.Cue.Take.In.Button		fixed;
dcl Shuttle.Cue.Exchange.In.Button	fixed;
dcl Shuttle.Cue.In.Time.Id				fixed public;

/*	Seventh row:	*/

/*	 Shuttle.Cue.Sync.Label				*/
dcl Shuttle.Cue.Sync.Switch			fixed;
dcl Shuttle.Cue.Audition.Button		fixed;

dcl Shuttle.Cue.Backup.Button			fixed;
dcl Shuttle.Cue.Forward.Button		fixed;
dcl Shuttle.Cue.Out.Switch				fixed public;
dcl Shuttle.Cue.Take.Out.Button		fixed;
dcl Shuttle.Cue.Exchange.Out.Button	fixed;
dcl Shuttle.Cue.Out.Time.Id			fixed public;

/*	Eighth Row	*/

dcl Shuttle.Cue.Take.Sync.Button		fixed;
dcl Shuttle.Cue.Sync.Time.Id			fixed public;
dcl Shuttle.Cue.Sync.Lock.Id			fixed;

dcl Shuttle.Cue.Edit.Play.Id			fixed;
/*	 Shuttle.Edit.Label					*/
dcl Shuttle.Take.Edit.In.Button		fixed;
dcl Shuttle.Exchange.Edit.In.Button	fixed;
dcl Shuttle.Edit.In.Time.Id			fixed public;

/*	Ninth Row	*/

dcl Shuttle.Cue.Place.Button				fixed;
/*	 Shuttle.Cue.Place.Track.Label		*/
dcl Shuttle.Cue.Place.Track.Field		fixed public;

dcl Shuttle.Leader.Button					fixed;

dcl Shuttle.Edit.Backup.Button			fixed;
dcl Shuttle.Edit.Forward.Button			fixed;
dcl Shuttle.Edit.Out.Switch				fixed public;
dcl Shuttle.Take.Edit.Out.Button			fixed;
dcl Shuttle.Exchange.Edit.Out.Button	fixed;
dcl Shuttle.Edit.Out.Time.Id				fixed public;

/*	Other State Variables:	*/

dcl Fine.Shuttle.Wave	fixed public;
dcl Coarse.Shuttle.Wave	fixed public;

dcl Orig.In		(1)	fixed;	/*	holds original edit region during pending SLIDE	*/
dcl Orig.Out	(1)	fixed;

/*	$page - display protect field indicator	*/

/*	This routine sets the Cue Trim panel and Cue Edit panel display	*/
/*	of the "Cue Protect" indicator												*/

DISPLAY.CURRENT.CUE.PROTECT: proc swapable;

	if Cue.Group <> 0 then do;
		if Current.Cue.Protect <> 0 then do;
			call Set.Object.Attr(Cue.Protect.Indicator,0,ATTR#Reverse);
			call Set.Object.Attr(Cue.Protect.Indicator,1,ATTR#Reverse);
		end;
		else do;
			call Set.Object.Attr(Cue.Protect.Indicator,0,ATTR#NoReverse);
			call Set.Object.Attr(Cue.Protect.Indicator,1,ATTR#NoReverse);
		end;
	end;

	if Shuttle.Group <> 0 then do;
		if Current.Cue.Protect <> 0 then do;
			call Set.Object.Attr(Shuttle.Protect.Indicator,0,ATTR#Reverse);
			call Set.Object.Attr(Shuttle.Protect.Indicator,1,ATTR#Reverse);
		end;
		else do;
			call Set.Object.Attr(Shuttle.Protect.Indicator,0,ATTR#NoReverse);
			call Set.Object.Attr(Shuttle.Protect.Indicator,1,ATTR#NoReverse);
		end;
	end;

end DISPLAY.CURRENT.CUE.PROTECT;

/*	$page - Deposit.Audition.Button.Display	*/

/*	This routine sets the highlighting for the Audition Button	*/
/*	on the cue editor, the shuttle editor, the optical xfer	*/
/*	panel and the record panel											*/

DEPOSIT.AUDITION.BUTTON.DISPLAY:proc public swapable;
	dcl cueformat		fixed;	//	cue format for times		 (allow negative input if audition is on)
	dcl durformat		fixed;	//	cue format for durations (disallow negative input regardless of audition mode)
	dcl tmpformat		fixed;	//	could be either cueformat or durformat
	dcl time_or_dur	fixed;

	dcl Record.Audition.Button	fixed external;

	if (Current.Cue.Audition == false)
	then cueformat = AEE.Time.Format|O#MSEC.RealTime|O#MSEC.Alt.Offset;	//	audition off: show alt offset (relative to DtoD) in cue time fields
	else cueformat = AEE.Time.Format|O#MSEC.RealTime|O#MSEC.Allow.Minus;	//	audition on:  show seq offset and allow negative input
	durformat = cueformat & !O#MSEC.Allow.Minus;									//	but disallow negative input for durations

	if Record.Group <> 0 then do;
		if Current.Cue.Audition <> 0 then do;
			call Set.Object.Attr(Record.Audition.Button,0,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
			call Set.Object.Attr(Record.Audition.Button,1,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
		end;
		else do;
			call Set.Object.Attr(Record.Audition.Button,0,ATTR#Normal\ATTR#AltIntensity);
			call Set.Object.Attr(Record.Audition.Button,1,ATTR#Normal\ATTR#AltIntensity);
		end;
		call Update.Object(Record.Audition.Button);	/*	to make system seem faster	*/
	end;

	if Cue.Group <> 0 then do;
		if Current.Cue.Audition <> 0 then do;
			call Set.Object.Attr(Cue.Audition.Button,0,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
			call Set.Object.Attr(Cue.Audition.Button,1,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
		end;
		else do;
			call Set.Object.Attr(Cue.Audition.Button,0,ATTR#Normal\ATTR#AltIntensity);
			call Set.Object.Attr(Cue.Audition.Button,1,ATTR#Normal\ATTR#AltIntensity);
		end;
		call Update.Object(Cue.Audition.Button);		/*	to make system seem faster	*/
		call Set.32Bit.MSEC.Display.Format(Cue.In.Time.Id,		 cueformat, cf#time,		 cf#default, cf#default);
		time_or_dur = Fetch.Switch(Cue.Out.Switch);
		if (time_or_dur == 0) tmpformat = cueformat;	//	time
		else						 tmpformat = durformat;	//	duration
		call Set.32Bit.MSEC.Display.Format(Cue.Out.Time.Id,	 tmpformat, time_or_dur, cf#default, cf#default);
		call Set.32Bit.MSEC.Display.Format(Cue.Offset.Time.Id, tmpformat, time_or_dur, cf#default, cf#default);
	end;

	if Shuttle.Group <> 0 then do;
		if Current.Cue.Audition <> 0 then do;
			call Set.Object.Attr(Shuttle.Cue.Audition.Button,0,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
			call Set.Object.Attr(Shuttle.Cue.Audition.Button,1,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
		end;
		else do;
			call Set.Object.Attr(Shuttle.Cue.Audition.Button,0,ATTR#Normal\ATTR#AltIntensity);
			call Set.Object.Attr(Shuttle.Cue.Audition.Button,1,ATTR#Normal\ATTR#AltIntensity);
		end;
		call Update.Object(Shuttle.Cue.Audition.Button);	/*	to make system seem faster	*/
		call Set.32Bit.MSEC.Display.Format(Shuttle.Time.Display,		 cueformat,   cf#time,		cf#default, cf#default);
		call Set.32Bit.MSEC.Display.Format(Shuttle.Cue.In.Time.Id,	 cueformat,   cf#time,		cf#default, cf#default);
		call Set.32Bit.MSEC.Display.Format(Shuttle.Edit.In.Time.Id,	 cueformat,   cf#time,		cf#default, cf#default);
		time_or_dur = Fetch.Switch(Shuttle.Cue.Out.Switch);
		if (time_or_dur == 0) write("313") = cueformat;		//	time
		else						 write("313") = durformat;		//	duration
		call Set.32Bit.MSEC.Display.Format(Shuttle.Cue.Out.Time.Id,	 read("313"), time_or_dur, cf#default, cf#default);
		time_or_dur = Fetch.Switch(Shuttle.Edit.Out.Switch);
		if (time_or_dur == 0) write("313") = cueformat;		//	time
		else						 write("313") = durformat;		//	duration
		call Set.32Bit.MSEC.Display.Format(Shuttle.Edit.Out.Time.Id, read("313"), time_or_dur, cf#default, cf#default);
	end;

	if (Optical.Group <> 0) and (GID(AEE.Opt.Width.Mode)=0)then do;
		if Current.Cue.Audition <> 0 then do;
			call Set.Object.Attr(Optical.Audition.Button,0,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
			call Set.Object.Attr(Optical.Audition.Button,1,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);
		end;
		else do;
			call Set.Object.Attr(Optical.Audition.Button,0,ATTR#Normal\ATTR#AltIntensity);
			call Set.Object.Attr(Optical.Audition.Button,1,ATTR#Normal\ATTR#AltIntensity);
		end;
		call Update.Object(Optical.Audition.Button);	/*	to make system seem faster	*/
	end;

end DEPOSIT.AUDITION.BUTTON.DISPLAY;

/*	$page - DEPOSIT.CUE.TIMES.DISPLAY	*/

/*	This routine looks up information for the current cue from	*/
/*	the static global variables.  It computes the display			*/
/*	settings based upon the desired display modes					*/

/*	both the shuttle editor and cue editor are kept up to date	*/

DEPOSIT.CUE.TIMES.DISPLAY:proc public swapable;
	dcl cuelen	(1)	fixed;
	dcl temp		(1)	fixed;
	dcl temp1	(1)	fixed;

	disable.deposits = 1;

	/*	compute cue length to have it handy:			*/

	call SUB32(Cue.Out.Time,Cue.In.Time,cuelen);

	/*	compute cue in/out time display if audition:	*/

	if Current.Cue.Audition <> 0 then do;		/*	show sequencer times in in/out field	*/
		call ADD32(Cue.Trig.Time,cuelen,temp);	/*	get trig time of cue end	*/
		if Cue.Group <> 0 then do;					/*	update cue display			*/
			call Deposit.32Bit.Msec(Cue.In.Time.Id,Cue.Trig.Time,Zero.Zero);
			if Fetch.Switch(Cue.Out.Switch)<>0	/*	if showing duration, then do so			*/
			then call Deposit.32Bit.Msec(Cue.Out.Time.Id,Cue.Trig.Time,cuelen);
			else call Deposit.32Bit.Msec(Cue.Out.Time.Id,temp,Zero.Zero);	/*	else show end time	*/
		end;
		if Shuttle.Group <> 0 then do;			/*	update shuttle display		*/
			call Deposit.32Bit.Msec(Shuttle.Cue.In.Time.Id,Cue.Trig.Time,Zero.Zero);
			if Fetch.Switch(Shuttle.Cue.Out.Switch)<>0
			then call Deposit.32Bit.Msec(Shuttle.Cue.Out.Time.Id,Cue.Trig.Time,cuelen);
			else call Deposit.32Bit.Msec(Shuttle.Cue.Out.Time.Id,temp,Zero.Zero);
		end;
	end;

	/*	compute cue in/out time display if not audition:	*/

	else do;										/*	show disk times	*/
		if Cue.Group <> 0 then do;			/*	update cue			*/
			call ADD32(Cue.In.Time, Cue.Time.Display.Offset, Temp);
			call Deposit.32Bit.Msec(Cue.In.Time.Id,Temp,Zero.Zero);
			if Fetch.Switch(Cue.Out.Switch)<>0
			then call Deposit.32Bit.Msec(Cue.Out.Time.Id,Temp,cuelen);
			else do;
				call ADD32(Cue.Out.Time, Cue.Time.Display.Offset, Temp);
				call Deposit.32Bit.Msec(Cue.Out.Time.Id,Temp,Zero.Zero);
			end;
		end;
		if Shuttle.Group <> 0 then do;	/*	update shuttle		*/
		call ADD32(Cue.In.Time, Cue.Time.Display.Offset, Temp);
			call Deposit.32Bit.Msec(Shuttle.Cue.In.Time.Id, Temp,Zero.Zero);
			if Fetch.Switch(Shuttle.Cue.Out.Switch)<>0
			then call Deposit.32Bit.Msec(Shuttle.Cue.Out.Time.Id,Temp,cuelen);
			else do;
				call ADD32(Cue.Out.Time, Cue.Time.Display.Offset, Temp);
				call Deposit.32Bit.Msec(Shuttle.Cue.Out.Time.Id,Temp,Zero.Zero);
			end;
		end;
	end;

	/*	sync display is easy:	*/

	if Cue.Group <> 0 then do;
		call Deposit.32Bit.Msec(Cue.Sync.Time.Id,Cue.Sync.Time,Zero.Zero);
	end;
	if Shuttle.Group <> 0 then do;
		call Deposit.32Bit.Msec(Shuttle.Cue.Sync.Time.Id,Cue.Sync.Time,Zero.Zero);
	end;
	if (Optical.Group <> 0) and (GID(AEE.Opt.Width.Mode)=0) then do;
		call Deposit.32Bit.MSec(Optical.Place.Time,Cue.Sync.Time,Zero.Zero);
	end;

	/*	compute cue trim panel offset display:	*/

	if Cue.Group <> 0 then do;
		if Fetch.Switch(Cue.Out.Switch)<>0	/*	duration - show it		*/
		then do;
			call SUB32(Cue.Offs.Time,Cue.In.Time,temp);	/*	get length to offset point	*/
			if Current.Cue.Audition <> 0
			then call Deposit.32Bit.Msec(Cue.Offset.Time.Id,Cue.Trig.Time,temp);
			else do;
				call ADD32(Cue.In.Time, Cue.Time.Display.Offset, temp1);
				call Deposit.32Bit.Msec(Cue.Offset.Time.Id,temp1,temp);
			end;
		end;
		else do;										/*	compute abs (end) time	*/
			if Current.Cue.Audition <> 0 then do;			/*	show sequencer times in disk in/out field	*/
				call SUB32(Cue.Offs.Time,Cue.In.Time,temp);
				call ADD32(Cue.Trig.Time,temp,temp);
				call Deposit.32Bit.Msec(Cue.Offset.Time.Id,temp,Zero.Zero);
			end;
			else do;
				call ADD32(Cue.Offs.Time, Cue.Time.Display.Offset, temp);
				call Deposit.32Bit.Msec(Cue.Offset.Time.Id,temp,Zero.Zero);
			end;
		end;
	end;

	/*	show edit in/out times on cue edit panel	*/

	if Shuttle.Group <> 0 then do;

		if COM32(Cue.In.Time,Cue.Edit.In.Time) = lw#ieq
		then call Set.Object.Attr(Shuttle.Edit.In.Time.Id,0,ATTR#Normal\ATTR#AltIntensity);
		else call Set.Object.Attr(Shuttle.Edit.In.Time.Id,0,ATTR#Normal);

		if COM32(Cue.Out.Time,Cue.Edit.Out.Time) = lw#ieq
		then call Set.Object.Attr(Shuttle.Edit.Out.Time.Id,0,ATTR#Normal\ATTR#AltIntensity);
		else call Set.Object.Attr(Shuttle.Edit.Out.Time.Id,0,ATTR#Normal);

		if Current.Cue.Audition <> 0 then do;	/*	show sequencer times in disk in/out field	*/
			call SUB32(Cue.Edit.In.Time,Cue.In.Time,temp);
			call ADD32(Cue.Trig.Time,temp,temp);
			call Deposit.32Bit.Msec(Shuttle.Edit.In.Time.Id,temp,Zero.Zero);
		end;
		else do;
			call ADD32(Cue.Edit.In.Time, Cue.Time.Display.Offset, Temp);
			call Deposit.32Bit.Msec(Shuttle.Edit.In.Time.Id,Temp,Zero.Zero);
		end;

		/*	Show edit out/len field on cue edit panel:	*/

		if Fetch.Switch(Shuttle.Edit.Out.Switch)<>0	/*	duration - show it	*/
		then do;
			call SUB32(Cue.Edit.Out.Time,Cue.Edit.In.Time,temp);	/*	get length of edit region				*/
			if Current.Cue.Audition <> 0 then do;
				call SUB32(Cue.Edit.In.Time,Cue.In.Time,temp1);		/*	get length from cue in to edit in	*/
				call ADD32(Cue.Trig.Time, temp1, temp1);				/*	get sequence time of edit in			*/
				call Deposit.32Bit.Msec(Shuttle.Edit.Out.Time.Id,temp1,temp);
			end;
			else do;
				call ADD32(Cue.Edit.In.Time, Cue.Time.Display.Offset, temp1);
				call Deposit.32Bit.Msec(Shuttle.Edit.Out.Time.Id,temp1,temp);
			end;
		end;

		/*	else show absolute (ie end) time	*/

		else do;
			if Current.Cue.Audition <> 0 then do;		/*	show sequencer times in disk in/out field	*/
				call SUB32(Cue.Edit.Out.Time,Cue.In.Time,temp);
				call ADD32(Cue.Trig.Time,temp,temp);
				call Deposit.32Bit.Msec(Shuttle.Edit.Out.Time.Id,temp,Zero.Zero);
			end;
			else do;
				call ADD32(Cue.Edit.Out.Time, Cue.Time.Display.Offset, temp);
				call Deposit.32Bit.Msec(Shuttle.Edit.Out.Time.Id, temp, Zero.Zero);
			end;
		end;
	end;

	/*	now set attributes and erase/display offset field	*/
	/*	of cue editor													*/

	if Cue.Group <> 0 then do;						/*	update cue editor	*/

		if Current.Cue.Sync.Mode<>1 then do;	/*	if offset time is not displayed	*/
			call Set.Term.Attr(ATTR#Normal);		/*	to avoid smgr bug	*/
			call Erase.Object(Cue.Offset.Time.Id);
			if (Cur.Obj.Id = Cue.Offset.Time.Id)
			then call Select.New.Cur.Obj(Corner.Label,-1,-1);
			call Disable.Object(Cue.Offset.Time.Id);
		end;
		else do;
			call Enable.Object(Cue.Offset.Time.Id);
		end;
	end;

	disable.deposits = 0;

end DEPOSIT.CUE.TIMES.DISPLAY;

/*	$page - set attributes for sync field	*/


/*	this routine is called to set the display attributes for	*/
/*	the sync field, depending on whether the field is			*/
/*	locked																	*/

DEPOSIT.SYNC.FIELD.ATTRIBUTES:proc swapable;
	if Shuttle.Group <> 0 then do;
		if Current.Sync.Locked <> 0 then do;
			call Set.Object.Attr(Shuttle.Cue.Sync.Time.Id,0,ATTR#Normal\ATTR#Reverse);
			call Set.Object.Attr(Shuttle.Cue.Sync.Time.Id,1,ATTR#Normal\ATTR#Reverse);
		end;
		else do;
			call Set.Object.Attr(Shuttle.Cue.Sync.Time.Id,0,ATTR#Normal);
			call Set.Object.Attr(Shuttle.Cue.Sync.Time.Id,1,ATTR#Normal\ATTR#AltIntensity\ATTR#Reverse);
		end;
	end;
	if Cue.Group <> 0 then do;
		if Current.Sync.Locked <> 0 then do;
			call Set.Object.Attr(Cue.Sync.Time.Id,0,ATTR#Normal\ATTR#Reverse);
			call Set.Object.Attr(Cue.Sync.Time.Id,1,ATTR#Normal\ATTR#Reverse);
		end;
		else do;
			call Set.Object.Attr(Cue.Sync.Time.Id,0,ATTR#Normal);
			call Set.Object.Attr(Cue.Sync.Time.Id,1,ATTR#Normal\ATTR#AltIntensity\ATTR#Reverse);
		end;
	end;
	if (Optical.Group <> 0) and (GID(AEE.Opt.Width.Mode)=0) then do;
		if Current.Sync.Locked <> 0 then do;
			call Set.Object.Attr(Optical.Place.Time,0,ATTR#Normal\ATTR#Reverse);
			call Set.Object.Attr(Optical.Place.Time,1,ATTR#Normal\ATTR#Reverse);
		end;
		else do;
			call Set.Object.Attr(Optical.Place.Time,0,ATTR#Normal);
			call Set.Object.Attr(Optical.Place.Time,1,ATTR#Normal\ATTR#AltIntensity\ATTR#Reverse);
		end;
	end;
end DEPOSIT.SYNC.FIELD.ATTRIBUTES;

/*	Routine to set reel highlights	*/

/*		1. it highlights the selected reel if the shuttle	*/
/*			editor panel is up										*/

DISPLAY.CURRENT.REEL:proc public swapable;

	if Shuttle.Group <> 0 then do;
		if Current.Cue.Reel=12 then do;	/*	select the audition edit cue	*/
			/*	turn off current cue in reel table - just highlight cue.clip.reel	*/
			call Highlight.Graphics.Button.Table(Shuttle.Reel.Table, bits(Cue.Clip.Reel), 2, 0);	/*	turn on new cell	*/
			/*	turn on audition button		*/
			call Highlight.Graphics.Button.Table (Shuttle.Preview.Edit.Button, 1, 2, 0);
		end;
		else do;									/*	select a clip/reel cue			*/
			/*	turn off audition button	*/
			call Highlight.Graphics.Button.Table (Shuttle.Preview.Edit.Button, 0, 2, 0);
			/*	turn on appropriate button in reel table	*/
			call Highlight.Graphics.Button.Table (Shuttle.Reel.Table, bits(Current.Cue.Reel), 2, 0);
		end;
	end;
end DISPLAY.CURRENT.REEL;

/*	$page routine to set drive bit highlighting			*/

/*	Display.Drive.Select.Bits sets up the highlighting	*/
/*	on the cue editor and shuttle editor to match		*/
/*	the selected drives											*/

DISPLAY.DRIVE.SELECT.BITS: proc swapable;
   if (simulate_dtd) Current.Cue.Drive.Bits = Current.Cue.Drive.Bits + 1;

   if Shuttle.Group <> 0 then do;
		call Highlight.Graphics.Button.Table (Shuttle.Disk.Table, Current.Cue.Drive.Bits, 3, 0);
		if ALL.SEGMENTS.HAVE.EQUAL.TRACKS(Current.Cue.Ptr) = false
		then do;
			call Highlight.Graphics.Button.Table (Shuttle.Disk.Table, OR.ALL.REEL.TRACK.BITS(Current.Cue.Ptr), 5, 1);
		end;
		else do;
			call Highlight.Graphics.Button.Table (Shuttle.Disk.Table, 0, 5, 1);
		end;
	end;

	if Cue.Group <> 0 then do;
		call Highlight.Table.With.Bits(Cue.Source.Table.Id,8,Current.Cue.Drive.Bits,ATTR#Reverse,16);
	end;

end DISPLAY.DRIVE.SELECT.BITS;

/*	$page - routine to define basic cue editor panel	*/

/*	swaping subroutine to reduce size:	*/

Define.Cue.Panel.Items: proc (row) swapable;
	dcl row	fixed;

	/*	Define all Button type items first:	*/

	call Set.Default.Action(O#ACT.Middle.Press\O#ACT.Prev.Obj);

	call							  Load.UpDown.Icon(Misc.Buf);
	Cue.Switch.Button			= Define.Graphics.Icon(S#AA, -10, row*100, 1, Misc.Buf);

	call							  Load.Increment.Icon(Misc.Buf);
	Cue.Name.Incr.Button		= Define.Graphics.Icon(S#AA, 200, row*100, 1, Misc.Buf);

	Cue.Protect.Indicator	= Define.Label(S#AA, row, 77, 0, ' P ');

	call							  Load.Play.Icon(Misc.Buf);
	Cue.Play.Button			= Define.Graphics.Icon(S#AA, 0, (row+1)*100, 2, Misc.Buf);

	call							  Load.Take.Icon(Misc.Buf);
	Cue.Take.In.Button		= Define.Graphics.Icon(S#AA,300,(row+1)*100,1,Misc.Buf);

	call							  Load.Exchange.Icon(Misc.Buf);
	Cue.Exchange.In.Button	= Define.Graphics.Icon(S#AA,600,(row+1)*100,1,Misc.Buf);

	call							  Load.Ramp.Up.Icon(Misc.Buf);
/*	Cue.Ramp.Up.Button	*/call Define.Graphics.Icon(S#AA,2600,(row+1)*100,2,Misc.Buf);

	call							  Load.Lock.Icon(Misc.Buf);
	Cue.Sync.Lock.Id			= Define.Graphics.Icon(S#AA,5500,(row+1)*100,1,Misc.Buf);

	call							  Load.Offset.Play.Icon(Misc.Buf);
	Cue.Offset.Play.Id		= Define.Graphics.Icon(S#AA,5500,(row+2)*100,1,Misc.Buf);

	call							  Load.Pause.Icon(Misc.Buf);
	Cue.Pause.Button			= Define.Graphics.Icon(S#AA, 0, (row+2)*100, 2, Misc.Buf);

	Misc.Buf(0)					= O#ICON.InsertIcon;
	Misc.Buf(1)					= Cue.Take.In.Button;
	Misc.Buf(2)					= O#Icon.End;

	Cue.Take.Out.Button		= Define.Graphics.Icon(S#AA,300,(row+2)*100,1,Misc.Buf);
	Cue.Take.Sync.Button		= Define.Graphics.Icon(S#AA,3300,(row+1)*100,1,Misc.Buf);
	Cue.Take.Offs.Button		= Define.Graphics.Icon(S#AA,3300,(row+2)*100,1,Misc.Buf);

	Misc.Buf(1)					= Cue.Exchange.In.Button;
	Cue.Exchange.Out.Button	= Define.Graphics.Icon(S#AA,600,(row+2)*100,1,Misc.Buf);

	call							  Load.Ramp.Down.Icon(Misc.Buf);
/*	Cue.Ramp.Down.Butt	*/call Define.Graphics.Icon(S#AA,2600,(row+2)*100,2,Misc.Buf);

	call						  Load.Backup.Icon(Misc.Buf);
	Cue.Backup.Button		= Define.Graphics.Icon(S#AA,0,(row+3)*100,2,Misc.Buf);
	call						  Load.Slow.Forward.Icon(Misc.Buf);
	Cue.Slow.Play.Button = Define.Graphics.Icon(S#AA,300,(row+3)*100,2,Misc.Buf);
	call						  Load.Fast.Forward.Icon(Misc.Buf);
	Cue.Fast.Play.Button = Define.Graphics.Icon(S#AA,600,(row+3)*100,2,Misc.Buf);

	Cue.Block.Button		= Define.Label(S#AA, row+3,  9, 0, ' Block '	);
	Cue.Save.Button		= Define.Label(S#AA, row+3, 16, 0, ' Save '	);
	Cue.Audition.Button	= Define.Label(S#AA, row+3, 22, 0, ' Audit '	);

	Misc.Buf(0)				= O#ICON.InsertIcon;
	Misc.Buf(1)				= Cue.Switch.Button;
	Misc.Buf(2)				= O#Icon.End;

	Cue.Place.Inc.Button	= Define.Graphics.Icon(S#AA,2900,(row+3)*100,1,Misc.Buf);
	Cue.Place.Button		= Define.Label(S#AA, row+3, 32, 0, 'Place:'	 );
	Cue.Place.Mode.Button= Define.Label(S#AA, row+3, 42, 0, 'Mode'		 );

	Cue.Recall.Button		= Define.Label(S#AA, row+3, 48, 0, ' Recall ' );
	Cue.Delete.Button		= Define.Label(S#AA, row+3, 56, 0, ' Delete ' );
	Cue.Rename.Button		= Define.Label(S#AA, row+3, 64, 0, ' Rename ' );
	Cue.STM.Button			= Define.Label(S#AA, row+3, 72, 0, ' STM '	 );

end Define.Cue.Panel.Items;

DEFINE.CUE.PANEL: proc(row) swapable;
	dcl row			fixed;
	dcl i				fixed;
	dcl temp (10)	fixed;

	call Copy.String('CUE TRIM',temp);
	call Print.Panel.Title(row,temp);

	call Set.Auto.Allocation.Id(Cue.Alloc);

	call Set.Default.Action(O#ACT.Middle.Press);
	call Set.Default.Attr(0,ATTR#Normal\ATTR#AltIntensity);
	call Set.Default.Attr(1,ATTR#Normal\ATTR#Reverse\ATTR#AltIntensity);

	call						  Define.Graphics.Box(S#AA,gpos.x(-10),gpos.y((row-1)*100),gpos.x(8010),gpos.y((row+3)*100),0);
	call						  Load.Close.Box.Icon(misc.buf);
	Cue.Size.Box			= Define.Graphics.Icon(S#AA,0,(row*100),1,misc.buf);

	call Activate.Object.Range(Cue.Alloc,Cue.Size.Box);
	do i = Cue.Alloc to Cue.Size.Box;
		call Update.Object(i);
	end;

	write("313") = addr(misc.buf(0));

	/*	top row:	*/

	MR13i = O#Icon.Connect;	/*	line between name/caption line and cue area	*/
		MR13i = - 10;
		MR13i =    0;
		MR13i = 8010;
		MR13i =    0;
	MR13i = O#Icon.Connect;	/*	Line between cue name and cue comment	*/
		MR13i = 3700;
		MR13i =    0;
		MR13i = 3700;
		MR13i =  100;
	MR13i = O#Icon.Connect;	/*	between Cue Comment and Prot Indicator	*/
		MR13i = 7700;
		MR13i =    0;
		MR13i = 7700;
		MR13i =  100;

	/*	second and third rows:	*/

	MR13i = O#Icon.Connect;	/*	between Cue Play/Pause and Take In buttons	*/
		MR13i =  300;
		MR13i =    0;
		MR13i =  300;
		MR13i = -200;
	MR13i = O#Icon.Connect;	/*	between PLAY and STOP	*/
		MR13i = - 10;
		MR13i = -100;
		MR13i =  300;
		MR13i = -100;
	MR13i = O#Icon.Connect;	/*	between Cue things and Drive Buttons	*/
		MR13i = 5600;
		MR13i =    0;
		MR13i = 5600;
		MR13i = -200;

	/*	fourth row:	*/

	MR13i = O#Icon.Connect;	/*	between Cue area and commands	*/
		MR13i = - 10;
		MR13i = -200;
		MR13i = 8010;
		MR13i = -200;
	MR13i = O#Icon.Connect;	/*	Between BACKUP and SLOW FORWARD	*/
		MR13i =  300;
		MR13i = -200;
		MR13i =  300;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between SLOW FORWARD and FAST FORWARD	*/
		MR13i =  600;
		MR13i = -200;
		MR13i =  600;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between FAST FORWARD and BLOCK	*/
		MR13i =  900;
		MR13i = -200;
		MR13i =  900;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between BLOCK and SAVE	*/
		MR13i = 1600;
		MR13i = -200;
		MR13i = 1600;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between SAVE and AUDITION	*/
		MR13i = 2200;
		MR13i = -200;
		MR13i = 2200;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between AUDITION and PLACE	*/
		MR13i = 2900;
		MR13i = -200;
		MR13i = 2900;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between MODE and RECALL	*/
		MR13i = 4700;
		MR13i = -200;
		MR13i = 4700;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Double Line	*/
		MR13i = 4800;
		MR13i = -200;
		MR13i = 4800;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between RECALL and DELETE	*/
		MR13i = 5600;
		MR13i = -200;
		MR13i = 5600;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between DELETE and RENAME	*/
		MR13i = 6400;
		MR13i = -200;
		MR13i = 6400;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between RENAME and STM	*/
		MR13i = 7200;
		MR13i = -200;
		MR13i = 7200;
		MR13i = -300;
	MR13i = O#Icon.Connect;	/*	Between STM and ???	*/
		MR13i = 7700;
		MR13i = -200;
		MR13i = 7700;
		MR13i = -300;
	MR13i = O#Icon.End;

	call						  Define.Graphics.Icon(S#AA,0,row*100,0,misc.buf);

	call Define.Cue.Panel.Items(row);	/*	do some more work from a swap procedure	*/

	call Set.Default.Attr(0,ATTR#Normal\ATTR#AltIntensity);
	call Set.Default.Action(O#ACT.Middle.Press);

/*	Cue.In.Label	*/ i	= Define.Label(S#AA, row+1,  7, 0, 'In ');
	call						  Set.Object.Mouse.Access(i,0);
	Cue.Out.Switch			= Define.Switch(S#AA,row+2,  7, 3, 0, 'Out|Dur');
/*	Cue.Sync.Label	*/ i	= Define.Label(S#AA, row+1, 36, 0, 'Sync');
	call						  Set.Object.Mouse.Access(i,0);
	Cue.Offset.Switch		= Define.Switch(S#AA,row+2, 36, 4, 0, 'Pre|Offs|Post');

	call Set.Default.Attr(0,ATTR#Normal);

	Cue.Place.Track.Field = Define.Fixed.Point(S#AA,row+3,38,3,0,cf#right);
	call Set.Object.Mouse.Access(Cue.Place.Track.Field,O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);
	call Set.Object.Action(Cue.Place.Track.Field,O#ACT.Update.On.Dep,true);

	Cue.Name.Id				= Define.String(S#AA,row,5,32,O#STR.General);

	Cue.Comment.Id			= Define.String(S#AA,row,38,39,O#STR.General);

	/*	Define in, out, sync, offset time in order	*/
	/*	for following call to set arrow links			*/

	Cue.In.Time.Id			= Define.32Bit.MSEC(S#AA, row+1, 11, 14,
														  AEE.Time.Format|O#MSEC.RealTime,
														  cf#time, cf#default, cf#default);
	call Set.Object.Mouse.Access(Cue.In.Time.Id,O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);
	call Set.Object.Drag			 (Cue.In.Time.Id,true,true);

	Cue.Out.Time.Id		= Define.32Bit.MSEC(S#AA, row+2, 11, 14,
														  AEE.Time.Format|O#MSEC.RealTime,
														  GID(Saved.AEE.Cue.Out.Switch), cf#default, cf#default);
	call Set.Object.Mouse.Access(Cue.Out.Time.Id,O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);
	call Set.Object.Drag			 (Cue.Out.Time.Id,true,true);

	Cue.Sync.Time.Id		= Define.32Bit.MSEC(S#AA, row+1, 41, 14,
														  AEE.Time.Format|O#MSEC.RealTime|O#MSEC.Allow.Minus,
														  cf#time, cf#default, cf#default);
	call Set.Object.Mouse.Access(Cue.Sync.Time.Id,O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);
	call Set.Object.Drag			 (Cue.Sync.Time.Id,true,true);

	Cue.Offset.Time.Id	= Define.32Bit.MSEC(S#AA, row+2, 41, 14,
														  AEE.Time.Format|O#MSEC.RealTime,
														  GID(Saved.AEE.Cue.Out.Switch), cf#default, cf#default);
	call Set.Object.Mouse.Access(Cue.Offset.Time.Id,O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);
	call Set.Object.Drag			 (Cue.Offset.Time.Id,true,true);

	call Set.Default.Action(O#ACT.Jog.Enabled\O#ACT.Middle.Press\O#ACT.Left.Press\O#ACT.Right.Press);
	Cue.Fade.In.Time.Id	= Define.Fixed.Point(S#AA,row+1,28,5,3,cf#zerofill\cf#right);
	Cue.Fade.Out.Time.Id	= Define.Fixed.Point(S#AA,row+2,28,5,3,cf#zerofill\cf#right);
	call Set.Default.Action(O#ACT.Middle.Press);

	Disable.Deposits = true;	/*	pick up initial screen	*/
										/*	values for now				*/
	call Deposit.Fixed.Point(Cue.Place.Track.Field,GID(Cue.Place.Track)-1);
	call Deposit.Switch(Cue.Out.Switch,GID(Saved.AEE.Cue.Out.Switch));
	call Deposit.Switch(Cue.Offset.Switch,Current.Cue.Sync.Mode);

	Disable.Deposits = false;

	call Set.Default.Attr(0,ATTR#AltIntensity);
	call Set.Default.Attr(1,ATTR#AltIntensity);
	call Set.Default.Action(O#ACT.Middle.Press\O#ACT.Prev.Obj);
	Cue.Source.Table.Type = Define.Label(S#AA,row+1,56,3,'');
	Cue.Source.Table.Id	 = Define.Table(S#AA,8,2,Cue.Source.Table.Type);
	call Copy.String(' 01| 02| 03| 04| 05| 06| 07| 08| 09| 10| 11| 12| 13| 14| 15| 16',misc.buf);
	call Fill.String.Table(Cue.Source.Table.Id,0,0,1,misc.buf);
	call Set.Object.Action(Cue.Source.Table.Id,O#ACT.Update.On.Dep,true);

	Cue.Group = Group.Objects(Cue.Group.Id,Cue.Alloc,Cue.Alloc+999,Get#Screen.Event);

	call Activate.Object.Range(Cue.Alloc,Cue.Alloc+999);

	call Set.Auto.Arrow.Link.Range(Cue.In.Time.Id,Cue.Offset.Time.Id);
	call Set.Auto.Arrow.Link.Range(Cue.Fade.In.Time.Id,Cue.Fade.Out.Time.Id);
	call Set.Object.Arrow.Links(Cue.Name.Id,ARR#Auto,ARR#Auto,ARR#Auto,ARR#Auto);
	call Set.Object.Arrow.Links(Cue.Comment.Id,ARR#Auto,ARR#Auto,ARR#Auto,ARR#Auto);
	call Set.Object.Arrow.Links(Cue.Place.Track.Field,ARR#Auto,ARR#Auto,ARR#Auto,ARR#Auto);

	/*	set up panel for initial values	*/

	call DEPOSIT.AUDITION.BUTTON.DISPLAY;

	call DEPOSIT.SYNC.FIELD.ATTRIBUTES;

end DEFINE.CUE.PANEL;

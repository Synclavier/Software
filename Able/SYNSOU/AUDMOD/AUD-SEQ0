/* AUD-SEQ0 - routines to define 'permanent' dialog line, open, close *//* define 'set display contents': */dcl Close.Seq.Dialog proc recursive;dcl Seq.Perm.First.Id        lit '(Seq.Alloc+450)';  /* id of first item in permanent dialog line  */dcl Seq.Perm.Last.Id         lit '(Seq.Alloc+499)';  /* id of last  item in permanent dialog line  */Define.Set.Display.Contents:proc (row) PUBLIC swapable;   dcl row         fixed;   dcl (s1)   (16) fixed;   dcl (s2)   (16) fixed;   dcl i           fixed;   /* define 'Set Display Contents' line */   /* define "No. Of Tracks" label, field: */   i = Define.Graphics.Button.Table                          /* raise by 3  */   (S#AA, 0000, (row-1)*100-10, 0500, row*100-10, 1, 1, 0);  /* pixels to   */   call COPY.STRING('No. Of',   s1);                         /* line up w   */   call COPY.STRING('Tracks',   s2);                         /* trans. chrs */   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);   Display.#.Of.Tracks = Define.Fixed.Point(S#AA, row, 5, 2, 0, cf#right);   call Set.Default.Action (O#ACT.Middle.Press         );   /* Define "No. of Rows" label & field: */   i = Define.Graphics.Button.Table   (S#AA, 0766, (row-1)*100-10, 1166, row*100-10, 1, 1, 0);   call COPY.STRING('No. Of',   s1);   call COPY.STRING('Rows: ',   s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);   Display.#.Of.Rows = Define.Fixed.Point(S#AA, row, 12, 2, 0, cf#right);   call Set.Default.Action (O#ACT.Middle.Press         );   /* vert line between # of rows and show: */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(1400), gpos.y((row-1)*100)-1,                gpos.x(1433), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* "Show:" label: */   i = Define.Graphics.Button.Table   (S#AA, 1433, (row-1)*100, 1933, row*100, 1, 1, 0);   call COPY.STRING('Show:',   s1);   call COPY.STRING('',        s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 2, s1, s2);   call Set.Object.Mouse.Access (i, 0);   /* vert line between show and events-rtes-loops: */   vector_mode;   call data_level(2);   call connect(gpos.x(1933), gpos.y((row-1)*100)-1,                gpos.x(1933), gpos.y((row  )*100)+1);   call data_Level(0);   transparent_mode;   /* "events rtes loops" table: */   Display.Events.Table = Define.Graphics.Button.Table   (S#AA, 1933, (row-1)*100, 3133, row*100, 3, 1, 1);   call COPY.STRING('Events', s1);   call COPY.STRING('',       s2);   call Deposit.Graphics.Button.Table.Label(Display.Events.Table, 0, 0, 0, s1, s2);   call COPY.STRING('RTEs',   s1);   call Deposit.Graphics.Button.Table.Label(Display.Events.Table, 0, 1, 1, s1, s2);   call COPY.STRING('Loops',  s1);   call Deposit.Graphics.Button.Table.Label(Display.Events.Table, 0, 2, 1, s1, s2);   call Check.Next.Event;   /* vert line between events-rtes-loops and display info: */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(3133), gpos.y((row-1)*100)-1,                gpos.x(3167), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* display info table: */   Display.Info.Table = Define.Graphics.Button.Table   (S#AA, 3167, (row-1)*100, 7367, row*100, 7, 1, 1);   call COPY.STRING('Pitch',  s1);   call COPY.STRING('Name ',  s2);   call Deposit.Graphics.Button.Table.Label(Display.Info.Table, 0, 0, 1, s1, s2);   call COPY.STRING('Midi',   s1);   call COPY.STRING('Note #', s2);   call Deposit.Graphics.Button.Table.Label(Display.Info.Table, 0, 1, 1, s1, s2);   call COPY.STRING('Event',  s1);   call COPY.STRING('Name ',  s2);   call Deposit.Graphics.Button.Table.Label(Display.Info.Table, 0, 2, 1, s1, s2);   call COPY.STRING('Duration', s1);   call COPY.STRING('',         s2);   call Deposit.Graphics.Button.Table.Label(Display.Info.Table, 0, 3, 1, s1, s2);   if Show.Offsets <> 0   then call COPY.STRING('Offset',  s1);   else call COPY.STRING('End',     s1);   call COPY.STRING('Time', s2);   call Deposit.Graphics.Button.Table.Label(Display.Info.Table, 0, 4, 1, s1, s2);   call COPY.STRING('Velocity', s1);   call COPY.STRING('',         s2);   call Deposit.Graphics.Button.Table.Label(Display.Info.Table, 0, 5, 1, s1, s2);   call COPY.STRING('Caption',  s1);   call COPY.STRING('',         s2);   call Deposit.Graphics.Button.Table.Label(Display.Info.Table, 0, 6, 1, s1, s2);   call Check.Next.Event;   /* vert line between info and "name len:" */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(7367), gpos.y((row-1)*100)-1,                gpos.x(7400), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* "name len" label: */   i = Define.Graphics.Button.Table   (S#AA, 7400, (row-1)*100-10, 7800, row*100-10, 1, 1, 0);   call COPY.STRING('Name',   s1);   call COPY.STRING('Len:',   s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   call Set.Default.Action (O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);   Display.Name.Len.Id = Define.Fixed.Point(S#AA, row, 78, 2, 0, cf#right);   call Set.Default.Action (O#ACT.Middle.Press         );      /* Put initial values in display contents line */   disable.deposits = 1;   call Deposit.Fixed.Point(Display.#.Of.Tracks, Seq.Tracks);   call Deposit.Fixed.Point(Display.#.Of.Rows,   Seq.Size-4);   call Highlight.Graphics.Button.Table   (Display.Events.Table, shr(Display.Note.Contents,8), 2, 0);   call Highlight.Graphics.Button.Table   (Display.Info.Table, Display.Note.Contents & 255, 2, 0);   call Deposit.Fixed.Point(Display.Name.Len.Id, Display.Name.Length);   disable.deposits = 0;   call Check.Next.Event;end Define.Set.Display.Contents;/* $page - define Select Time Formats permanent Dialog Line */Define.Select.Time.Formats:proc (row) PUBLIC swapable;   dcl row         fixed;   dcl (s1)   (16) fixed;   dcl (s2)   (16) fixed;   dcl i           fixed;   dcl map.disp data (0,2,3,4,5,1);   /* map aee time format to switch setting */   /* define 'Select Time Formats' line */   /* define "Display Times In" label   */   i = Define.Graphics.Button.Table   (S#AA, 0000, (row-1)*100, 700, row*100, 1, 1, 0);   call COPY.STRING('Display',   s1);   call COPY.STRING('Times In:', s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   /* vert line between label and first format: */   vector_mode;   call data_level(2);   call connect(gpos.x(0700), gpos.y((row-1)*100)-1,                gpos.x(0700), gpos.y((row  )*100)+1);   call data_Level(0);   transparent_mode;   /* time format table: */   Display.Format.Table = Define.Graphics.Button.Table   (S#AA, 700, (row-1)*100, 4900, row*100, 6, 1, 1);   call COPY.STRING('Seconds', s1);   call COPY.STRING('',        s2);   call Deposit.Graphics.Button.Table.Label(Display.Format.Table, 0, 0, 0, s1, s2);   call COPY.STRING('Minutes', s1);   call COPY.STRING('Seconds', s2);   call Deposit.Graphics.Button.Table.Label(Display.Format.Table, 0, 1, 1, s1, s2);   call COPY.STRING('Beats',   s1);   call COPY.STRING('',        s2);   call Deposit.Graphics.Button.Table.Label(Display.Format.Table, 0, 2, 1, s1, s2);   call Check.Next.Event;   call COPY.STRING('Measures', s1);   call COPY.STRING('Beats',    s2);   call Deposit.Graphics.Button.Table.Label(Display.Format.Table, 0, 3, 1, s1, s2);   call COPY.STRING('SMPTE',   s1);   call COPY.STRING('',        s2);   call Deposit.Graphics.Button.Table.Label(Display.Format.Table, 0, 4, 1, s1, s2);   call COPY.STRING('Feet',   s1);   call COPY.STRING('Frames', s2);   call Deposit.Graphics.Button.Table.Label(Display.Format.Table, 0, 5, 1, s1, s2);   /* vert line after format table: */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(4900), gpos.y((row-1)*100)-1,                gpos.x(4950), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   call Check.Next.Event;   /* Put initial values in display contents line */   call Highlight.Graphics.Button.Table   (Display.Format.Table, bits(map.disp(AEE.Time.Format)), 2, 0);   call Check.Next.Event;end Define.Select.Time.Formats;/* Define Set Edit Features permanent dialog line */Define.Set.Edit.Features:proc (row) PUBLIC swapable;   dcl row         fixed;   dcl (s1)   (16) fixed;   dcl (s2)   (16) fixed;   dcl i           fixed;   /* define 'Set Edit Features' */   /* define "Ripple" label   */   i = Define.Graphics.Button.Table   (S#AA, 0000, (row-1)*100, 600, row*100, 1, 1, 0);   call COPY.STRING('Ripple', s1);   call COPY.STRING('Edits:', s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   /* vert line between label and "off" */   vector_mode;   call data_level(2);   call connect(gpos.x(0600), gpos.y((row-1)*100)-1,                gpos.x(0600), gpos.y((row  )*100)+1);   call data_Level(0);   transparent_mode;   call Check.Next.Event;   /* "off on verify" table */   Display.Ripple.Table = Define.Graphics.Button.Table   (S#AA, 600, (row-1)*100, 2100, row*100, 3, 1, 1);   call COPY.STRING('Off',     s1);   call COPY.STRING('',        s2);   call Deposit.Graphics.Button.Table.Label(Display.Ripple.Table, 0, 0, 0, s1, s2);   call COPY.STRING('On',      s1);   call Deposit.Graphics.Button.Table.Label(Display.Ripple.Table, 0, 1, 1, s1, s2);   call COPY.STRING('Verify',  s1);   call Deposit.Graphics.Button.Table.Label(Display.Ripple.Table, 0, 2, 1, s1, s2);   /* vert line between ripple table and Show Headings label */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(2100), gpos.y((row-1)*100)-1,                gpos.x(2150), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* Show Headings label: */   i = Define.Graphics.Button.Table   (S#AA, 2150, (row-1)*100, 2750, row*100, 1, 1, 0);   call COPY.STRING('Show',      s1);   call COPY.STRING('Headings',  s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   /* vert line between label and off/on */   vector_mode;   call data_level(2);   call connect(gpos.x(2750), gpos.y((row-1)*100)-1,                gpos.x(2750), gpos.y((row  )*100)+1);   call data_Level(0);   transparent_mode;   /* define off/on table: */   Display.Show.Headings.Table = Define.Graphics.Button.Table   (S#AA, 2750, (row-1)*100, 3550, row*100, 2, 1, 1);   call COPY.STRING('Yes',  s1);   call COPY.STRING('',     s2);   call Deposit.Graphics.Button.Table.Label(Display.Show.Headings.Table, 0, 0, 1, s1, s2);   call COPY.STRING('No', s1);   call Deposit.Graphics.Button.Table.Label(Display.Show.Headings.Table, 0, 1, 1, s1, s2);   /* vert line after off/on table */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(3550), gpos.y((row-1)*100)-1,                gpos.x(3600), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* scroll label: */   i = Define.Graphics.Button.Table   (S#AA, 3600, (row-1)*100, 4200, row*100, 1, 1, 0);   call COPY.STRING('Scroll:', s1);   call COPY.STRING('',        s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   /* vert line between label and off/on */   vector_mode;   call data_level(2);   call connect(gpos.x(4200), gpos.y((row-1)*100)-1,                gpos.x(4200), gpos.y((row  )*100)+1);   call data_Level(0);   transparent_mode;   /* define off/on table: */   Display.Scroll.Table = Define.Graphics.Button.Table   (S#AA, 4200, (row-1)*100, 5000, row*100, 2, 1, 1);   call COPY.STRING('Off',  s1);   call COPY.STRING('',    s2);   call Deposit.Graphics.Button.Table.Label(Display.Scroll.Table, 0, 0, 1, s1, s2);   call COPY.STRING('On', s1);   call Deposit.Graphics.Button.Table.Label(Display.Scroll.Table, 0, 1, 1, s1, s2);   /* vert line after off/on table */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(5000), gpos.y((row-1)*100)-1,                gpos.x(5050), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* define "Show Event Offsets" label   */   i = Define.Graphics.Button.Table   (S#AA, 5050, (row-1)*100, 5850, row*100, 1, 1, 0);   call COPY.STRING('Show Event', s1);   call COPY.STRING('Offsets:',   s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   /* vert line between label and yes/no */   vector_mode;   call data_level(2);   call connect(gpos.x(5850), gpos.y((row-1)*100)-1,                gpos.x(5850), gpos.y((row  )*100)+1);   call data_Level(0);   transparent_mode;   /* define yes/now table: */   Display.Show.Offsets.Table = Define.Graphics.Button.Table   (S#AA, 5850, (row-1)*100, 6650, row*100, 2, 1, 1);   call COPY.STRING('End',  s1);   call COPY.STRING('Time', s2);   call Deposit.Graphics.Button.Table.Label(Display.Show.Offsets.Table, 0, 0, 0, s1, s2);   call COPY.STRING('Offset', s1);   call Deposit.Graphics.Button.Table.Label(Display.Show.Offsets.Table, 0, 1, 0, s1, s2);   /* vert line after no/yes */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(6650), gpos.y((row-1)*100)-1,                gpos.x(6700), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* Define print/print all table */   Display.Print.Table = Define.Graphics.Button.Table   (S#AA, 6700, (row-1)*100, 7950, row*100, 2, 1, 1);   call COPY.STRING('Print',  s1);   call COPY.STRING('Page',   s2);   call Deposit.Graphics.Button.Table.Label(Display.Print.Table, 0, 0, 1, s1, s2);   call COPY.STRING('All',    s2);   call Deposit.Graphics.Button.Table.Label(Display.Print.Table, 0, 1, 1, s1, s2);   /* vert line after print table */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(7950), gpos.y((row-1)*100)-1,                gpos.x(8000), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* Put initial values in display contents line */   call Highlight.Graphics.Button.Table   (Display.Ripple.Table, bits(Ripple.Mode), 2, 0);   call Highlight.Graphics.Button.Table   (Display.Show.Headings.Table, bits(Show.No.Headings), 2, 0);   call Highlight.Graphics.Button.Table   (Display.Scroll.Table, bits(Seq.Scroll.Mode xor 1), 2, 0);   call Highlight.Graphics.Button.Table   (Display.Show.Offsets.Table, bits(Show.Offsets), 2, 0);end Define.Set.Edit.Features;/* $page - define 'Select Tracks' permanent dialog line */Define.Select.Tracks:proc (row) PUBLIC swapable;   dcl row         fixed;   dcl (s1)   (8)  fixed;   dcl (s2)   (8)  fixed;   dcl i           fixed;   /* define 'Select Tracks'           */   /* "Erase Bounce Clear Solos" table */   Display.Erase.Bounce.Clear = Define.Graphics.Button.Table   (S#AA, 0000, (row-1)*100, 1500, row*100, 3, 1, 1);   call COPY.STRING('Erase',   s1);   call COPY.STRING('',        s2);   call Deposit.Graphics.Button.Table.Label(Display.Erase.Bounce.Clear, 0, 0, 0, s1, s2);   call COPY.STRING('Bounce', s1);   call Deposit.Graphics.Button.Table.Label(Display.Erase.Bounce.Clear, 0, 1, 1, s1, s2);   call COPY.STRING('Clear',  s1);   call COPY.STRING('Solos',  s2);   call Deposit.Graphics.Button.Table.Label(Display.Erase.Bounce.Clear, 0, 2, 1, s1, s2);   call Check.Next.Event;   /* vert line between erase/bounce/clear and label */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(1500), gpos.y((row-1)*100)-1,                gpos.x(1550), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* "Sequence Tracks" label */   i = Define.Graphics.Button.Table   (S#AA, 1550, (row-1)*100, 2150, row*100, 1, 1, 0);   call COPY.STRING('Sequence', s1);   call COPY.STRING('Tracks:',  s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   call Set.Default.Action (O#ACT.Middle.Press\O#ACT.Prev.Obj);   call                        Load.UpDown.Icon(Misc.Buf);   Display.Solo.Track.Switch = Define.Graphics.Icon(S#AA, 2150, row*100, 1, Misc.Buf);   call Set.Default.Action (O#ACT.Middle.Press         );   /* define track solo table #1: */   Display.Solo.Tracks.#1 = Define.Graphics.Button.Table   (S#AA, 2450, (row-1)*100, 4050, row*100, 8, 2, 0);   call Fill.Track.Table(Display.Solo.Tracks.#1, Display.Solo.Tracks.Base);   /* define track solo table #2: */   Display.Solo.Tracks.#2 = Define.Graphics.Button.Table   (S#AA, 4150, (row-1)*100, 5750, row*100, 8, 2, 0);   call Fill.Track.Table(Display.Solo.Tracks.#2, Display.Solo.Tracks.Base + 16);   /* double line between syncl tracks and dtd tracks */   vector_mode;   call data_level(2);   call BLOCKMODE_ON;   call connect(gpos.x(5750), gpos.y((row-1)*100)-1,                gpos.x(5800), gpos.y((row  )*100)+1);   call BLOCKMODE_OFF;   call data_Level(0);   transparent_mode;   /* "DTD Tracks" label */   i = Define.Graphics.Button.Table   (S#AA, 5800, (row-1)*100, 6400, row*100, 1, 1, 0);   call COPY.STRING('D-To-D',   s1);   call COPY.STRING('Tracks:',  s2);   call Deposit.Graphics.Button.Table.Label(i, 0, 0, 1, s1, s2);   call Set.Object.Mouse.Access (i, 0);   Display.DTD.Tracks = Define.Graphics.Button.Table   (S#AA, 6400, (row-1)*100, 8000, row*100, 8, 2, 0);   call Fill.Track.Table(Display.DTD.Tracks, 0);   /* Note:  caller must put initial display values in */   /* the button table.                                */end Define.Select.Tracks;/* Define any permanent dialog line: */DEFINE.SEQ.PERMANENT.DIALOG: proc (row,message)  PUBLIC swapable;   dcl row                      fixed;   dcl message                  fixed;   dcl i                        fixed;   /* Message:  0 - erase dialog line                     */   /*           1 - Set Display Contents                  */   /*           2 - Select Time Formats                   */   /*           3 - Set Edit Featurese                    */   /*           4 - Select Tracks                         */   /* Begin by entirely erasing the line between the panels */	/* Also redraw box around the area that gets erased at   */	/* the smaller screen sizes...									*/	   call cpos(row, 0);     /* erase entire transparent line  */   call pc(27);   call ps('[K');   i = mouse.cursor.type; /* erase entire graphics    line */   call Mouse.Switch(0);   call area.fill(gpos.x(    0)+1, gpos.y((row  -1)*100)-1,                  gpos.x( 8000)-1, gpos.y((row+1-1)*100)+1, 1, 0);   vector_mode;   call data_level(0);	call gbox     (gpos.x(    0)  , gpos.y((row  -1)*100),                  gpos.x( 8000)  , gpos.y((row+1-1)*100), false);   transparent_mode;   call Mouse.Switch(i);   /* clear all variables when closing or chaning */   /* permanent dialog line:                      */   Perm.Dialog.Mode           = 0;   Display.#.Of.Tracks        = 0;   Display.#.Of.Rows          = 0;   Display.Events.Table       = 0;   Display.Info.Table         = 0;   Display.Name.Len.Id        = 0;   Display.Format.Table       = 0;   Display.Ripple.Table       = 0;   Display.Show.Headings.Table= 0;   Display.Scroll.Table       = 0;   Display.Show.Offsets.Table = 0;   Display.Print.Table        = 0;   Display.Erase.Bounce.Clear = 0;   Display.Solo.Track.Switch  = 0;   Display.Solo.Tracks.#1     = 0;   Display.Solo.Tracks.#2     = 0;   Display.DTD.Tracks         = 0;   /* close track select dialog box if changing panels: */   if (Seq.Dialog.Mode = SEQ#TrackBounceDialog    )   or (Seq.Dialog.Mode = SEQ#TrackEraseDialog     )   or (Seq.Dialog.Mode = SEQ#TrackClearSolosDialog)   then call Close.Seq.Dialog;   if message = 0         /* undefine objects              */   then do;      call Undefine.Object.Range(Seq.Perm.First.Id,Seq.Perm.Last.Id);      call Select.New.Cur.Obj(Corner.Label,-1,-1);      call DISPLAY.NOTICE (NT#EraseNotice,ATTR#Normal,NulStr,0,0,0);      return;   end;      /* Define objects on permanent dialog line:   */   call Set.Auto.Allocation.Id (Seq.Perm.First.Id);   call Set.Default.Action (O#ACT.Middle.Press         );   call Set.Default.Attr   (0, ATTR#Normal             );   call Set.Default.Attr   (1, ATTR#Normal\ATTR#Reverse);   do case (message-1);      call Define.Set.Display.Contents(row);      call Define.Select.Time.Formats (row);      call Define.Set.Edit.Features   (row);      call Define.Select.Tracks       (row);   end;   Perm.Dialog.Mode = message;   call Activate.Object.Range(Seq.Perm.First.Id,Seq.Perm.Last.Id);   call Set.Object.Arrow.Links(Display.#.Of.Tracks, ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Display.#.Of.Rows,   ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Set.Object.Arrow.Links(Display.Name.Len.Id, ARR#Auto, ARR#Auto, ARR#Auto, ARR#Auto);   call Select.New.Cur.Obj(Corner.Label,-1,-1);end DEFINE.SEQ.PERMANENT.DIALOG;
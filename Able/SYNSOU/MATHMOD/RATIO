dcl i fixed;dcl md     lit '"62"';     /* memory data */dcl mdi    lit '"63"';     /* memory data with increment */DCL LOAD  LIT 'WRITE(5)=';        /* LOAD               */DCL ULOAD LIT 'WRITE(4)=';        /* LOAD UPPER         */DCL REM   LIT 'READ(4)'  ;        /* QUOTIENT REMAINDER */DCL MUL   LIT 'WRITE(6)=';        /* PERFORM MULTIPLY   */DCL DIV   LIT 'WRITE(7)=';        /* PERFORM DIVIDE     */DCL RES   LIT 'READ(5)'  ;        /* RESULT LSB         */DCL URES  LIT 'READ(4)'  ;        /* RESULT MSB         */DCL MWAIT LIT 'WRITE("324")=RES'; /* D5 TO ATNV TO WAIT FOR MUL/DIV */test: proc (num);   dcl num fixed;        dcl (x,y,a,b,b1,b2,b3) fixed static;   dcl llsb fixed;   /* Assembly language literals for Tempo Map routine */   dcl a0      lit '"300"';   dcl a1      lit '"301"';   dcl a2      lit '"302"';   dcl a3      lit '"303"';   dcl add0    lit '"210"';   /* add 0            */   dcl add1    lit '"211"';   /* add 1            */   dcl addc0   lit '"270"';   /* add with carry 0 */   dcl sub2    lit '"216"';   /* sub 2            */   dcl sub3    lit '"217"';   /* sub 3            */   dcl subb2   lit '"276"';   /* subb 2           */   dcl loa2    lit '"202"';   /* arith load 2     */   dcl rtpl    lit '"337"';   /* tra if >= 0      */   x = 0;   y = num;    /* passed sequence time */   a = 0;      /* start of this segment */   b = 0;   b1 = 0;     /* clicks per division */   b2 = 131;   b3 = 4719;   /* Compute delta time from start of this tempo segment to the    */   /* passed sequencer time.  Store in ac2-ac3:                     */   write(a2) = x;      /* get passed sequence time in ac2-ac3       */   write(a3) = y;      /* as a 32-bit number                        */   write(sub2) = a;    /* subtract msb from passed seq time  */   write(sub3) = b;   write(subb2) = 0;   /* propagate borrow                   */   write(a0) = 0;      /* initialize accumulator   */   write(a1) = 0;   load read(a2); mul b1;             /* compute msb*r1                 */      write(add0 ) = res;             /* add to msb                     */   load read(a3); mul b1;             /* compute lsb*r1                 */      write(add1 ) = res;             /* add to lsb                     */      write(addc0) = ures;            /* add to msb                     */   load read(a2); mul b2;             /* compute msb*r2                 */      x            = b2;              /* stash r2 while mul/div is busy */      write(add1 ) = res;             /* add to lsb                     */      write(addc0) = ures;            /* add to msb                     */   load read(a3); mul b3;             /* compute lsb*r3 for rounding    */      y = ures;                       /* save upper only (as new llsb)  */   load read(a3); uload y;            /* get lsb & rounding amount      */      mul x;                          /* compute lsb*r2 + 1/2           */      write(add1)  = ures;            /* add to lsb                     */      y            = res;             /* save llsb                      */      llsb = y;do while 0;   load read(a2); uload y;            /* load msb, preserve prior llsb  */      mul b3;                         /* compute msb*r3 + prior llsb    */      write(addc0) = 0;               /* add PREVIOUS carry only to msb */                                      /* while multiply is going on !!  */      write(add1)  = ures;            /* add to lsb                     */      write(addc0) = 0;               /* add carry only to msb          */   /* through with r2 - check for rounding										*/   write(loa2 ) = res;                /* move result to a2; check sign  */   write(rtpl ) = 2;                  /* if >=0, no rounding needed     */   write(add1 ) = 1;                  /* round by 1 msec                */   write(addc0) = 0;                  /* propagate carry                */end;   x = read(a0);        /* move to static variables to avoid glomming   */   y = read(a1);        /* registers with subscript computations        */   print(x),;   print '  ',;   print(y),;   print '  ',;   print llsb;end test;do i = 240 to 260 by 1;   print (i),;   print '  ',;   call test(i);end;
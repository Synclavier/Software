.ce~PLOTMOD - Plotting Utility Routines~.nf   The vector_mode, point_mode, and alpha_mode    statements all tell the terminal to interpret    incoming data as graphics plotting information.   The transparent_mode statement tells the    terminal to pass the incoming data to the VT100    text buffer. Point_mode plots individual    points without connecting them. Vector_mode    interprets incoming data as coordinate data for    plotting vectors.  Alpha_mode interprets graphic    characters.~CLEAR.TERM~   clears the screen and leaves in adm mode   call CLEAR.TERM;~DATA_LEVEL~   sets line to on, off, or complement.  The    default mode to drawing lines is dots on.   where the data level values are:   0 = dots on   1 = dots off   2 = dots complemented   call DATA_LEVEL(i);~LINE_TYPE~   sets line type   where the line type values are:   0 = normal line type which is the default   1 = dotted line   2 = dot-dashed line   3 = short-dashed line   4 = long dashed line   call LINE_TYPE(i);.bp~CHAR_SIZE~   specifies a particular character size where num    is a value between 0 and 3. The four character    sizes have the following number of characters per    line:   0 = 80   1 = 40   2 = 26   3 = 20   call CHAR_SIZE(num)~PSTRING~   prints 'string' in 4010 alpha characters   call PSTRING(string);~IMOVE~   begins new vector drawing sequence at (x,y) and    returns 1 if out of bounds.   call IMOVE(x,y);~DRAW~   called to draw vector to or put point at (x,y)   call DRAW(x,y);~PLOT~   continues vector sequence to user's (x,y)   call PLOT(x,y);~MOVE_TO~   begins vector sequence at user's (x,y)   call MOVE_TO(x,y);.bp~CONNECT~   moves to (a,b) with pen in present state and then connects (a,b)   with (c,d) and leaves pen up at the end    call CONNECT(a,b,c,d);~AXES~   draws axes thru (x,y) with tick marks at intervals of x.incr   on x-axis and y.incr on y-axis   call AXES(x,y,x.incr,y.incr);~BORDER~   draws a border around the user defined viewport   call BORDER;~PUNITS~   defines number of pixels on terminal screen   call PUNITS(x,y);~WINDOW~   stores window (plot limits in user units) in vector   call WINDOW(x1,x2,y1,y2);~VIEWPORT~   stores viewport in vector   call VIEWPORT(x1,x2,y1,y2); /* store viewport in vector*/~BLOCKMODE_OFF~   turns block mode off for a mg600   call BLOCKMODE_OFF;~BLOCKMODE_ON~   turns block mode on for a mg600   call BLOCKMODE_ON;.bp~PUSH.GRAPHICS.ATTRIBUTES~   saves the current graphic attributes. Note:    stack is only one level deep for now.   call PUSH.GRAPHICS.ATTRIBUTES;~POP.GRAPHICS.ATTRIBUTES~   restores the current graphic attributes   call POP.GRAPHICS.ATTRIBUTES;~DRAW_TEXT~   draw text in large alpha characters stqarting at location (x,y).   size ranges from 0 to 3.   call DRAW_TEXT(text,x,y,size);~DRAW_VERTICAL_LABEL~   draws a string vertically from the top down.   call DRAW_VERTICAL_LABEL(string);~AREA.FILL~   fills a specified area using the given data    level and fill pattern  where (x1,y1) and    (x2,y2) are two corners of the rectangular area.   call AREA.FILL(x1,y1,x2,y2,d,fill);
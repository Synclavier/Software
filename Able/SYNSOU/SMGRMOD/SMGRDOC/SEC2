.bpage.fo '2) FUNDEMENTAL PROCEDURES'-#-'SCREEN MANAGER.ttext ''.ceSection 2 -- Fundemental Procedures.te 'Section 2 -- Fundemental ProceduresThese next routines are needed by everyone intending to use the screen manager.  They form the basic skeleton of XPL code which must be written to support the objects you wish to manage on the screen.  See the section at the very beginning of this document titled "Using the Screen Manager" for a sample skeleton layout in XPL..center~INITIALIZATION~.ttext ''.te '   INITIALIZATIONThe next group of procedures are called to initialize parts of the screen manager..ne 15.st {.te '      INITIALIZE.SCREEN.MANAGER.ix 'INITIALIZE.SCREEN.MANAGER\INITIALIZE.SCREEN.MANAGER (length) - This is the the first procedure to call; it MUST be invoked before any other screen manager functions are used.  It sets up a null object list and all other internal data structures needed for normal operation.  It will return "true" if successful and "false" if unable to initialize..bu {\length - Size in sectors of the external memory space (in the TRD area)to be used for internal data structures.  The MINIMUM size needed is3, 20 to 70 may be more reasonable for fairly large screens..bu }.ne 12.te '      ACTIVATE.SCREEN.ix 'ACTIVATE.SCREEN\ACTIVATE.SCREEN (id#) - This procedure is used to specify which objectwill be "active" (ie: have the cursor on it) when the screen is firstdisplayed.  It also enables all regular objects and disables table type objects.  Enabled objects will be displayed when GET.NEXT.SCREEN.EVENT is called..bu {\id# - Object identifier; initializes current object to this ID..bu }.ne 13.te '      ACTIVATE.OBJECT.RANGE.ix 'ACTIVATE.OBJECT.RANGE\ACTIVATE.OBJECT.RANGE (lowid,highid) - This procedure may be called in place of ACTIVATE.SCREEN.  It has the same function, but will only cause objects between lowid and highid to be activated and displayed.Before calling this procedure, you should call SELECT.NEW.CUR.OBJ tospecify which object is to be selected when the screen first comes up..bu {\lowid - Lowest object identifier\highid - Highest object identifier.bu }.ne 10.te '      MOUSE.INIT.ix 'MOUSE.INIT\MOUSE.INIT (no arguments) - This procedure is not a part of thescreen manager itself, but it must be called before invokingGET.NEXT.SCREEN.EVENT if you wish to allow the use of the mouse.MOUSE.INIT is defined in :SYNSOU:MOUSEMOD..st }.ne 18.center~GETTING EVENTS~.ttext ''.te '   GETTING EVENTS.st {.te '      GET.NEXT.SCREEN.EVENT.ix 'GET.NEXT.SCREEN.EVENT\GET.NEXT.SCREEN.EVENT (no arguments) - This procedure is called to recognize all user activity on the screen.  It updates the screen until some event occurs or until finished writing the update.  It keeps the arrow keys and mouse buttons enabled.  It will automatically select a new object (without returning to the caller) if an event returned is an arrow key or mouse click.  Any other codes are returned to the user.  The return value will usually be "get.screen.event" (a literal defined in :SYNAUXS:GETLITS - see other possible return values there).  If the event is not one you are expecting to handle, it should usually be passed up to a higher level for processing.Refer to Section 1, under "events" for a detailed description of allpossible screen events and how to recognize them..st }
.bpage.fo '8) USER INTERACTION'-#-'SCREEN MANAGER.ttext ''.ceSection 8 -- User Interaction.te 'Section 8 -- User Interaction.ttext ''This section describes some of what the end user must know tointeract with a program written using the screen manager..center~EDITING FIELDS~.te '   EDITING FIELDSThere are several kinds of objects which expect the user to type ina string value.  Input to these is handled inside the screen managerby the internal procedure "GET.SIMPLE.TOKEN".  Any of the followingobjects will accept the editing commands described here:.bu {\String\Fixed Point\32 Bit Millisecond Time\32 Bit SMPTE Time\Sound File Time\Tables of any of the above objects.bu }.center~SIMPLE EDITING~.te '      SIMPLE EDITINGFirst, one must select an object (of one of the above types) either bymoving to the object using the arrow keys, or with the mouse.  At thispoint, if you simply type a normal character (eg: a letter or number),you will cause the previous string to be erased.  You may then enter a complete new string and press RETURN when done.  The value you havetyped will replace the old string for that object unless the syntaxwas wrong (eg: typing letter(s) to a "fixed point number") in whichcase the previous value will be restored.  This is the simplest way toenter a new value for an object.If you wish to change only a portion of an existing object, for example to change "This is a long string to correcx" to "This is a long string to correct", use the TAB and arrow keys.  Pressing TAB will advance the cursor to the next field/word, which is the character following the next  ':',  '.' or space.  After pressing at least one TAB, the left and right arrow keys will move the cursor by single characters, instead of going to an adjacent object as they normally do.  In a numeric object, position the cursor directly over the incorrect digit(s) and type the correct one(s).  In a text string, use the delete key to remove unwanted characters; insert new ones by typing them.  Pressing RETURN with the cursor anywhere in the field will enter the corrected value.Simple command summary:.bu {\Type an entire new string to replace the old one.  Use the DELETE key to correct typing errors.\TAB to desired field (or word) and enter new characters.  Useleft and right arrows to move by single character once at least one TABhas been pressed, up until pressing RETURN..bu }.bpage.center~ADVANCED EDITING~.te '      ADVANCED EDITINGAdvanced editing is an expansion of the commands listed above to allowmore sophisticated users (including those familiar with the SED editor)to quickly change editable objects.In general, objects start out in "replace mode" when you first select them.This means that typing a string will completely replace the value previouslyentered.  Once any editing command has been typed however, the object enters"edit mode".  This means typing characters will ~change~ the previous stringrather than replacing it.  It also means the left and right arrow keys willmove one character left and right (with wrap-around), staying within theobject.Note that commands below denoted (*) will cause the field to enter "editmode" if it is not already there.  See also the note about RESTORINGPREVIOUS STRING (+) which applies to all delete commands.The full set of editing commands is:.bu {\RETURN will always attempt to enter the currently displayed string intothe object, no matter where the cursor is.  This includes entry of acompletely NULL string (containing no characters;  note that NULL strings were not enterable in early versions of the screen manager).If the syntax of the new string is incorrect, the previous value will berestored (eg: typing letter(s) in a "fixed point number" object).  IfRETURN is pressed one or more times without changing the object, noS#Deposit event is generated and no action occurs.\(*) CONTROL-A will toggle insert/overstrike mode.  When first enteringedit mode (eg: by typing TAB), a numeric field is in overstrike mode.  Thismeans any character typed will replace the one below the cursor.  Textstrings default to insert mode, meaning new characters are added to thestring; nothing is overwritten.\(*) CONTROL-D in insert mode will delete one character to the right of the cursor, if any exist.  In overstrike mode the cursor just moves one character to the right (+).\(*) CONTROL-E will delete all characters to the right of the cursor, if anyexist (+).\(*) TAB (CONTROL-I) will advance the cursor to the next field within theobject.  This is the character after the next ':',  '.' or space.  ThusTAB will find the next part of a time field (eg: SMPTE => 00:23:45:20.17),or the next word in a phrase (eg: "Reversed Sound File").\CONTROL-H is the same as left arrow or DELETE.  Note that CONTROL-H generates a backspace which on the Pericom terminal is often exchanged with DELETE.\CONTROL-L is the same as right arrow.\(*) CONTROL-R, PF1 or HOME will cause the cursor to move to the left-most character in the object.  This is a convenient way to enter"edit-mode" right after selecting an object, without making any changes.\CONTROL-X will erase the entire entry and EXIT edit mode (+).\(*) DELETE in insert mode will delete one character to the left of the cursor, if any exist.  In overstrike mode the cursor just moves one character to the left (+).\(+) RESTORING PREVIOUS STRING - Any DELETE command (CONTROL-D, CONTROL-E, CONTROL-X, DELETE) will restore the previous value of the object IF the delete command is given to an empty field.  For example, if you enter an object and press CONTROL-X, the object will be erased.  If you press CONTROL-X a second time (or any other delete command), the original value will be restored.\When in edit/overstrike mode on a numeric field, pressing ':' or '.'will move the cursor to the next ':' or '.' respectively rather than entering the character.  Wrapping will occur if there are no more ':'or '.' characters to the right of the cursor position.  This is to assist in changing time values and digits beyond a decimal point..bu }
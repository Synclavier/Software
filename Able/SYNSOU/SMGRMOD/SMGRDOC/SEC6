.bpage.fo '6) PANEL MANAGER'-#-'SCREEN MANAGER.ttext ''.ceSection 6 -- Panel Manager.te 'Section 6 -- Panel Manager.ttext ''The panel manager is used to allocate and keep track of which lines are used and which are free on the screen.  This allows one to createa screen containing multiple "panels" that each take some number oflines on the screen.A panel can thus be thought of as a "sub-screen" that will be displayed as long as there are sufficient lines available to bring it up.  The vertical position of a panel may vary depending on which other panels are displayed before it.  The Synclavier "Audio Event Editor" is an example of such software..center~PANEL DEFINITIONS~.te '   PANEL DEFINITIONSThese procedures allow panels to be allocated and deallocated..ne 12.st {.te '      INIT.PANEL.MANAGER.ix 'INIT.PANEL.MANAGER\INIT.PANEL.MANAGER (base) - Initializes the panel manager data structures.This procedure must be called before using any other panel managerfunctions.  There is no return value; it will always work if "base" is a valid external memory sector and hang the processor otherwise!.bu {\base - Sector number of a single available sector of external memory to use for panel manager data structures..bu }.ne 19.te '      ALLOCATE.SCREEN.SPACE.ix 'ALLOCATE.SCREEN.SPACE\ALLOCATE.SCREEN.SPACE (min,max,info) - Allocates at least "min" andup to "max" (if it's available) lines on the screen.  If able to getat least "min" lines, the procedure returns TRUE, otherwise FALSE..bu {\min - Minimum number of lines needed\max - Maximum number of lines requested (may be the same as "min")\info - FIXED ARRAY, pointer to a 3-word array in the caller's areawhere return data is placed as follows:.bu {\info(0) - ID number to be used for all future references to this panel\info(1) - First line in the allocated panel\info(2) - Number of lines allocated.bu }.bu }.ne 9.te '      DEALLOCATE.SCREEN.SPACE.ix 'DEALLOCATE.SCREEN.SPACE\DEALLOCATE.SCREEN.SPACE (pid#) - Frees up the lines that had beenused by the specified panel.  Procedure is a no-op if pid# is undefined..bu {\pid# - Panel identifier.bu }.ne 11.te '      ERASE.SCREEN.SPACE.ix 'ERASE.SCREEN.SPACE\ERASE.SCREEN.SPACE (pid#) - Physically erases all transparent andgraphics information on the lines allocated to the panel specified bypid#.  Returns 0 if successful and pid# otherwise.  Note that thisprocedure only works on the MG600 (Pericom) terminal, NOT the VT640!.bu {\pid# - Panel identifier.bu }.st }
.bpage.fo '4) GENERAL OBJECT ROUTINES'-#-'SCREEN MANAGER.ttext ''.ceSection 4 -- General Object Routines.te 'Section 4 -- General Object Routines.ttext ''This section covers general routines which can operate on many (or all) types of objects once they have been created (see Section 3 forhow to create objects).   There are also procedures described here whicheffect the entire screen manager..center~OBJECT RE-DEFINTION (SET) PROCEDURES~.te '   OBJECT RE-DEFINTION (SET) PROCEDURESThese procedures are used to change the attributes of an object..ne 20.st {.te '      SET.OBJECT.STATUS.ix 'SET.OBJECT.STATUS\SET.OBJECT.STATUS (id#,bit,setting) - Sets one bit of object's status word to the passed setting.  If id# is invalid, the procedureis a no-op.  These bits are usually managed by the internal code ofthe screen manager; beware of strange side effects if you change themon your own!.bu {\id# - Object identifier\bit - Which status bit to change, any of:.bu {\O#STAT.Enable - Object exists and may be drawn on screen\O#STAT.Exhibit - Object has been drawn on screen\O#STAT.Update - Do unconditional re-draw\O#STAT.Attr.Set - Which set of attributes to use when drawing object:0 for "unselected", 1 for "selected" attributes.\O#STAT.Disp.Attr.Set - Which set of attributes was used when the objectwas actually drawn the last time.Here are some of the actions performed depending on the setting ofthe first three status bits:.nfill.in +3~Exhibit  Update  Enable  Action~ 1        0        1     Return 0        X        1     Redraw 1        1        1     Compare, redraw if necessary.in -3.fillAfter the appropriate action is performed, the update bit is cleared and the exhibit bit set..bu }\setting - Use 0 to turn bit off, 1 to turn on.bu }.ne 30.te '      SET.OBJECT.ACTION.ix 'SET.OBJECT.ACTION\SET.OBJECT.ACTION (id#,bit,setting) - Sets one bit of object's status word to the passed setting.  If id# is invalid, the procedureis a no-op..bu {\id# - Object identifier\bit - Which status bit to change, any of:.bu {\O#ACT.Prev.Obj - Return to previous selected object after mousing thisone.  This is used on switches and scroll bars so they don't repeatforever.\O#ACT.Update.On.Dep - Redraw screen immediately as object changes\O#ACT.Drag.Enabled\O#ACT.Drag.Type.Check\O#ACT.Animate.Disabled\O#ACT.Deposit.Rept.Disabled - Don't generate a deposit event whenvalue of this object changes\O#ACT.RealTime.Object - Do RUN.SYN.LOOP frequently to keep updated\O#ACT.Get.Disabled\O#ACT.Left.Press\O#ACT.Middle.Press\O#ACT.Right.Press\O#ACT.Left.Release\O#ACT.Middle.Release\O#ACT.Right.Release\O#ACT.Jog.Enabled\O#ACT.POAct.Changed - Manipulation for tables of switches.bu }\setting - Use 0 to turn bit off, 1 to turn on.bu }.ne 9.te '      SET.DEFAULT.ACTION.ix 'SET.DEFAULT.ACTION\SET.DEFAULT.ACTION (action) - Changes the default action written to objects when they are defined..bu {\action - Specifies the new action.  Possible values are the same as forSET.OBJECT.ACTION, above..bu }.ne 27.te '      SET.OBJECT.ATTR.ix 'SET.OBJECT.ATTR\SET.OBJECT.ATTR(id#,set,attr) - Changes the attributes in one of thetwo attribute bytes (0 = "unselected", 1 = "selected" state).  It alsosets the refresh bit of the object so it will be re-drawn.  Procedure is a no-op if id# does not exist..bu {\id# - Object identifier\set - 0 or 1 for unselected or selected object attributes\attr - Uses the same literals as SET.TERM.ATTR which are defined in TTYLITS (plus GBox/NoGBox which are only in SMGRLITS).  These literals can be OR'd for different combinations.  Note that VT640 terminals support only Normal and Reverse video..bu {\ATTR#Normal - All attributes to off or regular state\ATTR#Reverse - Reverse video on\ATTR#NoReverse - Reverse video off\ATTR#RegIntensity - Regular video intensity\ATTR#AltIntensity - Alternate video intensity\ATTR#Blink - Blinking on\ATTR#NoBlink - Blinking off\ATTR#Underline - Underline on\ATTR#NoUnderline - Underline off\ATTR#GBox - Draw graphics box around object\ATTR#NoGBox - No graphics box around object.bu }.bu }.ne 8.te '      SET.DEFAULT.ATTR.ix 'SET.DEFAULT.ATTR\SET.DEFAULT.ATTR (set,attr) - Same as SET.OBJECT.ATTR except thatit changes the default setting written to all objects when theyare defined..bu {\set - 0 or 1 for unselected or selected object attributes\attr - Takes the same arguments as above in SET.OBJECT.ATTR.bu }.ne 9.te '      SET.OBJECT.ATTR.SET.ix 'SET.OBJECT.ATTR.SET\SET.OBJECT.ATTR.SET (id#,set) - Changes which attribute set is currently used for display (0 = "unselected", 1 = "selected" state).  It also sets the refresh bit of the object so it will be re-drawn.  Procedure is a no-op if id# does not exist..bu {\id# - Object identifier\set - 0 or 1 for unselected or selected object attributes.bu }.ne 16.te '      SET.OBJECT.ARROW.LINKS.ix 'SET.OBJECT.ARROW.LINKS\SET.OBJECT.ARROW.LINKS(id#,above,below,left,right) - Sets or changesthe objects which will be selected upon pressing one of the arrow keys.  Each of (above, below, left, right) may be 0 meaning select no field or "ARR#Auto" meaning let the computer select the closest object in that direction.  Procedure is a no-op if id# does not exist..bu {\id# - Object identifier\above - Id of object to move to on up-arrow\below - Id of object to move to on down-arrow\left - Id of object to move to on left-arrow\right - Id of object to move to on right-arrow.bu }.ne 15.te '      SET.OBJECT.MOUSE.ACCESS.ix 'SET.OBJECT.MOUSE.ACCESS\SET.OBJECT.MOUSE.ACCESS(id#,access) - Sets or changes the mouse button presses and releases which cause an object to be selected.A no-op if id# does not exist..bu {\id# - Object identifier\access - Literals specifying which mouse actions cause selection.  These literals can be OR'd for combinations, or use zero to disable all mouse selection..bu {\O#ACT.Left.Press - Select on press of Left button\O#ACT.Middle.Press - Select on press of Middle button\O#ACT.Right.Press - Select on press of Right button\O#ACT.Left.Release - Select on release of Left button\O#ACT.Middle.Release - Select on release of Middle button\O#ACT.Right.Release - Select on release of Right button.bu }.bu }          .ne 10.te '      JOGGING OBJECTS.center~JOGGING OBJECTS~Four types of objects, Fixed Point, 32-Bit Millisecond, Sound File Time, and 32-Bit SMPTE may all be jogged, ie: incremented or decremented by use of the left and right mouse buttons.  For each, the define procedure by default enables jogging by OR'ing in the action bit O#ACT.JogEnabled, and sets the amount of the increment to one (1).  The user may turn the jogging on and off and set the amount of increment with the next two procedures: SET.OBJECT.JOG and SET.OBJECT.JOG.AMOUNT.PLEASE NOTE THAT THE JOGGING WILL ONLY OCCUR IF THE OBJECT IN QUESTION HAS BEEN ENABLED FOR LEFT AND RIGHT MOUSE PRESSES..ne 9.te '         SET.OBJECT.JOG.ix 'SET.OBJECT.JOG\SET.OBJECT.JOG (id#,status) - Sets whether or not an object may be "jogged".  A no-op if id# does not exist..bu {\id# - Object identifier\status - Use 0 to disable jogging, 1 to enable.bu }.ne 11.te '         SET.OBJECT.JOG.AMOUNT.ix 'SET.OBJECT.JOG.AMOUNT\SET.OBJECT.JOG.AMOUNT (id#,increment) - Sets how much an object is "jogged" by with each press of the left or right mouse button.  A no-op if id# does not exist.  Note that for fields of a 32-bit millisecond time, sound file time, or 32-bit SMPTE time, jogging is always done by one only; this jog amount is ignored..bu {\id# - Object identifier\increment - How much to change the object by with each jog.bu }.ne 11.te '      SET.SCREEN.ANIMATE.ix 'SET.SCREEN.ANIMATE\SET.SCREEN.ANIMATE (state) - Sets or clears animate mode.  If animation is set, object will highlight as you move over the screen with the mouse button pressed.  No selection will take place until the mouse button is released over an object..bu {\state - Use 0 to turn off animate mode; 1 to turn it on..bu }.ne 32.te '      SET.OBJECT.GET.ix 'SET.OBJECT.GET\SET.OBJECT.GET (id#,get,setting) - Selects which events may beused to trigger activity on an object.  Each object has a normalset turned on by default, which varies from one object to another.  For example, strings have "get#in.char" enabled, so characters can be typed in.  Note that many of these events are not sensible for most types of objects.  The procedure is a no-op if id# is undefined..bu {\id# - Object identifier\get - Which events to allow - (may be OR'd) from the list in :SYNAUXS:GETLITS which includes:.bu {\get#in.char - Input character typed\get#mouse.button - Mouse press/release\get#mouse.movement - Mouse movement\get#new.timbre.info - New kbd timbre/partial\get#new.free.info - psfree/msfree/abuf change\get#new.seq.info - New seq notes/consts\get#play.scrolling - Window boundaries\get#entry.writes - A screen timbre name chg\get#prm.info - Timbre parameter change\get#dtd.info - Direct to disk info\get#poly.change - Change in poly memory\get#ertyp - Error message needed\get#ork.smpte - Get smpte change for ork\get#arrow.key - Arrow key typed\get#screen.event - Screen manager meta-event\get#program.exit - One of the program exit keys pressed.bu }\setting - Turn the get on with a 1, off with a 0.bu }.ne 13.te '      SET.OBJECT.DRAG.ix 'SET.OBJECT.DRAG\SET.OBJECT.DRAG (id#,enable,type.check) - Turns on the O#ACT.Drag.Enabled and/or the O#ACT.Drag.Type.Check bits for an object.  Procedure is a no-op if id# is undefined, or if both "enable"and "type.check" are "false"..bu {\id# - Object identifier\enable - Turn on O#ACT.Drag.Enabled for this object if "true"\type.check - Turn on O#ACT.Drag.Type.Check for this object if "true".bu }.ne 24.te '      SET.OBJECT.ERASE.ix 'SET.OBJECT.ERASE\SET.OBJECT.ERASE (id#,bits) - Sets any of the "fast erase" bits foran object.  A no-op if id# is undefined..bu {\id# - Object identifier\bits - Any of the following:.bu {\O#ERAS.End.of.Line - Erase from Left Edge of object to end of line\O#ERAS.Start.of.Line - Erase from Right Edge of object to start of line\O#ERAS.Whole.Line - Erase entire line on which object is displayed\O#ERAS.End.of.Screen - Erase from Right Edge of object to bottom of screen\O#ERAS.Start.of.Screen - Erase from Left Edge of object to top of screen\O#ERAS.Whole.Screen - Erase entire screen on which object is displayed\O#ERAS.Null.Fill.On.Erase - Fill label table with null strings upon erasing it.bu }.bu }.ne 13.te '      SET.OBJECT.DEPOSIT.REPORTING.ix 'SET.OBJECT.DEPOSIT.REPORTING\SET.OBJECT.DEPOSIT.REPORTING (id#,setting) - Sets or clears the action bit O#ACT.Deposit.Rept.Disabled for an object.  A no-op if id# is undefined..bu {\id# - Object identifier\setting - 0 means clear the bit (deposit reporting is ~enabled~); 1means set the bit (deposit reporting is ~disabled~)..bu }.ne 10.te '      SELECT.NEW.CUR.OBJ.ix 'SELECT.NEW.CUR.OBJ\SELECT.NEW.CUR.OBJ (id#,col,row) - Deselects current object; selectsobject passed (id#) and makes it the current object.  Returns TRUE onsuccess and FALSE on failure.  The procedure may fail if id# isinvalid, if the new object (or table cell) is the same as the currentone, or if the new object has "return to previous object" (O#ACT.Prev.Obj)set..bu {\id# - Object identifier\col - Column if a table (-1 means stay at current column)\row - Row if a table (-1 means stay at current row).bu }.ne 26.te '      DRAW.GBOX.AROUND.OBJECT.ix 'DRAW.GBOX.AROUND.OBJECT\DRAW.GBOX.AROUND.OBJECT (id#,level,linetype,offset) - Draws a graphicsbox around an already defined object.  A no-op if id# is undefined..bu {\id# - Object identifier\level - How to draw the box; any of:.bu {\O#GSTR.Draw - Set graphics bits\O#GSTR.Erase - Clear graphics bits\O#GSTR.Complement - Complement graphics bits.bu }\linetype - What kind of lines to draw; any of:.bu {\0 - Normal line\1 - Dotted line\2 - Dot dashed line\3 - Short dashed line\4 - Long dashed line\5 - Dot, dot, no dot... line.bu }\offset - How many graphics pixels to leave as a border between theobject and the box..bu }.ne 17.te '      DRAW.OBJ.BORDER.ix 'DRAW.OBJ.BORDER\DRAW.OBJ.BORDER (id#,level) - Draws a graphics box around an already defined object with normal line type and border.  A no-op if id# is undefined..bu {\id# - Object identifier\level - How to draw the box; any of:.bu {\O#GSTR.Draw - Set graphics bits\O#GSTR.Erase - Clear graphics bits\O#GSTR.Complement - Complement graphics bits.bu }.bu }.ne 10.te '      FLASH.OBJECT.ix 'FLASH.OBJECT\FLASH.OBJECT (id#) - Briefly highlights a graphics object (~only~) and then returns it to normal.  A no-op if id# is undefined, or if object is not a graphics object..bu {\id# - Object identifier.bu }.ne 22.te '      HIGHLIGHT.OBJECT.ix 'HIGHLIGHT.OBJECT\HIGHLIGHT.OBJECT (id#,attrs) - Changes the VISIBLE attributes of a graphics object (~only~).  Does NOT change the defined, saved object attributes for either the unselected (0) or selected (1) states.  A no-op if id# is undefined, or if object is not a graphics object..bu {\id# - Object identifier\attrs - Taken from this list (may also be OR'd together):.bu {\ATTR#Normal - All attributes to off or regular state\ATTR#Reverse - Reverse video on\ATTR#NoReverse - Reverse video off\ATTR#RegIntensity - Regular video intensity\ATTR#AltIntensity - Alternate video intensity\ATTR#Blink - Blinking on\ATTR#NoBlink - Blinking off\ATTR#Underline - Underline on\ATTR#NoUnderline - Underline off.bu }.bu }.st }.bpage.center~MISCELLANEOUS PROCEDURES~.ttext ''.te '   MISCELLANEOUS PROCEDURESSome of these routines are for general use, but some of them deal with low-level object manipulations.  Those denoted (!) should only be used by those familiar with the internal workings and data structures of the screen manager..ne 9.st {.te '      UNDEFINE.OBJECT.ix 'UNDEFINE.OBJECT\UNDEFINE.OBJECT (id#) - Removes an object from object list butdoes not erase the object.  A no-op without errors if id# is alreadyundefined..bu {\id# - Object identifier.bu }.ne 16.te '      UNDEFINE.OBJECT.RANGE.ix 'UNDEFINE.OBJECT.RANGE\UNDEFINE.OBJECT.RANGE (low.id#,high.id#) - Removes a range of objects from the object list, but does not erase them.  Their neednot be an object for every number in the range.  For example, if youassigned objects to ID 21, 25 and 29 you could use (20,29) as thelow.id# and high.id#.  Objects inside the range, inclusive of the end points (if any) are all undefined; no status is returned..bu {\low.id# - Low end of range\high.id# - High end of range.bu }.ne 11.te '      DISPLAY.AND.UNDEFINE.OBJECT.ix 'DISPLAY.AND.UNDEFINE.OBJECT\DISPLAY.AND.UNDEFINE.OBJECT (id#) - Causes an object to be refreshed on the screen and then undefined.  Note that this does not erase the object, but rather draws a current copy and removes it from the list of objects inside the screen manager..bu {\id# - Object identifier.bu }.ne 14.te '      LOCATE.OBJECT.ix 'LOCATE.OBJECT\(!) LOCATE.OBJECT  (id#) - Searches through object list to find object with passed id#.  If found, returns TRUE, places a pointer to the object into a global variable called Object.Ptr.  The pointer is an external memory address with MAM in the high byte and MAL in the low byte.  Refer to :SYNAUXS:SMGRLITS for the structure of an object in external memory.  If the object cannot be located, FALSE is returned..bu {\id# - Object identifier.bu }.ne 12.te '      FETCH.OBJECT.INFO.ix 'FETCH.OBJECT.INFO\(!) FETCH.OBJECT.INFO (id#,item) - Retrieves information from an object.Return value is the data item requested, but is zero if id# is not found..bu {\id# - Object identifier\item - Any of the (MANY) data words which make up an object.  Thecomplete list is several pages long in :SYNLITS:SMGRLITS..bu }.ne 16.te '      DEPOSIT.OBJECT.INFO.ix 'DEPOSIT.OBJECT.INFO\(!) DEPOSIT.OBJECT.INFO (id#,item,value) - Writes information into an object.  Procedure is a no-op if id# is undefined.  Use of thisfunction is not generally recommended since it may change internalscreen manager data structures and confuse the system..bu {\id# - Object identifier\item - Any of the (MANY) data words which make up an object.  Thecomplete list is several pages long in :SYNLITS:SMGRLITS.\value - 16 bit quantity to write into "item".bu }.ne 8.te '      ENABLE.OBJECT.ix 'ENABLE.OBJECT\ENABLE.OBJECT (id#) - Enables updating and selecting of object.A no-op if id# is undefined..bu {\id# - Object identifier.bu }.ne 8.te '      DISABLE.OBJECT.ix 'DISABLE.OBJECT\DISABLE.OBJECT (id#) - Disables updating and selecting of object.A no-op if id# is undefined..bu {\id# - Object identifier.bu }.ne 8.te '      ENABLE.OBJECT.RANGE.ix 'ENABLE.OBJECT.RANGE\ENABLE.OBJECT.RANGE (lowid,highid) - Enables updating and selecting of any and all objects found between lowid and highid inclusive..bu {\lowid - Lowest object identifier\highid - Highest object identifier.bu }.ne 8.te '      DISABLE.OBJECT.RANGE.ix 'DISABLE.OBJECT.RANGE\DISABLE.OBJECT.RANGE (lowid,highid) - Disables updating and selecting of any and all objects found between lowid and highid inclusive..bu {\lowid - Lowest object identifier\highid - Highest object identifier.bu }.ne 6.te '      ENABLE.ALL.OBJECTS   .ix 'ENABLE.ALL.OBJECTS   \ENABLE.ALL.OBJECTS (no arguments)- Sets the enable bit in all defined objects..ne 11.te '      MAP.POINT.TO.OBJECT.ix 'MAP.POINT.TO.OBJECT\MAP.POINT.TO.OBJECT (x,y) - Takes graphic coordinates (x,y) and determines if any of the defined objects fall on this spot.  Returns id# of the object found if successful, else returns 0..bu {\x - Graphics coordinate\y - Graphics coordinate.bu }.ne 22.te '      MAP.POINT.TO.ANY.OBJECT.ix 'MAP.POINT.TO.ANY.OBJECT\MAP.POINT.TO.ANY.OBJECT (x,y,cell) - Takes graphic coordinates (x,y) and determines if any of the defined objects fall on this spot.  Returns id# of the object found if successful, else returns 0.  If the objectfound is a table, "cell" will contain the row and column of the tablecontaining x and y.  Otherwise, cell will contain (-1,-1)..bu {\x - Graphics coordinate\y - Graphics coordinate\cell - FIXED ARRAY, two words long, passed in by the caller to hold the cell coordinates of the object found, if it turns out to be a table.  Returned value in "cell" is:.nfill.indent +3cell(0) = colcell(1) = row.indent -3.fill.bu }.ne 11.te '      POINT.IN.OBJECT.ix 'POINT.IN.OBJECT\POINT.IN.OBJECT (id#,x,y) - Takes a graphic coordinate and returns true if it is in the object specified by id#.  Returns false if notin the object, or if id# doesn't point at a valid object..bu {\id# - Object identifier\x - Graphics coordinate\y - Graphics coordinate.bu }.ne 13.te '      UPDATE.OBJECT.ix 'UPDATE.OBJECT\UPDATE.OBJECT (id#) - Finds object passed, checks object's enable, exhibited, and update bits to see if it needs updating.  If so, it does a compare on the last update of the object and the current state of the object printing out the changed characters.  The procedure isa no-op if id# is undefined..bu {\id# - Object identifier.bu }.ne 13.te '      UPDATE.OBJECT.RANGE.ix 'UPDATE.OBJECT.RANGE\UPDATE.OBJECT.RANGE (lowid,highid) - Does an UPDATE.OBJECT for allobjects between lowid and highid, inclusive.  No return value..bu {\lowid - Lowest object identifier\highid - Highest object identifier.bu }.ne 8.te '      ERASE.OBJECT.ix 'ERASE.OBJECT\ERASE.OBJECT (id#) - Erases all parts of an object from the screen.  A no-opif id# is undefined..bu {\id# - Object identifier.bu }.ne 10.te '      ERASE.OBJECT.RANGE.ix 'ERASE.OBJECT.RANGE\ERASE.OBJECT.RANGE (lowid,highid) - Erases a range of objects from the screen..bu {\lowid - Lowest object identifier\highid - Highest object identifier.bu }.ne 8.te '      UPDATE.SCREEN .ix 'UPDATE.SCREEN \(!) UPDATE.SCREEN (no arguments) - Scans the entire object list, updating objects which have changed since the last update.  Returns early if any event occurs during the update.  Desired events must beenabled before calling this procedure, or they will not cause earlyreturn.  No value is returned..ne 9.te '      SAMPLE.SYNCL.SMGR.GLOBALS.ix 'SAMPLE.SYNCL.SMGR.GLOBALS\(!) SAMPLE.SYNCL.SMGR.GLOBALS (no arguments) - Causes the ScreenManager to take a snapshot of several Synclavier real-time systemvariables which it tracks.  This is normally called once byINITIALIZE.SCREEN.MANAGER..ne 10.te '      READ.OBJECT.ix 'READ.OBJECT\(!) READ.OBJECT (ptr) - Returns a value from a specific field of an object.For example, "action.bits = (Read.Object(ptr+O#Action));"Does ~not~ increment the MAM/MAL address after reading..bu {\ptr - Object pointer in the format returned by LOCATE.OBJECT..bu }.te '      WRITE.OBJECT.ix 'WRITE.OBJECT\(!) WRITE.OBJECT (ptr,value) - Writes a value to a specific field of an object.  ~Does~ increment the MAM/MAL address after writing..bu {\ptr - Object pointer in the format returned by LOCATE.OBJECT.\value - 16 bit quantity to write..bu }.ne 16.te '      SET.AUTO.ALLOCATION.ID.ix 'SET.AUTO.ALLOCATION.ID\(!) SET.AUTO.ALLOCATION.ID (id#) - Sets the ID number that will benext used when the system automatically allocates one.  This willhappen when someone passes S#AutoAllocate (or S#AA) as the ID number to a define procedure.  Be careful when using this!  The systemnormally allocates ID's starting with one and counting up.  It willreset to "one higher than any used" if you manually specify an IDto any define procedure.  Therefore, you must know what you are doingif you use this procedure or you may get duplicate ID's assigned whichwill cause some objects to be inaccessible!.bu {\id# - Object identifier.bu }.ne 49.te '      WRITE.EVENT.QUEUE.ix 'WRITE.EVENT.QUEUE\(!) WRITE.EVENT.QUEUE (event,info,id#) - This procedure is used to declare a screen manager event.  It is usually only used by the internal code of the screen manager.  Events placed on the event queue are put in a FIFO; one event will be returned to the user each time GET.NEXT.SCREEN.EVENT is called.  The procedure is a no-op ifid# is invalid, or if an S#Deposit event is attempted for an objectwhich has disabled deposit reporting.  There is no return value..bu {\event - The type of event which has occurred.  In almost all cases forthe screen manager, this is "get.screen.event" (see :SYNAUXS:GETLITS forthe complete list of possibilities).\info - A second word of information describing the event.  When "event"is "get.screen.event", this "info" word may be any one of:.bu {\S#NulEvent - Nothing happened\S#ObjectTerminate - Object is done with; go on to next object\S#KeyActivate - User activated object with keyboard\S#MouseActivate - User activated object with mouse\S#MouseSelect - User selected object with mouse\S#ArrowSelect - User selected object with arrow keys\S#ArrowSelectAttempt - User attempted to select object with arrow but no link set\S#ObjectEvent - Special object event\S#ProgramExit - Exit event\S#Deposit - Deposit of value to object\S#SBArrow - Used internally; never returned\S#SBArrowBack - User clicked an up or left arrow\S#SBArrowForward - User clicked a down or right arrow\S#SBPage - Used internally; never returned\S#SBPageBack - User clicked above or to the left of box but not on arrow\S#SBPageForward - User clicked below or to the right of box but not on arrow\S#SBBoxMove - User moved the box\S#ObjectDrag - Object was dragged and dropped on another object\S#ObjectDragAbort - Object was dragged and dropped on nothing\S#JogAttempt - Attempt made to jog object value\S#DelAttempt - Attempted to delete object.bu }\id# - Object identifier.bu }.st }
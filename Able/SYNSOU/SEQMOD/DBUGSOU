Module seqdbug;   insert ':synlits:COMLITS';           /* get configuration and pdl size */   insert ':synlits:GLOBLITS';   insert ':synlits:ASCIILIT';   insert ':synlits:thdlits';   insert ':synlits:timlits';   insert ':synlits:samplits';   insert ':synlits:prmlits';   insert ':synlits:synclits';   INSERT ':SYNMODS:GLOBDCL';   INSERT ':SYNMODS:TTYDCL';   INSERT ':SYNMODS:PLOTDCL';   INSERT ':SYNMODS:GETVDCL';     insert ':synmods:GETDCL';   INSERT ':SYNMODS:TPRIMDCL';   insert ':synmods:mathdcl';   insert ':synmods:loddcl';   insert ':synmods:seqdcl';   insert ':synmods:xmemdcl';   insert ':synrdcls:03-pdcls';   insert ':synrdcls:04-sdcls';   insert ':synrdcls:05-bdcls';   insert ':synrdcls:11-tdcls';   insert ':synrdcls:12-edcls';   insert ':synsou:seqmod:eventdbg';   dcl event     (event.record.size   -1)  fixed;   dcl spointer  lit 'event';   DCL SEQDBUG (9) FIXED PUBLIC; /* 10 DEBUG FLAGS (0-9) */   PROMPT.FOR.DEBUG.COMMAND:  PROC PUBLIC SWAPABLE;      PRINT 'Event Debugger.  Command -- ',;   END PROMPT.FOR.DEBUG.COMMAND;   INIT.SEQ.DEBUG.DISPLAY:  PROC PUBLIC SWAPABLE;      DCL SAVE FIXED;      CALL TTY_WAIT;      SAVE=READ("314");         /* SAVE INTERRUPT STATUS */      DISABLE;      print 'A = get.default.event, print it';      print 'B = Locate.Sequencer.Event';      print 'C = Get.Sequencer.Event.Information';      print 'D = Get.Next.Sequencer.Event.Information';      print 'E = Get.Prior.Sequencer.Event.Information';      print 'F = Remove.Sequencer.Event';      print 'G = Garbage.Collect.Event.List';      print 'H = Enter Event Information';      print 'I = Place.Event.In.Sequence';      print 'J = Audition Event';      print 'K = Stop.Event.Auditions';      CALL PROMPT.FOR.DEBUG.COMMAND;      WRITE("314")=SAVE;        /* RESTORE ORIGINAL INTERRUPT STATUS */      WRITE("001")=SAVE;   END INIT.SEQ.DEBUG.DISPLAY;   HANDLE.SEQ.DEBUG.CHAR:  PROC (CH) PUBLIC SWAPABLE;      DCL CH   FIXED;      DCL SAVE FIXED;      dcl i    fixed;      CALL TTY_WAIT;      SAVE=READ("314");         /* SAVE INTERRUPT STATUS */      DISABLE;      IF (CH="33") THEN DO;         EXIT.MY.SCREEN = 1;         RETURN;      END;      IF (CH>"140")&(CH<"173") THEN CH=CH-"40"; /* UPPERCASE IT    */      print;      IF CH=65 THEN DO;         print 'Default Event:';         call get.Default.Event (event, event.type.event);         call print.event(event);         print;      END;      else if ch=66 then do;         print 'Locate Sequencer Event';         print 'Enter track#, msb, lsb, count, code -- ',;         input spointer(spointer.track#  ), spointer(spointer.time.msb  ),               spointer(spointer.time.lsb), spointer(spointer.time.count), i;         i = locate.sequencer.event(spointer,i);         print 'Status was :   ',i;         print 'Nmsb, Nlsb :   ',#nmsb,#nlsb;         print 'Lmsb, Llsb :   ',#lmsb,#llsb;         print 'W1,W2,W3,W4:   ',octal(#w1),'  ',octal(#w2),'  ',octal(#w3),'  ',octal(#w4);         print 'Anyr, Anyf :   ',#anyr,#anyf;         print 'trk, ptr   :   ',#trk, #ptr;         print 'wrd, sec   :   ',#wrd, #sec;         print;      end;      else if ch=67 then do;         print 'Get Sequencer Event Information';         i = Get.Sequencer.Event.Information(event);         print 'Status was :   ',i;         call print.event(event);         print;      end;      else if ch=68 then do;         print 'Get Next Sequencer Event Information';         i = Get.Next.Sequencer.Event.Information(event);         print 'Status was :   ',i;         call print.event(event);         print;      end;      else if ch=69 then do;         print 'Get Prior Sequencer Event Information';         i = Get.Prior.Sequencer.Event.Information(event);         print 'Status was :   ',i;         call print.event(event);         print;      end;      else if ch=70 then do;         print 'Remove.Sequencer.Event';         i = Remove.Sequencer.Event(event);         print 'Status was :   ',i;         print;      end;      else if ch=71 then do;         print 'Garbage.Collect.Event.List';         i = Garbage.Collect.Event.List(event(event.track#));         print 'Status was :   ',i;         print;      end;      else if ch=72 then do;         print 'Enter Event Information:';         print 'track#, msb, lsb, count, type, cue id --',;         input event(event.track#), event(event.time.msb), event(event.time.lsb), event(event.time.count), event(event.type), event(event.cue.id);         print 'Duration (msb,lsb), in (msb,lsb), out (msb,lsb), fade (in,out)';         input event(event.duration.msb), event(event.duration.lsb),               event(event.in.msb), event(event.in.lsb),               event(event.out.msb), event(event.out.lsb),               event(event.fade.in),event(event.fade.out);         print 'Priority, Output, Volume, Pan --',;         input event(event.priority), event(event.output), event(event.volume), event(event.pan);         print 'Bits, Spare1, Spare2, Spare3, Spare4, Spare5 --',;         input event(event.control.bits), event(event.spare1), event(event.spare2), event(event.spare3), event(event.spare4), event(event.spare5);         print 'Enter Cue Name --',;         linput location(addr(event(event.cue.name)));         event(event.cue.name) = event(event.cue.name) - 1; /* remove return */         print 'Enter Caption --',;         linput location(addr(event(event.caption)));         event(event.caption) = event(event.caption) - 1;         print;      end;      else if ch=73 then do;         print 'Place.Event.In.Sequence';         i = Place.Event.In.Sequence(event);         print 'Status was :   ',i;         print;      end;      else if ch=74 then do;         print 'Trigger.Event.For.Audition';         i = Trigger.Event.For.Audition (event);         print 'Status was :   ',i;         print;      end;      else if ch=75 then do;         print 'Stop.Event.Auditions';         i = Stop.Event.Auditions;         print 'Status was :   ',i;         print;      end;      CALL PROMPT.FOR.DEBUG.COMMAND;      WRITE("314")=SAVE;        /* RESTORE ORIGINAL INTERRUPT STATUS */      WRITE("001")=SAVE;   END HANDLE.SEQ.DEBUG.CHAR;   DBUG.SCREEN: PROC(ARG) PUBLIC SWAPABLE;      DCL ARG  FIXED;      dcl code fixed;      CALL CLEAR.TERM;      CALL INIT.SEQ.DEBUG.DISPLAY;      EXIT.MY.SCREEN   = 0;        /* clear these flags before loop */      GOTO.THIS.SCREEN = 0;      do while EXIT.MY.SCREEN = 0; /* wait for exit condition       */         call GET_ENABLE(get.in.char);         code = GET.NEXT.EVENT;                     /* get event         */         call GET_DISABLE(get.in.char);         if code=get.in.char then do;            /* input character received */            if next.event.info >= asc.call.convert            then call RETURN.TO.PREV.STATE;            else call HANDLE.SEQ.DEBUG.CHAR(next.event.info);         end;      end;                             /* of wait for exit     */      EXIT.MY.SCREEN   = 0;            /* clear flag after loop */      return GOTO.THIS.SCREEN;   end dbug.screen;end seqdbug;
/* EXTERNAL MEMORY UTILITY MODULE */MODULE XMEMMOD;INSERT ':SYNLITS:COMLITS';          /* COMPILATION FLAGS */INSERT ':SYNLITS:GLOBLITS';         /* GLOBAL ITEMS      */INSERT ':SYNAUXS:XMEMLITS';         /* LOCAL LITS        */INSERT ':SYNMODS:GLOBDCL';          /* WE NEED GLOBMOD   */INSERT ':-XPL:SCSISWAP';            /* ALSO SCISWAP FOR EXT.READDATA */DCL DISKIO.INFO (3)               FIXED PUBLIC;  /* INFO USED BY POLYREAD, POLYWRITE, EXTREAD, EXTWRITE         */DCL COPY.BUF    (ALT.COPY.BLEN-1) FIXED PUBLIC;  /* BUF USED BY COPY ROUTINES - CAN BE USED BY OTHERS WITH CARE *//* ROUTINES TO COPY DATA IN FROM OR OUT TO EXTERNAL MEMORY *//* WE USE OUR OWN ROUTINES SO THAT THE USE OF THE REPEAT   *//* COUNTER CAN BE A RUN TIME VARIABLE                      */COPY.IN:PROC(DES,LEN) PUBLIC;           /* COPY BLOCK INTO MAIN MEMORY - SET UP MAM & MAL BEFORE CALLING */   DCL (DES,LEN) FIXED;   WRITE("313")=DES;                    /* SET UP CORE POINTER */   IF INC.POLY OR (MODC<>0) THEN DO;    /* USE REPEAT CTR      */      DO WHILE LEN IGE 64;              /* COPY 64 WORD CHUNKS */         RPC 64;         WRITE("373")=READ(MDI);         LEN=LEN-64;      END;      IF LEN<>0 THEN DO;                /* FINISH OUT          */         RPC LEN;         WRITE("373")=READ(MDI);      END;   END;   ELSE DO;                             /* MOD B               */      DO WHILE LEN IGE 16;                 /* COPY 16 WORD CHUNKS */         WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI);         WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI);         WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI);         WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI); WRITE("373")=READ(MDI);         LEN=LEN-16;      END;      DO WHILE LEN<>0;          WRITE("373")=READ(MDI);          LEN=LEN-1;       END;    END;END COPY.IN;COPY.OUT:PROC(SOU,LEN) PUBLIC;          /* COPY BLOCK TO EX MEM - SET UP MAM & MAL BEFORE CALLING */   DCL (SOU,LEN) FIXED;   WRITE("313")=SOU;                    /* SET UP CORE POINTER     */   IF INC.POLY OR (MODC<>0) THEN DO;    /* REPEAT COUNTER MATERIAL */      IF LEN IGT (256-READ(MAL))        /* STOP AT SECTOR BOUND    */      THEN DO;                          /* TO AVOID HARDWARE BUG   */         LEN=LEN-(256-READ(MAL));         RPC 256-READ(MAL);             /* REMEMBER -1 IN LITERAL  */         WRITE(MDI)=READ("373");             END;      DO WHILE LEN IGE 64;              /* COPY 64 WORD CHUNKS     */         RPC 64;                        /* REPEAT CTR 64 TIMES     */         WRITE(MDI)=READ("373");        /* ALLOWS INTERRUPTS       */         LEN=LEN-64;                    /* MORE FREQUENTLY         */      END;      IF LEN<>0 THEN DO;                /* SOME REMAINING */         RPC LEN;         WRITE(MDI)=READ("373");      END;   END;   ELSE DO;                             /* NORMAL COPY         */      IF LEN IGT (256-READ(MAL))        /* IF LEN WOULD CROSS SECTOR BOUNDARY */      THEN DO WHILE (READ(MAL)<>0) & (LEN<>0);         WRITE(MDI)=READ("373");          LEN=LEN-1;      END;      DO WHILE LEN IGE 16;              /* COPY 16 WORD CHUNKS */         WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373");         WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373");         WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373");         WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373"); WRITE(MDI)=READ("373");         LEN=LEN-16;      END;      DO WHILE LEN<>0;          WRITE(MDI)=READ("373");          LEN=LEN-1;       END;    END;END COPY.OUT;/* $PAGE - ROUTINE TO COPY EXT MEMORY TO EXT MEMORY - WORD BY WORD, SECTOR BY SECTOR *//* NOTE: COPY.EXT.MEM CALLED WITH INTERRUPTS OFF FROM WRITEOUT *//*       SO WE MUST NEVER ENABLE INTERRUPTS                    */COPY.EXT.MEM:PROC(SOUM,SOUL,DESM,DESL,LEN) PUBLIC;  /* HIGH SPEED COPIES - COPIES UP OR DOWN, ANY LENGTH, IN EXTERNAL MEMORY */   DCL (I,SOUM,SOUL,DESM,DESL,LEN) FIXED;   SOUM=SOUM+SHR(SOUL,8); SOUL=SOUL&255;     /* CONVERT FROM BASE+ OFFSET TO SECTOR + WORD */   DESM=DESM+SHR(DESL,8); DESL=DESL&255;     /* CONVERT FROM BASE+ OFFSET TO SECTOR + WORD */   IF (SOUM=DESM)&(SOUL=DESL) THEN RETURN;   /* CHECK HERE FOR EQUAL - NO NEED TO MOVE */   IF (LEN=0)                 THEN RETURN;   /* ALSO ZERO LENGTH */   IF (SOUM IGT DESM)\((SOUM=DESM)&(SOUL IGT DESL)) THEN DO; /* COPY DOWN */      DO WHILE LEN<>0;                       /* PROCESS DESIRED WORDS */         I=ALT.COPY.BLEN;                    /* GET DISK BUFFER LENGTH IN WORDS */         IF I IGT LEN THEN I=LEN;         WRITE(MAM)=SOUM; WRITE(MAL)=SOUL;         CALL COPY.IN(ADDR(COPY.BUF(0)),I);  /* GET DATA FROM EX MEM */         SOUM=READ(MAM);  SOUL=READ(MAL);    /* GET CONTINUATION ADDRESS */         WRITE(MAM)=DESM; WRITE(MAL)=DESL;   /* SET UP DESTINATION */         CALL COPY.OUT(ADDR(COPY.BUF(0)),I); /* WRITE DATA OUT */         DESM=READ(MAM);  DESL=READ(MAL);    /* GET CONTINUATION ADDRESS */         LEN=LEN-I;                          /* ACCOUNT FOR WORDS COPIED */      END;   END;   ELSE DO; /* COPY UP - MUST START AT TOP AND WORK DOWN */      SOUL=SOUL+LEN; DESL=DESL+LEN; /* COMPUTE TOP POINTERS */      SOUM=SOUM+SHR(SOUL,8); SOUL=SOUL&255;      DESM=DESM+SHR(DESL,8); DESL=DESL&255;      DO WHILE LEN<>0;                          /* PROCESS DESIRED WORDS */         I=ALT.COPY.BLEN;                       /* GET DISK BUFFER LENGTH IN WORDS */         IF I IGT LEN THEN I=LEN;         SOUL=SOUL-I;                           /* BACK UP POINTER BY LENGTH TO COPY */         IF SOUL<0 THEN DO;                     /* BACK UP MSB AS WELL */            SOUM=SOUM+("177400"\SHR(SOUL,8));   /* CONSTRUCT - NUMBER, ADD IN */            SOUL=SOUL&255;                      /* GET POSITIVE MSB */         END;         WRITE(MAM)=SOUM; WRITE(MAL)=SOUL;         CALL COPY.IN(ADDR(COPY.BUF(0)),I);     /* GET DATA FROM EX MEM */         DESL=DESL-I;                           /* BACK UP POINTER BY LENGTH TO COPY */         IF DESL<0 THEN DO;                     /* BACK UP MSB AS WELL */            DESM=DESM+("177400"\SHR(DESL,8));   /* CONSTRUCT - NUMBER, ADD IN */            DESL=DESL&255;                      /* GET POSITIVE MSB */         END;         WRITE(MAM)=DESM; WRITE(MAL)=DESL;      /* SET UP DESTINATION */         CALL COPY.OUT(ADDR(COPY.BUF(0)),I);    /* WRITE DATA OUT */         LEN=LEN-I;                             /* ACCOUNT FOR WORDS COPIED */      END;   END;END COPY.EXT.MEM;COPY.EXT.MEM.SEC:PROC(SOU,DES,SECL) PUBLIC;  /* SECTOR BOUNDARIES & LENGTH  */   DCL (SOU,DES,SECL) FIXED;   IF SOU=DES THEN RETURN;            /* NO WORK TO DO IF IN PLACE   */   IF SECL=0  THEN RETURN;            /* ZERO LENGTH                 */   IF SOU ILT DES THEN DO;            /* COPYING UP - START FROM TOP */      SOU=SOU+SECL; DES=DES+SECL;   END;   DO WHILE SECL IGT 250;             /* COPY IN CHUNKS */      IF SOU ILT DES THEN DO;         /* BACK UP FOR COPY */         SOU=SOU-250; DES=DES-250;      END;      CALL COPY.EXT.MEM(SOU,0,DES,0,SHL(250,8));      IF SOU IGT DES THEN DO;         /* INCREMENT AFTER IF COPYING UP */         SOU=SOU+250; DES=DES+250;      END;      SECL=SECL-250;   END;   IF SOU ILT DES THEN DO;      SOU=SOU-SECL; DES=DES-SECL;   END;   CALL COPY.EXT.MEM(SOU,0,DES,0,SHL(SECL,8));END COPY.EXT.MEM.SEC;/* $SUBTITLE - CODE FOR EXTERNAL MEMORY - EXT.READDATA, EXT.WRITEDATA *//* READ DISK TO EXTERNAL MEMORY *//* NOTE: EXT.READDATA AND EXT.WRITEDATA ARE FULLY COMPATIBLE WITH *//* 24 BIT SECTOR NUMBERS                                          */EXT.READDATA:PROC(DEV,SEC,EXTSEC,EXTWD,SECL,WRDL) PUBLIC SWAPABLE; /* DISKREAD DIRECTLY INTO EXT MEMORY */   DCL (DEV,SEC)      FIXED; /* DEVICE AND START SECTOR DISK ADDR */   DCL (EXTSEC,EXTWD) FIXED; /* EXT MEM DEST SEC AND WD           */   DCL (SECL,WRDL)    FIXED; /* LENGTH SECTORS, WORDS             */   IF INC.MONO<>0 THEN CALL STOP.DISK;    /* STOP DISK FOR MONO */   #START.SEC=EXTSEC;                     /* SET SPECIAL DISKIO VARS */   #START.WD =EXTWD;   #SEC.LEN  =SECL;   #WD.LEN   =WRDL;   CALL EXTREAD(DEV,SEC,DISKIO.INFO);     /* DISKREAD DIRECTLY TO EXT MEM */END EXT.READDATA;/* WRITE FROM EXTERNAL MEMORY TO DISK */EXT.WRITEDATA:PROC(DEV,SEC,EXTSEC,EXTWD,SECL,WRDL) PUBLIC SWAPABLE; /* DISKWRITE DIRECTLY INTO EXT MEMORY */   DCL (DEV,SEC)      FIXED; /* DEVICE AND START SECTOR DISK ADDR */   DCL (EXTSEC,EXTWD) FIXED; /* EXT MEM DEST SEC AND WD           */   DCL (SECL,WRDL)    FIXED; /* LENGTH SECTORS, WORDS             */   IF INC.MONO<>0 THEN CALL STOP.DISK;    /* STOP DISK FOR MONO */   #START.SEC=EXTSEC;                     /* SET SPECIAL DISKIO VARS */   #START.WD =EXTWD;   #SEC.LEN  =SECL;   #WD.LEN   =WRDL;   CALL EXTWRITE(DEV,SEC,DISKIO.INFO);    /* DISKWRITE DIRECTLY FROM EXT MEM */END EXT.WRITEDATA;END XMEMMOD;
/* MISC  $TITLE  Mouse Hole and Other Misc Object Handlers   Modified:   05/02/89 - TSS - Merged changes for Optical disk to DTD transfer project   12/21/87 - MWH - Use Get.Next.Optical.Event directly   *//* Use this procedure if you want the SFD package to define the mouse *//* hole.  Otherwise define your own mouse hole starting at OBJ$Misc   *//* and be sure to save it in a group in GID(MiscGrp).                 */Open.Misc.Objects: proc public swapable;   dcl Id      fixed;   dcl FirstId fixed;   call Set.Auto.Allocation.Id(OBJ$Misc); /* reset id # */   Id=Define.Mouse.Hole.Icon(s#aa,8100,5); /* exit screen icon */   call PID(MouseHole,Id);   FirstId = Id;   /* DebugSwitchId=Define.Switch(s#aa,ScreenTop,71,9,0,'DEBUG:OFF|DEBUG: 1 |DEBUG: 2 |DEBUG: 3 '); */   Id=Group.Objects(GRP$Misc,FirstId,Id,Get#Screen.Event\Get#Program.Exit\Get#Ertyp);   call PID(MiscGrp,Id);      call Activate.Group.Objects(GID(MiscGrp));   call Update.Group.Objects  (GID(MiscGrp));end Open.Misc.Objects;/* $SUBTITLE */Get.Next.Misc.Event: proc public swapable;   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group<>GID(MiscGrp) then return;      if Screen.Event.Code=Get.Screen.Event then do;         if Screen.Event.Id=GID(MouseHole)         then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            then do;               Exit.My.Screen=1;            end;            call Get.Next.Optical.Event;         end;         /* else if Screen.Event.Id=DebugSwitchId  */         /* then call Get.DebugSwitch.Event;       */         else call Get.Next.Optical.Event;      end;      else if Screen.Event.Code=Get.Ertyp then do;         if  (ErrorRow = 23)   /* use system routine to get both 24 and */         and (ErrorCol = 0 )   /* 25 line error codes if possible.      */         then call Handle.System.Error.Codes(Screen.Event.Info);         else if Screen.Event.Info then do;            call Display.Error.Message(Latched.Ertyp,ErrorRow,ErrorCol);         end;         call Get.Next.Optical.Event;      end;      else if Screen.Event.Code=Get.Program.Exit then do;         Exit.My.Screen=1;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event;   /* get another event */   end;end Get.Next.Misc.Event;eofGet.DebugSwitch.Event: proc swapable;   dcl pdl.used fixed;   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group<>GID(MiscGrp) then return;      if Screen.Event.Code=Get.Screen.Event then do;         if Screen.Event.Id<>DebugSwitchId then return;         if Screen.Event.Info=S#Deposit then do; /* switch change */            Debug=Fetch.Switch(DebugSwitchId);            if Debug<>0 then do;                call cpos(21,0); call DumpPos;               call Dump.Current.Window.State('Current Window State',activewindowid);            end;         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event;   /* get another event */   end;end Get.DebugSwitch.Event;
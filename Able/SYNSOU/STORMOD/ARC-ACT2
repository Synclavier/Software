/* $SUBTITLE Copy file(s) from Optical Disk to other devices *//* Modification:    05/09/89 - SGS - Changes to Status messages    05/02/89 - TSS - Merged changes for Optical disk to DTD transfer project    11/08/88 - LSS - bug fixes to category copy stuff*/dcl Add.File.To.Cache proc(fixed array) returns (boolean) external; /* add file to cache */Copy.Sound.File: proc (Name, Dest_Dev) fixed swapable; /* copy file from optical to a disk location */   dcl Name                  fixed array; /* name of file on optical disk to copy */   dcl Dest_Dev              fixed; /* disk device to copy file to */   dcl Recd (L#Rec_Length-1) fixed; /* record for list info from index */   dcl Head_addr (2)         fixed; /* 32-bit sound header address on optical */   /* This routine assumes that the source is the optical disk and the      destination is a disk device, NOT poly memory */   if Dest_Dev=PolyMemDev then return; /* check just to be sure */   call Copy.String(Name,FNBuf); /* set up global string in case of error */   call Index_Locate (Name,Recd,LaserDev); /* get info about file to copy */   call EntryToSec (Recd(L$Dir_Entry)); /* get absolute sector of directory entry on optical disk */   Head_addr(0) = F#MS_Sector|shl(LaserDev,8); /* save where the current header is located */   Head_addr(1) = F#LS_Sector+1;               /* header is the 2nd sector in directory entry */   if Head_addr(1)=0 then Head_addr(0)=Head_addr(0)+1;   /* Find a place on the destination device to put sound file - file      length obtained from the optical directory entry for the file */   if Replace(Name,T#Sound,Recd(L$MS_SecLen),Recd(L$LS_SecLen),Recd(L$LS_WordLen),Dest_Dev)   then do;      /* First transfer the whole sound file from the data area of         the optical disk */      call Set.Term.Attr(Attr#Normal);      call Draw.Message('Reading from Optical Disk...');      call Transfer.Optical.Data ((Recd(L$MS_SecStart)|shl(LaserDev,8)), Recd(L$LS_SecStart), /* sector address of file on optical */                                  F#MS_Sector, F#LS_Sector, /* destination address */                                  F#MS_Length, F#LS_Length, /* length to transfer */                                  LaserDev, shr(F#MS_Sector,8)); /* source, destination device numbers */      /* Now read the most recent header from the directory of the optical         disk and overwrite it to first sector of the sound file */      call Transfer.Optical.Data (Head_addr(0), Head_addr(1), /* sector address of header on optical */                                  F#MS_Sector, F#LS_Sector, /* start of sound file we just transferred */                                  0, 1, /* sector length to copy - one sector header */                                  LaserDev, shr(F#MS_Sector,8)); /* source, destination device numbers */      call Draw.Message('Operation Completed');      call Add.File.To.Cache (Name); /* put the file into the Winchester cache */   end;   else do; /* could not save file in the current catalog - set up for error */      if C#Status=E#Storage /* not room in catalog */      then call Set.Optical.Error(ERR#NoStorage);      else if C#Status=E#CStorage /* no contiguous room in catalog */      then call Set.Optical.Error(ERR#NoConStorage);      else if C#Status=E#Dir_Full /* not directory entries left in catalog */      then call Set.Optical.Error(ERR#NoDirEntries);      else if C#Status=E#Type /* file types are not the same */      then call Set.Optical.Error(ERR#TypeMismatch);      return (false); /* REPLACE failed - could not save file */   end;   return (true); /* successful copy */end Copy.Sound.File;dcl Do.Synclavier.Enter.Stuff proc recursive;dcl Update.Device.Switch      proc (fixed,fixed,fixed) recursive;/* $SUBTITLE Routine to Archive an Entire Catalog of Sound Files */Copy.Category: proc (CatStoreBits) boolean swapable; /* does archive operations on entire subcat */   dcl CatStoreBits  fixed; /* list of control bits, defs in ARC-DLG */   dcl SectorPtr     fixed; /* ptrs into Cat List */   dcl WordPtr       fixed;   dcl FSector       fixed; /* ptrs into File List */   dcl FWord         fixed;   dcl Name(8)       fixed; /* sound filename */   dcl CatSize(1)    fixed; /* size of subcatalog to be created */   dcl WarningBits   fixed; /* possible upcoming errors, see CatCopy# lits */   dcl (i,j,k)       fixed;   dcl AnyWrites     fixed; /* set true if any writes were successful */   dcl Status        fixed;   dcl StatusLine    fixed static;   dcl Str(5)        fixed; /* DEBUGGING */   dcl Record.Buf (L#Rec_Length) fixed; /* for file list records */   Erase.Status: proc;      call Set.Term.Attr(ATTR#Normal);      call Cpos(StatusLine,0); call Erase.To.End.Of.Line;   end Erase.Status;   Generate.Status: proc (Code,FileName);      dcl Code     fixed;      dcl FileName array;      call Set.Term.Attr(ATTR#Reverse|ATTR#AltIntensity);      call Cpos(StatusLine,0);      call Ps('STORE CATEGORY: ');      do case Code;         call ps('Storing');         call ps('Replacing');         call ps('Updating');      end;      call ps(' Sound File "'); call ps(FileName); call ps('"');      call erase.to.end.of.line;   end Generate.Status;   /* $PAGE */   Store.File: proc (Record,CatStoreBits) fixed;      dcl Record           array;      dcl CatStoreBits     fixed; /* list of control bits, defs in ARC-DLG */      dcl filename  (4)    fixed;      dcl OrigName  (4)    fixed;      dcl Status           fixed;      dcl FileThere        fixed;      dcl Do.Source.Rename boolean;      dcl Head_addr (1)    fixed;      dcl (i,j,k)          fixed;      /* convert filename to -XPL string */      filename(0) = 0;      do i = 1 to 4;         filename(i) = Record(i-1);         filename(0) = filename(0)+((filename(i)&"377")<>0)+(shr(filename(i),8)<>0);      end;      /* Find a place on the destination device to put sound file - file         length obtained from the optical directory entry for the file */      FileThere=Locate(filename,1); /* see if file exists in catalog */      if (     FileThere  & ((CatStoreBits&CAT#PromptExist)<>0))      or ((Not FileThere) & ((CatStoreBits&CAT#PromptNew  )<>0))      then do;         call Erase.Status; /* clear prior status before opening dialog */         StatusLine=DialogRow+2;         if GID(SFDDlgGrp)=(-1)   /* open up dialog prompt first time through */         then call Open.Store.File.Dialog(CategoryMode,DialogRow);         CatStoreBits=CatStoreBits&(CAT#CaptionSource|CAT#CatSource); /* only keep these two bits */         CatStoreBits=CatStoreBits|Get.Store.File.Response(CategoryMode,filename,FileThere); /* routine might return different name & bits */         if (CatStoreBits&CAT#Abort)<>0 then do; /* we want to quit category store */            return (-1);         end;         if (CatStoreBits&CAT#DoIt)=0 then do; /* we want to skip this file */            return 0;         end;         if EqStr(OrigName,filename)<>0 then do; /* got a different name back */            if      (CatStoreBits& CAT#Store)              <>0 then FileThere=false;            else if (CatStoreBits&(CAT#Replace|CAT#Update))<>0 then FileThere=true;            Do.Source.Rename=true;                          /* rename source file */         end;      end;      if  (FileThere                       /* file exists in catalog */      and ((CatStoreBits&CAT#Replace)<>0)) /* and we want to replace existing file */      or   ((not FileThere)                /* or file does not exist yet */      and ((CatStoreBits&CAT#Store)<>0))   /* and we want to save it */      then do;                             /* do Replace operation */         call Generate.Status(FileThere,filename); /* update status message */         call EntryToSec (Record(L$Dir_Entry)); /* get absolute sector of directory entry on optical disk */         Head_addr(0) = F#MS_Sector|shl(LaserDev,8); /* save where the current header is located */         Head_addr(1) = F#LS_Sector+1;               /* header is the 2nd sector in directory entry */         if Head_addr(1)=0 then Head_addr(0)=Head_addr(0)+1;         if Replace(filename,T#Sound,Record(L$MS_SecLen),Record(L$LS_SecLen),Record(L$LS_WordLen),1)         then do;            /* First transfer the whole sound file from the data area of               the optical disk */            call Set.Term.Attr(Attr#Normal);            call Draw.Message('Reading from Optical Disk...');            call Transfer.Optical.Data ((Record(L$MS_SecStart)|shl(LaserDev,8)), Record(L$LS_SecStart), /* sector address of file on optical */                                        F#MS_Sector, F#LS_Sector, /* destination address */                                        F#MS_Length, F#LS_Length, /* length to transfer */                                        LaserDev, shr(F#MS_Sector,8)); /* source, destination device numbers */            /* Now read the most recent header from the directory of the optical               disk and overwrite it to first sector of the sound file */            call Transfer.Optical.Data (Head_addr(0), Head_addr(1), /* sector address of header on optical */                                        F#MS_Sector, F#LS_Sector, /* start of sound file we just transferred */                                        0, 1, /* sector length to copy - one sector header */                                        LaserDev, shr(F#MS_Sector,8)); /* source, destination device numbers */            call Draw.Message('Operation Completed');            call Add.File.To.Cache (filename); /* put the file into the Winchester cache */            Status=(+1);         end;         else do; /* could not save file in the current catalog - set up for error */            if C#Status=E#Storage /* not room in catalog */            then call Set.Optical.Error(ERR#NoStorage);            else if C#Status=E#CStorage /* no contiguous room in catalog */            then call Set.Optical.Error(ERR#NoConStorage);            else if C#Status=E#Dir_Full /* not directory entries left in catalog */            then call Set.Optical.Error(ERR#NoDirEntries);            else if C#Status=E#Type /* file types are not the same */            then call Set.Optical.Error(ERR#TypeMismatch);            else if C#Status=E#Name /* invalid filename */            then call Set.Optical.Error(ERR#IllegalFilename);            Status=(-1);         end;         if (Status>0) & Do.Source.Rename then do;            if need.to.clean.up then do; end;         end;      end;      return Status;   end Store.File;   /* $PAGE */   if (CatStoreBits&CAT#DoIt)=0 then return false; /* nothing to do */   if (CatStoreBits&(CAT#Store|CAT#Update|CAT#Replace|CAT#PromptNew|CAT#PromptExist))=0   then return false;                              /* nothing to do */   call Get.Category.Size(GID(SavedCatSector),GID(SavedCatWord));   call Get.Catalog.Info; /* recompute globals */   if (CatStoreBits&CAT#UseCurCat)=0 then do;     /* create new subcatalog */      /* get new subcatalog name */      Name(0) = GID(CatalogString);      if Name(0) = 0 then return(false);      do i = 1 to shr(Name(0)+1,1);         Name(i) = GID(CatalogString+i);      end;      call COPY32(CY#FilesSum,CatSize);      call ADD16(4,CatSize);           /* add 4 sectors for directory */      if Locate(Name,1) then do; /* check if file already exists */         call Set.Optical.Error(ERR#DuplCatalog); /* file is already there */         return (false); /* get out of here */      end;      if Replace(Name,T#LSubc,CatSize(0),CatSize(1),shl(CatSize(1),8),1)<>0      then do;         /* zero out directory */         call BlockSet(Misc.Buf,256,0);         do i = 0 to 3;            call WriteData(f#ms_sector,f#ls_sector,Misc.Buf,256);            f#ls_sector = f#ls_sector + 1;            if f#ls_sector = 0 then f#ms_sector = f#ms_sector + 1;        end;      end;      else do;         if C#Status=E#Storage /* no room for catalog */         then do;            call Conv.32bit.Int.To.Str(CatSize,FNBuf); /* KLUDGE */            call Set.Optical.Error(ERR#NoRoomForSubc);         end;         else if C#Status=E#CStorage  /* no contiguous room for catalog */         then call Set.Optical.Error(ERR#NoCRoomSubc);         else call Set.Optical.Error(ERR#OtherCatError); /* other catalog error */         return(false);      end;      if not Enter_Catalog(Name,1) then do;         call Set.Optical.Error(ERR#OtherCatError);         return;      end;      else do;  /* entered catalog successfully */         /* do some misc stuff to keep real-time code happy */         call Do.Synclavier.Enter.Stuff;          /* update globals */         call PID(FileOnSource,true);        /* catalog exists */         call PID(FileType    ,T#LSubc);     /* save type of current catalog */         call PID(FileDevice  ,1);           /* device */         call PID(FileAddress ,C#MS_Sector); write(md)=C#LS_Sector; /* save abs addr of catalog */         call PID(FileLength  ,C#MS_Length); write(md)=C#LS_Length; /* and length of catalog */         /* reset DirWindow to display new catalog */         call Select.New.Window.Device(DirWindowId,Update.Device.Switch(1,C#MS_Sector,C#LS_Sector));      end;   end;   /* error check - reset c# globals */   if not Read_Catalog('',1) then do;      call Set.Optical.Error(ERR#OtherCatError);      return;   end;   call Get.Catalog.Info; /* recompute globals */   if CY#NumFiles igt ((c#dir_size/c#len) - CG#NumFiles) then      WarningBits = WarningBits|CatCopy#TooManyFiles;   if COM32(CY#FilesSum,CG#FreeSec)= lw#igt then      WarningBits = WarningBits|CatCopy#NotEnoughFreeSecs;   /* put up warning, if necessary */   if WarningBits<>0 then do;      call Open.Copy.Category.Warning(DialogRow,WarningBits);      if not Get.Warning.Response then return(false);   end;      StatusLine=DialogRow;   /* now we will actually try to write out the sound file data */   call Seek(CatList,I$CatStart+GID(SavedCatSector),3); /* seek to category */   call Seek(CatList,shl(GID(SavedCatWord),1),1);   call GetW(CatList);              /* skip CListRecLen */   i = 1+shr(GetW(CatList)+1,1);    /* words in category name */   call Seek(CatList,shl(i-1,1),1); /* seek past category name */   CY#NumFiles=GetW(CatList);       /* number of files in this category */   do I=0 to CY#NumFiles-1; /* loop over all files */      /* get file list address */      j = GetW(CatList);      load j; mul  L#Rec_Length;      mwait;  div  256;      FSector = res; FWord = rem;            call Seek(FileList,I$FileStart+FSector,3); /* seek to appropriate sector in file list */      call Seek(FileList,shl(FWord,1),1);        /* seek to appropriate word in this sector */      call FRead(Record.Buf,L#Rec_Length,2,FileList); /* get file list record */      /* copy file */      Status = Store.File(Record.Buf,CatStoreBits);      call Erase.Status;      if Status=1         /* actually wrote file to disk */      then do;         AnyWrites=true;      end;      else if Status=(-1) then do; /* had an error trying to write file */         if GID(SFDDlgGrp)<>(-1) then do;            /* enable group objects before erase to avoid smgr bug */            call Activate.Group.Objects(GID(SFDDlgGrp));            call Set.Term.Attr(Attr#Normal);            call Close.Dialog.Panel;         end;         return AnyWrites;      end;   end; /* looping over file entries */   /* $PAGE */   if GID(SFDDlgGrp)<>(-1) then do;      /* enable group objects before erase to avoid smgr bug */      call Activate.Group.Objects(GID(SFDDlgGrp));      call Set.Term.Attr(Attr#Normal);      call Close.Dialog.Panel;   end;   call Erase.Status;   return AnyWrites;   /* everything went A-OK */end Copy.Category;
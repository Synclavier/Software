/* DEBUG  $TITLE  Some Code Used to Get Screen Up and Running *//* dcl Debug         fixed public; Debug=0; *//* dcl DebugSwitchId fixed public;          */dcl debug lit '0';Quit: proc public swapable;   if debug = 0 then return;   call Set.Term.Attr(ATTR#Normal);   call clear.term;    call tty_wait; disable;   write("54")=0;   call exit(0);end Quit;Window.Already.Open: proc (code) public swapable;   dcl code fixed;   if debug = 0 then return;   call pc(7); call cpos(23,0); call ps('Window ');   call pnum(code,0); call ps('is already open!');   call tty_wait;end Window.Already.Open;Window.Not.Open: proc (code) public swapable;   dcl code fixed;   if debug = 0 then return;   call pc(7); call cpos(23,0); call ps('Window ');   call pnum(code,0); call ps('is not open!');   call tty_wait;end Window.Not.Open;Menu.Already.Open: proc (code) public swapable;   dcl code fixed;   if debug = 0 then return;   call pc(7); call cpos(23,0); call ps('Menu ');   call pnum(code,0); call ps('is already open!');   call tty_wait;end Menu.Already.Open;Menu.Not.Open: proc (code) public swapable;   dcl code fixed;   if debug = 0 then return;   call pc(7); call cpos(23,0); call ps('Menu ');   call pnum(code,0); call ps('is not open!');   call tty_wait;end Menu.Not.Open;Debug.Print: proc (s) public;   dcl s array;   if debug = 0 then return;   call tty_wait; disable;   print string(s);   enable;end Debug.Print;/* $SUBTITLE */DumpPos: proc public swapable;   dcl (x) fixed;   if debug = 0 then return;   call Scroll.Screen(22,23,1);   call Save.Cursor;   call cpos(23,0);   call erase.to.end.of.line;   call ps('CInd:');  call pnum(Clistindex ,0);   call ps(' CPos:'); call pnum(CListCurPos,0);   call ps(' #F:');   call pnum(CListFiles ,0);   call ps(' CSec:'); call pnum(CListSector,0);   call ps(' CWd:');  call pnum(CListWord  ,0);   call ps(' Len:');  call pnum(CListRecLen,0);   call ps(' FInd:'); call pnum(FListIndex ,0);   call ps(' FSec:'); call pnum(FListSector,0);   call ps(' FWd:');  call pnum(FListWord  ,0);   call ps(' Typ:');  call pnum(CurItemType,0);   call Restore.Cursor;end DumpPos;
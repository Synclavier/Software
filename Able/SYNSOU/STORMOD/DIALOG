/* DIALOG $TITLE dialog box for store and recall screen   Modified:   10/17/90 - cj  - fixed bug in get.bin.response that caused loop   08/06/90 - LSS - changed format dialog so that error messages get printed   05/02/89 - TSS - Merged changes for Optical disk to DTD transfer project   12/01/88 - cj  - added biN button, reworkd Shuffle button to RAM button   12/21/87 - MWH - Use Get.Next.Optical.Event directly   */dcl Select.DlgOrigObj proc recursive;Close.Dialog.Panel: proc public swapable;   if GID(SFDDlgGrp)= -1 then return; /* panel already undefined */   call Erase.Group.Objects   (GID(SFDDlgGrp));   call Undefine.Group.Objects(GID(SFDDlgGrp));   call Ungroup.Objects       (GID(SFDDlgGrp));   call PID(SFDDlgGrp,-1);      /* no longer defined */   call Select.DlgOrigObj;      /* select previously saved obj as cur obj */   call PID(DlgReselect,1);     /* force reselect of dirtable after dialog since arrowselect reselect is always lost */end Close.Dialog.Panel;Set.DlgOrigObj: proc public swapable;   dcl i fixed;   if  ((Fetch.Object.Info(Cur.Obj.Id,O#Type  )>0))                /* non-graphics object */   and ((Fetch.Object.Info(Cur.Obj.Id,O#Action)&O#ACT.Prev.Obj)=0) /* and not return to prev */   then i = Cur.Obj.Id;  /* return to current object after done */   else i = Prev.Obj.Id; /* where to go after dialog is done */   /* but check again since some times previous object */   /* is also a problem                                */   if  ((Fetch.Object.Info(i,O#Type  )<=0))                /* if graphics */   or  ((Fetch.Object.Info(i,O#Action)&O#ACT.Prev.Obj)<>0) /* or button   */   then i = Gid(DirTable);   call PID(DlgOrigObj,i);     end Set.DlgOrigObj;Select.DlgOrigObj: proc public swapable;   /* restore to previous object */   call Select.New.Cur.Obj(GID(DlgOrigObj),-1,-1);    /* we made sure in Set.DlgOrigObj() that DlgOrigObj was */   /* NOT enabled for Return.To.Prev.Obj, so we can do     */   /* the following safely:                                */   Prev.Obj.Id=Cur.Obj.Id;end Select.DlgOrigObj;/* map return to key activate to avoid smgr bugs for now */Check.Dialog.Event.For.Key.Activate:proc swapable;   if  (Screen.Event.Code=Get.In.Char)   and (Screen.Event.Info=CRET       )   then do;       Screen.Event.Code =Get.Screen.Event;      Screen.Event.Info =S#KeyActivate;      Screen.Event.Id   =Cur.Obj.Id;      Screen.Event.Group=GID(SFDDlgGrp);   end;end Check.Dialog.Event.For.Key.Activate;/* $SUBTITLE Format Optical Dialog Panel */Open.Format.Optical.Dialog: proc public swapable;   dcl TopRow       fixed; /* row of top of panel */   dcl (FirstId,Id) fixed;   dcl Str (40)     fixed; /* a string buffer */   dcl Icon (16)    fixed;   dcl mr13i        lit 'write("373")';   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   TopRow = GID(SFDDlgRow);   /* get dialog row */   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Optical volume is UNFORMATTED or is inserted upside-down.     [FORMAT]  [CANCEL] */   /* SECOND LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Volume Name: 12345678  Caption:                                                  */   /* THIRD  LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Enter:   Today's Date:            Time:                                          */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Optical volume is UNFORMATTED or is inserted upside-down.     [FORMAT]  [CANCEL] */   call Copy.String('Optical volume is UNFORMATTED or is inserted upside-down.',Str);   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   /* reset the region to be 1 point only for now (KLUDGE) */   /* call Locate.Object(FirstId); */   /* call Write.Object(Object.Ptr+O#LRX,Read.Object(Object.Ptr+O#ULX)); */   /* call Write.Object(Object.Ptr+O#LRY,Read.Object(Object.Ptr+O#ULY)); */   call Copy.String('[FORMAT]',Str);   Id=Define.Label(s#aa,TopRow,62,Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* SECOND LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Volume Name: 12345678  Caption:                                                  */   call Copy.String('Volume Name:',Str);   Id=Define.Label(s#aa,TopRow+1,0,Str(0),Str);   call Set.Object.Mouse.Access(Id,0);   Id=Define.String(s#aa,TopRow+1,13,8,0);   call PID(DlgVolName,Id);   call Copy.String('Caption: ',Str);   Id=Define.Label(s#aa,TopRow+1,22,Str(0),Str);   call Set.Object.Mouse.Access(Id,0);   Id=Define.String(s#aa,TopRow+1,31,80-31,0);   call PID(DlgVolCaption,Id);   /* THIRD  LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Enter:   Today's Date: 01 JAN 88               Time: 12:00 PM            */   call Copy.String('Enter:   Today''s Date: ',Str);   Id=Define.Label(s#aa,TopRow+2,0,Str(0),Str);   call Set.Object.Mouse.Access(Id,0);   Id=Define.String(s#aa,TopRow+2,23,20,0);   disable.deposits = 1;   call Deposit.String(id,'01 JAN 88');   disable.deposits = 0;   call PID(DlgDate,Id);   call Copy.String('Time: ',Str);   Id=Define.Label(s#aa,TopRow+2,47,Str(0),Str);   call Set.Object.Mouse.Access(Id,0);   Id=Define.String(s#aa,TopRow+2,53,8,0);   disable.deposits = 1;   call Deposit.String(id,'12:00 PM');   disable.deposits = 0;   call PID(DlgTime,Id);   /* put a small frame around the dialog panel */   write("313")=Addr(Icon(0));   mr13i=O#ICON.Plot; mr13i=   0; mr13i=-295;   mr13i=O#ICON.Plot; mr13i=8025; mr13i=-295;   mr13i=O#ICON.Plot; mr13i=8025; mr13i=   0;   mr13i=O#ICON.End;   Id=Define.Graphics.Icon(s#aa,-25,TopRow*100-95,0,Icon);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,GID(DlgVolName),-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,GID(DlgVolCaption),GID(DlgGo),-1);   call Set.Object.Arrow.Links(GID(DlgVolName)   ,GID(DlgGo),GID(DlgDate),-1,GID(DlgVolCaption));   call Set.Object.Arrow.Links(GID(DlgVolCaption),GID(DlgAbort),GID(DlgTime),GID(DlgVolName),-1);   call Set.Object.Arrow.Links(GID(DlgDate)      ,GID(DlgVolName),-1,-1,GID(DlgTime));   call Set.Object.Arrow.Links(GID(DlgTime)      ,GID(DlgVolCaption),-1,GID(DlgDate),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event\Get#Ertyp);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Format.Optical.Dialog;/* $PAGE *//* dcl Get.Next.Misc.Event proc recursive; */Get.Format.Optical.Response: proc (Name,Caption,Date,Time) fixed PUBLIC swapable; /* handle input on FORMAT dialog panel */   dcl Name     array; /* output - user entered volume name    */   dcl Caption  array; /* output - user entered volume caption */   dcl Date     array; /* output - user entered date           */   dcl Time     array; /* output - user entered time           */   dcl i        fixed;   call Get.Next.Optical.Event;         /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      call Check.Dialog.Event.For.Key.Activate;      if Screen.Event.Group=GID(SFDDlgGrp) then do;         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if Screen.Event.Id=GID(DlgGo) then do;                  call Fetch.String(GID(DlgVolName)   ,Name); /* get user info */                  call Fetch.String(GID(DlgVolCaption),Caption);                  call Fetch.String(GID(DlgDate),date);                  call Fetch.String(GID(DlgTime),time);                  if (CONV.STR.TO.DATE(date)=0)                  or (CONV.STR.TO.TIME(time)=0)                  or (VALID_FILENAME  (name)=0)                  then do;                     call Set.Optical.Error(ERR#MustEnterDateAndTime);                  end;                  else do;                     call Close.Dialog.Panel;                     return true;                  end;               end;               else if Screen.Event.Id=GID(DlgAbort) then do;                  call Close.Dialog.Panel;                  return false;               end;            end;            else if Screen.Event.Info=S#Deposit then do;               if (Screen.Event.Id=GID(DlgVolName   ))               or (Screen.Event.Id=GID(DlgVolCaption))               or (Screen.Event.Id=GID(DlgDate      ))               or (Screen.Event.Id=GID(DlgTime      ))               then do;                  if Screen.Event.Id=GID(DlgVolName)                  then do;                     call Fetch.String(Screen.Event.Id,name);                     call Remove.Spaces.From.String(name,name);                     call UpperCase.String         (name,name);                     if VALID_FILENAME(name)=0 then do;                        if name(0) igt 8 then name(0) = 8;                        call copy.string(name,fnbuf);                        call Set.Optical.Error(ERR#BadVolumeName);                     end;                     else do;                        Disable.Deposits=true;                        call Deposit.String(Screen.Event.Id,name);                        Disable.Deposits=false;                     end;                  end;                  else if Screen.Event.Id=GID(DlgDate)                  then do;                     call Fetch.String(Screen.Event.Id,date);                     i = CONV.STR.TO.DATE(date);                     if i=0 then do;                        call Set.Optical.Error(ERR#FormatErrorInDate);                     end;                     else do;                        call CONV.DATE.TO.STR(i,date);                        disable.deposits=1;                        call Deposit.String(Screen.Event.Id,date);                        disable.deposits=0;                     end;                  end;                  else if Screen.Event.Id=GID(DlgTime)                  then do;                     call Fetch.String(Screen.Event.Id,time);                     i = CONV.STR.TO.TIME(time);                     if i = 0 then do;                        call Set.Optical.Error(ERR#FormatErrorInTime);                     end;                     else do;                        call CONV.TIME.TO.STR(i,time,0);                        disable.deposits=1;                        call Deposit.String(Screen.Event.Id,time);                        disable.deposits=0;                     end;                  end;                  else do;                     call Fetch.String(Screen.Event.Id,Caption);                     call Strip.Leading.Spaces(Caption,Caption);                     Disable.Deposits=true;                     call Deposit.String(Screen.Event.Id,Caption);                     Disable.Deposits=false;                  end;               end;            end;            call Get.Next.Optical.Event;         end;         else if Screen.Event.Code=Get.Ertyp then do;            if  (GID(SFDErrRow) = 23)   /* use system routine to get both 24 and */            and (GID(SFDErrCol) = 0 )   /* 25 line error codes if possible.      */            then call Handle.System.Error.Codes(Screen.Event.Info);            else if Screen.Event.Info then do;               call Display.Error.Message(Latched.Ertyp,GID(SFDErrRow),GID(SFDErrCol));            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(SFDMiscGrp) then do;         call Get.Next.Optical.Event; /* stay in this dialog, print errors, until cancel is received */      /* call Close.Dialog.Panel; */      /* return false;  */ /* let higher event loop take care of this */      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Close.Dialog.Panel;   return false; /* did not get format command */end Get.Format.Optical.Response;/* $SUBTITLE Update Index Dialog Panel */Open.Update.Optical.Dialog: proc public swapable;   dcl TopRow       fixed; /* row of top of panel */   dcl (FirstId,Id) fixed;   dcl Str (40)     fixed; /* a string buffer */   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   TopRow = GID(SFDDlgRow);   /* get dialog row */   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* The Index for this Optical volume is not up-to-date.          [UPDATE]  [CANCEL] */   call Copy.String('The Index for this Optical volume is not up-to-date.',Str);   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   /* reset the region to be 1 point only for now (KLUDGE) */   /* call Locate.Object(FirstId); */   /* call Write.Object(Object.Ptr+O#LRX,Read.Object(Object.Ptr+O#ULX)); */   /* call Write.Object(Object.Ptr+O#LRY,Read.Object(Object.Ptr+O#ULY)); */   call Copy.String('[UPDATE]',Str);   Id=Define.Label(s#aa,TopRow,62,Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,-1,-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,-1,GID(DlgGo),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event\Get#Ertyp);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Update.Optical.Dialog;/* $PAGE */Get.Update.Optical.Response: proc fixed public swapable; /* handle input on UPDATE OPTICAL dialog panel */   call Get.Next.Optical.Event;         /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      call Check.Dialog.Event.For.Key.Activate;      if Screen.Event.Group=GID(SFDDlgGrp) then do;         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if (Screen.Event.Id=GID(DlgGo))               or (Screen.Event.Id=GID(DlgAbort)) then do;                  call Close.Dialog.Panel;                  return (Screen.Event.Id=GID(DlgGo));               end;            end;            else call Get.Next.Optical.Event;         end;         else if Screen.Event.Code=Get.Ertyp then do;            if  (GID(SFDErrRow) = 23)   /* use system routine to get both 24 and */            and (GID(SFDErrCol) = 0 )   /* 25 line error codes if possible.      */            then call Handle.System.Error.Codes(Screen.Event.Info);            else if Screen.Event.Info then do;               call Display.Error.Message(Latched.Ertyp,GID(SFDErrRow),GID(SFDErrCol));            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(SFDMiscGrp) then do;         call Close.Dialog.Panel;         return false; /* did not get format command */      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Close.Dialog.Panel;   return false; /* did not get format command */end Get.Update.Optical.Response;/* $SUBTITLE Volume Change Dialog Panel */Open.Optical.Volume.Change.Dialog: proc public swapable;   dcl TopRow       fixed; /* row of top of panel */   dcl (FirstId,Id) fixed;   dcl Str (40)     fixed; /* a string buffer */   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   TopRow = GID(SFDDlgRow);  /* get dialog row */   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* The current Optical volume does not match your current Index.  [MOUNT]  [CANCEL] */   call Copy.String('The current Optical volume does not match your current Index.',Str);   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   /* reset the region to be 1 point only for now (KLUDGE) */   /* call Locate.Object(FirstId); */   /* call Write.Object(Object.Ptr+O#LRX,Read.Object(Object.Ptr+O#ULX)); */   /* call Write.Object(Object.Ptr+O#LRY,Read.Object(Object.Ptr+O#ULY)); */   call Copy.String('[LOAD]',Str);   Id=Define.Label(s#aa,TopRow,64,Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,-1,-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,-1,GID(DlgGo),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event\Get#Ertyp);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Optical.Volume.Change.Dialog;/* $PAGE */Get.Optical.Volume.Change.Response: proc fixed public swapable; /* handles input on VOLUME CHANGE dialog panel */   call Get.Next.Optical.Event;           /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      call Check.Dialog.Event.For.Key.Activate;      if Screen.Event.Group=GID(SFDDlgGrp) then do;         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if (Screen.Event.Id=GID(DlgGo))               or (Screen.Event.Id=GID(DlgAbort)) then do;                  call Close.Dialog.Panel;                  return (Screen.Event.Id=GID(DlgGo));               end;            end;            else call Get.Next.Optical.Event;         end;         else if Screen.Event.Code=Get.Ertyp then do;            if  (GID(SFDErrRow) = 23)   /* use system routine to get both 24 and */            and (GID(SFDErrCol) = 0 )   /* 25 line error codes if possible.      */            then call Handle.System.Error.Codes(Screen.Event.Info);            else if Screen.Event.Info then do;               call Display.Error.Message(Latched.Ertyp,GID(SFDErrRow),GID(SFDErrCol));            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(SFDMiscGrp) then do;         call Close.Dialog.Panel;         return false; /* did not get format command */      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Close.Dialog.Panel;   return false; /* did not get format command */end Get.Optical.Volume.Change.Response;Open.Shuffle.Dialog: proc public swapable;   dcl TopRow       fixed; /* row of top of panel */   dcl (FirstId,Id) fixed;   dcl Str (40)     fixed; /* a string buffer */   dcl i            fixed;   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   TopRow = GID(SFDDlgRow);  /* get dialog row */   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Poly RAM Memory:              [SHUFFLE]      [COLLECT]      [ERASE]     [CANCEL] */   call Copy.String('Poly RAM Memory:',Str);   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   call Copy.String('[SHUFFLE]',Str);   Id=Define.Label(s#aa,TopRow,30,Str(0),Str);   call PID(DlgShuffle,Id);      call Copy.String('[COLLECT]',Str);   Id=Define.Label(s#aa,TopRow,45,Str(0),Str);   call PID(DlgCollect,Id);      call Copy.String('[ERASE]',Str);   Id=Define.Label(s#aa,TopRow,60,Str(0),Str);   call PID(DlgErase,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   call PID(DlgGo,0);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgShuffle),0,0, 0,GID(DlgCollect));   call Set.Object.Arrow.Links(GID(DlgCollect),0,0, GID(DlgShuffle),GID(DlgErase));   call Set.Object.Arrow.Links(GID(DlgErase),  0,0, GID(DlgCollect),GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort),  0,0, GID(DlgErase),0);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event\Get#Ertyp);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Shuffle.Dialog;Get.Shuffle.Response: proc fixed public swapable; /* handles input on SHUFFLE panel */   call Get.Next.Optical.Event;           /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group=GID(SFDDlgGrp) then do;     /* make sure still in dialog group */         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if (Screen.Event.Id=GID(DlgShuffle))               or (Screen.Event.Id=GID(DlgCollect))               or (Screen.Event.Id=GID(DlgErase  ))               or (Screen.Event.Id=GID(DlgAbort  ))               then do;                  call Set.Term.Attr(ATTR#Normal);                  call Close.Dialog.Panel;                  call Set.Dirtable.Position(-1,-1);                   if (Screen.Event.Id=GID(DlgShuffle))                  then return 1;                  if (Screen.Event.Id=GID(DlgCollect))                  then return 2;                  if (Screen.Event.Id=GID(DlgErase  ))                  then return 3;                  return 0;               end;               else call Get.Next.Optical.Event;     /* else just get another event if selecting the string field */            end;            else call Get.Next.Optical.Event;   /* get another event */         end;         else if Screen.Event.Code=Get.Ertyp then do;            if  (GID(SFDErrRow) = 23)   /* use system routine to get both 24 and */            and (GID(SFDErrCol) = 0 )   /* 25 line error codes if possible.      */            then call Handle.System.Error.Codes(Screen.Event.Info);            else if Screen.Event.Info then do;               call Display.Error.Message(Latched.Ertyp,GID(SFDErrRow),GID(SFDErrCol));            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(SFDMiscGrp) then do;         call Set.Term.Attr(ATTR#Normal);         call Close.Dialog.Panel;         call Set.Dirtable.Position(-1,-1);          return false;      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            /* Detect Double Click on RAM button: */            if  (Screen.Event.Group = GID(WindowGrp      ))            and (Screen.Event.Id    = GID(DirTableShuffle))            then do;               call Set.Term.Attr(ATTR#Normal);               call Close.Dialog.Panel;               call Set.Dirtable.Position(-1,-1);                return 0;            end;            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Set.Term.Attr(ATTR#Normal);   call Close.Dialog.Panel;   call Set.Dirtable.Position(-1,-1);    return false; /* did not get format command */end Get.Shuffle.Response;Open.Print.Dialog: proc public swapable;   dcl TopRow       fixed; /* row of top of panel */   dcl (FirstId,Id) fixed;   dcl Str (40)     fixed; /* a string buffer */   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   TopRow = GID(SFDDlgRow);  /* get dialog row */   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Click PRINT to initiate printout                          [PRINT]       [CANCEL] */   /* Title: 0123456789012345678901234567890123456789012345678901234567890123456789012 */   call Copy.String('Click PRINT to initiate printout',Str);   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   call Copy.String('[PRINT]',Str);   Id=Define.Label(s#aa,TopRow,58,Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* Only draw title if not in expanded (no menu) mode */   if TopRow <> 1 then do;      Id = Define.Label(s#aa,TopRow+1,0,7,'Title: ');      call Set.Object.Mouse.Access(Id,0);      Id = Define.String(s#aa,TopRow+1,7,80-7,O#STR.General);      call Set.Object.Attr(Id,0,ATTR#Normal|ATTR#Reverse);      call Set.Object.Attr(Id,1,ATTR#Normal|ATTR#Reverse);      call PID(DlgUserTitle,Id);      call Set.Object.Arrow.Links(GID(DlgUserTitle),GID(DlgGo),0,0,GID(DlgAbort));   end;   else call PID(DlgUserTitle,0);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)       ,0,GID(DlgUserTitle),GID(DlgUserTitle),GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)    ,0,GID(DlgUserTitle),GID(DlgGo),0);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event\Get#Ertyp);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgGo),-1,-1);end Open.Print.Dialog;Get.Print.Response: proc (Buf) public swapable; /* handles input on PRINT panel */   dcl Buf          array;  /* output buffer */   call Get.Next.Optical.Event;           /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group=GID(SFDDlgGrp) then do;     /* make sure still in dialog group */         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if (Screen.Event.Id=GID(DlgGo))               or (Screen.Event.Id=GID(DlgAbort)) then do;                  if (GID(DlgUserTitle) <> 0)                  then call Fetch.String(GID(DlgUserTitle),Buf); /* save user's string */                  else buf(0) = 0;                  call Set.Term.Attr(ATTR#Normal);                  call Close.Dialog.Panel;                  call Set.Dirtable.Position(-1,-1);                   return (Screen.Event.Id=GID(DlgGo));               end;               else call Get.Next.Optical.Event;     /* else just get another event if selecting the string field */            end;            else call Get.Next.Optical.Event;   /* get another event */         end;         else if Screen.Event.Code=Get.Ertyp then do;            if  (GID(SFDErrRow) = 23)   /* use system routine to get both 24 and */            and (GID(SFDErrCol) = 0 )   /* 25 line error codes if possible.      */            then call Handle.System.Error.Codes(Screen.Event.Info);            else if Screen.Event.Info then do;               call Display.Error.Message(Latched.Ertyp,GID(SFDErrRow),GID(SFDErrCol));            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(SFDMiscGrp) then do;         call Set.Term.Attr(ATTR#Normal);         call Close.Dialog.Panel;         call Set.Dirtable.Position(-1,-1);          return false;      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            /* Detect Double Click on Print button: */            if  (Screen.Event.Group = GID(WindowGrp    ))            and (Screen.Event.Id    = GID(DirTablePrint))            then do;               if (GID(DlgUserTitle) <> 0)               then call Fetch.String(GID(DlgUserTitle),Buf); /* save user's string */               else buf(0) = 0;               call Set.Term.Attr(ATTR#Normal);               call Close.Dialog.Panel;               call Set.Dirtable.Position(-1,-1);                return true;            end;            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Set.Term.Attr(ATTR#Normal);   call Close.Dialog.Panel;   call Set.Dirtable.Position(-1,-1);    return false; /* did not get format command */end Get.Print.Response;/* Routine to fill in bin dialog line: */Fill.Bin.Dialog: proc swapable;   dcl Str (40)     fixed; /* a string buffer */   dcl (i,j,k)      fixed;   dcl Tmp ( 1)     fixed;   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Available Memory (Mb): 32.1, 32.2,  3.1   Enter Preferred Bin No.:  1   [CANCEL] */   /* Free Memory      (Mb): 10.0, 10.0, 10.0 */   disable.deposits = 1;   call Copy.String('Available Memory (Mb):',Str);   do k = 0 to 2;                     /* append megabytes in each bin */      call set.cur.bin(k);            /* point data structures at this bin */      call COPY32(psfree, tmp);       /* get in handy temp                 */      load  tmp(lw#lsb);              /* get sectors of poly mem avail     */      uload tmp(lw#msb);      div 2048;                       /* compute megabytes avail in this   */      i=res; j=rem;                   /* bin to .1 megabyte accurately     */      load j; mul 10;      j=res;      div 2048;      j=res;                          /* round up by .05 mb                */      if rem ige 1024 then j = j + 1;      i = i*10 + j;                   /* get tenths of Mb                  */      call CONV.FIXED.TO.STR(i,1,5,cf#unsigned\cf#right\cf#spfill\cf#appendmask,str);      if k < 2 then call APPEND.TO.STR(str,',');   end;   call APPEND.TO.STR(str,'  Enter Preferred Bin No.:');   call DEPOSIT.LABEL (GID(DlgMemAvail),str);   call Copy.String('Free Memory      (Mb):',Str);   do k = 0 to 2;                     /* append megabytes in each bin */      call set.cur.bin(k);            /* point data structures at this bin */      call SUB32(psmax, pslast, tmp); /* get in handy temp                 */      load  tmp(lw#lsb);              /* get sectors of poly mem that are  */      uload tmp(lw#msb);              /* unused at this time.              */      div 2048;                       /* compute megabytes unused in this  */      i=res; j=rem;                   /* bin to .1 megabyte accurately     */      load j; mul 10;      j=res;      div 2048;      j=res;                          /* round up by .05 mb                */      if rem ige 1024 then j = j + 1;      i = i*10 + j;                   /* get tenths of Mb                  */      call CONV.FIXED.TO.STR(i,1,5,cf#unsigned\cf#right\cf#spfill\cf#appendmask,str);      if k < 2 then call APPEND.TO.STR(str,',');   end;   if GID(DlgFreeMem) <> 0 then do;      call DEPOSIT.LABEL (GID(DlgFreeMem),str);   end;   call deposit.fixed.point(GID(DlgBinNumber), TRK.HEAD.LOOKUP(0, thd.poly) + 1);   disable.deposits = 0;end Fill.Bin.Dialog;Open.Bin.Dialog: proc public swapable;   dcl TopRow       fixed; /* row of top of panel */   dcl (FirstId,Id) fixed;   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   TopRow = GID(SFDDlgRow);  /* get dialog row */   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Available Memory (Mb): 32.1, 32.2,  3.1   Enter Preferred Bin No.:  1   [CANCEL] */   /* Free Memory      (Mb): 10.0, 10.0, 10.0 */   FirstId=Define.Label(s#aa,TopRow,0,66,'');   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   call PID(DlgMemAvail, FirstId);   if TopRow <> 1 then do;      Id=Define.Label(s#aa,TopRow+1,0,66,'');      call Set.Object.Mouse.Access(Id,0);      call Set.Object.Attr(Id,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);      call PID(DlgFreeMem, Id);   end;   else call PID(DlgFreeMem, 0);   call Set.Default.Action(O#ACT.Jog.Enabled\O#ACT.Middle.Press\O#ACT.Left.Press\O#ACT.Right.Press);   Id=define.fixed.point(s#aa,TopRow,67,2,0,cf#unsigned\cf#right\cf#spfill);   call Set.Object.Attr(Id,0,ATTR#Normal|ATTR#Reverse);   call Set.Object.Attr(Id,1,ATTR#Normal|ATTR#Reverse);   call PID(DlgBinNumber,Id);   call Fill.Bin.Dialog;   /* Note: keep default action at o#act.middle.press for B screen */   call Set.Default.Action(O#ACT.Middle.Press);   call PID(DlgGo,0);      Id=Define.Label(s#aa,TopRow,72,0,'[CANCEL]');   call PID(DlgAbort,Id);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgBinNumber),0,0,0,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort    ),0,0,GID(DlgBinNumber),0);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event\Get#Ertyp);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgBinNumber),-1,-1);end Open.Bin.Dialog;Get.Bin.Response: proc public swapable; /* handles input on BIN panel */   dcl i fixed;   call Get.Next.Optical.Event;           /* get first event */   do while Exit.My.Screen=0;             /* wait for exit condition */      if Screen.Event.Code = Get.Poly.Contents   /* refill mem avail if user */      then do;         if (Screen.Event.Info & 2) <> 0         then do;            call Fill.Bin.Dialog;         end;         call Get.Next.Optical.Event;      end;      else if Screen.Event.Group=GID(SFDDlgGrp) then do;     /* make sure still in dialog group */         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if (Screen.Event.Id=GID(DlgAbort))               or ((Screen.Event.Id=GID(DlgBinNumber)) & (Screen.Event.Info = S#KeyActivate))               then do;                  call Set.Term.Attr(ATTR#Normal);                  call Close.Dialog.Panel;                  return 0;               end;               else call Get.Next.Optical.Event;     /* else just get another event if selecting the string field */            end;            else if (Screen.Event.Info = S#Deposit)            and     (Screen.Event.Id   = GID(DlgBinNumber))            then do;               i = Fetch.Fixed.Point(GID(DlgBinNumber)) - 1;               if i < 0 then i = 0;               if i > (POLYNUMS-1) then i = (POLYNUMS-1);               call TRK.HEAD.STORE(0, THD.POLY, i);               disable.deposits = 1;               call deposit.fixed.point(GID(DlgBinNumber), TRK.HEAD.LOOKUP(0, thd.poly) + 1);               disable.deposits = 0;               call Get.Next.Optical.Event;   /* get another event */            end;            else call Get.Next.Optical.Event;   /* get another event */         end;         else if Screen.Event.Code=Get.Ertyp then do;            if  (GID(SFDErrRow) = 23)   /* use system routine to get both 24 and */            and (GID(SFDErrCol) = 0 )   /* 25 line error codes if possible.      */            then call Handle.System.Error.Codes(Screen.Event.Info);            else if Screen.Event.Info then do;               call Display.Error.Message(Latched.Ertyp,GID(SFDErrRow),GID(SFDErrCol));            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(SFDMiscGrp) then do;         call Set.Term.Attr(ATTR#Normal);         call Close.Dialog.Panel;         return 0;      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do;    /* user selected some object outside dialog box */            /* Detect Double Click on biN button: */            if  (Screen.Event.Group = GID(WindowGrp  ))            and (Screen.Event.Id    = GID(DirTableBin))            then do;               call Set.Term.Attr(ATTR#Normal);               call Close.Dialog.Panel;               return 0;            end;            call Select.New.Cur.Obj(GID(DlgBinNumber),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Set.Term.Attr(ATTR#Normal);   call Close.Dialog.Panel;   return 0;end Get.Bin.Response;
/*	:SYNSOU:STORMOD:ARC-TABL  $TITLE  Routines to Process Events on Archive Scrolling TablesModified:2000/04/08 - TY  - Allowed some dead code to be optimized out at compile time2000/03/08 - TY  - Prevented long window titles from plotting over buttons2000/02/27 - TY  - Changed Open.Archive.Windows() to indirectly accommodate display of sound file loops1989/07/31 - TSS - Fixed drag bug on right-hand dir window (TAJ Soundworks bug!)1989/05/02 - TSS - Merged changes for Optical disk to DTD transfer project1989/04/29 - TSS - "Literalized" use of GET.CURRENT.FILENAME.AND.INFO1988/08/10 - SGS - Fixed bug in stuffing category into category table1987/12/21 - MWH - Use Get.Next.Optical.Event directly*/Open.Archive.Windows: proc (TopRow,NumLines) swapable;	dcl TopRow					fixed;	dcl NumLines				fixed;	dcl Title			(16)	fixed;	dcl DevSwitchStr	(64)	fixed;	dcl OptTableId				fixed;	dcl DirTableId				fixed;	dcl (FirstDev,I)			fixed;	dcl FormatSwPos			fixed;	dcl FunctionSwPos			fixed;	dcl DevSwPos				fixed;	dcl LaserFormat			fixed;	dcl (Dev,Sort,Function,Show,Filter)	fixed;	dcl Buttons					fixed;	//	Note: this procedure is never called unless Find_Device(LaserDev)<>0, so we can let the compiler optimize out	//	some dead code by declaring "LaserThere" as a literal instead of as a variable.	//	See LaserDisk.Archive.Screen() in :SYNSOU:STORMOD:ARCHSOU	dcl LaserThere	lit 'true';//	dcl LaserThere	boolean;//	LaserThere=(Find_Device(LaserDev)<>0);	/*	see if optical configured	*/	Dev			= GID(SFR.DIRDEVICE);	Sort			= GID(SFR.SORTINFO );	Function		= GID(SFR.FUNCTIONINFO);	Show			= GID(SFR.SHOWINFO ) & (not INFO$Loops);	//	Don't show loops in R-page	Filter		= GID(SFR.ITEMFILTER);	LaserFormat	= GID(ODS.LASERFORMAT);	call Build.Device.Switch.String.And.Table(DevSwitchStr);	if Dev=0 then do;	/*	first time we are opening a directory display	*/		Dev	=GID(DeviceSwitchTable);	/*	get first device that does exist	*/		Sort	=SORT$Filename;		Show	=INFO$Filename;		Filter=FILTER$None;	end;	I=0;	if (Show&INFO$Sector)<>0 then I=((I+1)&7)|shl(INFO$Sector,8);	if (Show&INFO$Second)<>0 then I=((I+1)&7)|shl(INFO$Second,8);	if (Show&INFO$MByte )<>0 then I=((I+1)&7)|shl(INFO$MByte,8);	if (I&255) IGT 1 then do;	/*	need to turn off some ShowInfo bits	*/		Show=Show&(not (INFO$Sector|INFO$Second|INFO$MByte))|shr(I,8);	/*	only keep one bit	*/	end;	/*	if any lengths displayed, then caption must be displayed too	*/	if I <> 0 then do;		Show=Show|INFO$Caption;	end;	if LaserThere then do;	/*	Left window shows optical disk categories & files	*/		if not Mount.Optical.Volume	/*	try to mount volume	*/		then O$Volume_Name(0)=0;		/*	nothing there		*/		else Optical.Disk.Ready=0;		/*	just reset global	*/		if Dev=LaserDev then do;		/*	could be if (and only if) we came from recall screen	*/			call Set.Display.Format(LaserDev,Sort,Function,Show,Filter);			if (SortInfo=SORT$Category) then do;				if ItemFilter=FILTER$Filename				then LaserFormat=0;				else LaserFormat=1;			end;			else LaserFormat=2;		end;		else do;			do case LaserFormat;				call Set.Display.Format(LaserDev,SORT$Category,Function,Show,FILTER$Filename);				call Set.Display.Format(LaserDev,SORT$Category,Function,Show,FILTER$None);				call Set.Display.Format(LaserDev,SORT$Filename,Function,Show,FILTER$None);			end;		end;		call Get.Window.Title(LaserDev,Title);		Buttons = (B#Search\B#Top);		//	On the R-page left window, if the title exceeds CharWidth-1, it will plot over the buttons		call Open.Directory.Window(OptWindowId,Title,CharsPerFile*3-1,TopRow,0,NumLines,CharsPerFile*3,O#ERAS.Start.of.Line\O#ERAS.Null.Fill.On.Erase,false,true,false,Buttons);		OptTableId=GID(DirTable);		call Open.OptWindow.Control.Objects(0,TopRow,NumLines,CharsPerFile*3);		Disable.Deposits=true;			call Deposit.Switch(GID(OptFormatSwitchId),LaserFormat);		Disable.Deposits=false;		call Set.DirTable.Position(-1,-1);	end;	/*	Right window shows non-optical disk files	*/	FirstDev=0;										/*	assume we will fail	*/	do I=0 to GID(DeviceSwitchTableLen)-1;		if Dev=GID(DeviceSwitchTable+I)		/*	our previous device still exists	*/		then do;			DevSwPos=I;			FirstDev=Dev;							/*	we will use it	*/		end;	end;	if FirstDev=0									/*	device no longer exists in menu	*/	then FirstDev=GID(DeviceSwitchTable);	/*	get first device that does exist	*/	call Set.Display.Format(FirstDev,Sort,Function,Show,FILTER$None);	if		  (ShowInfo&INFO$Sector )<>0 then FormatSwPos=4;	else if (ShowInfo&INFO$MByte  )<>0 then FormatSwPos=3;	else if (ShowInfo&INFO$Second )<>0 then FormatSwPos=2;	else if (ShowInfo&INFO$Caption)<>0 then FormatSwPos=1;	else												 FormatSwPos=0;	if		  (FunctionInfo&INFO$Audition)<>0 then FunctionSwPos=2;	else if (FunctionInfo&INFO$Recall  )<>0 then FunctionSwPos=1;	call Copy.String('   Contents of: ',Title);	Buttons = (B#Search\B#RAM\B#Top);	if LaserThere then do;		//	On the R-page right window, if the title exceeds CharWidth-3, it will plot over the buttons		call Open.Directory.Window(DirWindowId,Title,CharsPerFile*4-3,TopRow,34,NumLines,CharsPerFile*4,O#ERAS.End.of.Line\O#ERAS.Null.Fill.On.Erase,false,true,false,Buttons);		DirTableId=GID(DirTable);		call Open.DirWindow.Control.Objects(34,TopRow,NumLines,CharsPerFile*4);		/*	  Set.Object.Arrow.Links(			ID,above, below,		 left,	  right);	*/		call Set.Object.Arrow.Links(OptTableId,	 -1,	 -1,			-1,DirTableId);		call Set.Object.Arrow.Links(DirTableId,	 -1,	 -1,OptTableId,		  -1);	end;	else do;	/*	just open up one window, similar to sound file directory	*/		//	On the R-page right window, if the title exceeds CharWidth-3, it will plot over the buttons		call Open.Directory.Window(DirWindowId,Title,CharsPerFile*8-3,TopRow,0,NumLines,CharsPerFile*8,O#ERAS.End.of.Line\O#ERAS.Null.Fill.On.Erase,true,true,false,Buttons);		call Open.DirWindow.Control.Objects(0,TopRow,NumLines,CharsPerFile*8);	end;	Disable.Deposits=true;		if LaserThere		then call Deposit.Switch(GID(OptFormatSwitchId),LaserFormat);		call Deposit.Switch(GID(DeviceSwitchId)	  ,DevSwPos);			/*	set switch to correct pos	*/		call Deposit.Switch(GID(DirFormatSwitchId)  ,FormatSwPos);		/*	set switch to correct pos	*/		call Deposit.Switch(GID(DirFunctionSwitchId),FunctionSwPos);	/*	set switch to correct pos	*/	Disable.Deposits=false;end Open.Archive.Windows;/*	$SUBTITLE	*/Drag.DirTable.Item: proc (WindowId,SouCol,SouRow,DesId,DesCol,DesRow)	fixed swapable;	dcl WindowId			fixed;	/*	window from which drag originated	*/	dcl SouId				fixed;	/*	id of source table						*/	dcl (SouCol,SouRow)	fixed;	/*	coord in source table					*/	dcl DesId				fixed;	/*	destination object id					*/	dcl (DesCol,DesRow)	fixed;	/*	coord in dest table, if applicable	*/	dcl Str	(40)			fixed;	dcl SelectDesObj		boolean;	if ActiveWindowId<>WindowId then do;	/*	activate this window	*/		call Select.Active.Window(WindowId);	end;	if  (DesId=GID(CatTable))												/*	dragging to category table	*/	and (Fetch.DirTable.Item.Type(SouRow,SouCol)=ITEM$Category)	/*	and dragging a category name	*/	then do;		call Fetch.DirTable.Item(SouRow,SouCol,Str);					/*	computes category or filename at specified loc	*/		if Stuff.Category.Into.Menu(Str,Loc(Addr(DesCol)))			/*	finds a spot in menu for category	*/		then do;			call Select.New.Cur.Obj(DesId,DesCol,DesRow);			SelectDesObj=true;		end;		else call Set.Optical.Error(Err#CategoryTableFull);		/*	no room in table	*/	end;	else if (DesId=GID(SFName))											/*	dragging to filename field	*/	and (Fetch.DirTable.Item.Type(SouRow,SouCol)=ITEM$Category)	/*	and dragging a category name	*/	then do;		call Erase.Menu.Categories;	/*	clear caption and category fields	*/		Disable.Deposits = true;		call Deposit.String(GID(Caption),'');		Disable.Deposits = false;		call Compute.Free.Bytes.Display;		/*	remember category's address	*/		call Fetch.DirTable.Item.Type(SouRow,SouCol);		call PID(SavedCatSector,CListSector);		call PID(SavedCatWord,	CListWord);		/*	get category name	*/		call Fetch.DirTable.Item(SouRow,SouCol,Str);		Disable.Deposits=true;			call Deposit.Label (GID(SFNameLabel),'Category:');			call Deposit.String(GID(SFName),Str);		Disable.Deposits=false;		call Open.Action.Buttons(CategoryMode);	/*	turn on activity buttons	*/		call Select.New.Cur.Obj(DesId,DesCol,DesRow);		SelectDesObj=true;	end;	return SelectDesObj;end Drag.DirTable.Item;/*	$SUBTITLE	*/dcl ArrowKey.Increment	lit 'GID(DirTableRows)';	/*	number of lines to scroll at page top & bottom	*/Get.Next.Archive.DirTable.Event: proc public swapable;	dcl Name (SFNAME#Arr_Len)	fixed;	dcl Info (SFINFO#Arr_Len)	fixed;	dcl LineType					fixed;	dcl (Col,Row)					fixed;	dcl (MaxCol,X)					fixed;	dcl (mx,my)						fixed;	dcl FileAddr	(1)			fixed;	dcl FileLen		(1)			fixed;	dcl ItemType					fixed;	dcl NameStr(F#Name_Len)		fixed;	/*	holds catalog name, if cat selected	*/	do while Exit.My.Screen=0;				/*	wait for exit condition	*/		if Screen.Event.Group<>GID(WindowGrp) then return;		if Screen.Event.Code=Get.Screen.Event then do;			if Screen.Event.Id<>GID(DirTable) then return;			if (Screen.Event.Info=S#MouseSelect)			or (Screen.Event.Info=S#MouseActivate)			or (Screen.Event.Info=S#KeyActivate)			then do;				LineType=Fetch.DirTable.Item.Type(Screen.Event.Table.Row,Screen.Event.Table.Col);				if (LineType<>ITEM$Eof)&(Screen.Event.Info<>S#KeyActivate) then do;	/*	mouse click	*/					if MaxRowItems(LineType) IGT 1 then do;	/*	more than 1 file per line	*/						X=Mouse(PRESS.X);								/*	get x coord of last click	*/						X=TPos.X(X);									/*	map to transparent char position	*/						X=X-Fetch.Object.Info(GID(DirTable),O#Trans.Col);	/*	relative to left edge of table	*/						load X; div MaxItemChars(LineType);						X=res;											/*	map to logical column	*/					end;					else X=0;				end;				else X=Screen.Event.Table.Col;				call Set.DirTable.Position(Screen.Event.Table.Row,X);	/*	new logical position	*/				call Update.Object(Screen.Event.Id);				if Screen.Event.Info=S#KeyActivate then do;					ItemType = Fetch.DirTable.Item.Type(Screen.Event.Table.Row,Screen.Event.Table.Col);					/*	NOTE: Above line also repositions	*/					/*			index file vars to current item	*/					if (ItemType =ITEM$Filename) then do;						/*	load file into menu table	*/						if Get.Current.FileName.And.Info(Name,Info)=ITEM$Filename						then do;							call Copy32(loc(addr(Info(SFINFO#F_Base  ))),FileAddr);							call Copy32(loc(addr(Info(SFINFO#F_SecLen))),FileLen);							call Stuff.Sound.File.Into.Menu(Name,DirDevice,FileAddr,FileLen);	/*	load info into menu	*/						end;					end;					else if (ItemType = ITEM$Category) then do;					end;				end;			end;			else if (Screen.Event.Info=S#ArrowSelect)			or		  (Screen.Event.Info=S#ArrowSelectAttempt)			then do;				call Flush.Arrow.Keys.From.D50.Buf;				LineType=Fetch.DirTable.Item.Type(0,Screen.Event.Table.Row);				if (Screen.Event.Info=S#ArrowSelect) then do;					if ((LineType <> ITEM$Filename)					and (LineType <> ITEM$Category)) then						X = 0;			/*	user arrowed beyond end of data	*/					else X = Screen.Event.Table.Col;					call Set.DirTable.Position(Screen.Event.Table.Row,X);	/*	new logical position	*/				end;				else do;		/*	S#ArrowSelectAttempt (trying to leave table)	*/					if (Screen.Event.Obj.Info=U.ARR)					or (Screen.Event.Obj.Info=D.ARR)					then do;	/*	page up and page down	*/						if Screen.Event.Obj.Info=U.ARR						then call Scroll.DirTable.Backward(ArrowKey.Increment);						else call Scroll.DirTable.Forward (ArrowKey.Increment);						call Set.ScrollBar.Pos;	/*	keep scroll box in correct position	*/					end;				end;			end;			/*	$PAGE	*/			else if (Screen.Event.Info=S#ObjectDrag) then do;	/*	possibly dragging to menu	*/				if Screen.Event.Obj.Info=GID(CatTable) then					call Fetch.Table.Cur.Cell(Screen.Event.Obj.Info,Loc(Addr(Col)));	/*	get drop cell	*/				else do;	/*	dragged to sound file name field	*/					Col = 0;					Row = 0;				end;				if ActiveWindowId = OptWindowId then do;					if Drag.DirTable.Item(ActiveWindowId,			/*	which window	*/												 Screen.Event.Table.Col,Screen.Event.Table.Row,	/*	source object col & row	*/												 Screen.Event.Obj.Info,Col,Row)<>0	/*	dest object id & col & row	*/					then call Set.DirTable.Position(-1,-1);		/*	unselect table	*/				end;				else if ActiveWindowId = DirWindowId then do;					if Handle.Catalog.Select(NameStr)<>0 then do;	/*	handle catalog enter here	*/						call PRINT.CCAT;						/*	Save info, deposit strings in menu,	*/						/*	update switch, display buttons		*/						call Update.After.Cat.Enter(NameStr,1,Copy.Buf(7) and "HF");						call Update.Group.Objects(GID(MenuGrp));					end;					call Select.New.Cur.Obj(Screen.Event.Obj.Info,Col,Row);					call Set.DirTable.Position(-1,-1);				end;			end;			else if (Screen.Event.Info=S#ObjectDragAbort) then do;				mx=Mouse(Release.x); my=Mouse(Release.y);				if POINT.IN.OBJECT(GID(DirTable),mx,my) then do;	/*	make sure release was in table	*/					call MAP.POINT.TO.TABLE.CELL(mx,my,GID(DirTable),Loc(Addr(Col)));					if  (Col=Screen.Event.Table.Col)					and (Row=Screen.Event.Table.Row)					then do;	/*	dropped on original position - stuff into menu	*/						LineType=Fetch.DirTable.Item.Type(Screen.Event.Table.Row,Screen.Event.Table.Col);						/*	NOTE: Above line also repositions		*/						/*			index file vars to current item	*/						if LineType=ITEM$Filename then do;		/*	load file into menu table	*/							if Get.Current.FileName.And.Info(Name,Info)=ITEM$Filename							then do;								call Copy32(loc(addr(Info(SFINFO#F_Base  ))),FileAddr);								call Copy32(loc(addr(Info(SFINFO#F_SecLen))),FileLen);								call Stuff.Sound.File.Into.Menu(Name,DirDevice,FileAddr,FileLen);	/*	load info into menu	*/							end;						end;						else if LineType=ITEM$Category then do;	/*	try to load category into menu	*/							if DirDevice<>PolyCacheDev then do;		/*	presumably a laser disk category	*/								call GetListPos(Row);					/*	get full name	*/								call Append.Current.CatList.Item(Name,Fetch.Object.Info(GID(CatTable.Type.Obj),O#STR.Max.Chars));								call Remove.Spaces.From.String(Name,Name);								call UpperCase.String			(Name,Name);								if not Stuff.Category.Into.Menu(Name,Loc(Addr(Col)))	/*	finds a spot in menu for category	*/								then call Set.Optical.Error(Err#CategoryTableFull);	/*	no room in table	*/							end;							else do;	/*	enter poly cache catalog name	*/								if Handle.Catalog.Select(NameStr)<>0 then do;	/*	handle catalog enter here	*/									call PRINT.CCAT;									/*	Save info, deposit strings in menu,	*/									/*	update switch, display buttons		*/									call Update.After.Cat.Enter(NameStr,1,Copy.Buf(7) and "HF");									call Update.Group.Objects(GID(MenuGrp));								end;								if need.to.clean.up then;							end;						end;					end;				end;			end;			call Get.Next.Optical.Event;		/*	get the next event to handle	*/		end;		else call Get.Next.Optical.Event;	/*	get the next event to handle	*/	end;end Get.Next.Archive.DirTable.Event;/*	$SUBTITLE Display Window Event Handler for Multi-Windows	*/Get.Next.MultiWindow.Event: proc swapable;	dcl SelectObj boolean;	do while Exit.My.Screen=0;				/*	wait for exit condition	*/		if (Screen.Event.Group ILT GRP$Window)		or (Screen.Event.Group IGE (GRP$Window+Max.Open.Windows))		then do;			return;		end;		if (OpenWindowBits&Bits(Screen.Event.Group-GRP$Window))<>0		then do;			if Screen.Event.Group<>GID(WindowGrp)	/*	have an event for window		*/			then do;											/*	which is not currently active	*/				if Prev.Obj.Id=GID(DirTable)				then SelectObj=true;			/*	see BLACK MAGIC comment below	*/				else SelectObj=false;				call Select.Active.Window(Screen.Event.Group-GRP$Window);	/*	activate new window	*/				/***************** BLACK MAGIC **********************/				/*	Following line will keep Reselect of Previous	 */				/*	Object following a Scroll Bar event from			 */				/*	reselecting the table in the now inactive			 */				/*	window.  (Don't want to reactivate prior window) */				/*	Instead, the table in the newly activated			 */				/*	window will be selected when Scroll Bar is done. */				/***************** BLACK MAGIC **********************/				if SelectObj then Prev.Obj.Id=GID(DirTable);			end;			/*	Process with normal window event handler:							*/			/*	Get.Next.Window.Event returns false when an event occurred	*/			/*	that is not in the currently active window group.  Returns	*/			/*	true when event occurred in DirTable, DirTableAudition,		*/			/*	or DirTableFoldOut (if defined).  Takes care of scroll bar,	*/			/*	DirTableSearch, DirTableTop, DirTableShuffle, DirTablePrint	*/			/*	and DirTableBin itself.													*/			if Get.Next.Window.Event then do;				if (Screen.Event.Id=GID(DirTable)) then do;					call Get.Next.Archive.DirTable.Event;	/*	deal with a table event	*/				end;				else call Get.Next.Optical.Event;			end;			/*	else call Set.DirTable.Position(-1,-1);	*/		end;		else call Get.Next.Optical.Event;	/*	wacko case	*/	end;end Get.Next.MultiWindow.Event;
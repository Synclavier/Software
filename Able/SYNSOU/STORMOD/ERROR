/* ERROR  $TITLE  Error Display Routine *//* Modified:   08/06/90 - LSS - new error for unformatted magneto media (ERR#NotInitialized)   05/30/89 - SGS - Added new error code to Update_Index   05/09/89 - SGS - Changed error message   05/02/89 - TSS - Merged changes for Optical disk to DTD transfer project   02/17/89 - SGS - bug fixes   06/10/88 - KJO - new error message for unrecoverble write repair   11/05/87 - LSS - new error messages for copy operations*//* dcl CY#FilesSum    array external; */ /* dcl'd in ARC-DLG */OpticalErrors#1:proc (ErrCode) swapable;   dcl ErrCode Fixed;   dcl TempStr(6)  Fixed;   OurPs: proc(Str);       dcl Str array;      dcl I   fixed;      dcl MaxStrLen lit '64';          /* room in ERSYM for 64 chars */      I=Str(0);                        /* assume entire string will be appended */      if (I+ErSym(0))>MaxStrLen        /* new string is too long */      then I=MaxStrLen-ErSym(0);       /* limit length to append */            do I=0 to I-1;         call AppendC(ErSym,Byte(Str,I));      end;      return ErSym(0);                 /* length of error message so far */   end OurPs;   OurPnum: proc (N);      dcl N       fixed;      dcl Str (4) fixed;      call CONV.FIXED.TO.STR(N,0,6,cf#unsigned|cf#right|cf#spfill|cf#erase,str);      call OurPs(Str);   end OurPnum;   do case (ErrCode);      do; /* ERR#NoRoomForCategory */         call OurPs('Not enough room for new CATEGORY in Sound File "');         call OurPs(FNBuf); call OurPs('"');      end;      do; /* ERR#NoRoomForCaption */         call OurPs('Not enough room for new CAPTION in Sound File "');         call OurPs(FNBuf); call OurPs('"');      end;      call OurPs('Sound File is already classified under this Category'); /* ERR#CategoryExists    */      do; /* ERR#OtherScsiError */         call OurPs('SCSI System Error (S$SenseKey,C#Status) --> ');         call OurPnum(S$SenseKey);         call OurPnum(C#Status);      end;      do; /* ERR#OtherCatError */         call OurPs('Catalog System Error (S$SenseKey,C#Status) --> ');         call OurPnum(S$SenseKey);         call OurPnum(C#Status);      end;      do; /* ERR#FatalHardware */         call OurPs('Serious Hardware Problem (S$SenseKey,C#Status) --> ');         call OurPnum(S$SenseKey);         call OurPnum(C#Status);         if need.to.clean.up then do;            /* probably out to elaborate on these messages */         end;      end;      call OurPs('No Optical Disk in drive or must press START/STOP button'); /* ERR#DriveNotReady */      call OurPs('Cannot read this Optical disk'); /* ERR#BadOpticalVolume */      call OurPs('Optical volume is UNFORMATTED or is inserted upside-down'); /* ERR#UnformattedOptical */      do; /* ERR#BadVolumeName */         call OurPs('Invalid Optical disk volume name "');         call OurPs(FNBuf); call OurPs('"');      end;      call OurPs('This Optical disk is WRITE-PROTECTED'); /* ERR#WriteProtected */      call OurPs('System Error (ERR#IllegalFilename)'); /* ERR#IllegalFilename */      do; /* ERR#NoIndexCatFound */         call Get_Index_Name(' ',TempStr);         call OurPs('Cannot find '); call OurPs(TempStr);          call OurPs('on your system device');      end;      call OurPs('No Index file found for this Optical disk'); /* ERR#NoIndexFound */      call OurPs('Illegal Index Format (System Error)'); /* ERR#BadIndexFormat */      call OurPs('The Index for this Optical volume is not up-to-date'); /* ERR#OutOfDateIndex */      call OurPs('Current Optical volume does not match your current Index'); /* ERR#VolumeIndexMismatch */      call OurPs('No more room on Optical disk to store or update files');  /* ERR#OpticalDirFull */      call OurPs('Not enough room on Optical disk to save this file'); /* ERR#OpticalDataFull */      do; /* ERR#OpticalFileNotFound */         call OurPs('File "'); call OurPs(FNBuf);         call OurPs('" not found on Optical disk');      end;      do; /* ERR#NoRoomInIndexCat */         call Get_Index_Name(' ',TempStr);         call OurPs('Not enough room in '); call OurPs(TempStr);         call OurPs('to store new Index file');       end;      call OurPs('File is neither a sound file nor a catalog'); /* ERR#FileNotCatOrSound */      call OurPs('Invalid treename entered'); /* ERR#BadTreenameFormat */      call OurPs('No more room in category table for new category'); /* ERR#CategoryTableFull */      call OurPs('You must respond to dialog before continuing'); /* ERR#NeedDialogResponse */   end;end OpticalErrors#1;      OpticalErrors#2:proc (ErrCode) swapable;   dcl ErrCode   Fixed;   dcl Num32(1)  Fixed;   dcl Num(5)    Fixed;   dcl TempStr(6) Fixed;   OurPs: proc(Str);       dcl Str array;      dcl I   fixed;      dcl MaxStrLen lit '64';          /* room in ERSYM for 64 chars */      I=Str(0);                        /* assume entire string will be appended */      if (I+ErSym(0))>MaxStrLen        /* new string is too long */      then I=MaxStrLen-ErSym(0);       /* limit length to append */            do I=0 to I-1;         call AppendC(ErSym,Byte(Str,I));      end;      return ErSym(0);                 /* length of error message so far */   end OurPs;   OurPnum: proc (N);      dcl N       fixed;      dcl Str (4) fixed;      call CONV.FIXED.TO.STR(N,0,6,cf#unsigned|cf#right|cf#spfill|cf#erase,str);      call OurPs(Str);   end OurPnum;   do case (ErrCode);      call OurPs('Check power and cabling to Optical disk'); /* ERR#NoSignal              */      call OurPs('Could not find a usable D24 Interface Card'); /* ERR#NoD24Found            */      call OurPs('Something is wrong with this Optical disk cartridge'); /* ERR#MediumError           */      call OurPs('Optical disk drive is not configured'); /* ERR#NotConfigured         */      do; /* ERR#IndexCatTypeMismatch  */         call Get_Index_Name(' ',TempStr);         call OurPs(TempStr); call OurPs('is not a subcatalog');       end;      call OurPs('Reading beyond end of Category (SYSTEM ERROR)'); /* ERR#SYSTEMEndOfCategory */      call OurPs('Work Buffer too small in seek routine (SYSTEM ERROR)'); /* ERR#SYSTEMWorkBufTooSmall */      call OurPs('More memory needed for update - try erasing your sequence or poly memory'); /* #MoreExternalMemoryNeeded */      call OurPs('More Poly memory needed for update - try erasing poly memory'); /* #MorePolyMemoryNeeded */      do;         call OurPs('System error occurred with Index File Update'); /*  ERR#SystemErrorWithUpdateIndex */         call OurPs(' (C#Status = '); call OurPnum(C#Status);         call OurPs(')');      end;      call OurPs('Cannot Store Catalog with "All Winchesters" device'); /*ERR#CacheStoreNotAllowed */      do; /* ERR#FileNotFound */         call OurPs('File "'); call OurPs(FNBuf);         call OurPs('" not found on specified device');      end;      do; /* ERR#NoRoomInHeader */         /*           1         2         3         4         5         6         7 */         /* 01234567890123456789012345678901234567890123456789012345678901234567890 */         /* Not enough room in "12345678" to save Caption and Categories */         call OurPs('Not enough room in "'); call OurPs(FNBuf);         call OurPs('" to save Caption and Categories');      end;      do; /* ERR#BadFileName */         call OurPs('Invalid file name "');         call OurPs(FNBuf); call OurPs('"');      end;      call OurPs('Format error in date input - correct format: 01 JAN 88'); /* ERR#FormatErrorInDate */      call OurPs('Format error in time input - correct format: 12:00 PM'); /* ERR#FormatErrorInTime */      call OurPs('Must enter correct Volume Name, Date, and Time before formatting'); /* ERR#MustEnterDateAndTime */      call OurPs('No match found for search ID'); /* ERR#NoMatchFound  search failed  */      call OurPs('Not enough room in catalog to save file'); /* ERR#NoStorage  REPLACE failed for copying file */      call OurPs('Not enough contiguous space in catalog to save file'); /* ERR#NoConStorage  REPLACE failed for copying file */      call OurPs('Not enough directory entries in catalog to save file'); /* ERR#NoDirEntries  REPLACE failed for copying file */      call OurPs('File stored on disk is not a sound file'); /* ERR#TypeMismatch  REPLACE failed for copying file */      call OurPs('Unable to write directory entry - run the OPREPAIR program'); /* ERR#WriteError */      do;  /* ERR#NoRoomForSubc - Not enough room in catalog to create new subcat */         call OurPs('Not enough room to create subcatalog ');          call OurPs(FNBuf); call OurPs(' sectors long.');      end;      call OurPs('Not enough contiguous room to create subcatalog'); /* ERR#NoCRoomSubc - no contiguous room for catalog */      call OurPs('New subcatalog name already exists on disk'); /* ERR#DuplCatalog - subcatalog name already exists */      call OurPs('Optical media must be formatted with FORMCOPY'); /* ERR#NotInitialized */   end;end OpticalErrors#2;Set.Optical.Error: proc (ErrCode) public swapable; /* Sound File Recall/Storage Screen Error printing routine */   dcl ErrCode  fixed;   dcl Len      fixed;   dcl I        fixed;   if ErTyp<>0 then return;            /* error already pending */   ErTyp=ERR.OPT;                      /* set error code     */   ErSym(0)=0;                         /* reset error string */   ErrCode = ErrCode - 1;              /* prepare for case   */   if ErrCode<25   then call OpticalErrors#1(ErrCode   );   else call OpticalErrors#2(ErrCode-25);end Set.Optical.Error;/* $SUBTITLE - construct error message from status code */Generate.Optical.Error.Message: proc public swapable; /* generates messages for a bunch of situations */   dcl ErrCode fixed;   /* NOTE:  This routine is used to generate error messages */   /*        after calling the following routines:           */   /*            1.  Index_Replace                           */   /*            2.  Index_Update                            */   /*            3.  Index_Delete                            */   /*            4.  Index_Locate                            */   /*        It is assumed that Activate.Optical will have   */   /*        determined that the Optical disk is all ready   */   /*        for the above commands.                         */   if S$SenseKey=S$DataProtect   then ErrCode=Err#WriteProtected;   else if (S$SenseKey=S$MediumError) or (S$SenseKey=S$BlankCheck)   then ErrCode=Err#WriteError;   else if S$SenseKey<>S$Good   then ErrCode=Err#OtherScsiError;   else do;      if C#Status=E#Treename      then ErrCode=Err#IllegalFilename;      else if C#Status=E#Dir_Full      then ErrCode=Err#OpticalDirFull;      else if C#Status=E#Storage      then ErrCode=Err#OpticalDataFull;      else if C#Status=E#No_File      then ErrCode=Err#OpticalFileNotFound;      else if C#Status=E#Not_UpToDate      then ErrCode=Err#OutOfDateIndex;      else ErrCode=Err#OtherCatError;   end;   call Set.Optical.Error(ErrCode);   /* actually display the error message */end Generate.Optical.Error.Message;/* $SUBTITLE */Erase.Optical.Status: proc public swapable;   dcl (Col,Row,Len) fixed;   if GID(StatusLineDisplayed) then do;      write(mdi)=false; /* turn off StatusLineDisplayed flag */      Row=read(mdi);    /* read in StatusLineRow   */      Col=read(mdi);    /*         StatusLineCol   */      Len=read(md );    /*         StatusLineChars */      call Save.Cursor;         call Set.Term.Attr(ATTR#Normal);         if Col=0 then do;            call cpos(Row,Col+Len-1);            call Erase.To.Start.Of.Line;         end;         else do;            call cpos(Row,Col);            do Len=0 to Len-1;               call pc(sp);            end;            /* call Erase.To.End.Of.Line; */         end;      call Restore.Cursor;   end;end Erase.Optical.Status;Display.Optical.Status: proc (Str,Row,Col) public swapable;   dcl Str       array;   dcl (Row,Col) fixed;   if GID(StatusLineDisplayed) then call Erase.Optical.Status;   call Save.Cursor;   call cpos(Row,Col);   call ps  (Str);   call Restore.Cursor;   call PID(StatusLineDisplayed,true);   call PID(StatusLineRow,Row);      /* save coordinate of message */   call PID(StatusLineCol,Col);   call PID(StatusLineChars,Str(0)); /* save length of string */end Display.Optical.Status;
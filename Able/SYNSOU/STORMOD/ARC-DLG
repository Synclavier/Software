/* ARC-DLG  $TITLE  Dialog Box Routines for Archical Screen *//* Modified:   05/02/89 - TSS - Merged changes for Optical disk to DTD transfer project   12/21/87 - MWH - Use Get.Next.Optical.Event directly   11/12/87 - LSS - VERIFY mode bug fixes with new filename   11/02/87 - LSS - consolidated code, added file copy from optical to CC*//* Additional vars for COPY CATEGORY dialog panel */dcl CY#NumFiles      fixed public;    /* number of sound files in cur category   */dcl CY#FilesSum (1)  fixed public;    /* total file data in category, in sectors */dcl CG#NumFiles      fixed public;    /* number of files in cur catalog          */dcl CG#FreeSec  (1)  fixed public;    /* free space in cur catalog               */dcl CG#FreeBlock(1)  fixed public;    /* largest block avail in cur catalog      */Open.Write.Optical.Dialog: proc (TopRow,Write.String) public swapable; /* prompt if OK to modify optical disk */   dcl TopRow       fixed; /* row of top of panel */   dcl Write.String array; /* label for "GO" button */   dcl (FirstId,Id) fixed;   dcl Str (40)     fixed; /* a string buffer */   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* You are about to modify the current Optical volume.          [REPLACE]  [CANCEL] */   call Copy.String('You are about to modify the current Optical volume.',Str);   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   /* reset the region to be 1 point only for now (KLUDGE) */   /* call Locate.Object(FirstId); */   /* call Write.Object(Object.Ptr+O#LRX,Read.Object(Object.Ptr+O#ULX)); */   /* call Write.Object(Object.Ptr+O#LRY,Read.Object(Object.Ptr+O#ULY)); */   call Copy.String('[',Str);   call Append.To.Str(Str,Write.String);   call Append.To.Str(Str,']');   Id=Define.Label(s#aa,TopRow,70-Str(0),Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,-1,-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,-1,GID(DlgGo),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Write.Optical.Dialog;/* $SUBTITLE Get General Response from a Dialog Box */Get.Dialog.Response: proc fixed public swapable; /* handle input on optical screen dialog panel */   call Get.Next.Optical.Event;         /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group=GID(SFDDlgGrp) then do;         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if (Screen.Event.Id=GID(DlgGo))               or (Screen.Event.Id=GID(DlgAbort)) then do;                  call Close.Dialog.Panel;                  return (Screen.Event.Id=GID(DlgGo));               end;            end;            else call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(MiscGrp) then do;         call Get.Next.Misc.Event; /* might be mouse hole or ENTER */      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Close.Dialog.Panel;   return false; /* did not get the go ahead from user */end Get.Dialog.Response;/* $SUBTITLE Dialog Box for Erasing the Info Panel */dcl DLG#MenuChange lit '0'; /* menu chaged dialog panel */Open.Info.Panel.Dialog: proc (TopRow,DialogCode) public swapable; /* make sure it's OK to erase info panel */   dcl TopRow       fixed; /* row of top of panel */   dcl DialogCode   fixed; /* which prompt to use */   dcl (FirstId,Id) fixed;   dcl Str (40)     fixed; /* a string buffer */   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* You have not saved the contents of the Info panel.                [OK]  [CANCEL] */   do case DialogCode;      call Copy.String('You have not saved the contents of the Info panel.',Str);   end;   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   /* reset the region to be 1 point only for now (KLUDGE) */   /* call Locate.Object(FirstId); */   /* call Write.Object(Object.Ptr+O#LRX,Read.Object(Object.Ptr+O#ULX)); */   /* call Write.Object(Object.Ptr+O#LRY,Read.Object(Object.Ptr+O#ULY)); */   call Copy.String('[OK]',Str);   Id=Define.Label(s#aa,TopRow,70-Str(0),Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,-1,-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,-1,GID(DlgGo),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Info.Panel.Dialog;/* $SUBTITLE Verify Copy of File from Optical into Current Catalog */Open.Copy.File.Dialog: proc (TopRow,FileThere) fixed public swapable; /* copy operation dialog panel */   dcl TopRow           fixed; /* row of top of panel */   dcl FileThere        fixed; /* true if the file already exists in CC */   dcl Write.String (8) fixed; /* label for "GO" button */   dcl (FirstId,Id)     fixed;   dcl Str (40)         fixed; /* a string buffer */   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* COPY file from optical to current catalog.                   [COPY]  [CANCEL] */   /* REPLACE file from optical to current catalog.                [REPLACE]  [CANCEL] */   if FileThere then do; /* file already exists on the current catalog */      call Copy.String('REPLACE file from optical to current catalog.',Str);      call Copy.String('REPLACE',Write.String); /* this for field out to the left */   end;   else do; /* file is not there - do a straight copy */      call Copy.String('COPY file from optical to current catalog.',Str);      call Copy.String('COPY',Write.String); /* this for field out to the left */   end;   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   /* reset the region to be 1 point only for now (KLUDGE) */   /* call Locate.Object(FirstId); */   /* call Write.Object(Object.Ptr+O#LRX,Read.Object(Object.Ptr+O#ULX)); */   /* call Write.Object(Object.Ptr+O#LRY,Read.Object(Object.Ptr+O#ULY)); */   call Copy.String('[',Str);   call Append.To.Str(Str,Write.String);   call Append.To.Str(Str,']');   Id=Define.Label(s#aa,TopRow,70-Str(0),Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,-1,-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,-1,GID(DlgGo),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Copy.File.Dialog;/* $SUBTITLE Catalog Store Dialog Panel */Open.Store.Catalog.Dialog: proc (TopRow) swapable; /* get options for catalog store */   dcl TopRow        fixed; /* row of top of panel */   dcl (FirstId,Id)  fixed;   dcl Str      (40) fixed; /* a string buffer */   dcl Icon     (32) fixed;   dcl RecBuf (L#Rec_Length-1) fixed;   dcl NumNew        fixed; /* number of files not already on optical disk */   dcl NumExisting   fixed; /* number of file that already exist on optical */   dcl (Bin,Len,I)   fixed;   dcl Temp.Base (1) fixed;   dcl Base      (1) fixed;   dcl XCol1 lit '1'; dcl XCol2 lit '22'; dcl XCol3 lit '36';   dcl mr13i lit 'write("373")';   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   call Set.DlgOrigObj;   if Activate.Optical(O#FormatDialog|O#UpdateDialog|O#VolChangeDialog) then do; /* try to get optical disk ready to write to */      Optical.Disk.Ready=0; /* reset global flag */      if (Activate.Operations.Performed&(ACT#VolChange|ACT#Format))<>0 /* new disk has been inserted */      then call Refresh.OptWindow.Title(OptWindowId);      call Set.Term.Attr(ATTR#Reverse|ATTR#AltIntensity);      call Cpos(TopRow,0);      call Ps('Searching for Sound Files to Store');      if GID(FileDevice)<>PolyMemDev then do;         if Read_Catalog('',GID(FileDevice)) then do; /* read current catalog */            load c#dir_size; div c#len; i=res;            do I=0 to I-1; /* loop over all FCBs */               call Get_FCB(I,Copy.Buf); /* get next fcb from catalog buffer */               Copy.Buf(F#MS)=Copy.Buf(F#MS)+C#MS_Sector;               Copy.Buf(F#LS)=Copy.Buf(F#LS)+C#LS_Sector;               if Copy.Buf(F#LS) ilt C#LS_Sector               then Copy.Buf(F#MS)=Copy.Buf(F#MS)+1;               if ((Copy.Buf(F#NM)<>0) and (Copy.Buf(F#TY)=T#Sound) and ((Copy.Buf(F#NM)&0xFF)!=a.period))               then do;               /* this is a sound file */                  if ((NumNew+NumExisting)&7)=0 then call pc(DOT); /* print dot to show progress */                  Str(0)=0;           /* build XPL string format filename */                  call Append.Bytes.To.Str(Loc(Addr(Copy.Buf(F#NM))),8,Str,8);                  call Remove.Spaces.From.String(str,str);                  call UpperCase.String         (str,str);                  if Index_Locate(Str,RecBuf,Laserdev)                  then NumExisting=NumExisting+1; /* stored on both source and optical */                  else NumNew     =NumNew     +1; /* stored on source but not on optical */                  call Read_Catalog('',GID(FileDevice));               end;            end; /* looping over file entries */         end;      end;      /* $PAGE */      else if inc.poly then do;         Bin=0;         do while (Bin ILT PolyNumS);    /* more bins to look at */            call Set.Cur.Bin(Bin);            call Copy32(PsFirst,Base);    /* start from here */            do while (Com32(Base,PsLast)<>LW#IEQ); /* not at end of memory */               call Copy32(Base,Temp.Base);               Temp.Base(LW#MSB)=Temp.Base(LW#MSB)|shl(Bin,14);               call PsmRead(Temp.Base,0,0);    /* set up to read 1st sector of next block */               Len=read(psd);                  /* read block length */               write(ATNV) =read(psd);         /* skip past # of users field */               write("313")=addr(Copy.Buf(F#NM)); /* set up for quick reads */               write("373")=read(psd); write("373")=read(psd); /* read in filename */               write("373")=read(psd); write("373")=read(psd);               call ADD16(1,Temp.Base);        /* get pointer to sf itself */               Copy.Buf(F#MS)=Temp.Base(LW#MSB);               Copy.Buf(F#MS)=Temp.Base(LW#LSB);               Copy.Buf(F#ML)=0;               /* MS length = 0 */               Copy.Buf(F#LL)=Len-1;           /* length of sound file itself */               if  ((Copy.Buf(F#NM)&255)>32)   /* first char in valid range */               and ((Copy.Buf(F#NM)&255)<127)  /* (skip over cache & deleted files) */               then do;                        /* save file in snap shot area */                  if ((NumNew+NumExisting)&7)=0 then call pc(DOT); /* print dot to show progress */                  Str(0)=0;           /* build XPL string format filename */                  call Append.Bytes.To.Str(Loc(Addr(Copy.Buf(F#NM))),8,Str,8);                  call Remove.Spaces.From.String(str,str);                  call UpperCase.String         (str,str);                  if Index_Locate(Str,Misc.Buf,Laserdev)                  then NumExisting=NumExisting+1; /* stored on both source and optical */                  else NumNew     =NumNew     +1; /* stored on source but not on optical */               end;               call Add16(Len,Base);    /* add file len to cur ptr (step to next poly file) */            end;            Bin=Bin+1;                         /* step to next poly bin */         end;      end;      call PID(FileOnOptical,NumExisting); /* save number of files already there */      call PID(FileOnSource ,NumNew);      /* save number of files not on optical yet */      call Set.Term.Attr(ATTR#Normal);      call Cpos(TopRow,0); call Erase.To.End.Of.Line;   end;   /* $PAGE */   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Store sound files on Optical disk from W0:ABCDECAT.            [STORE]  [CANCEL] */   call Copy.String('Store sound files on Optical disk from ',Str);   call Get.Device.Name(GID(FileDevice),Icon); /* append device name to string */   call Append.To.Str(Str,Icon);   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   /* reset the region to be 1 point only for now (KLUDGE) */   /* call Locate.Object(FirstId); */   /* call Write.Object(Object.Ptr+O#LRX,Read.Object(Object.Ptr+O#ULX)); */   /* call Write.Object(Object.Ptr+O#LRY,Read.Object(Object.Ptr+O#ULY)); */   call Copy.String('[STORE]',Str);   Id=Define.Label(s#aa,TopRow,63,Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* SECOND & THIRD LINES OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /*  Use Captions   from: SOUND FILES | New Files: STORE                             */   /*  Use Categories from: SOUND FILES | Existing Files: REPLACE                      */   call Copy.String('Use Captions   from:',Str);   Id=Define.Label(s#aa,TopRow+1,XCol1,Str(0),Str);   call Set.Object.Mouse.Access(Id,0);   Id=Define.Switch(s#aa,TopRow+1,XCol2,11,0,'SOUND FILES|SCREEN');   call PID(DlgCaptionSource,Id);   call Copy.String('Use Categories from:',Str);   Id=Define.Label(s#aa,TopRow+2,XCol1,Str(0),Str);   call Set.Object.Mouse.Access(Id,0);   Id=Define.Switch(s#aa,TopRow+2,XCol2,11,0,'SOUND FILES|SCREEN');   call PID(DlgCatSource,Id);   if NumNew<>0   then Id=Define.Switch(s#aa,TopRow+1,XCol3,22,0,'New Files:      SKIP|New Files:      STORE |New Files:      VERIFY');   else do;      Id=Define.Label(s#aa,TopRow+1,XCol3,20,'New Files:      NONE');      call Set.Object.Mouse.Access(Id,0); /* no mouse activity here */      Id=0;                               /* don't save id */   end;   call PID(DlgStoreMode,Id);   if NumExisting<>0   then Id=Define.Switch(s#aa,TopRow+2,XCol3,23,0,'Existing Files: SKIP|Existing Files: UPDATE|Existing Files: REPLACE|Existing Files: VERIFY');   else do;      Id=Define.Label(s#aa,TopRow+2,XCol3,20,'Existing Files: NONE');      call Set.Object.Mouse.Access(Id,0); /* no mouse activity here */      Id=0;                               /* don't save id */   end;   call PID(DlgUpdateMode,Id);   /* $PAGE */   /* put a small frame around the dialog panel */   I=(XCol3-1)*100-25; /* x-coord offset of vertical dividing line */   write("313")=Addr(Icon(0));   mr13i=O#ICON.Plot;     mr13i=   0; mr13i=-295;   mr13i=O#ICON.Plot;     mr13i=8025; mr13i=-295;   mr13i=O#ICON.Plot;     mr13i=8025; mr13i=   0;   mr13i=O#ICON.LineType; mr13i=1;   mr13i=O#ICON.Connect;  mr13i=   0; mr13i=-100; mr13i=8025; mr13i=-100;   mr13i=O#ICON.Connect;  mr13i=   0; mr13i=-200; mr13i=8025; mr13i=-200;   mr13i=O#ICON.Connect;  mr13i=   I; mr13i=-100; mr13i=   I; mr13i=-295;   mr13i=O#ICON.End;   Id=Define.Graphics.Icon(s#aa,-25,TopRow*100-95,0,Icon);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,-1,-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,-1,GID(DlgGo),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Store.Catalog.Dialog;/* $SUBTITLE Get Response to the Catalog Store Dialog Box *//* bits returned from Get.Store.Catalog.Response */dcl CAT#NOP           lit '000'; /* do nothing */dcl CAT#DoIt          lit '001'; /* if set then other bits are valid, proceed with Catalog Store operation, else abort operation */dcl CAT#CaptionSource lit '002'; /* bit=0 -> use sound file, bit=1 -> use screen */dcl CAT#CatSource     lit '004'; /* bit=0 -> use sound file, bit=1 -> use screen */dcl CAT#Store         lit '008'; /* bit=0 -> don't save new files, bit=1 -> save new files */dcl CAT#Update        lit '016'; /* bit=0 -> don't update existing headers, bit=1 -> update existing headers */dcl CAT#Replace       lit '032'; /* bit=0 -> don't replace existing files, bit=1 -> replace existing files */dcl CAT#PromptNew     lit '064'; /* bit=1 -> give prompt for each new file */dcl CAT#PromptExist   lit '128'; /* bit=1 -> give prompt for each existing file */dcl CAT#Abort         lit '256'; /* bit=1 -> quit catalog store operation */Get.Store.Catalog.Response: proc fixed swapable; /* handle input on CATALOG STORE dialog panel */   dcl RtnVal fixed; /* return bits as described above */   Compute.Return.Value: proc fixed;      dcl (RtnVal,I) fixed;      RtnVal=CAT#DoIt;      if Fetch.Switch(GID(DlgCaptionSource))<>0      then RtnVal=RtnVal|CAT#CaptionSource;      if Fetch.Switch(GID(DlgCatSource))<>0      then RtnVal=RtnVal|CAT#CatSource;      if GID(DlgStoreMode)<>0 then do;         I=Fetch.Switch(GID(DlgStoreMode));         if      I=1 then RtnVal=RtnVal|CAT#Store;         else if I=2 then RtnVal=RtnVal|CAT#PromptNew;      end;      /* else don't do any Store operation */      if GID(DlgUpdateMode)<>0 then do;         I=Fetch.Switch(GID(DlgUpdateMode));         if      I=1 then RtnVal=RtnVal|CAT#Update;         else if I=2 then RtnVal=RtnVal|CAT#Replace;         else if I=3 then RtnVal=RtnVal|CAT#PromptExist;      end;      /* else don't do any Update/Replace operation */      return RtnVal;   end Compute.Return.Value;   /* $PAGE */   call Get.Next.Optical.Event;         /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group=GID(SFDDlgGrp) then do;         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if Screen.Event.Id=GID(DlgGo) then do;                  RtnVal=Compute.Return.Value;                  call Close.Dialog.Panel;                  return RtnVal;               end;               else if Screen.Event.Id=GID(DlgAbort) then do;                  call Close.Dialog.Panel;                  return 0;               end;            end;            else if Screen.Event.Info=S#Deposit then do;            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(MiscGrp) then do;         call Get.Next.Misc.Event; /* might be mouse hole or ENTER */      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Close.Dialog.Panel;   return 0; /* did not get the go ahead */end Get.Store.Catalog.Response;insert ':synsou:stormod:arc-dlg2'; /* contains Open.Cat.Info.Panel *//* $SUBTITLE Get Response to the Catalog/Category Information Panel */Get.Next.Cat.Info.Event: proc returns (boolean) swapable;   /* put up information panel */   call Open.Cat.Info.Panel(DialogRow);   call Get.Next.Optical.Event;   /* wait for exit */   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Id=GID(DlgAbort) then do;         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         or (Screen.Event.Info=S#KeyActivate) then do;            /* enable group objects before erase to avoid smgr bug */            call Activate.Group.Objects(GID(SFDDlgGrp));            call Set.Term.Attr(Attr#Normal);            call Close.Dialog.Panel;            return(true);         end;         else call Get.Next.Optical.Event;      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event;  end;  return(false);  /* user wants to exit screen */end Get.Next.Cat.Info.Event;/* $SUBTITLE Category Store Dialog Panel *//* bits returned from Get.Copy.Category.Response */dcl CAT#UseCurCat     lit '002'; /* bit=0 -> create new subcatalog, bit=1 -> deposit in cur catalog *//* the following have already been declared for GET.STORE.CATALOG.RESPONSE:dcl CAT#NOP           lit '000'; dcl CAT#DoIt          lit '001'; dcl CAT#Store         lit '008'; dcl CAT#Update        lit '016'; dcl CAT#Replace       lit '032'; dcl CAT#PromptNew     lit '064'; dcl CAT#PromptExist   lit '128'; dcl CAT#Abort         lit '256'; */Open.Copy.Category.Dialog: proc (TopRow,Bits) swapable;   dcl TopRow               fixed;   dcl Bits                 fixed; /* previous switch settings, -1= no prev settings */   dcl (FirstId,Id)  fixed;   dcl Str      (40) fixed; /* a string buffer */   dcl TempStr  (10) fixed;   dcl Icon     (32) fixed;   dcl CategoryName(32) fixed;   dcl NumExisting   fixed; /* number of file that already exist in catalog */   dcl (i,j,k)       fixed;   Clean.Cat.Name: proc (SouName,DestName);      dcl SouName       array;      dcl DestName      array;      dcl TempName(8)   fixed;      dcl (SouPtr,DestPtr) fixed;      if byte(SouName,0)=a.colon then SouPtr=1; /* skip first char if it's a ':' */      else SouPtr=0;      if (SouName(0)-SouPtr) igt CatalogStringLen       then TempName(0) = CatalogStringLen;      else TempName(0) = SouName(0)-SouPtr;      do DestPtr = 0 to TempName(0)-1;         if byte(SouName,SouPtr)=a.colon then            call pbyte(TempName,DestPtr,a.score);  /* replace :'s with _'s */         else             call pbyte(TempName,DestPtr,byte(SouName,SouPtr));         SouPtr = SouPtr+1;      end;      call Copy.String(TempName,DestName);   end Clean.Cat.Name;   dcl XCol1 lit  '1'; dcl XCol2 lit '22'; dcl XCol3 lit '36';    dcl XCol4 lit '53'; dcl XCol5 lit '58';   dcl mr13i lit 'write("373")';   if GID(SFDDlgGrp)<>(-1) then call Close.Dialog.Panel;   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Copy files from ABCDEFGHIJKLMNOPQRSTMCAT to current catalog.   [COPY]   [CANCEL] */   /* Copy files from ABCDEFGHIJKLMNOPQRSTMCAT to new subcatalog.    [COPY]   [CANCEL] */   call Copy.String('Copy files from ',Str);   call Fetch.String(GID(SFName),CategoryName); /* append device name to string */   if CategoryName(0) > 24 then CategoryName(0) = 24;   call Append.To.Str(Str,CategoryName);   call Append.To.Str(Str,' to current catalog.');   FirstId=Define.Label(s#aa,TopRow,0,Str(0),Str); /* NOTE: Don't change this from first id */   call Set.Object.Mouse.Access(FirstId,0);        /* w/out looking at Change.Dest... below */   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   call Copy.String('[COPY]',Str);   Id=Define.Label(s#aa,TopRow,63,Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[CANCEL]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* SECOND & THIRD LINES OF DIALOG: */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /*  Put sound files in:  NEW SUBCAT  |      New Files:  STORE   */   /*     New Subcat Name:  ABCDECAT    | Existing Files:  NONE    */   /* NOTE: Don't change the order of these without looking at */   /* Change.Dest procedure below:                             */   call Copy.String('Put sound files in:',Str);   Id=Define.Label(s#aa,TopRow+1,XCol1,Str(0),Str);   call Set.Object.Mouse.Access(Id,0);   Id=Define.Switch(s#aa,TopRow+1,XCol2,11,0,'CUR CATALOG|NEW SUBCAT');   call PID(DlgDestCatalog,Id);   Id=Define.Label(s#aa,TopRow+2,XCol1+3,16,'');   call Set.Object.Attr(Id,0,ATTR#Normal);   call Set.Object.Mouse.Access(Id,0);   Id=Define.String(s#aa,TopRow+2,XCol2,8,O#STR.Filename);   call Set.Object.Mouse.Access(Id,0);   call Set.Object.Attr(Id,0,ATTR#Normal|ATTR#AltIntensity);   call Set.Object.Attr(Id,1,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   call PID(DlgNewSubCatlg,Id);   /* add 'New Files' stats and switches */   Id=Define.Label(s#aa,TopRow+1,XCol3+5,10,'New Files:');   call Set.Object.Mouse.Access(Id,0); /* no mouse activity here */   Id=Define.Switch(s#aa,TopRow+1,XCol4,6,0,'SKIP|COPY|VERIFY');   call PID(DlgStoreMode,Id);   /* add 'Old Files' stats and switches */   Id=Define.Label(s#aa,TopRow+2,XCol3,15,'Existing Files:');   call Set.Object.Mouse.Access(Id,0); /* no mouse activity here */   Id=Define.Switch(s#aa,TopRow+2,XCol4,7,0,'SKIP|REPLACE|VERIFY');   call PID(DlgUpdateMode,Id);   if Bits <> -1 then do;  /* set switches to previous settings */      Disable.Deposits = true;      if (Bits&CAT#UseCurCat)=0 then         call Deposit.Switch(GID(DlgDestCatalog),1);      if (Bits&(CAT#Store|CAT#PromptNew))<>0 then do;         if      (Bits&CAT#Store)<>0 then            call Deposit.Switch(GID(DlgStoreMode),1);         else if (Bits&CAT#PromptNew)<>0 then            call Deposit.Switch(GID(DlgStoreMode),2);      end;      if (Bits&(CAT#Replace|CAT#PromptExist))<>0 then do;         if      (Bits&CAT#Replace)<>0 then            call Deposit.Switch(GID(DlgUpdateMode),1);         else if (Bits&CAT#PromptExist)<>0 then            call Deposit.Switch(GID(DlgUpdateMode),2);      end;      do i = 0 to shr(GID(CatalogString)+1,1);         Str(i) = GID(CatalogString+i);      end;      call Deposit.String(GID(DlgNewSubCatlg),Str);      Disable.Deposits = false;   end;   else do;   /* initialize new subcat name if this is the first time */      call Clean.Cat.Name(CategoryName,CategoryName);      if CategoryName(0) > CatalogStringLen then CategoryName(0)=CatalogStringLen;      do i=0 to shr(CategoryName(0)+1,1);         call PID(CatalogString+i,CategoryName(i));      end;   end;   /* $PAGE */   /* put a small frame around the dialog panel */   I=(XCol3-1)*100-25; /* x-coord offset of vertical dividing line */   write("313")=Addr(Icon(0));   mr13i=O#ICON.Plot;     mr13i=   0; mr13i=-295;   mr13i=O#ICON.Plot;     mr13i=8025; mr13i=-295;   mr13i=O#ICON.Plot;     mr13i=8025; mr13i=   0;   mr13i=O#ICON.LineType; mr13i=1;   mr13i=O#ICON.Connect;  mr13i=   0; mr13i=-100; mr13i=8025; mr13i=-100;   mr13i=O#ICON.Connect;  mr13i=   0; mr13i=-200; mr13i=8025; mr13i=-200;   mr13i=O#ICON.Connect;  mr13i=   I; mr13i=-100; mr13i=   I; mr13i=-295;   mr13i=O#ICON.End;   Id=Define.Graphics.Icon(s#aa,-25,TopRow*100-95,0,Icon);   /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */   call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,-1,-1,GID(DlgAbort));   call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,-1,GID(DlgGo),-1);   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event);   call PID(SFDDlgGrp,Id);   call Activate.Group.Objects(GID(SFDDlgGrp));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Copy.Category.Dialog;/* $SUBTITLE Get Response to the Category Store Dialog Box */Get.Copy.Category.Response: proc fixed swapable; /* handle input on COPY CATEGORY dialog panel */   dcl RtnVal               fixed; /* return bits as described above */   dcl Str(30)              fixed; /* holds new subcat name, if applicable */   dcl TopRow               fixed;   dcl (i,j,k)              fixed;   Compute.Return.Value: proc fixed;      dcl (RtnVal,I) fixed;      RtnVal=CAT#DoIt;      if Fetch.Switch(GID(DlgDestCatalog))=0      then RtnVal=RtnVal|CAT#UseCurCat;      if GID(DlgStoreMode)<>0 then do;         I=Fetch.Switch(GID(DlgStoreMode));         if      I=1 then RtnVal=RtnVal|CAT#Store;         else if I=2 then RtnVal=RtnVal|CAT#PromptNew;      end;      /* else don't do any Store operation */      if GID(DlgUpdateMode)<>0 then do;         I=Fetch.Switch(GID(DlgUpdateMode));         if      I=1 then RtnVal=RtnVal|CAT#Replace;         else if I=2 then RtnVal=RtnVal|CAT#PromptExist;      end;      /* else don't do any Update/Replace operation */      return RtnVal;   end Compute.Return.Value;   Save.Dialog.Panel.Settings: proc;      dcl Bits  fixed;      Bits = Compute.Return.Value&(not(Cat#DoIt));      call PID(CatInfoScratch,Bits);      call Close.Dialog.Panel;      return Bits;   end Save.Dialog.Panel.Settings;   Restore.Dialog.Panel.Settings: proc;      dcl Bits  fixed;      return(GID(CatInfoScratch));   end Restore.Dialog.Panel.Settings;   Change.Dest.Prompts: proc (setting);      dcl setting          fixed; /* 0 = use cur cat; 1 = create new subcat */      dcl CategoryName(12) fixed;      dcl Str(40)          fixed;      dcl i                fixed;      call Copy.String('Copy files from ',Str);      call Fetch.String(GID(SFName),CategoryName); /* append device name to string */      if CategoryName(0) > 24 then CategoryName(0) = 24;      call Append.To.Str(Str,CategoryName);      if setting=0      then call Append.To.Str(Str,' to current catalog.');      else call Append.To.Str(Str,' to new subcatalog.');      Disable.Deposits = true;      call Deposit.Label(OBJ$Dialog,Str);      if setting=0 then do;         call Deposit.Label(GID(DlgNewSubCatlg)-1,'');         call Deposit.String(GID(DlgNewSubCatlg),'');      end;      else do;         call Deposit.Label(GID(DlgNewSubCatlg)-1,'New Subcat Name:');         do i = 0 to shr(GID(CatalogString)+1,1);            Str(i) = GID(CatalogString+i);         end;         call Deposit.String(GID(DlgNewSubCatlg),Str);      end;      Disable.Deposits = false;   end Change.Dest.Prompts;   /* $PAGE */   call Get.Next.Optical.Event;         /* get first event */   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group=GID(SFDDlgGrp) then do;         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if Screen.Event.Id=GID(DlgGo) then do;                  RtnVal=Compute.Return.Value;                  call Close.Dialog.Panel;                  return RtnVal;               end;               else if Screen.Event.Id=GID(DlgAbort) then do;                  call Close.Dialog.Panel;                  return 0;               end;            end;            else if Screen.Event.Info=S#Deposit then do;               if (Screen.Event.Id = GID(DlgNewSubCatlg))               then do;                  /* deposited a new subcatalog name */                  call Fetch.String(GID(DlgNewSubCatlg),Str);                  if Str(0) > CatalogStringLen then Str(0)=CatalogStringLen;                  do i=0 to shr(Str(0)+1,1);                     call PID(CatalogString+i,Str(i));                  end;               end;               else if (Screen.Event.Id = GID(DlgDestCatalog))               then do;                  if Fetch.Switch(GID(DlgDestCatalog))=1 then do;                     call Change.Dest.Prompts(1);                     call Set.Object.Mouse.Access(GID(DlgNewSubCatlg),O#ACT.Left.Press|O#ACT.Middle.Press|O#ACT.Right.Press);                     call Set.Object.Attr(GID(DlgNewSubCatlg),0,ATTR#Normal);                     call Set.Object.Attr(GID(DlgNewSubCatlg),1,ATTR#Normal|ATTR#Reverse);                  end;                  else do;                     if Cur.Obj.Id = GID(DlgNewSubCatlg)                     then call Select.New.Cur.Obj(GID(DlgAbort),-1,-1);                     call Change.Dest.Prompts(0);                     call Set.Object.Mouse.Access(GID(DlgNewSubCatlg),0);                     call Set.Object.Attr(GID(DlgNewSubCatlg),0,ATTR#Normal|ATTR#AltIntensity);                     call Set.Object.Attr(GID(DlgNewSubCatlg),1,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);                  end;               end;            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(MiscGrp) then do;         call Get.Next.Misc.Event; /* might be mouse hole or ENTER */      end;      else if Screen.Event.Group=GID(ActionGrp) then do;         if   (Screen.Event.Id  = GID(CatInfoButton))         and ((Screen.Event.Info=S#MouseSelect)         or   (Screen.Event.Info=S#MouseActivate)) then do;            call Save.Dialog.Panel.Settings;            if Get.Next.Cat.Info.Event then do;               call Open.Copy.Category.Dialog(DialogRow,Restore.Dialog.Panel.Settings);               if Fetch.Switch(GID(DlgDestCatalog))=1               then call Change.Dest.Prompts(1);               call Get.Next.Optical.Event;            end;            /* else pass Exit.My.Screen on */         end;         else call Get.Next.Optical.Event;      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   call Close.Dialog.Panel;   return 0; /* did not get the go ahead */end Get.Copy.Category.Response;/* $SUBTITLE Verify Prompt for a Single File in Store Catalog Operation */Open.Store.File.Dialog: proc (mode,TopRow) swapable; /* put up dialog box for VERIFY of a single file */   dcl mode           fixed; /* = CatalogMode or CategoryMode */   dcl TopRow         fixed; /* row of top of panel */   dcl (FirstId,Id,I) fixed;   dcl Str      (40)  fixed; /* a string buffer */   dcl mr13i          lit 'write("373")';   if GID(SFDDlgGrp)<>(-1) then return; /* dialog box already open */   call Set.DlgOrigObj;   call Set.Auto.Allocation.Id(OBJ$Dialog); /* reset id # */   /* TOP LINE OF DIALOG: (CATALOG MODE) */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Select operation for file "ABCDEFGH"       [UPDATE]  [REPLACE]  [SKIP]  [CANCEL] */   /* Select operation for file "ABCDEFGH"                   [STORE]  [SKIP]  [CANCEL] */   /* TOP LINE OF DIALOG: (CATEGORY MODE) */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Select operation for file "ABCDEFGH"                 [REPLACE]  [SKIP]  [CANCEL] */   /* Select operation for file "ABCDEFGH"                    [COPY]  [SKIP]  [CANCEL] */   FirstId=Define.Label(s#aa,TopRow,0,35,'');   call PID(DlgFLabel1,FirstId);   call Set.Object.Mouse.Access(FirstId,0);   call Set.Object.Attr(FirstId,0,ATTR#Normal|ATTR#AltIntensity|ATTR#Reverse);   call Copy.String('[UPDATE]',Str);   Id=Define.Label(s#aa,TopRow,43,Str(0),Str);   call PID(DlgUpdate,Id);   call Copy.String('[REPLACE]',Str);   Id=Define.Label(s#aa,TopRow,53,Str(0),Str);   call PID(DlgReplace,Id);   if mode = CatalogMode   then call Copy.String('[STORE]',Str);   else call Copy.String('[COPY]',Str);   Id=Define.Label(s#aa,TopRow,55,Str(0),Str);   call PID(DlgGo,Id);      call Copy.String('[SKIP]',Str);   Id=Define.Label(s#aa,TopRow,64,Str(0),Str);   call PID(DlgSkip,Id);   call Copy.String('[ABORT]',Str);   Id=Define.Label(s#aa,TopRow,72,Str(0),Str);   call PID(DlgAbort,Id);   /* SECOND LINE OF DIALOG: (CATALOG MODE) */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Store "ABCDEFGH" on Optical volume as: 12345678                                  */   /* SECOND LINE OF DIALOG: (CATEGORY MODE) */   /* 0         1         2         3         4         5         6         7          */   /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */   /* Copy "ABCDEFGH" to current catalog as: 12345678                                  */   Id=Define.Label(s#aa,TopRow+1,0,38,'');   call PID(DlgFLabel2,Id);   call Set.Object.Mouse.Access(Id,0);   Id=Define.String(s#aa,TopRow+1,39,8,0);   call PID(DlgRenameField,Id);   /* put a small frame around the dialog panel */   write("313")=Addr(Str(0));   mr13i=O#ICON.Plot;     mr13i=   0; mr13i=-295;   mr13i=O#ICON.Plot;     mr13i=8025; mr13i=-295;   mr13i=O#ICON.Plot;     mr13i=8025; mr13i=   0;   mr13i=O#ICON.End;   Id=Define.Graphics.Icon(s#aa,-25,TopRow*100-95,0,Str);   I=Id;                  /* save local copy */   Id=Group.Objects(GRP$Dialog,FirstId,Id,Get#Screen.Event);   call PID(SFDDlgGrp,Id);   call Enable.Object(I);   /* enable frame icon */   call Enable.Object(GID(DlgSkip));   call Enable.Object(GID(DlgAbort));   call Enable.Object(GID(DlgRenameField));   call Enable.Object(GID(DlgFLabel1));   call Enable.Object(GID(DlgFLabel2));   call Update.Group.Objects  (GID(SFDDlgGrp));   call Select.New.Cur.Obj    (GID(DlgAbort),-1,-1);end Open.Store.File.Dialog;/* $SUBTITLE Get Response for Single File during Store Catalog Operation */Get.Store.File.Response: proc (mode,Name,FileThere) fixed swapable; /* get response for storing a file */   dcl mode          fixed; /* = CatalogMode or CategoryMode */   dcl Name          array; /* name of file to archive to optical disk */   dcl FileThere     fixed; /* mode=CatalogMode: true if file exists on optical disk */                            /* mode=CategoryMode:true if file exists in cur catalog */   dcl NewName (4)   fixed; /* new filename input by user */   dcl OldName (4)   fixed; /* copy of above filename     */   dcl Optical.Ready fixed; /* true or false returned from ACTIVATE.OPTICAL */   Set.Up.Objects: proc(mode,filename,FileThere,FirstTime);      dcl mode      fixed;      dcl filename  array;      dcl FileThere fixed;      dcl FirstTime boolean;      dcl Str  (40) fixed;      /* TOP LINE OF DIALOG: */      /* 0         1         2         3         4         5         6         7          */      /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */      /* Select operation for file "ABCDEFGH"       [UPDATE]  [REPLACE]  [SKIP]  [CANCEL] */      /* Select operation for file "ABCDEFGH"                   [STORE]  [SKIP]  [CANCEL] */      /* SECOND LINE OF DIALOG: */      /* 0         1         2         3         4         5         6         7          */      /* 01234567890123456789012345678901234567890123456789012345678901234567890123456789 */      /* Store "ABCDEFGH" on Optical volume as: 12345678                                  */      if FirstTime then do; /* Fill Dialog panel with correct info */         call Copy.String  ('Select operation for file "',Str);         call Append.To.Str(Str,filename);         call Append.To.Str(Str,'"');         Disable.Deposits=true;            call Deposit.Label(GID(DlgFLabel1),Str);         Disable.Deposits=false;         if mode=CategoryMode then do;            call Copy.String('Copy "',Str);            call Append.To.Str(Str,filename);            call Append.To.Str(Str,'" to current catalog as:');         end;         else do;            call Copy.String('Store "',Str);            call Append.To.Str(Str,filename);            call Append.To.Str(Str,'" on Optical volume as:');         end;         Disable.Deposits=true;            call Deposit.Label(GID(DlgFLabel2),Str);            call Deposit.String(GID(DlgRenameField),filename);         Disable.Deposits=false;      end;      if FileThere then do;   /* enable UPDATE & REPLACE buttons */         if (Fetch.Object.Info(GID(DlgGo),O#Status)&O#STAT.Enable)<>0         then do;            call Erase.Object  (GID(DlgGo));            call Disable.Object(GID(DlgGo));         end;         call Enable.Object (GID(DlgReplace));         if mode = CatalogMode then call Enable.Object (GID(DlgUpdate));         /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */         if mode = CatalogMode then do;            call Set.Object.Arrow.Links(GID(DlgUpdate) ,-1,GID(DlgRenameField),GID(DlgRenameField),GID(DlgReplace));            call Set.Object.Arrow.Links(GID(DlgReplace),-1,GID(DlgRenameField),GID(DlgUpdate),GID(DlgSkip));         end;         else do; /* mode = CategoryMode */            call Set.Object.Arrow.Links(GID(DlgReplace),-1,GID(DlgRenameField),GID(DlgRenameField),GID(DlgSkip));         end;         call Set.Object.Arrow.Links(GID(DlgSkip)   ,-1,GID(DlgRenameField),GID(DlgReplace),GID(DlgAbort));         call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,GID(DlgRenameField),GID(DlgSkip),-1);         call Set.Object.Arrow.Links(GID(DlgRenameField),GID(DlgReplace),-1,-1,GID(DlgReplace));      end;      else do; /* enable STORE button */         if (Fetch.Object.Info(GID(DlgReplace),O#Status)&O#STAT.Enable)<>0         then do;            call Erase.Object  (GID(DlgReplace));            call Disable.Object(GID(DlgReplace));         end;         if (Fetch.Object.Info(GID(DlgUpdate),O#Status)&O#STAT.Enable)<>0         then do;            call Erase.Object  (GID(DlgUpdate));            call Disable.Object(GID(DlgUpdate));         end;         call Enable.Object (GID(DlgGo));         /* call Set.Object.Arrow.Links(Id,Above,Below,Left,Right)  */         call Set.Object.Arrow.Links(GID(DlgGo)     ,-1,GID(DlgRenameField),-1,GID(DlgSkip));         call Set.Object.Arrow.Links(GID(DlgSkip)   ,-1,GID(DlgRenameField),GID(DlgGo),GID(DlgAbort));         call Set.Object.Arrow.Links(GID(DlgAbort)  ,-1,GID(DlgRenameField),GID(DlgSkip),-1);         call Set.Object.Arrow.Links(GID(DlgRenameField),GID(DlgGo),-1,-1,GID(DlgGo));      end;      call Update.Group.Objects(GID(SFDDlgGrp));   end Set.Up.Objects;   Save.Dialog.Panel.Settings: proc (filename,FileThere,mode);      dcl filename         array;      dcl FileThere        fixed;      dcl mode             fixed;      dcl RenameField (5)  fixed;      dcl (i,j)            fixed;      dcl count            fixed;      count = 0;      call Fetch.String(GID(DlgRenameField),RenameField);      do i = 0 to shr(RenameField(0)+1,1);         call PID(CatInfoScratch+count,RenameField(i));         count = count + 1;      end;      do j = 0 to shr(filename(0)+1,1);         call PID(CatInfoScratch+count,filename(j));         count = count + 1;      end;      call PID(CatInfoScratch+count,FileThere);      call PID(CatInfoScratch+count+1,mode);      call Close.Dialog.Panel;   end Save.Dialog.Panel.Settings;   Restore.Dialog.Panel.Settings: proc;      dcl RenameField (5)  fixed;      dcl filename(5)      fixed;      dcl mode             fixed;      dcl FileThere        fixed;      dcl (i,j,k)          fixed;      do i = 0 to shr(GID(CatInfoScratch)+1,1); /* get rename field */         RenameField(i) = read(mdi);      end;      do j = 0 to shr(read(md)+1,1);            /* get original name */         filename(j) = read(mdi);      end;      FileThere = read(mdi);      mode      = read(mdi);      call Set.Up.Objects(mode,filename,FileThere,true);      Disable.Deposits = true;      call Deposit.String(GID(DlgRenameField),RenameField);      Disable.Deposits = false;   end Restore.Dialog.Panel.Settings;   /* $PAGE */   call Set.Up.Objects(mode,Name,FileThere,true);   call Get.Next.Optical.Event;         /* get first event */   call Copy.String(Name,OldName);      /* save original name */   do while Exit.My.Screen=0;           /* wait for exit condition */      if Screen.Event.Group=GID(SFDDlgGrp) then do;         if Screen.Event.Code=Get.Screen.Event then do;            if (Screen.Event.Info=S#MouseSelect)            or (Screen.Event.Info=S#MouseActivate)            or (Screen.Event.Info=S#KeyActivate)            then do;               if      Screen.Event.Id=GID(DlgGo)      then return CAT#DoIt|CAT#Store;               else if Screen.Event.Id=GID(DlgReplace) then return CAT#DoIt|CAT#Replace;               else if Screen.Event.Id=GID(DlgUpdate)  then return CAT#DoIt|CAT#Update;               else if Screen.Event.Id=GID(DlgSkip)    then return CAT#NOP;               else if Screen.Event.Id=GID(DlgAbort)   then return CAT#Abort;            end;            else if Screen.Event.Info=S#Deposit then do;               if Screen.Event.Id=GID(DlgRenameField) then do;                  call Fetch.String(GID(DlgRenameField),NewName);                  call Remove.Spaces.From.String(NewName,NewName);                  call UpperCase.String         (NewName,NewName);                  if Valid_FileName(NewName) then do; /* legal filename entered */                     call Copy.String(NewName,Name); /* save new name */                     if mode = CatalogMode then do;                        if Index_Locate(NewName,Misc.Buf,Laserdev)     /* file on optical disk? */                        then call Set.Up.Objects(mode,'',true ,false); /* file already exists */                        else call Set.Up.Objects(mode,'',false,false); /* file not there */                     end;                     else do; /* mode = CategoryMode */                        if Locate(NewName,1)                           /* file in current catalog ? */                        then call Set.Up.Objects(mode,'',true ,false); /* file already exists */                        else call Set.Up.Objects(mode,'',false,false); /* file not there */                     end;                  end;                  else do;                     call Copy.String      (NewName,FNBuf); /* set up for error call */                     call Set.Optical.Error(ERR#BadFileName);                     Disable.Deposits=true;                        call Deposit.String(GID(DlgRenameField),Name);                     Disable.Deposits=false;                  end;               end; /* got a deposit into rename field */            end;            call Get.Next.Optical.Event;         end;         else call Get.Next.Optical.Event;   /* get another event */      end;      else if Screen.Event.Group=GID(MiscGrp) then do;         call Get.Next.Misc.Event; /* might be mouse hole or ENTER */      end;      else if Screen.Event.Group=GID(ActionGrp) then do;         if   (Screen.Event.Id  = GID(CatInfoButton))         and ((Screen.Event.Info=S#MouseSelect)         or   (Screen.Event.Info=S#MouseActivate)) then do;            call Save.Dialog.Panel.Settings(OldName,FileThere,mode);            if Get.Next.Cat.Info.Event then do;               call Open.Store.File.Dialog(mode,DialogRow);               call Restore.Dialog.Panel.Settings;               call Get.Next.Optical.Event;            end;            /* else pass Exit.My.Screen on */         end;      end;      else if Screen.Event.Code=Get.Screen.Event then do; /* screen event on some other group */         if (Screen.Event.Info=S#MouseSelect)         or (Screen.Event.Info=S#MouseActivate)         then do; /* user selected some object outside dialog box */            call Select.New.Cur.Obj(GID(DlgAbort),-1,-1); /* force back to dialog object */            call Set.Optical.Error(Err#NeedDialogResponse);         end;         call Get.Next.Optical.Event;      end;      else call Get.Next.Optical.Event; /* ignore all other events */   end;   return CAT#Abort; /* user wants to quit screen */end Get.Store.File.Response;
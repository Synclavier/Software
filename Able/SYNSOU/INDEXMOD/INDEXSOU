/* Index File Update Routines   By Kip Olson, June 1987   Modification History:   10/19/90 - cj  - Inserted synmods:getvdcl to access new.poly.contents.                    Created event bit in Mount.Optical.Volume   03/14/89 - SGS - change .INDEX pathname, based on system device   05/01/88 - KJO - Added faster index file update routines*/module update;	dcl mdevi fixed external;		/* this version: use variable for memory device to read/write */   insert ':-xpl:asciilit'; 		/* ascii literals */   insert ':-xpl:scsirout';		/* SCSI device driver routines */   insert ':-xpl:catrout';			/* catalog routines */   insert ':-xpl:filerout';		/* fileio routines */   insert ':-xpl:optrout';			/* optical disk drivers */   insert ':-xpl:syslits';			/* for systyp for Get_Index_Name() */   insert ':-xpl:intrprtr';		/* for time sharing */   insert ':synlits:comlits';   insert ':synlits:globlits';	/* globals Synclavier literals */   insert ':synlits:samplits';	/* sampling literals */   insert ':synlits:fcodlits';	/* poly literals */   insert ':synauxs:odisklit';	/* for LaserDev */   insert ':synmods:globdcl';		/* alloc examount */   insert ':synmods:tprimdcl';	/* display routines           */   insert ':synmods:getvdcl';		/* event variables            */	   insert ':synmods:recrddcl';	/* record management routines */	library ':synlibs:recrdlib';	/* need our own library		  	*/	insert ':synsou:indexmod:indexsrc';	/* get goodies				*/	/* Syntab-specific routine to Mount an optical disk for use */	   dcl Optical.Disk.Ready fixed public;         /* Non-Zero if ok to do Optical operations, else 0 */   dcl Local.Disk.Ready   fixed;                /* Used to detect removal of optical disk          */   Mount.Optical.Volume: proc boolean public swapable; /* does not generate error messages */      dcl Treename (40) fixed;		if (find_device(LaserDev) == 0)			  /* if not configured, skip  */			return;				      if Check_Optical(LaserDev)               /* if prior volume is still */      then Optical.Disk.Ready = 1;             /* mounted, done            */      else if Open_Optical(Treename,LaserDev)  /* else if we can open the  */      then do;                                 /* new volume, create a     */         Optical.Disk.Ready = 1;               /* system event             */         new.poly.contents = new.poly.contents \ 4;      end;      else do;                                 /* else if can't open       */         if Local.Disk.Ready                   /* and was one in before    */         then new.poly.contents = new.poly.contents \ 4;  /* create event! */         Optical.Disk.Ready = 0;      end;      Local.Disk.Ready = Optical.Disk.Ready;   /* save state for next time */      return Optical.Disk.Ready;               /* return current status    */   end Mount.Optical.Volume;end update;
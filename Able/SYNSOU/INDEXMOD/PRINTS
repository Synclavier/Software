   Print_Pointer: proc(ptr);      dcl ptr fixed array;      print ptr(1),shr(ptr(0),4) and "HFF",;   end Print_Pointer;   Print_String: proc(ptr,offset);      dcl ptr fixed array;      dcl offset fixed;      dcl (i,j,c) fixed;      call ReadMBlock(ptr,offset);      DISABLE;      j = read(mdevi); /* get length of key */      do i = 1 to shr(j + 1,1);         c = read(mdevi);         print chr(c),;         c = shr(c,8);         if c <> 0 then print chr(c),;      end;   end Print_String;   Print_BlockData: proc(ptr);      dcl ptr fixed array;      dcl dp(ptr#len - 1) fixed;      call ReadMBlock(ptr,mem$alloc);      DISABLE;      print 'Block: A',read(mdevi),' U',read(mdevi),' DP',;      dp(0) = read(mdevi); dp(1) = read(mdevi);      call Print_Pointer(dp);   end Print_BlockData;   Print_TreeData: proc(ptr);      dcl ptr fixed array;      dcl dp(ptr#len - 1) fixed;      call ReadMBlock(ptr,tree$leftptr);      DISABLE;      print 'Tree:  LP',;      dp(0) = read(mdevi); dp(1) = read(mdevi);      call Print_Pointer(dp);      print ' RP',;      dp(0) = read(mdevi); dp(1) = read(mdevi);      call Print_Pointer(dp);      print ' Red', read(mdevi), ' KL',read(mdevi),;   end Print_TreeData;   Print_FileNode: proc(nodeptr);      dcl nodeptr fixed array;      dcl (dataptr,catptr)(ptr#len - 1) fixed;      dcl (i,j) fixed;      DISABLE;      print 'File:  ',;      call Print_String(nodeptr,tree$key); print;      call Print_BlockData(nodeptr); print;      call Print_TreeData(nodeptr); print;      call ReadMBlock(nodeptr,mem$used);      if read(mdevi) = -1 then do;         print 'File deleted';      end;      else do;         call ReadMBlock(nodeptr,mem$ptr);         dataptr(0) = read(mdevi); dataptr(1) = read(mdevi);         if (dataptr(0) = MNullPtr(0)) and (dataptr(1) = MNullPtr(1)) then do;            print 'No data pointer';         end;         else do;            call ReadMBlock(dataptr,mem$used);            DISABLE;            j = read(mdevi);            print 'Cats:  ',j;            do i = 0 to j - 1;               call ReadMBlock(dataptr,mem$data + l#rec_length + i*ptr#len);               catptr(0) = read(mdevi); catptr(1) = read(mdevi);               call ReadMBlock(catptr,tree$key);               DISABLE;               print '  ',read(mdevi), ' ',;               call Print_String(catptr,tree$key);               print;            end;         end;      end;   end Print_FileNode;   Print_CatNode: proc(nodeptr);      dcl nodeptr fixed array;      dcl dataptr(ptr#len - 1) fixed;      dcl (i,j) fixed;      DISABLE;      print 'Cat:   ',;      call Print_String(nodeptr,tree$key); print;      call Print_BlockData(nodeptr); print;      call Print_TreeData(nodeptr); print;      call ReadMBlock(nodeptr,mem$used);      if read(mdevi) = -1 then do;         print 'File deleted';      end;      else do;         call ReadMBlock(nodeptr,mem$ptr);         dataptr(0) = read(mdevi); dataptr(1) = read(mdevi);         if (dataptr(0) = MNullPtr(0)) and (dataptr(1) = MNullPtr(1)) then do;            print 'No data pointer';         end;         else do;            call ReadMBlock(dataptr,mem$used);            DISABLE;            j = read(mdevi);            print 'Files: ',j;            do i = 0 to j - 1;               call ReadMBlock(dataptr,mem$data + i);               DISABLE;               print read(mdevi),;               if ((i + 1) mod 8) = 0 then print;            end;            if (j mod 8) <> 0 then print;         end;      end;   end Print_CatNode;   Print_Tree: proc(headptr,PrintFileTree);      dcl headptr fixed array; /* head of tree */      dcl PrintFileTree boolean;      dcl nodeptr(ptr#len - 1) fixed; /* pointer to node */      dcl More_Nodes boolean; /* TRUE if there are more nodes to print */      More_Nodes = TreeTraverse(headptr,TRUE,nodeptr); /* get first node */      do while More_Nodes;         if PrintFileTree         then call Print_FileNode(nodeptr); /* print file tree node */         else call Print_CatNode(nodeptr); /* print category tree node */         More_Nodes = TreeTraverse(headptr,FALSE,nodeptr); /* get remaining nodes */      end;   end Print_Tree;
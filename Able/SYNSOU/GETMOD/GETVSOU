/* GETVSOU - DEFINE GLOBAL VARIABLES FOR GET.NEXT.EVENT   Modified:   01/30/91 - MWH - Report which tracks have had new notes   06/26/89 - CJ  - Redefined several events for release 2.2   09/16/88 - TSS - Added NEW.CLAVIER.INFO*//* these are put in a separate module so that we can compile *//* the synclavier program without any get.next.event/mouse   *//* code in it                                                */module getvmod;insert ':synlits:comlits';             /* compilation lits          */insert ':synlits:globlits';            /* most items                */insert ':synlits:cplits';              /* for max.d115d.bds         */insert ':synmods:globdcl';             /* for real.milliseconds      */insert ':synauxs:getlits';             /* for num.of.get.events      *//* The following variables are set by the Synclavier Operating       *//* System when the contents of various data structures change:       *//* Note: see SYNMODS:GETVDCL for a description of these              *//* variables                                                         */dcl  new.timbre.info     fixed public; /* These variables are set by */dcl  new.seq.info        fixed public; /* the Synclavier Operating   */dcl  new.entry.writes    fixed public; /* System.  Information       */dcl  new.prm.info        fixed public; /* stored here will           */dcl  new.dtd.info        fixed public; /* eventually be reported to  */dcl  new.poly.contents   fixed public; /* the ABLE screens and all   */dcl  new.ertyp           fixed public; /* remote devices connected   */dcl  new.smpte.event     fixed public; /* to the protocol.           */dcl  new.clavier.info    fixed public; /* **** DECLARE IN ORDER **** */dcl  new.spare1.info     fixed;dcl  new.spare2.info     fixed;dcl  new.spare3.info     fixed;dcl  new.spare4.info     fixed;dcl  new.spare5.info     fixed;dcl  new.spare6.info     fixed;dcl  new.spare7.info     fixed;        /* total of 16 words !!       *//* The following array holds copies of these the Operating System    *//* event variables (plus the event variables for the ABLE screen     *//* code):                                                            */dcl  get.ABLE.array(0)        fixed public;dcl  new.ABLE.in.char         fixed public;dcl  new.ABLE.mouse.button    fixed public;dcl  new.ABLE.mouse.movement  fixed public; dcl  new.ABLE.timbre.info     fixed public; dcl  new.ABLE.spare1.info     fixed;dcl  new.ABLE.seq.info        fixed public;dcl  new.ABLE.play.scrolling  fixed;       dcl  new.ABLE.entry.writes    fixed public;dcl  new.ABLE.prm.info        fixed public; dcl  new.ABLE.dtd.info        fixed public; dcl  new.ABLE.poly.contents   fixed public; dcl  new.ABLE.ertyp           fixed public; dcl  new.ABLE.smpte.event     fixed public; dcl  new.ABLE.arrow.key       fixed;dcl  new.ABLE.screen.event    fixed public;dcl  new.ABLE.program.exit    fixed;dcl  new.ABLE.dtd.scrolling   fixed;dcl  new.ABLE.clavier.info    fixed public; /* note: for new.play.scrolling and new.dtd.scrolling - these are events *//* that ABLE screens enable for.  These events are never reported with   *//* a discreet event code.  They appear as bits in new seq info or new    *//* dtd info.                                                             *//* The D50 termulator is only interested in New.Clavier.Info at the      *//* moment:                                                               */dcl  D50.Termulator.Clavier.Info   fixed PUBLIC;/* misc synclav variables */dcl  latched.ertyp        fixed public;dcl  new.smpte.info       fixed public; /* set to 1 whenever a new SMPTE time is latched into CUR.HRS, CUR.MIN, etc. (once every 100 msec usually) */dcl  winchester.error     fixed public;dcl  output.underrun      fixed public;/* The following array holds bits that describe which events a particular *//* remote device might be interested in:                                  */dcl  D115D.Event.Enable.Ptr       fixed PUBLIC;dcl  D115D.Note.Change.Tracks     fixed PUBLIC;D115D.Event.Enable.Ptr    = alloc.examount(1);  /* get 1 sector for each table */D115D.Note.Change.Tracks  = alloc.examount(1);end getvmod;
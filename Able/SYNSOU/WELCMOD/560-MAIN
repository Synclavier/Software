/*	:SYNSOU:WELCMOD:560-MAIN  $TITLE  Routines to Run Welcome Menu and Main MenuModified1999/10/11 - TY  - Fixed some incorrect label widths in DRAW.MAIN.MENU1991/10/19 - PF  - Fixed total memory display to show correct "byte" count1989/05/09 - LSS - spacing change for center box on Welc Menu1989/05/02 - TSS - Fixed bug in RAM amount display on Welcome Menu1988/11/30 - cj  - show info for each poly bin for 9600 systems1988/05/26 - LSS - minor display changes for Release O Beta1988/03/08 - LSS - inc.poly check for putting optical screen on menu1987/12/17 - MWH - Merge poly updates with N-Final plus AEE sources1987/07/21 - MWH - display total memory correctly even if 1000's of meg of poly1987/03/07 - cj  - added new main menu*//*	Draw Welcome Menu	*/dcl command.table		lit '100';	/*	id # of command table	*/dcl enter.name.label	lit '200';	/*	label for name entry	*/dcl enter.name.string	lit '201';	/*	string for name entry	*/DRAW.WELCOME.MENU: proc public swapable;					/*	draws the welcome menu	*/	dcl i					fixed;	dcl prompt.1 (16)	fixed;	dcl prompt.2 (16)	fixed;	call copy.string('WELCOME TO THE SYNCLAVIER',prompt.1);	call copy.string('DIGITAL AUDIO SYSTEM',		prompt.2);	call clear.term;	call set.term.attr(ATTR#Normal);	call initialize.graphics.terminal;	call initialize.screen.manager(TRD.LEN);	call Set.Default.Action(0);			/*	need no mouse access here	*/	call define.frame(1,4,0,18,80,'');	/*	main box							*/	call define.label(2,22,0,0,rel.version);	call define.label(3,22,rel.version(0)+1,0,rel.date);	if (simulate_dtd)		call define.label(99,22,rel.version(0)+1+rel.date(0)+1,0,'* SIM DTD *');	call define.label(4,5,12,0,'This software supports the following hardware options:');	if new.pan<>0 then call define.label(5,6,7,0,'* Velocity/Pressure Keyboard');	else					 call define.label(5,6,7,0,'* Original Keyboard');	if inc.axe<>0 then call define.label(6,6,41,0,'* Digital Guitar Option');	else					 call define.label(6,6,41,0,'* (Digital Guitar not available)');	if		  inc.mono<>0 then call define.label(7,7,7,0,'* Sample-to-Disk Option');	else if inc.poly<>0 then call define.label(7,7,7,0,'* Polyphonic Sampling Option');	else							 call define.label(7,7,7,0,'* (Sampling options not available)');	call define.label(8,13,6,0,'Select screen with arrow keys.  Press <RETURN> to activate screen.');	call Set.Default.Action(O#ACT.Middle.Press);	call define.label(9,15,27,25,'');	call define.table(command.table,1,6,9);	call deposit.label(9,'A. Timbre Directory');				/*	A	*/	call deposit.table(command.table,0,0);	if      (inc.poly)	then call deposit.label(9,'B. Sound File Directory');	/*	B	*/   else if (inc.mono)   then call deposit.label(9,'B. Mono Sound Directory');	/*	B	*/	else call deposit.label(9,'B. (Sound File Directory)');	call deposit.table(command.table,0,1);	call deposit.label(9,'C. Sequence Directory');			/*	C	*/	call deposit.table(command.table,0,2);	call deposit.label(9,'D. Subcatalog Directory');		/*	D	*/	call deposit.table(command.table,0,3);	call deposit.label(9,'E. System Commands');				/*	E	*/	call deposit.table(command.table,0,4);	call deposit.label(9,'F. Main Menu');						/*	F	*/	call deposit.table(command.table,0,5);	call Set.Default.Action(0);	call define.frame(11,8,39-12,4,25,'');	call define.label(12,9,39-12+2,0,'N E D     ');	call define.label(13,9,39-12+2+10,0,rel.version);	call define.fixed.point(14,10,39-12+2,3,0,cf#unsigned\cf#right\cf#spfill);	call deposit.fixed.point(14,system.voices);	call define.label(15,10,39-12+6,0,'VOICES');	call define.fixed.point(16,10,39-12+15,5,0,cf#unsigned\cf#right\cf#spfill);	/*	THIS BLOCK BORROWED FROM SIMILAR CODE IN 05-BUTT:073-NEWW TO COMPUTE SIZES	*/	BEGIN;										/*	FIND SIZES	*/		DCL (LW,TMP) (1)	FIXED;		/*	FIRST, TOTAL UP MEMORY IN 'K' WORDS	*/		CALL STR32(0,SHR(MEM.SIZ,9),LW);									/*	INTERNAL	MEMORY	*/		CALL ADD16(SHR((CORE(LOC.EMSIZE)+256)&"177400",1),LW);	/*	EXTERNAL	MEMORY	*/		DO I=0 TO POLYNUMS-1;												/*	POLY		MEMORY	*/			CALL SET.CUR.BIN(I);			/*	POINT AT THIS BIN	*/			CALL STR32(POLYAMOUNT.MSB,POLYAMOUNT.LSB,TMP);			/*	SECTORS IN THIS BIN	*/			CALL SHR32(TMP,1);			/*	CONVERT TO K "BYTES" (ROUND DOWN)	*/			CALL ADD32(TMP,LW,LW);		/*	ADD TO TOTAL		*/		END;		IF COM16(32767,LW) = LW#IGT THEN DO;	/*	TOTAL K OF RAM FITS IN POSITIVE 16-BIT WORD	*/			call deposit.fixed.point(16,LW(LW#LSB));	/*	WRITE IT OUT		*/			call define.label(17,10,39-12+20,0,'K');	/*	WRITE 'K'		*/		END;		ELSE DO;											/*	TOO BIG FOR 'K'	*/			CALL SHR32(LW,10);						/*	CONVERT TO MEGABYTES (ROUND DOWN)	*/			call deposit.fixed.point(16,LW(LW#LSB));	/*	WRITE IT OUT		*/			call define.label(17,10,39-12+20,0,'M');	/*	WRITE 'M'		*/		END;	END;													/*	OF BEGIN TO FIND SIZES	*/	/*	Define information for 9600 systems:	*/	if polynums > 1 then do;						/*	only if > 1 bin		*/		call define.label(19, 8,54,0,'Polyphonic Sampling:');		call define.label(20, 9,57,0,'Bin 1:   V      Mb');		call define.label(21,10,57,0,'Bin 2:   V      Mb');		call define.label(22,11,57,0,'Bin 3:   V      Mb');		call define.fixed.point(25, 9, 64, 2, 0, cf#unsigned\cf#right\cf#spfill);		call define.table		  (26, 1, 3, 25);		call define.fixed.point(27, 9, 69, 3, 0, cf#unsigned\cf#right\cf#spfill);		call define.table		  (28, 1, 3, 27);		do i = 0 to 2;					/*	deposit # of voices/bin	*/			call Deposit.Fixed.Point(25, PolyNumVs(i));			call Deposit.Table		(26, 0, i);		end;		do i = 0 to 2;					/*	deposit # of MBs/ bin	*/			load	(PolyAmounts(shl(i,1) + lw#lsb));			uload	(PolyAmounts(shl(i,1) + lw#msb));			div 2048;			if rem > 1024 then load (res+1);		/*	round up		*/			call Deposit.Fixed.Point(27,	res);			call Deposit.Table		(28, 0, i);		end;	end;	call Set.Default.Action(O#ACT.Middle.Press);	call set.screen.animate(1);			/*	allow animation	*/	call activate.screen(command.table);	/*	do actual printing here for items that have no	*/	/*	screen manager equivalent							*/	if vt100<>0 then do;		screen.dump=0;		call cpos(0,7);		call pc(esc); call pc(asc.sharp); call pc(asc.3);		screen.x=39-shr(prompt.1(0),1); screen.y=0;		screen.dump=1; call psr(prompt.1);		screen.dump=0;		call pc(esc); call pc(asc.sharp); call pc(asc.4); call cpos(1,7); call psr(prompt.1);		call pc(esc); call pc(asc.sharp); call pc(asc.3);		call cpos(2,9);		screen.x=39-shr(prompt.2(0),1); screen.y=1;		screen.dump=1; call psr(prompt.2);		screen.dump=0;		call pc(esc); call pc(asc.sharp); call pc(asc.4); call cpos(3,9); call psr(prompt.2);		screen.dump=1;	end;	else do;		call cpos(0,39-shr(prompt.1(0),1)); call psr(prompt.1);		call cpos(1,39-shr(prompt.2(0),1)); call psr(prompt.2);	end;	call PRINT.CURRENT.TIMBRE.NAME;	/*	put up current timbre name	*/	call PRINT.CCAT;						/*	current catalog too			*/end DRAW.WELCOME.MENU;/*	$Subtitle Routine to Draw The Main Menu	*//*	Directories                             Memory Recorder              	*//*	   A. Timbre Directory                     S. Sequence Editor        	*//*	   B. Sound File Directory                 G. Recorder Display       	*//*	   C. Sequence Directory                   H. Multichannel Display   	*//*	   D. Subcatalog Directory                 J. Midi Display           	*//*	   M. Missing Sound Display                K. Music Notation Display 	*//*	                                           T. Conductor Tools        	*//*	Sound Design                                                         	*//*	   L. Sound File Editor                 Direct-To-Disk               	*//*	   F. FM Timbre Display                    O. Project Directory      	*//*	   I. Patch Display                        P. Track Display          	*//*	   N. Name Keyboard Timbre                 Q. Audio Event Editor     	*//*	      Enter Name -->1234567812345678                                 	*//*	Sound Archival                          System Control               	*//*	   R. Optical Disk Storage                 E. Extra System Commands  	*//*	                                                                     	*//*	Polyphonic Sampling:                       <PF1>   Reverse Compiler  	*//*	   Bin 1:                                  <PF3>   Music Printing    	*//*	   Bin 2:                                  <PF4>   SFM               	*//*	   Bin 3:                                  <BREAK> Monitor           	*/DRAW.MAIN.MENU: proc public swapable;	dcl (i,j,k)	fixed;	call clear.term;	call set.term.attr(ATTR#Normal);	call initialize.graphics.terminal;	call initialize.screen.manager(TRD.LEN);	call define.frame(1,  0, 0, 22, 80, 'Main Menu');	call define.label(2, 22, 0,  0, rel.version);	if (rel.subcode[0] != 0)		define.label(5, 22, rel.version[0], 0, rel.subcode);	define.label(3, 22, rel.version[0] + rel.subcode[0] + 1, 0, rel.date);	if (inc.axe)		call define.label(4, 22, rel.version[0] + rel.subcode[0] + 1 + rel.date(0) + 1, 0, 'Guitar');	if (simulate_dtd)		call define.label(4, 22, rel.version[0] + rel.subcode[0] + 1 + rel.date(0) + 1, 0, '* SIM DTD *');	/*	Directories	*/	call define.label(10, 1, 2,0,'Directories');	if (inc.poly|inc.mono)	then define.label(11, 2, 5, 24,'');	else define.label(11, 2, 5, 26,'');	//	make room for the two parentheses	call define.table(command.table,1,5,11);	call deposit.label(11,'A. Timbre Directory');	call deposit.table(command.table,0,0);	if      (inc.poly)	then call deposit.label(11,'B. Sound File Directory');   else if (inc.mono)   then call deposit.label(11,'B. Mono Sound Directory');	else call deposit.label(11,'B. (Sound File Directory)');	call deposit.table(command.table,0,1);	call deposit.label(11,'C. Sequence Directory');	call deposit.table(command.table,0,2);	call deposit.label(11,'D. Subcatalog Directory');	call deposit.table(command.table,0,3);	if inc.poly\inc.mono	then call deposit.label(11,'M. Missing Sound Display');	else call deposit.label(11,'M. (Missing Sound Display)');	call deposit.table(command.table,0,4);	/*	Memory Recorder	*/	call define.label(20, 1,42,0,'Memory Recorder');	if inc.music.notation	then define.label(21, 2,45, 25,'');	else define.label(21, 2,45, 27,'');	//	make room for the two parentheses	call define.table(command.table+1,1,6,21);	call deposit.label(21,'S. Sequence Editor');	call deposit.table(command.table+1,0,0);	call deposit.label(21,'G. Recorder Display');	call deposit.table(command.table+1,0,1);	if inc.mult	then call deposit.label(21,'H. Multichannel Display');	else call deposit.label(21,'H. (Multichannel Display)');	call deposit.table(command.table+1,0,2);	if inc.midi	then call deposit.label(21,'J. Midi Display');	else call deposit.label(21,'J. (Midi Display)');	call deposit.table(command.table+1,0,3);	if inc.music.notation=0	then call deposit.label(21,'K. (Music Notation Display)');	else call deposit.label(21,'K. Music Notation Display');	call deposit.table(command.table+1,0,4);	deposit.label(21,'T. Conductor Tools');	deposit.table(command.table+1,0,5);	/*	sound design	*/	call define.label(30, 8, 2,0,'Sound Design');	call define.label(31, 9, 5, 23,'');	call define.table(command.table+2,1,4,31);	if inc.poly	then call deposit.label(31,'L. Sound File Editor');	else call deposit.label(31,'L. (Sound File Editor)');	call deposit.table(command.table+2,0,0);	if inc.tds	then call deposit.label(31,'F. FM Timbre Display');	else call deposit.label(31,'F. (FM Timbre Display)');	call deposit.table(command.table+2,0,1);	call deposit.label(31,'I. Patch Display');	call deposit.table(command.table+2,0,2);	call deposit.label(31,'N. Name Keyboard Timbre');	call deposit.table(command.table+2,0,3);	call define.label(30, 8, 2,0,'Sound Design');	call define.label (enter.name.label, 13, 5, 14,'');	call define.string(enter.name.string,13,19, 16,0);	/*	direct-to-disk	*/	if inc.dtd then do;		call define.label(40, 9,42,0,'Direct-To-Disk');		call define.label(41,10,45,21,'');		call define.table (command.table+3,1,3,41);		call deposit.label(41,'O. Project Directory');		call deposit.table(command.table+3,0,0);		call deposit.label(41,'P. Track Display');		call deposit.table(command.table+3,0,1);		call deposit.label(41,'Q. Audio Event Editor');		call deposit.table(command.table+3,0,2);	end;	/*	Sound archival	*/	if inc.poly then do;	/*	must have poly for the optical disk	*/		call define.label(50,14, 2,0,'Sound Archival');		call define.label(51,15, 5,23,'');		call define.table (command.table+4,1,1,51);		call deposit.label(51,'R. Optical Disk Storage');		call deposit.table(command.table+4,0,0);	end;	/*	system control	*/	call define.label(60,14,42,0,'System Control');	call define.label(61,15,45,24,'');	call define.table (command.table+5,1,1,61);	call deposit.label(61,'E. Extra System Commands');	call deposit.table(command.table+5,0,0);	call define.label(71,17,45,24,'');	call define.table (command.table+6,1,4,71);	call deposit.label(71,'<PF1>   Reverse Compiler');	call deposit.table(command.table+6,0,0);	call deposit.label(71,'<PF3>   Music Printing');	call deposit.table(command.table+6,0,1);	call deposit.label(71,'<PF4>   SFM');	call deposit.table(command.table+6,0,2);	call deposit.label(71,'<BREAK> Monitor');	call deposit.table(command.table+6,0,3);	/*	Define information for 9600 systems:	*/	if polynums > 1 then do;						/*	only of > 1 bin		*/		call Set.Default.Action(0);				/*	need no mouse access here	*/		call define.label(79,17, 2,0,'Polyphonic Sampling:');		call define.label(80,18, 5,0,'Bin 1:   V      Mb');		call define.label(81,19, 5,0,'Bin 2:   V      Mb');		call define.label(82,20, 5,0,'Bin 3:   V      Mb');		call define.fixed.point(85,18, 12, 2, 0, cf#unsigned\cf#right\cf#spfill);		call define.table		  (86, 1, 3, 85);		call define.fixed.point(87,18, 17, 3, 0, cf#unsigned\cf#right\cf#spfill);		call define.table		  (88, 1, 3, 87);		do i = 0 to 2;					/*	deposit # of voices/bin	*/			call Deposit.Fixed.Point(85, PolyNumVs(i));			call Deposit.Table		(86, 0, i);		end;		do i = 0 to 2;					/*	deposit # of MBs/ bin	*/			load  (PolyAmounts(shl(i,1) + lw#lsb));			uload (PolyAmounts(shl(i,1) + lw#msb));			div 2048;			if rem > 1024 then load (res+1);		/*	round up		*/			call Deposit.Fixed.Point(87,	res);			call Deposit.Table		(88, 0, i);		end;		call Set.Default.Action(O#ACT.Middle.Press);	end;	call set.screen.animate(1);	/*	allow animation	*/	call activate.screen(command.table);	/*	set up links	*/	call set.object.arrow.links(command.table+0, 0,										 command.table+2,										 0,										 command.table+1);	call set.object.arrow.links(command.table+2, command.table+0,										 command.table+4,										 0,										 command.table+3);	call set.object.arrow.links(command.table+4, command.table+2,										 0,										 0,										 command.table+5);	call set.object.arrow.links(command.table+1, 0,										 command.table+3,										 command.table+0,										 0);	call set.object.arrow.links(command.table+3, command.table+1,										 command.table+5,										 command.table+2,										 0);	call set.object.arrow.links(command.table+5, command.table+3,										 command.table+6,										 command.table+4,										 0);	call set.object.arrow.links(command.table+6, command.table+5,										 0,										 command.table+4,										 0);	/*	do actual printing here for items that have no	*/	/*	screen manager equivalent								*/	call PRINT.CURRENT.TIMBRE.NAME;	/*	put up current timbre name	*/	call PRINT.CCAT;						/*	current catalog too			*/end DRAW.MAIN.MENU;
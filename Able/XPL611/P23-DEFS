/* Definitions used by pass2 and pass3: *//* define the configuration table */dcl vstart lit '0';dcl vlngth lit '1';dcl stklen lit '2';dcl objloc lit '3';dcl objlen lit '4';dcl swpram lit '5';dcl swplen lit '6';dcl rtploc lit '7';dcl inttab lit '8';dcl rcvptr lit '9';dcl inpbuf lit '10';dcl sbrsbw lit '11';dcl curtrk lit '12';dcl devtab lit '13';/* Define symbols for intermediate file format:..  The intermediate file is a record oriented file created by pass2..  Each type of record may have a different length...  The ET.LDF records are emitted by the linker (during pass3), and by.  pass2 for MAIN only.  The ET.REF records are emitted and used by the.  linker only...  The first word of each record indicates its type as follows:*/dcl et.eof lit  '0'; /* end of file              */dcl et.lit lit  '1'; /* literal word             */dcl et.tra lit  '2'; /* jump instruction         */dcl et.cal lit  '3'; /* procedure call           */dcl et.rtp lit  '4'; /* rtp call                 */dcl et.vpt lit  '5'; /* variable area pointer    */dcl et.opt lit  '6'; /* object code pointer      */dcl et.lde lit  '7'; /* label definition         */dcl et.dat lit  '8'; /* data declaration         */dcl et.cpy lit  '9'; /* copy data to object file */dcl et.scn lit '10'; /* copy scon to object file */dcl et.ign lit '11'; /* ignore record            */dcl et.pdf lit '12'; /* procedure definition     */dcl et.pen lit '13'; /* end of procedure defn    */dcl et.whn lit '14'; /* beginning of when stmt   */dcl et.wen lit '15'; /* end of when stmt         */dcl et.spt lit '16'; /* string constant ptr      */dcl et.adr lit '17'; /* addr of fixed array      */dcl et.seq lit '18'; /* sequence number          */dcl et.sym lit '19'; /* symbol defn or reference */dcl et.mod lit '20'; /* module statement         */dcl et.lib lit '21'; /* library statement        */dcl et.ins lit '22'; /* insert statement         */dcl et.ldf lit '23'; /* library definition       */dcl et.ref lit '24'; /* external symbol reference*/dcl et.cas lit '25'; /* emit code for do case    */dcl et.atr lit '26'; /* alt jump instruction     */dcl et.ald lit '27'; /* alt label definition     */dcl et.max       lit '27'; /* largest record type defined */dcl et.maximum   lit '"000077"'; /* maximum record type allowed without changing LITERAL.MASK */dcl literal.mask lit '"177700"'; /* if any of these bits are set in the record type, it is of type ET.LIT (see EM.LIT) */dcl et.revision  lit '13'; /* revision number for pass2 to pass3 IF - MUST be incremented whenever the format changes */dcl et.length data (0,1,3,-1,1, 3,1,1,2,-1, -1,0,-1,6,1, 2,3,2,1,-1, -1,-1,-1,1,2, 0,3,1); /* lengths of IF records by type (not including type word); -1 indicates variable length *//* Able series instruction set:.  .   The following macros define the model A instruction set, unless otherwise.   noted.  Symbols are defined for source and destination fields, the.   arithmetic opcodes, and so forth. *//* sources: */  dcl b.is    lit '"200"'; /* immediate source  */dcl b.imsk  lit '"077"'; /* immediate field   */dcl b.rs    lit '"300"'; /* register source   */dcl b.ms    lit '"340"'; /* memory source     */dcl b.ibt   lit '"020"'; /* increment bit     */dcl b.pc    lit '"017"'; /* pc is r17         */dcl b.rmsk  lit '"017"'; /* register field    */dcl b.amsk  lit '"003"'; /* accumulator field */   /* destinations: */ dcl b.ad   lit '"200"'; /* arithmetic destination */dcl b.loa  lit '"000"'; /* arith load      */dcl b.and  lit '"004"'; /* arith and       */dcl b.add  lit '"010"'; /* arith add       */dcl b.sub  lit '"014"'; /* arith subtract  */dcl b.ex   lit '"020"'; /* arith exor      */dcl b.lef  lit '"024"'; /* arith left rot  */dcl b.or   lit '"030"'; /* arith or        */dcl b.com  lit '"034"'; /* arith loa compl */  dcl b.td   lit '"240"'; /* test destination */dcl b.bsor lit '"260"'; /* byte swap or    (model B) */dcl b.shra lit '"264"'; /* shift right add (model B) */dcl b.tlo  lit '"000"'; /* test load */dcl b.tan  lit '"004"'; /* test and  */dcl b.tad  lit '"010"'; /* test add  */dcl b.tsu  lit '"014"'; /* test sub  */  dcl b.rd   lit '"300"'; /* register destination */dcl b.ca   lit '"320"'; /* conditional absolute */dcl b.cr   lit '"330"'; /* conditional relative */dcl b.tra  lit '0'; /* always     */dcl b.tze  lit '1'; /* zero flag  */dcl b.trc  lit '2'; /* carry flag */dcl b.tmi  lit '3'; /* minus flag */dcl b.tnv  lit '4'; /* never      */dcl b.tnz  lit '5'; /* non-zero   */dcl b.tnc  lit '6'; /* no carry   */dcl b.tpl  lit '7'; /* positive   */  dcl b.md lit '"340"'; /* memory destination */
/* Pass1 definitions: */dcl max_errs    lit '10'; /* number of (non-fatal) errors allowed before bombing out */dcl prior.max   lit '5'; /* number of operator priorities (expressions parsing) */dcl istklen     lit '(26*ins_levels)'; /* insert file processing stack length */dcl max_sym_len lit '64'; /* maximum symbol length */dcl sfbufl      lit '2048'; /* source file buffer must be at least 1024 for 'OPEN' */dcl ifbufl      lit '2048'; /* interfile buffer (must be divisible into work file length) */dcl ifsecl      lit '8'; /* number of sectors in input file buffer *//*  The following literal declarations are used throughout.   the compiler to determine the size of some fixed-length.   tables, conditional compiler toggles, etc.*/  dcl #blocks   lit '100'; /* use 100 blocks for expression processing */dcl fstklen   lit '20'; /* length of floating temp stack */dcl stacksize lit '200'; /* and 200 locations in push down stack */dcl hashsize  lit '255'; /* hash table size *//* Symbol table definitions:..    The symbol table holds symbols (identifiers) and procedure.    definitions.  The symbols grow towards high memory and the.    procedures grow down towards the symbols.  If they hit each.    other, the compiler has run out of room...    The form of a procedure block is as follows: */dcl p.key  lit '( 0)'; /* 15 bits GKEY value, 1 'defined' bit (or 16 bits GET_EXTLOC value for externals) */dcl p.args lit '(-1)'; /* number of arguments */dcl p.flag lit '(-2)'; /* procedure flags (upper half) */dcl p.rtyp lit '(-2)'; /* returned type T.VAR or T.FVAR (lower half) */dcl p.dswp lit '(-3)'; /* NOSWAP bit map of data dcl's that cannot swap (by data key - up to 16) */dcl p.parm lit '(-4)'; /* parameters start here: */do;   dcl p.ptyp lit '( 0)'; /* arg flags/token type */   dcl p.ploc lit '(-1)'; /* location */end;/* argument flags:  NO arg flags yet *//* symbol block format: */dcl s.next lit '0'; /* pointer to next hash */dcl s.dkey lit '1'; /* 8 bit key for data statement (upper half) */dcl s.clas lit '1'; /* 4 bit (two unused) storage class (2nd nibble) */dcl s.dpth lit '1'; /* 4 bit depth field for NEXT symbol (lower nibble) */dcl s.tokn lit '2'; /* 8 bit token field, 8 bit length in words */dcl s.locn lit '3'; /* location in ram (variables) or GKEY (labels) or info */dcl s.text lit '4'; /* start of symbol name text */dcl s.length lit '4'; /* number of header words in symbol record *//* The following define the INFO field returned by the scanner when TOKEN.  is T.STMT.  These definitions are only used by pass1 and hence are.  separated from those in P12-DEFS.  The remaining statement definitions.  can be found in P12-DEFS. */dcl s.pass1   lit '20'; /* pass1 specific statements start here */dcl s.enter   lit '21'; /* make succeeding INSERTs and LIBRARYs search the specified catalog */dcl s.pdl     lit '22'; /* set stack length */dcl s.ram     lit '23'; /* set starting address of variable area */dcl s.config  lit '24'; /* set default system configuration *//* Token scanner definitions: */dcl b.digit lit '"100000"'; /* digit */dcl b.eol   lit '"040000"'; /* eol */dcl b.comnt lit '"020000"'; /* comment */dcl b.spa   lit '"010000"'; /* space */dcl b.symb  lit '"004000"'; /* symbol */dcl b.opr   lit '"002000"'; /* operator */dcl b.spec  lit '"001000"'; /* special */dcl b.lcase lit '"000400"'; /* lowercase letter */dcl b.relop lit '"000200"'; /* relational operator */dcl b.mask  lit '"000177"'; /* field for other information (operator type, etc.) */  /* bits for relationals (or'd together to compute type) */ dcl b.eq    lit '"01"'; /* equal to */dcl b.lt    lit '"02"'; /* less than */dcl b.gt    lit '"04"'; /* greater than */dcl b.not   lit '"10"'; /* not */dcl b.rel   lit '"07"'; /* all the actual relations */
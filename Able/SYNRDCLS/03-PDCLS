/*	:SYNRDCLS:03-PDCLS  $TITLE  External Declarations for the procedures and variables in 03-PRIM	*/

/*
Modified:
1999/03/04 - TY  - Split CLICK.TRACK.MODE into CLICK.TRACK.MODE and CLICK.DISP.MODE
1998/06/24 - TY  - Split CLICK.TRACK.MODE into CLICK.TRACK.MODE and CLICKON
1991/08/13 - pf  - added "noio" argument to PS.AUDITION
1991/04/26 - cj  - added Check.For.Tempo.Meter.Events
1991/04/04 - PF  - Added Create.Tempo.Map.From.Track
1991/03/22 - cj  - Changed sea.spl.time to fix Lee Kopp FM retrigger clicks
1991/03/13 - KJC - Added external record trigger and d34gpi variables
1991/02/01 - PF  - Moved "Divisions" to Synclits
1991/01/09 - PF  - dcls for click value, beats per measure editing
1990/07/16 - PF  - Added REAL.TIME.OF.MIDI.LIMIT.LSB/MSB
						 and ACTUALLY.EMIT.MIDI.CLOCK
1990/07/10 - PF  - Added meter map dcls
1990/03/21 - PF  - reduced CLAV.PTR from 128 to 43 sectors
1989/09/23 - CJ  - Added tempo, meter map ptr declarations & routines
1989/08/24 - PF  - Add MAX.MIDINET.CHAN
1989/06/20 - MWH - Add "play to" time for the sequencer
1989/06/07 - TSS - Added PMAP.PTR dcl and documented TTMAP.PTR & VMAP.PTR use
1989/01/16 - MWH - Add Auto Punch feature
1988/10/03 - cj  - added loop.last.click, loop.trigger.click, compute.click.rate
1988/09/21 - TSS - Added dcl of BSTAT.PTR
1988/07/18 - CJ  - Removed GOOD.SMPTE, added SMPTE.LAST.INFO2 & 3
1988/05/19 - MWH - Remove unused	procedures
1988/03/14 - CJ  - ADDED NEW.CUE.TRACK.SETTINGS
1987/12/18 - MWH - Merge poly updates with N-Final plus AEE sources
1987/08/24 - MWH - Merge with other release-N edits; PS.COLLECT, PS.ALLOCATE
1987/08/18 - MWH - Rename 199-PLAY -> 195-PLAY
1987/08/17 - MWH - Add PS.MAX.TIME
1987/08/06 - MWH - Add 199-PLAY	procedures
1987/07/14 - MWH - Change args for PS.COLLECT, PS.ALLOCATE, PS.SETUP
1987/07/02 - MWH - Change args for PS.UPDATE and PS.DEALLOCATE
1987/06/25 - MWH - Split FRP.PTR into FP0-FP3.PTR for expanded poly
1987/06/22 - MWH - Move multi.syn2 to external memory at MFM.PTR
1987/06/18 - MWH - Update for expanded poly; multi.poly to MPOLY.PTR in ext memory
1987/01/08 - cj  - removed d107 suspended
1986/12/29 - CJ  - CHANGED ABUF.DATA TO DATA EXTERNAL. MONO SAMPLING ITEMS
*/


/*	FROM 032-POLY	*/
DCL NEWFNAME		ARRAY EXTERNAL;

DCL MONO.STATE		FIXED EXTERNAL;

DCL MONO.ELIM		FIXED EXTERNAL;
DCL MONO.INC		FIXED EXTERNAL;
DCL MONO.DIVISOR	FIXED EXTERNAL;
DCL MONO.ENV.TIME	FIXED EXTERNAL;

DCL MONO.CHAN		FIXED EXTERNAL;

/*	FROM 040-GLOB	*/

/*	GLOBAL BUFFERS	*/
DCL RANDOM#			FIXED EXTERNAL;	/*	RANDOM NUMBER SEED	*/

/*	INTERRUPT STORAGE	*/
/**** THE FOLLOWING 7 VARIABLES NEED TO BE IN THIS ORDER!!! (SEE 144-TIM3) ****/
DCL (INTCHA)		FIXED EXTERNAL;	/*	PRESERVE CHAN# DURING INTRPT	*/
DCL (INTFUN)		FIXED EXTERNAL;	/*	AND FUNCTION CODE					*/

DCL (SAVE.R13)		FIXED EXTERNAL;
DCL (SAVE.MAM)		FIXED EXTERNAL;
DCL (SAVE.MAL)		FIXED EXTERNAL;

DCL (PSCHAN)		FIXED EXTERNAL;
DCL (PSFUN)			FIXED EXTERNAL;

/*	GLOBAL VARIABLES FOR TIMBRE AND SEQUENCE RECALL	*/

DCL PLAY.TIME.MSB						FIXED EXTERNAL;	/*	COUNTS 32 BIT # OF MILLISECONDS		*/
DCL PLAY.TIME.LSB						FIXED EXTERNAL;	/*	NOTE  SCRIPT 0.000 = ZERO.TIME		*/
DCL PLAY.TIME.ACU						FIXED EXTERNAL;	/*	SPEED ACCUMULATOR							*/
DCL NEXT.CLICK							FIXED EXTERNAL;	/*	LSB OF NEXT CLICK							*/
DCL NEXT.SEQ.EVENT					FIXED EXTERNAL;	/*	LSB OF NEXT SEQ EVENT					*/
DCL BEAT.NUMBER						FIXED EXTERNAL;	/*	BEAT # OF LAST CLICK						*/

DCL PRIOR.CLICK.MSB					FIXED EXTERNAL;	/*	SEQUENCE TIME OF PRIOR CLCIK	*/
DCL PRIOR.CLICK.LSB					FIXED EXTERNAL;
DCL NEXT.CLICK.MSB					FIXED EXTERNAL;	/*	SEQUENCE TIME OF NEXT CLICK	*/
DCL NEXT.CLICK.LSB					FIXED EXTERNAL;
DCL PRIOR.BEAT.MSB					FIXED EXTERNAL;	/*	SEQUENCE TIME OF PRIOR BEAT	*/
DCL PRIOR.BEAT.LSB					FIXED EXTERNAL;
DCL NEXT.BEAT.MSB						FIXED EXTERNAL;	/*	SEQUENCE TIME OF NEXT BEAT	*/
DCL NEXT.BEAT.LSB						FIXED EXTERNAL;
DCL REAL.TIME.OF.PRIOR.CLICK.MSB	FIXED EXTERNAL;	/*	REAL TIME OF NEXT CLICK	*/
DCL REAL.TIME.OF.PRIOR.CLICK.LSB	FIXED EXTERNAL;
DCL REAL.TIME.OF.NEXT.CLICK.MSB	FIXED EXTERNAL;	/*	REAL TIME OF NEXT CLICK	*/
DCL REAL.TIME.OF.NEXT.CLICK.LSB	FIXED EXTERNAL;
DCL REAL.TIME.OF.PRIOR.BEAT.MSB	FIXED EXTERNAL;
DCL REAL.TIME.OF.PRIOR.BEAT.LSB	FIXED EXTERNAL;
DCL REAL.TIME.OF.NEXT.BEAT.MSB	FIXED EXTERNAL;
DCL REAL.TIME.OF.NEXT.BEAT.LSB	FIXED EXTERNAL;
DCL ACTUALLY.EMIT.CLICK				FIXED EXTERNAL;	/*	TELLS INTERRUPT CODE OK TO CLICK	*/

DCL NUM.MIDI.CLOCKS					FIXED EXTERNAL;	/*	NUMBER OF CLOCKS EMITTED IN INTERRUPT SINCE LAST MAIN LOOP	*/
DCL NUM.RECEIVED.CLOCKS				FIXED EXTERNAL;	/*	NUMBER OF CLOCKS RECEIVED IN INTERRUPT SINCE LAST MAIN LOOP	*/
DCL REAL.MIDI.CLOCK.RATE			FIXED EXTERNAL;	/*	CURRENT RATE OF MIDI CLOCK IN REAL TIME DURATION	*/
DCL NEXT.MIDI.CLOCK.RATE			FIXED EXTERNAL;	/*	RATE OF MIDI CLOCKS AT NEXT TEMPO CHANGE	*/
DCL REAL.TIME.OF.NEXT.TEMPO.MSB	FIXED EXTERNAL;	/*	TIME OF NEXT TEMPO CHANGE	*/
DCL REAL.TIME.OF.NEXT.TEMPO.LSB	FIXED EXTERNAL;
DCL DISABLE.MIDI.CLOCKS				FIXED EXTERNAL;	/*	FLAG TO PREVENT INTERRUPT CODE FROM INTERFERRING WITH MAIN LOOP CALCULATION	*/

DCL (BOUNCE)							FIXED EXTERNAL;	/*	TRUE FOR BOUNCE OPERATION ACTIVE	*/
DCL (CHAIN)								FIXED EXTERNAL;	/*	TRUE FOR CHAIN OPERATIONS	*/
DCL (RECD.JUST)						FIXED EXTERNAL;	/*	TRUE IF JUSTIFIED RECORDING ACTIVE	*/
DCL (RECALL.STATE)					FIXED EXTERNAL;	/*	INDICATE ACTION TO TAKE ON TIMBRE RECALL BUTTON PRESSED	*/
DCL (TIMB.DEST)						FIXED EXTERNAL;	/*	INDICATES STATE OF SMT/SKT/SPLT	*/
DCL (OUR.TIMBRE)						FIXED EXTERNAL;	/*	CURRENT TIMBRE TO DISPLAY	*/
DCL (OUR.BANK)							FIXED EXTERNAL;	/*	CURRENT BANK   TO DISPLAY	*/
DCL (OUR.SEQ)							FIXED EXTERNAL;	/*	CURRENT SEQ    TO DISPLAY	*/
DCL (SMT,SKT,SPLT,TPAN,TGRP)		FIXED EXTERNAL;	/*	FOR SMT, SKT, SPLIT, TRACK PAN, TRACK GROUP	*/
DCL (BUTMODE)							FIXED EXTERNAL;	/*	-1=NONE, 0=ENTRY MODE, 1=BANK MODE, 2=SEQUENCE MODE	*/
DCL (INFO.MODE)						FIXED EXTERNAL;	/*	0=NORMAL NO-INFO MODE, 1=INFO MODE	*/


/*	VARIABLES FOR ALLOCATING CHANNELS & WAVE MEMORIES	*/

DCL (LSYN1.START,LSYN1.END)		FIXED EXTERNAL;	/*	CHANNELS IN LOGICAL SYNTHESIZER 1	*/
DCL (LSYN2.START,LSYN2.END)		FIXED EXTERNAL;	/*	CHANNELS IN LOGICAL SYNTHESIZER 2	*/


/*	SECTOR POINTERS ALLOCATED DURING INITIALIZATION  (TOP DOWN)			*/

DCL (STB.PTR)			FIXED EXTERNAL;	/*	( 1) EXTERNAL SECTOR OF SINE TABLE			*/
DCL (FRE.PTR)			FIXED EXTERNAL;	/*	( 8) FREQUENCY TABLE								*/
DCL (LTB.PTR)			FIXED EXTERNAL;	/*	( 4) LOG TABLE										*/
DCL (POLY.FRE.PTR)	FIXED EXTERNAL;	/*	(16) NEW POLY SAMPLING FREQUENCY TABLE		*/

DCL (NUL.PTR)			FIXED EXTERNAL;	/*	( 1) XMEM SEC # OF NULL TIMBRE				*/
DCL (KBD.PRE)			FIXED EXTERNAL;	/*	(47) PRECOMPUTED KEYBARD PARTIAL BLOCKS	*/
DCL (CLAV.PTR)			FIXED EXTERNAL;	/*	(xx) EXT MEM SECTORS FOR KBD AND MIDI KEY STATE INFO (INDEXED BY CHANNEL AND KEY #)	*/
DCL (TTMAP.PTR)		FIXED EXTERNAL;	/*	( 1) XMEM PTR - SYNCLAVIER TRANSIT TIME TO VOLUME MAPPING (TTIME = 0 TO 255)			*/
/*	AT TTMAP.PTR+0: SYNCLAVIER TRANSIT TIME (0-255) TO RTE VALUE (0-225) MAPPING		*/

DCL (VMAP.PTR)			FIXED EXTERNAL;	/*	( 2) EXT MEM PTR ONLY  - MIDI VELOCITY TO VOLUME MAPPING	*/
/*	AT VMAP.PTR+0: MIDI VELOCITY (0-127) TO VOLUME (0-225) MAPPING			*/
/*	AT VMAP.PTR+1: SYNCLAVIER RTE VALUE (0-225) TO MIDI (0-127) MAPPING	*/

DCL (PMAP.PTR)			FIXED EXTERNAL;	/*	( 3) EXT MEM PTR ONLY - PRESSURE MAPPING/CALIBRATION	*/
/*	AT PMAP.PTR+0: PRESSURE CALIBRATION DATA - THIS IS UNIQUE TO EACH KBD.	*/
/*						MANUFACTURING CREATES THIS INFO WHEN THE KBD IS BUILT		*/
/*						THE DATA IS THE RAW HARDWARE READING OBTAINED WHEN A		*/
/*						STANDARD 20 OZ. WEIGHT IS PLACED ON EACH KEY.  HENCE,		*/
/*						YOU GET ONE READING PER KEY.  THIS VALUE IS USED TO		*/
/*						SCALE THE PRESSURE MAP.  THE READING OBTAINED WILL			*/
/*						REPRESENT THE 90% POINT IN THE PRESSURE MAP.					*/
/*	AT PMAP.PTR+1: SYNCLAVIER BASELINE PRESSURE READINGS (ONE PER KEY)		*/
/*						THIS DATA IS RE-CREATED WHENEVER THE RESTORE.POWER			*/
/*						ROUTINE IS CALLED. IT MEASURES THE RAW HARDWARE READING	*/
/*						OBTAINED WITH NO PRESSURE APPLIED TO THE KEY. SOFTWARE	*/
/*						ASSUMES THE KEYS WILL NOT BE HELD DOWN DURING THE			*/
/*						PROCEDURE. YOU GET ONE READING PER KEY.  THIS INFO IS		*/
/*						SUBTRACTED FROM EACH PRESSURE READING TO GET AN OFFSET	*/
/*						FROM THE PRESSURE BASELINE.  THIS LEADS TO A MORE			*/
/*						CONSISTENT AND ROBUST PRESSURE SUBSYSTEM.						*/
/*	AT PMAP.PTR+2: PRESSURE (0-255?) TO RTE VALUE (0-225) MAPPING				*/

DCL (LOAD.PTR)		FIXED EXTERNAL;	/*	( 3) LOADER FROM UPPER MEMORY								*/
DCL (PBN.PTR)		FIXED EXTERNAL;	/*	( 2) PHYSICAL BUTTON NUMBER LOOKUP TABLE (VKP)     */
DCL (ORK.PTR)		FIXED EXTERNAL;	/*	( 2) PHYSICAL BUTTON NUMBER LOOKUP TABLE (ORK)		*/
DCL (TBUT.PTR)		FIXED EXTERNAL;	/*	( 1) LOOK UP TABLE FOR TRACK BUTTONS					*/
DCL (BSTAT.PTR)	FIXED EXTERNAL;	/*	( 1) LOOK UP TABLE FOR CLAVIER BUTTON PANEL STATUS	*/
DCL (USE.PTR)		FIXED EXTERNAL;	/*	( 1) ACTIVE TIMBRE USAGE COUNTERS						*/
DCL (MPOLY.PTR)	FIXED EXTERNAL;	/*	( 1) MULTI-CHANNEL TO POLY VOICE MAPPING TABLE		*/
DCL (MFM.PTR)		FIXED EXTERNAL;	/*	( 1) MULTI-CHANNEL TO FM VOICE MAPPING TABLE			*/


DCL (NEW.KBD.PRE)	FIXED EXTERNAL;	/*	SET TO 1 TO RECOMPUTE KEYBOARD INFO	*/

/*	SECTOR POINTERS FOR MONO & POLY ALLOCATION	*/

DCL (MSFIRST,MSLAST,MSMAX,MSFREE)	FIXED EXTERNAL;

/*	INTERNAL MEMORY ALLOCATION	*/

DCL (FR1.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - FREE LIST #1	*/
DCL (FR2.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - FREE LIST #2	*/
DCL (FRM.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - FREE CHANNEL LIST FOR MONO SAMPLING			*/
DCL (FP0.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - FREE CHANNEL LIST FOR POLY SAMPLING BIN 0	*/
DCL (FP1.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - FREE CHANNEL LIST FOR POLY SAMPLING BIN 1	*/
DCL (FP2.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - FREE CHANNEL LIST FOR POLY SAMPLING BIN 2	*/
DCL (FP3.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - FREE CHANNEL LIST FOR POLY SAMPLING BIN 3	*/
DCL (STR.PTR)		FIXED EXTERNAL;	/*	CORE POINTER ONLY - NOTE & PARTIAL BLOCK STORAGE	*/

DCL (NUM.NBLKS,NUM.PBLKS)	FIXED EXTERNAL;	/*	NUMBER OF NOTE & PARTIAL BLOCKS	*/

/*	DATA ARRAYS	*/

DCL WESTERN.SCALE	DATA	EXTERNAL;
DCL NULL.TIMBRE	DATA	EXTERNAL;
DCL DENVLIM			DATA	EXTERNAL;
DCL DEC.ADJ.TAB	DATA	EXTERNAL;
DCL DUR.MUL.DATA	DATA	EXTERNAL;
DCL POWERS.MSB		DATA	EXTERNAL;
DCL POWERS.LSB		DATA	EXTERNAL;

/*	MULTI OUTPUT VARIABLES	*/

DCL MULTI.THERE		FIXED EXTERNAL;	/*	SET TRUE IF MULTI HARDWARE ATTACHED	*/
DCL MULTI.MAX			FIXED EXTERNAL;	/*	# OF OUTPUT CHANNELS						*/
DCL MULTI.ERRS			FIXED EXTERNAL;	/*	INPUT VOICES WITH ERRORS				*/
DCL DISP.MULTI.ERRS	FIXED EXTERNAL;	/*	IF TRUE DISPLAY MULTICHANNEL ERRORS	*/

/*	BASIC MIDI INFO	*/

DCL MIDI.THERE			FIXED EXTERNAL;	/*	NON-ZERO IF ANY MIDI SUBSYSTEMS FOUND (BITS 0-7 SET FOR EACH SUBSYS FOUND)	*/
DCL MAX.MIDI.CHAN		FIXED EXTERNAL;	/*	MAX OUTPUT CHANNEL NUMBER FOUND					*/
DCL MAX.MIDINET.CHAN	FIXED EXTERNAL;	/*	MAX OUTPUT NUMBER IN MIDINET CONFIGURATION	*/

DCL SEQUENCER.CONTROL.REG	FIXED EXTERNAL;	/*	SET TO TURN ON/OFF SEQUENCER FROM MAIN LOOP	*/

DCL KBD.MILLISECONDS	FIXED EXTERNAL;	// KBD.MILLISECONDS is incremeneted in the D16 interrupt routine and is our 1-mec time tick.

DCL UPPER.DISP			FIXED EXTERNAL;	/*	DISPLAYED IN UPPER WINDOW	*/	/*	0 = NOTHING RECOGNIZED	*/
DCL LOWER.DISP			FIXED EXTERNAL;	/*	DISPLAYED IN LOWER WINDOW	*/	/*	POSITIVE = THAT PARAMETER (FOR RESETTING ON DOUBLE BOUNCE)	*/

DCL TRACK.FORMAT		FIXED EXTERNAL;	/*	SECONDS/BEATS FOR TRACK DISPLAY	*/

DCL WIMAGE				ARRAY EXTERNAL;	/*	WINDOW IMAGE - ASCII EQUIV OF WINDOW DISPLAY	*/

DCL NEW.UPPER			FIXED EXTERNAL;	/*	SET WHEN WINDOW IMAGE CHANGES		*/
DCL NEW.LOWER			FIXED EXTERNAL;	/*	UPPER AND LOWER HALVES				*/

#if (inc.voice.output)
	DCL SPEAK.IT		FIXED EXTERNAL;	/*	SET TRUE TO ACTIVATE D42			*/
	DCL SPEAK.TIME		FIXED EXTERNAL;	/*	TIME TO RE-ENABLE						*/
#endif

DCL GPDT					ARRAY EXTERNAL;	/*	GLOBAL PARAMETER DATA				*/

DCL MARK.BUTTON.DISABLED		FIXED EXTERNAL;
DCL XPOS.TRIGGER.DISABLED		FIXED EXTERNAL;

DCL LAST.LOOP.PARM				FIXED EXTERNAL;	/*	LAST SELECTED LOOP PARM			*/
DCL LOOP.START.MSB				FIXED EXTERNAL;	/*	HOLDS LOOP START TIME PARM		*/
DCL LOOP.START.LSB				FIXED EXTERNAL;
DCL LOOP.END.MSB					FIXED EXTERNAL;	/*	HOLDS LOOP END TIME PARM		*/
DCL LOOP.END.LSB					FIXED EXTERNAL;
DCL EDIT.LEN.MSB					FIXED EXTERNAL;	/*	HOLDS INSERT/DELETE LENGTH		*/
DCL EDIT.LEN.LSB					FIXED EXTERNAL;
DCL CHAIN.REPETITIONS			FIXED EXTERNAL;	/*	HOW MANY COPIES OF TRK TO CHAIN	*/

DCL V.S.MUL							FIXED EXTERNAL;	/*	COMPUTED FROM V.S.MIN (SENS)	*/

DCL LOGTBASE						FIXED EXTERNAL;	/*	HOLDS LOG OF OVERALL TUNING BASE AT ALL TIMES	*/
DCL RTE.OVERWRITE.BITS			FIXED EXTERNAL;	/*	HOLDS EXPRESSION OVERDUB ENABLE BITS	*/
DCL OVERWRITE.LOOKUP				DATA	EXTERNAL;	/*	LPNS FOR OVERWRITE EXPRESSION LIGHTS	*/

/*	FROM 050-MEM	*/
DCL CNV.STA							FIXED EXTERNAL;	/*	STATUS TO PASS TO CONVERSION PROGRAM	*/
DCL CALL.TERMINATE				FIXED EXTERNAL;	/*	SET TRUE ON BREAK RECEIVED					*/
DCL CALL.CONVERT					FIXED EXTERNAL;	/*	SET TRUE TO ACTIVE CONVERSION PGM		*/
DCL ORIG.PSYS						FIXED EXTERNAL;	/*	ORIGINAL PSYS #	*/
DCL LOADER.MOVED					FIXED EXTERNAL;	/*	SET TO 1 IF LOADER MOVED TO EXTERNAL MEMORY	*/

DCL FROM.SFM						FIXED EXTERNAL;	/*	1 IF OVERLAYED FROM SFM, ELSE 0			*/


DCL OVERLAY	PROC(FIXED, FIXED, FIXED) EXTERNAL;	/*	PERFORM OVERLAY OF DISK OBJECT FILE		*/
DCL SILENCE.SYNTHS				PROC	EXTERNAL;	/*	PROCEDURE TO SILENCE SYNTHESIZER - CALLED BEFORE OVERLAY	*/
DCL TERMINATE						PROC	EXTERNAL;	/*	PROCEDURE TO TERMINATE IF 'S' IS TYPED	*/
DCL WRITEOUT.SEQ					PROC	EXTERNAL;
DCL CONVERSION.OVERLAY			PROC	EXTERNAL;	/*	PROCEDURE TO LINK TO CONVERSION PROGRAM, MUSIC PRINTING, SFM	*/
DCL LEAVE.SYNCLAVIER.PROGRAM	PROC	EXTERNAL;	/*	TRIES TO OVERLAY TO OTHER PROGRAMS		*/

/*	FROM 100-M1	*/
DCL PTPTR	FIXED EXTERNAL;

/*	SEQUENCER VARIABLES FROM 130-SDEF	*/
/*	SECTOR POINTERS FOR REAL TIME ALLOCATION  (BOTTOM UP)	*/

DCL (BAS.PTR,BAS.LEN)			FIXED EXTERNAL;	/*	SEC # IN XMEM OF BASE SECTOR			*/
DCL (PAR.PTR,PAR.LEN)			FIXED EXTERNAL;	/*	SEC # IN XMEM OF TIMBRE INFO			*/
DCL (NAH.PTR,NAH.LEN)			FIXED EXTERNAL;	/*	SEC # IN XMEM OF NOTE AREA HEADER	*/
DCL (BNK.PTR,BNK.LEN)			FIXED EXTERNAL;	/*	SEC # IN XMEM OF TIMBRE BANK			*/
DCL (INF.PTR,INF.LEN)			FIXED EXTERNAL;	/*	SEC # IN XMEM FOR SEQ INFO				*/
DCL (TIM.PTR,TIM.LEN)			FIXED EXTERNAL;	/*	SEC # IN XMEM FOR TIM/PAR INFO		*/
DCL (NAH.FREE)						FIXED EXTERNAL;	/*	LINKED LIST OF FREE BLOCKS IN NAH	*/
DCL (NAH.#FREE)					FIXED EXTERNAL;	/*	NUMBER THEREIN								*/

DCL (TIM.FREE)						FIXED EXTERNAL;	/*	LINKED LIST OF FREE BLOCKS IN TIM	*/
DCL (TIM.#FREE)					FIXED EXTERNAL;	/*	NUMBER THEREIN								*/

DCL (NEXT.EVENT.QUEUE)			FIXED EXTERNAL;
DCL (NEXT.EVENT.MSB)				FIXED EXTERNAL;
DCL (NEXT.EVENT.LSB)				FIXED EXTERNAL;

DCL TRK.HEAD						FIXED EXTERNAL;	/*	POINTER TO LOOK UP TABLE IN XMEM	*/
DCL TIM.HEAD						FIXED EXTERNAL;	/*	SECTOR NUMBER OF EXTERNAL MEMORY WITH TIMBRE/PARTIAL INFO	*/
DCL NUM.OF.SOLOED.TRACKS		FIXED EXTERNAL;

DCL TEMPO.MAP.PTR					FIXED EXTERNAL;	/*	HOLDS ABSOLUTE POINTER			*/
DCL METER.MAP.PTR					FIXED EXTERNAL;	/*	TO START OF LINKED BLOCKS		*/
																/*	FOR EACH DATA STRUCTURE.		*/

DCL (CPLIST0)						FIXED EXTERNAL;	/*	HEAD OF CHANNEL PRESSURE LIST	*/
DCL (ARLIST0)						FIXED EXTERNAL;	/*	HEAD OF RIBBIN  FILTER	 LIST	*/
DCL (UPLIST0)						FIXED EXTERNAL;	/*	HEAD OF UPDATE  LIST		 LIST	*/

/*	SEQUENCER CONTROL VARIABLES	*/

DCL ADVANCED.PLAY.TIME.MSB		FIXED EXTERNAL;	/*	SAMPLED ONCE PER MAIN LOOP	*/
DCL ADVANCED.PLAY.TIME.LSB		FIXED EXTERNAL;	/*	NOTE  THESE VARIABLES		*/
DCL ADVANCED.NEXT.CLICK			FIXED EXTERNAL;	/*	ARE ADVANCED BY 'PRESCAN'	*/
DCL ADVANCED.BEAT.NUMBER		FIXED EXTERNAL;

DCL ADVANCED.SEQ.TIME.MSB		FIXED EXTERNAL;	/*	VERSION OF ADVANCED PLAY	*/
DCL ADVANCED.SEQ.TIME.LSB		FIXED EXTERNAL;	/*	MAPPED TO SEQUENCER UNITS	*/

DCL LOOP.PLAY.TIME.MSB			FIXED EXTERNAL;	/*	TIME OF OVERALL LOOP START	*/
DCL LOOP.PLAY.TIME.LSB			FIXED EXTERNAL;
DCL LOOP.PLAY.TIME.ACU			FIXED EXTERNAL;
DCL LOOP.NEXT.CLICK				FIXED EXTERNAL;
DCL LOOP.BEAT.NUMBER				FIXED EXTERNAL;
DCL LOOP.TRIGGER.CLICK			FIXED EXTERNAL;
DCL LOOP.LAST.CLICK				FIXED EXTERNAL;
DCL LOOP.REAL.TIME.OF.NEXT.CLICK.MSB	FIXED EXTERNAL;
DCL LOOP.REAL.TIME.OF.NEXT.CLICK.LSB	FIXED EXTERNAL;

DCL LOOP.SEQ.TIME.MSB						FIXED EXTERNAL;	/*	LOOP START POINT MAPPED	*/
DCL LOOP.SEQ.TIME.LSB						FIXED EXTERNAL;	/*	TO SEQUENCER UNITS		*/
DCL LOOP.SEQ.TIME.OF.NEXT.CLICK.MSB		FIXED EXTERNAL;
DCL LOOP.SEQ.TIME.OF.NEXT.CLICK.LSB		FIXED EXTERNAL;

DCL PRESCAN			FIXED EXTERNAL;	/*	PRESCAN SEQUENCER BY 8 TICKS FOR BETTER TIMING	*/

DCL REPSCAN1		FIXED EXTERNAL;	/*	PRESCAN TIME FOR REPEAT/ARPEGG	*/

DCL SEQ.SPL.TIM	FIXED EXTERNAL;	/*	SPLICE TIME FOR POLY NOTES	*/
DCL SEQ.FM1			FIXED EXTERNAL;	/*	FIRST SPLICE FOR FM NOTES	*/
DCL SEQ.FM2			FIXED EXTERNAL;	/*	SECOND SPLICE FOR FM NOTES	*/
DCL SEQ.MONO3		FIXED EXTERNAL;	/*	MONO SAMPLING SPLICE TIMES	*/

DCL (CONT,ERAS)							FIXED EXTERNAL;	/*	SEQUENCER STATE VARIABLES	*/
DCL (XPOS)									FIXED EXTERNAL;	/*	MORE      STATE VARIABLES	*/
DCL (MOVE.LIMIT.MSB,MOVE.LIMIT.LSB)	FIXED EXTERNAL;	/*	ABS SEQ TIME LIMIT TO FF/REWIND TO	*/
DCL (MOVE.SPEED)							FIXED EXTERNAL;	/*	>0 FOR F.F, <0 FOR REWINDING	*/
DCL (ABORT.SEQ.NOTES)					FIXED EXTERNAL;	/*	CAUSES TERMINATION OF ACTIVE NOTES ON 'STOP'	*/
DCL (ABRT.RECORDING)						FIXED EXTERNAL;	/*	SET TRUE IF SHOULD ABORT RECORDING NOTES	*/
DCL (RECD.TRK)								FIXED EXTERNAL;	/*	HOLDS TRACK # (2-255?)	*/
DCL (CLICK.TRACK.MODE)					FIXED EXTERNAL;	/*	CLICK TRACK MODE			*/
DCL CLICK.DISP.MODE						FIXED EXTERNAL;	/*	CLICK DISPLAY MODE		*/
DCL CLICKON								 BOOLEAN EXTERNAL;
DCL (CONTINUE.BUTTON.ACTIVE)			FIXED EXTERNAL;	/*	TRUE IF LOOKING FOR FIRST NOTE	*/
DCL (ERASE.STYLE)							FIXED EXTERNAL;	/*	HOLDS STYLE OF ERASE SELECTED	*/

DCL (NEW.MOTION)					FIXED EXTERNAL;	/*	SET IF NEW INFO FOR L.O.D		*/
DCL (LOD.PLAY.TRACKS)			FIXED EXTERNAL;	/*	LOD TRACKS TO PLAY				*/
DCL (LOD.RECD.TRACKS)			FIXED EXTERNAL;	/*	LOD TRACKS TO RECORD ON			*/
DCL (NEW.CUE.TRACK.SETTINGS)	FIXED EXTERNAL;	/*	NEW CONSTANTS FOR CUE TRACKS	*/

DCL (SAMP.SPEED)					FIXED EXTERNAL;
DCL (SAMP.CLICK.RATE)			FIXED EXTERNAL;
DCL (SAMP.CRM)						FIXED EXTERNAL;
DCL (SAMP.BPM)						FIXED EXTERNAL;

DCL (SM.HRS,SM.MIN,SM.SEC)		FIXED EXTERNAL;	/*	SAMPLED INFO					*/
DCL (SM.FRA,SM.BIT,SM.MODE)	FIXED EXTERNAL;	/*	FOR USE BY INTERRUPT ROUTINE	*/

DCL MARK.BUTTON.MSB				FIXED EXTERNAL;
DCL MARK.BUTTON.LSB				FIXED EXTERNAL;

DCL CHECK.SEQUENCER.TIMES		FIXED EXTERNAL;	/*	SET IF WE NEED TO CHECK VARS BELOW	*/
DCL AUTO.PUNCH.IN.ARMED			FIXED EXTERNAL;	/*	RECORD PRESSED, READY TO PUNCH IN	*/
DCL PLAY.SEQ.TO.A.TIME			FIXED EXTERNAL;	/*	SEQUENCER WILL "PLAY TO" A TIME, THEN STOP	*/
DCL EXT.REC.TRIGGER.STATE		FIXED EXTERNAL;	/*	STATE OF EXTERNAL RECORD TRIGGERS	*/

DCL AUTO.PUNCH.ON					FIXED EXTERNAL;	/*	AUTO PUNCH MODE ON IF NON-ZERO	*/
DCL REHEARSE.MODE					FIXED EXTERNAL;	/*	TRUE IF AUTO PUNCH IN IS ACTUALLY A REHEARSE	*/
DCL PRE.ROLL.MSB					FIXED EXTERNAL;	/*	SNAPSHOT START TIME FOR AUTO PUNCH	*/
DCL PRE.ROLL.LSB					FIXED EXTERNAL;
DCL AUTO.PUNCH.IN.MSB			FIXED EXTERNAL;	/*	SNAPSHOT PUNCH IN TIME	*/
DCL AUTO.PUNCH.IN.LSB			FIXED EXTERNAL;
DCL AUTO.PUNCH.OUT.MSB			FIXED EXTERNAL;	/*	SNAPSHOT PUNCH OUT TIME	*/
DCL AUTO.PUNCH.OUT.LSB			FIXED EXTERNAL;

DCL SEQ.PLAY.TO.MSB				FIXED EXTERNAL;	/*	SEQUENCER PLAY TO TIME	*/
DCL SEQ.PLAY.TO.LSB				FIXED EXTERNAL;

DCL PREROLL_TRIGGER				FIXED ARRAY EXTERNAL;	/*	TIME TO TRIGGER PREROLL		*/
DCL REC_IN_TRIGGER				FIXED ARRAY EXTERNAL;	/*	TIME TO TRIGGER RECORD IN	*/
DCL REC_OUT_TRIGGER				FIXED ARRAY EXTERNAL;	/*	TIME TO TRIGGER RECORD OUT	*/

DCL D34_CCC_BITS					FIXED EXTERNAL;	/*	D34 BITS LIT BY CCC (ON D34GPI)		*/
DCL D34_TRIGGER_BITS				FIXED EXTERNAL;	/*	D34 BITS LIT BY EXTERNAL TRIGGERS	*/

DCL (OVERALL.LOOP)				FIXED EXTERNAL;
DCL (GOBACK.PLAY.TIME.MSB)		FIXED EXTERNAL;
DCL (GOBACK.PLAY.TIME.LSB)		FIXED EXTERNAL;

DCL (GOBACK.SEQ.TIME.MSB)		FIXED EXTERNAL;	/*	VERSION THAT HAS BEEN	*/
DCL (GOBACK.SEQ.TIME.LSB)		FIXED EXTERNAL;	/*	MAPPED TO SEQ TIMES		*/

DCL PHASE.INFO						FIXED EXTERNAL;	/*	SET TRUE IF PHASE INFO IN FIRST COEFF WORD	*/
DCL (C.FRAME,FR.PTRS)			ARRAY EXTERNAL;
DCL PAR.TOP							FIXED EXTERNAL;	/*	LENGTH (WORDS) OF TIMBRE AREA	*/
DCL PAR.NUMT						FIXED EXTERNAL;	/*	NUMBER OF TIMBRES IN PAR.PTR	*/
DCL ACTIVE.BANK.LEN				FIXED EXTERNAL;	/*	LENGTH OF BANK AREA				*/
DCL MISSING.TIM.HEAD				FIXED EXTERNAL;
DCL (SELECTED.PARTIALS)			FIXED EXTERNAL;	/*	BITS FOR SELECTED PARTIALS		*/

/*	EXTERNAL SYNC VARIABLES:	*/

DCL (EXT.CLOCK.MODE)		FIXED EXTERNAL;	/*	MODE OF EXTERNAL CLOCK							*/
DCL (CLOCK.DATA)			FIXED EXTERNAL;	/*	USED TO DETECT CHANGES IN EXT CLOCK INPUT	*/
DCL (EXT.CLOCK.CASE)		FIXED EXTERNAL;	/*	FOR INTERRUPT ROUTINE							*/
DCL (CREATE.50HZ.CLOCK)	FIXED EXTERNAL;	/*	TRUE TO CREATE 50 HERTZ CLOCK OUTPUT		*/
DCL (EXT.CLOCK.TOGGLE)	FIXED EXTERNAL;	/*	TOGGLE FOR EXTERNAL 50 HERTZ SIGNAL			*/
DCL (CREATE.BEAT.CLOCK)	FIXED EXTERNAL;	/*	TRUE TO CREATE BEAT SYNC CLOCK OUTPUT		*/
DCL (EXT.CLOCK.ACCUM)	FIXED EXTERNAL;	/*	FOR EXT CLOCK AT BEAT RATE						*/
DCL (EXT.CLOCK.OUT)		FIXED EXTERNAL;	/*	STATE OF EXTERNAL CLOCK OUTPUT				*/
DCL (EXT.SPEED.ACCUM)	FIXED EXTERNAL;	/*	FOR EXTERNAL BEAT SYNC GENERATION			*/
DCL (EXT.BEAT.TRIGGER)	FIXED EXTERNAL;	/*	FOR EXTERNAL BEAT SYNC GENERATION			*/
DCL (MIDI.LIMIT.REM)		FIXED EXTERNAL;	/*	REMAINDER FOR MIDI CLOCK OUTPUT	*/
DCL (MIDI.LIMIT.MSB)		FIXED EXTERNAL;	/*	LIMIT FOR MIDI CLOCK					*/
DCL (MIDI.LIMIT.LSB)		FIXED EXTERNAL;
DCL (TRIGGER.CLICK)		FIXED EXTERNAL;	/*	USED WITH EXTERNAL AND RECORDED CLICKS		*/
DCL (LOOP.TRIG.CLICK)	FIXED EXTERNAL;	/*	LOOPING VERSION									*/
DCL REAL.TIME.OF.MIDI.LIMIT.MSB	FIXED EXTERNAL;	/*	REAL TIME LIMIT OF MIDI CLOCK		*/
DCL REAL.TIME.OF.MIDI.LIMIT.LSB	FIXED EXTERNAL;
DCL REAL.TIME.OF.MIDI.LIMIT.ACU	FIXED EXTERNAL;

DCL ENABLE.KEY.TRIG		FIXED EXTERNAL;	/*	VARIABLES FOR DRUM REPLACEMENT TRIGGER	*/
dcl key.is.triggered		fixed EXTERNAL;
dcl key.trig.time			fixed EXTERNAL;
dcl key.rel.time			fixed EXTERNAL;
dcl key.end.time			fixed EXTERNAL;

DCL EST.RATE				FIXED EXTERNAL;	/*	FOR USE WITH EXTERNAL CLICK TRACK	*/

DCL EXT.REP.ARP			FIXED EXTERNAL;	/*	SET TO ALLOW EXTERNAL REPEAT/ARPEGGIATE	*/
DCL NEW.EXT.PULSE			FIXED EXTERNAL;	/*	SET WHEN EXT PULSE RECEIVED				*/
DCL EXT.PULSE.TIME		FIXED EXTERNAL;	/*	TIME OF EXTERNAL REPEAT PULSE				*/

DCL CLOCK.ADVANCES		FIXED EXTERNAL;	/*	FOR 50 HZ CLOCK INPUT						*/
DCL CLOCK.RECEIVED		FIXED EXTERNAL;	/*	FOR EXTERNAL BEAT SYNC INPUT				*/
DCL REAL.CLOCK.RATE		FIXED EXTERNAL;	/*	CURRENT RATE OF EXTERNAL CLOCK IN REAL TIME DURATION	*/
DCL NEXT.CLOCK.RATE		FIXED EXTERNAL;	/*	RATE OF EXTERNAL CLOCKS AT NEXT TEMPO CHANGE	*/
DCL CLOCK.LIMIT.MSB		FIXED EXTERNAL;	/*	LIMIT FOR BEAT/MIDI SYNC INPUT					*/
DCL CLOCK.LIMIT.LSB		FIXED EXTERNAL;
DCL CLOCK.LIMIT.REM		FIXED EXTERNAL;	/*	REMAINDER FOR BEAT SYNC INPUT				*/
DCL CLOCK.DELAY.TIME		FIXED EXTERNAL;	/*	SYNC DELAY TIMER FOR BEAT SYNC			*/
DCL DISABLE.RECEIVED.CLOCKS		FIXED EXTERNAL;	/*	FLAG TO PREVENT INTERRUPT CODE FROM INTERFERRING WITH MAIN LOOP CALCULATION	*/

DCL REAL.TIME.OF.CLOCK.LIMIT.MSB	FIXED EXTERNAL;	/*	REAL TIME LIMIT OF EXTERNAL BEAT/MIDI CLOCKS	*/
DCL REAL.TIME.OF.CLOCK.LIMIT.LSB	FIXED EXTERNAL;

DCL (SAMP.EXT.DIV)		FIXED EXTERNAL;	/*	SAMPLED BEAT DIVISOR FOR EXT SYNCING		*/

/*	BITS FOR GUITAR PERFORMANCE PARAMETERS- STORED IN GTINFO.LOC (SEE ABOVE)	*/
dcl quant			fixed external;	/*	true for quantization	*/
dcl pfilt			fixed external;	/*	activate pitch filter	*/
dcl tfilt			fixed external;	/*	activate pitch transient filter	*/
dcl vtrack			fixed external;	/*	true for volume envelope tracking	*/
dcl dcont			fixed external;	/*	decay control - true suppresses dual decays	*/
dcl tfilten			fixed external;	/*	set to zero to remove trans filter completely	*/
dcl follow.guitar	fixed external;	/*	true when guitar envelope is to be followed	*/

/*	Tempo/Meter Map Routines:	*/

dcl Map.Sequence.Time.To.Real.Time				proc(array, array)				external;
dcl Map.Sequence.Duration.To.Real.Duration	proc(array, array, array)		external;
dcl Map.Real.Time.To.Sequence.Time				proc(array, array)				external;
dcl Map.Real.Duration.To.Sequence.Duration	proc(array, array, array)		external;
dcl Compute.Real.Midi.Clock.Rates				proc(array)							external;
dcl Compute.Real.Clock.Rates						proc(array)							external;
dcl Create.Tempo.Map.From.Track					proc(fixed, fixed)				external;
dcl Compute.Time.Of.Nearest.Tempos				proc(array, array, array)		external;
dcl Advance.To.Next.Tempo.Record					proc									external;
dcl Backup.To.Prior.Tempo.Record					proc									external;
dcl Advance.To.Next.Meter.Record					proc									external;
dcl Backup.To.Prior.Meter.Record					proc									external;
dcl Set.Click.Value									proc(array,	fixed)				external;
dcl Lookup.Click.Value								proc(array)							external;
dcl Compute.Loop.Next.Click						proc									external;
dcl Map.Sequence.Time.To.Nearest.Clicks		proc(array, array, array)		external;
dcl Map.Sequence.Time.To.Nearest.Beats			proc(array, array, array)		external;
dcl Map.Sequence.Time.To.Beats					proc(array, array)				external;
dcl Map.Beats.To.Sequence.Time					proc(array, array)				external;
dcl Map.Measures.Beats.To.Sequence.Time		proc(array, array)				external;
dcl Map.Sequence.Time.To.Measures.Beats		proc(array, array)				external;
dcl Map.Sequence.Duration.To.Beats				proc(array, array, array)		external;
dcl Map.Beats.To.Sequence.Duration				proc(array, array, array)		external;
dcl Map.Sequence.Duration.To.Measures.Beats	proc(array, array, array)		external;
dcl Lookup.Beats.Per.Measure						proc(array) returns (fixed)	external;
dcl Lookup.Denom										proc(array)							external;
dcl Set.Beats.Per.Measure							proc(array,	fixed)				external;
dcl Set.Denom											proc(array,	fixed)				external;
dcl Lookup.Beat.Rate									proc(array) returns (fixed)	external;
dcl Lookup.Tempo										proc(array, array)				external;
dcl Set.Tempo											proc(array, array)				external;
dcl Insert.Tempo.Record								proc(array) returns (fixed)	external;
dcl Delete.Tempo.Record								proc(array) returns (fixed)	external;
dcl Insert.Meter.Record								proc(array) returns (fixed)	external;
dcl Delete.Meter.Record								proc(array) returns (fixed)	external;
dcl Compute.Time.Of.Nearest.Meters				proc(array, array, array)		external;
dcl Compute.Real.Time.Of.Next.Click				proc(array)							external;
dcl Compute.Real.Time.Of.Next.Beat				proc(array)							external;
dcl Check.For.Tempo.Meter.Events					proc(array)							external;

/*	FROM 131-SDF1	*/
DCL COMPUTE.TRK.HEADS				PROC							EXTERNAL;	/*	RECOMPUTE ABS TRACK HEAD POINTERS AFTER MOVING NOTE AREA	*/
DCL ADJUST.TIM.HEADS					PROC(FIXED)					EXTERNAL;
DCL CLEAN.TRACK.HEADS				PROC(FIXED)					EXTERNAL;
DCL INIT.LIVE.RTES					PROC							EXTERNAL;
DCL SHUFFLE.BAS.DOWN					PROC							EXTERNAL;	/*	MOVE BAS PTR TO 1	*/
DCL SHUFFLE.PAR.DOWN					PROC							EXTERNAL;	/*	MOVE PAR AREA DOWN IN MEMORY	*/
DCL SHUFFLE.TIM.UP					PROC							EXTERNAL;	/*	SHUFFLE TIM.PTR UP TO TRD	*/
DCL SHUFFLE.INF.UP					PROC							EXTERNAL;
DCL SHUFFLE.BNK.UP					PROC							EXTERNAL;
DCL GET.PAR.STORAGE					PROC(FIXED)					EXTERNAL;	/*	GET PAR.PTR STORAGE	*/
DCL MAXIMIZE.MEMORY.FOR.RECORD	PROC							EXTERNAL;	/*	MAKE MAX SPACE FOR RECORDING	*/
DCL CHECK.MEMORY.FOR.RECORD		PROC							EXTERNAL;	/*	MAKE USEFUL SPACE FOR RECORDING	*/
DCL GET.BNK.STORAGE					PROC(FIXED)					EXTERNAL;	/*	GET BNK.PTR STORAGE	*/
DCL GET.TIM.STORAGE					PROC(FIXED)					EXTERNAL;	/*	GET TIM.PTR STORAGE	*/
DCL GET.TRD.STORAGE					PROC(FIXED)					EXTERNAL;	/*	GET TRD.PTR STORAGE	*/
DCL GET.LARGE.TEMPORARY.XMEM.BUFFER		PROC(ARRAY)			EXTERNAL;	/*	RETURNS ARRAY(0) = XMEM BASE;  ARRAY(1) = XMEM SECTOR LENGTH	*/
DCL NAH.COLLECT						PROC							EXTERNAL;
DCL COMPUTE.CLICK.RATE				PROC							EXTERNAL;
DCL SPEED.COMP							PROC							EXTERNAL;	/*	COMPUTE PRESCAN AMOUNTS & SAMPLE SEQUENCER INFO	*/
DCL COMPUTE.NUMB.LEFT				PROC							EXTERNAL;	/*	HANDY	PROCEDURE TO COMPUTE # OF NOTES REMAINING IN SEQUENCER	*/
DCL P.LOOKUP							PROC(FIXED)					EXTERNAL;	/*	LOOK UP SINGLE WORD FROM TIMBRE AREA	*/
DCL P.STORE								PROC(FIXED,FIXED)			EXTERNAL;	/*	STORE WORD IN PARTIAL AREA	*/
DCL TRK.HEAD.LOOKUP					PROC(FIXED,FIXED)			EXTERNAL;	/*	LOOK UP SINGLE WORD FROM SPECIFIED TRACK HEADER AREA	*/
DCL TRK.HEAD.STORE					PROC(FIXED,FIXED,FIXED)	EXTERNAL;	/*	STORE SINGLE WORD INTO SPECIFIED TRACK HEADER AREA	*/
DCL TIM.HEAD.LOOKUP					PROC(FIXED,FIXED)			EXTERNAL;	/*	LOOK UP SINGLE WORD FROM SPECIFIED TIMBRE INFO AREA	*/
DCL TIM.HEAD.STORE					PROC(FIXED,FIXED,FIXED)	EXTERNAL;	/*	STORE SINGLE WORD INTO SPECIFIED TIMBRE INFO AREA	*/
DCL FIND.TIMBRE						PROC(FIXED,FIXED)			EXTERNAL;	/*	PASS BASE, TIMBRE # - RETURN CORE POINTER TO TIMBRE, OR WORD OFFSET	*/
DCL LOOKUP.TIMBRE.NAME				PROC(FIXED,ARRAY)			EXTERNAL;	/*	LOOKS UP NAME FOR A TIMBRE #	*/
DCL LOOKUP.TRACK.TIMBRE.NAME		PROC(FIXED,ARRAY)			EXTERNAL;	/*	LOOKS UP CURRENT TIMBRE NAME FOR A TRACK	*/
DCL COMPUTE.TIMBRE.FRAME			PROC(FIXED)					EXTERNAL;	/*	COMPUTE WAVESHAPE FOR CURRENTLY SELECTED TIMBRE FRAME	*/
DCL ADJUST.USAGE.COUNTERS			PROC (FIXED,FIXED)		EXTERNAL;	/*	ADJUST ENTRIES IN USE.PTR TABLE	*/
DCL ALLOC.TIMBRE.USES				PROC(FIXED)					EXTERNAL;	/*	ACCOUNT FOR A TRACKS TIMBRE USES IN USE.PTR TABLE	*/
DCL DEALLOC.TIMBRE.USES				PROC(FIXED)					EXTERNAL;	/*	REMOVE A TRACKS TIMBRE USES FROM USE.PTR TABLE	*/
DCL ALLOC.ALL.TIMBRE.USES			PROC							EXTERNAL;	/*	ACCOUNT FOR ALL TRACKS TIMBRE USES IN USE.PTR TABLE	*/
DCL DEALLOC.ALL.TIMBRE.USES		PROC							EXTERNAL;	/*	REMOVE ALL TRACKS TIMBRE USES FROM USE.PTR TABLE	*/
DCL COMPACT.TIMBRES					PROC(FIXED,FIXED)			EXTERNAL;	/*	PROCEDURE TO COMPACT IN-CORE TIMBRES AS REQUIRED IN SEQUENCER, OR BANK	*/
DCL ZERO.FRAME.PTRS					PROC							EXTERNAL;	/*	INITIALIZE FRAME POINTERS - USED SEVERAL PLACES	*/
DCL FIND.FRAME							PROC(FIXED,FIXED)			EXTERNAL;	/*	FIND FRAME FOR KEYBOARD TIMBRE - PASS PARTIAL #, FRAME #	*/
DCL FIND.PARTIAL						PROC							EXTERNAL;	/*	FIND FIRST SELECTED PARTIAL	*/
DCL COUNT.TIMBRE.FRAMES				PROC(FIXED)					EXTERNAL;	/*	COUNTS TIMBRE FRAMES	*/

/*	FROM  136-QUE	*/
DCL (NOTELIST)			FIXED EXTERNAL;	/*	START OF ACTIVE NOTE LIST QUE		*/
DCL (KBDLIST)			FIXED EXTERNAL;	/*	START OF QUE FOR NEW KBD NOTES	*/
DCL (SEQLIST)			FIXED EXTERNAL;	/*	START OF QUE FOR NEW SEQ NOTES	*/
DCL (SEQLAST)			FIXED EXTERNAL;	/*	END   OF QUE FOR NEW SEQ NOTES	*/
DCL (TIELIST)			FIXED EXTERNAL;	/*	START OF QUE FOR TIED	 NOTES	*/
DCL (TIELAST)			FIXED EXTERNAL;	/*	END   OF QUE FOR TIED	 NOTES	*/

DCL (NPTR,NFREEP)		FIXED EXTERNAL;
DCL (PPTR ,PFREE)		FIXED EXTERNAL;
DCL (GFREE)				FIXED EXTERNAL;	/*	HOLDS LIST OF FREED UP 'GHOST' PARTIAL BLOCKS	*/

DCL RELP					PROC	EXTERNAL;	/*	RELEASE PARTIAL BLOCK - ZERO OUT BLOCK HERE TO REDUCE NOTE START DELAY	*/

/*	FROM 143-SIO	*/
DCL STOP.DATA DATA EXTERNAL;

DCL SMPTE.ONOFF				FIXED EXTERNAL;	/*	1: SMPTE ON.  0: SMPTE OFF	*/
DCL SMPTE.STATE				FIXED EXTERNAL;	/*	INTERNAL SMPTE STATE			*/
DCL SMPTE.RECD					FIXED EXTERNAL;	/*	STORED PUNCH & RECORD BITS	*/

DCL SMPTE.RATE					FIXED EXTERNAL;	/*	SMPTE RATE, BITS/2.5 SECND	*/
DCL SMPTE.TIME					FIXED EXTERNAL;	/*	TIME OF SMPTE READING		*/
DCL SMPTE.ACCUM				FIXED EXTERNAL;	/*	BIT ACCUMULATOR				*/
DCL SMPTE.ADVANCES			FIXED EXTERNAL;	/*	ADVANCE ACCUMULATOR			*/
DCL SMPTE.BRATE				FIXED EXTERNAL;	/*	BIT RATE (BITS IN 20 MSEC)	*/
DCL SMPTE.RATE.ACCUM			FIXED EXTERNAL;	/*	RATE ACCUMULATOR			*/
DCL SM.INFO1					FIXED EXTERNAL;	/*	SMPTE INFO STORED HERE		*/
DCL SM.INFO2					FIXED EXTERNAL;	/*	BY D03 INTERRUPT ROUTINE	*/
DCL SM.INFO3					FIXED EXTERNAL;

DCL (SAMPLED.RATE )			FIXED EXTERNAL;	/*	SAMPLED BY MAIN LOOP			*/
DCL (SAMPLED.TIME )			FIXED EXTERNAL;	/*	FOR USE DURING LOCK-UP		*/
DCL (SAMPLED.ACCUM)			FIXED EXTERNAL;
DCL (SAMPLED.ADVANCES)		FIXED EXTERNAL;	/*	ADVANCE ACCUMULATOR			*/
DCL (SAMPLED.BRATE)			FIXED EXTERNAL;	/*	BIT RATE (BITS IN 20 MSEC)	*/
DCL (SAMPLED.RATE.ACCUM)	FIXED EXTERNAL;	/*	RATE ACCUMULATOR			*/
DCL (SAMPLED.INFO1)			FIXED EXTERNAL;
DCL (SAMPLED.INFO2)			FIXED EXTERNAL;
DCL (SAMPLED.INFO3)			FIXED EXTERNAL;

DCL SMPTE.BIT.TARG			FIXED EXTERNAL;	/*	TARGET BIT.ACCUM FOR LOCK UP	*/
DCL SMPTE.TIME.TARG			FIXED EXTERNAL;	/*	TARGET KBD.MILLS FOR LOCK UP	*/
DCL SMPTE.TRACK.RATE			FIXED EXTERNAL;	/*	RATE TO USE FOR TRACKING		*/
DCL SMPTE.LAST.ADV			FIXED EXTERNAL;	/*	PREVIOUS LAST.ADV READING		*/
DCL SMPTE.LAST.RACC			FIXED EXTERNAL;	/*	PREVIOUS RATE ACCUMULATOR		*/
DCL SMPTE.MODE.RATE			FIXED EXTERNAL;	/*	DESIRED RATE FOR MODE		*/
DCL SMPTE.SYNC.MSB			FIXED EXTERNAL;	/*	ERROR ACCUMULATOR				*/
DCL SMPTE.SYNC.LSB			FIXED EXTERNAL;
DCL CHECK.SMPTE.ERROR		FIXED EXTERNAL;	/*	SET TO CHECK SYNC				*/

DCL (SLOCKED)					FIXED EXTERNAL;	/*	TRUE IF LOCKED TO SMPTE			*/
DCL (DISABLE.SMPTE.START)	FIXED EXTERNAL;	/*	SET TRUE TO DISABLE AUTO-START	*/

DCL SMPTE.LAST.INFO2			FIXED EXTERNAL;	/*	SAVE LAST READING DISPLAYED ON	*/
DCL SMPTE.LAST.INFO3			FIXED EXTERNAL;	/*	VK FOR BETTER DISPLAYING			*/

DCL INIT.SMPTE							PROC	EXTERNAL;	/*	PROCEDURE TO INITIALIZE FOR SMPTE	*/
DCL LOCK.TO.SMPTE						PROC	EXTERNAL;	/*	LOCK UP TO SMPTE						*/
DCL CHECK.SMPTE.SYNCHRONIZATION	PROC	EXTERNAL;	/*	CHECK SMPTE SYNCHRONIZATION		*/

/*	THESE VARIABLES MUST BE IN ORDER:  (ACCESSED WITH "CORE")	*/

DCL CUR.HRS		FIXED EXTERNAL;	/*	LAST READ SMPTE TIME			*/
DCL CUR.MIN		FIXED EXTERNAL;	/*	STORED AS GLOBAL VARIABLES	*/
DCL CUR.SEC		FIXED EXTERNAL;	/*	FOR DISPLAY						*/
DCL CUR.FRA		FIXED EXTERNAL;
DCL CUR.BIT		FIXED EXTERNAL;

DCL DIS.HRS		FIXED EXTERNAL;	/*	LAST DISPLAYED SMPTE TIME	*/
DCL DIS.MIN		FIXED EXTERNAL;
DCL DIS.SEC		FIXED EXTERNAL;
DCL DIS.FRA		FIXED EXTERNAL;
DCL DIS.BIT		FIXED EXTERNAL;

DCL (BITS.PER.MSEC.NUM)	DATA	EXTERNAL;	/*	SMPTE BITS PER MSEC NUMERATOR	*/
DCL (BITS.PER.MSEC.DEN)	DATA	EXTERNAL;	/*	SMPTE BITS PER MSEC DENOM		*/
DCL (BIT.RATE.FACTOR  )	DATA	EXTERNAL;

/*	FROM 194-SAMP	*/
dcl (sector.msb,sector.numb,sector.offset)					fixed external;
dcl (time.seconds, time.milliseconds, time.microseconds)	fixed external;

dcl TIME_TO_INDEX				proc(fixed,fixed,fixed,fixed,fixed) external;
DCL INDEX_TO_TIME				proc(fixed,fixed,fixed,fixed,fixed) external;

dcl PERIOD_TIME_TO_INDEX	proc(fixed,fixed,fixed,fixed) external;
DCL INDEX_TO_PERIOD_TIME	proc(fixed,fixed,fixed,fixed) external;

/*	FROM 195-PLAY	*/
DCL POLY.ALLOC.CHANS	PROC(ARRAY,FIXED) EXTERNAL;
DCL POLY.FREE.CHANS	PROC EXTERNAL;
DCL POLY.PLAY			PROC(ARRAY,FIXED,FIXED,FIXED,FIXED,FIXED,FIXED,FIXED,FIXED,FIXED) EXTERNAL;
DCL POLY.PLAY.SFILE	PROC(ARRAY) EXTERNAL;
DCL POLY.WAIT.SF		PROC EXTERNAL;

/*	FROM 196-MAL	*/
DCL MS.SEARCH			PROC EXTERNAL;						/*	SEE IF FILE NAME IS IN EXT MEMORY - USES GLOBAL FNBUF - ALSO CHECK BUFFER SIZE	*/
DCL MS.UPDATE			PROC(FIXED,FIXED) EXTERNAL;	/*	UPDATE FILE POINTERS IF BUFFER MOVED	*/
DCL MS.COLLECT			PROC(FIXED) EXTERNAL;			/*	GARBAGE COLLECT EXTERNAL MEMORY	*/
DCL MS.USERS			PROC(FIXED,FIXED) EXTERNAL;	/*	UPDATE USER FIELD FOR FILE RECORD IN EXT MEM	*/
DCL MS.LOAD				PROC(FIXED,FIXED) EXTERNAL;	/*	LOAD A SOUND FILE ATTACK BUFFER. PASS DISK SECTOR	*/
DCL MS.EXTRACT			PROC EXTERNAL;						/*	GET FILE INFO INTO MISC.BUF FROM EXT MEM	*/

/*	FROM 197-PAL	*/
DCL CACHE.PTR						FIXED EXTERNAL;			/*	ptr to next free word in cache	*/
DCL CACHE.SECS						FIXED EXTERNAL;			/*	cache length in sectors	*/
DCL CACHE.BASE						FIXED ARRAY EXTERNAL;	/*	base sector/bin of cache	*/
DCL NUM.SNDS.IN.CACHE			FIXED EXTERNAL;			/*	number of sound files in cache	*/
dcl INITIAL.FNAME					data EXTERNAL;				/*	default name for a new sound file	*/

DCL SAMPLE.TO.MEMORY				FIXED EXTERNAL;
DCL SHOW.FILE.LOADING.MESSAGE	FIXED EXTERNAL;	/*	SET TO POSITION TO SHOW MESSAGE AT	*/

dcl POLY.HIST.THERE				FIXED EXTERNAL;	/*	TRUE IF .SPLY-7 FILE IS THERE	*/
dcl POLY.HIST.BUF					FIXED EXTERNAL;
dcl POLY.HIST.SIZE				FIXED EXTERNAL;
dcl (POLYDEV,POLYSEC)			FIXED EXTERNAL;	/*	DISK PTRS TO THE FILE			*/

DCL PS.UPDATE				PROC(ARRAY,ARRAY)			EXTERNAL;	/*	UPDATE FILE POINTERS IF DATA IS MOVED	*/
DCL PS.DEALLOCATE			PROC(ARRAY)					EXTERNAL;
DCL PS.DEALLOCATE.ALL	PROC							EXTERNAL;	/*	FREE UP ALL SOUNDS IN POLYMEM	*/
DCL PS.COLLECT				PROC(FIXED,FIXED,FIXED)	EXTERNAL;	/*	GARBAGE COLLECT POLY SYNTH MEMORY	*/
DCL PS.SHUFFLE				PROC(FIXED)					EXTERNAL;
DCL PS.ALLOCATE			PROC(FIXED,FIXED,FIXED)	EXTERNAL;	/*	ALLOCATE A BLOCK I SECTORS LONG	*/
DCL PS.SETUP				PROC(ARRAY)					EXTERNAL;	/*	SET UP SYNCLAVIER INFO FROM SOUND FILE IN POLY MEMORY	*/
DCL PS.AUDITION			PROC(ARRAY,FIXED)			EXTERNAL;	/*	AUDITION SOUND FILE IN POLY MEM	*/
DCL PS.LOAD					PROC(FIXED,FIXED,FIXED,FIXED,FIXED)	EXTERNAL;
DCL PS.EXTRACT				PROC							EXTERNAL;	/*	GET FILE INFO INTO MISC.BUF FROM EXT MEM	*/
DCL PS.MAX.TIME			PROC							EXTERNAL;	/*	move sound files out of bin-0 if possible	*/

DCL READ.IN.POLY.HIST			PROC								EXTERNAL;
DCL WRITE.OUT.POLY.HIST			PROC								EXTERNAL;
DCL BUILD.POLY.HIST.RESET.REC	PROC (ARRAY)					EXTERNAL;
DCL BUILD.POLY.HIST.REC			PROC (ARRAY,FIXED,ARRAY)	EXTERNAL;
DCL ADD.POLY.TO.HIST				PROC (ARRAY)					EXTERNAL;

/*	FROM 197-PAL1	*/

DCL FIND.CACHE						PROC											EXTERNAL;	/*	look for sound file cache in polymem	*/
DCL SETUP.CACHE					proc(fixed)									EXTERNAL;	/*	set up a cache of all sound files on winchester disk	*/
DCL FIND.SOUND						proc(FIXED ARRAY)							EXTERNAL;	/*	looks for a sound file in the cache	*/
DCL ADD.FILE.TO.CACHE			proc(FIXED ARRAY)	returns (boolean)	external;	/*	add file to cache	*/
DCL REMOVE.FILE.FROM.CACHE		proc(FIXED ARRAY)	returns (boolean)	external;	/*	remove file from cache	*/

/*	FROM 412-D42	*/

#if (inc.voice.output)
	dcl do.voice.output			proc	external;	/*	handle output	*/
#endif

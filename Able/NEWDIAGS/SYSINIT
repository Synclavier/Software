/*

Title           : System initialize and poll routines
Project Engineer: William Leathers
Project Start   : Feb 1986
New England Digital Corporation

Modification history:

  01/31/90 WSL - Added reset of #_daughters(bin#) to zero. Daughters were adding with each call
  05/27/89 WSL - Added psbmread(0,0,0) at end of polyinit
  05/03/89 WSL - Added PSMC 32 Meg wrap detect (oops!)
  02/15/89 WSL - Changed increment,modulus in polyinit from 256,256 to 1,1
  02/14/89 WSL - Added D115D/DSP70 identification and added mi70_map
  02/06/89 WSL - Removed "normalization" from poly read/write routines
  01/30/89 WSL - Added PRM identification to polyinit

*/

/***************************************************************************/
/* D115D Communication processor device address literals from cplits       */

dcl cpsel  lit '"115"'; /* Communication processor select */
dcl cpcmd  lit '"116"'; /* Communication processor command (write) */
dcl cpstat lit '"116"'; /* Communication processor status (read) */
dcl cpdata lit '"117"'; /* Communication processor data */
dcl cp#sel_group_20    lit '"020"';  /* First group of boards */

/* MULTIPLY DIVIDE LITERALS: */

DCL LOAD  LIT 'WRITE(5)=';        /* LOAD               */
DCL ULOAD LIT 'WRITE(4)=';        /* LOAD UPPER         */
DCL REM   LIT 'READ(4)'  ;        /* QUOTIENT REMAINDER */
DCL MUL   LIT 'WRITE(6)=';        /* PERFORM MULTIPLY   */
DCL DIV   LIT 'WRITE(7)=';        /* PERFORM DIVIDE     */
DCL RES   LIT 'READ(5)'  ;        /* RESULT LSB         */
DCL URES  LIT 'READ(4)'  ;        /* RESULT MSB         */
DCL MWAIT LIT 'WRITE("324")=RES'; /* D5 TO ATNV TO WAIT FOR MUL/DIV */

/***************************************************************************/
/**************     Poly system function code literals     *****************/

dcl psmaxbins    lit '3';

dcl psc     lit '"155"';           /* write CHANNEL # */
dcl psf     lit '"156"';           /* write FUNCTION CODE */
dcl psd     lit '"157"';           /* write DATA HERE */
dcl psx     lit '"154"';           /* write EXTendED DATA HERE */

/* function codes */
dcl PSWL    lit ' 0';  /* FC  0 - MINUS WAVE TABLE LENGTH */
dcl PSBA    lit ' 2';  /* FC  2 - WAVE TABLE BASE ADDRESS */
dcl PSLL    lit ' 4';  /* FC  4 - MINUS LOOP LENGTH       */
dcl PSPI    lit ' 6';  /* FC  6 - PHASE INCREMENT         */
dcl PSINC   lit ' 8';  /* FC  8 - FREQUENCY INCRMENT      */
dcl PSMOD   lit ' 9';  /* FC  9 - FREQUENCY MODULUS       */
dcl PSON    lit '10';  /* FC 10 - ON/OFF                  */

dcl PSRON   lit '11';  /* FC 11 - read ON/OFF BITS (UGH!)   */
dcl PSNUMV  lit '12';  /* FC 12 - read APPROX # OF DA CARDS */

dcl PSWMA   lit '16';  /* FC 16 - write MEMORY ADDRESS    */
dcl PSRMA   lit '20';  /* FC 20 - read MEMORY  ADDRESS    */

dcl PSPAT   lit '24';    /* FC 24 - phase accumulator test    24->24    */
dcl pscAT   lit '25';    /* FC 25 - comp addr high test       25->0     */

dcl PSTMOD  lit '26';    /* FC 26 - test mode for PST board   26->0     */
dcl PSTWEN  lit '27';    /* FC 27 - write envelope channel    27->28    */
dcl PSTREN  lit '28';    /* FC 28 - read envelope channel     28->28    */

dcl PSECNT  lit '32';  /* FC 32 - ENVELOPE/DELAY COUNTER  */
dcl PSEMOD  lit '33';  /* FC 33 - ENVELOPE RATE MODULUS   */
dcl PSEACU  lit '34';  /* FC 34 - ENVELOPE ACCUMULATOR    */
dcl PSEINC  lit '35';  /* FC 35 - ENVELOPE INCREMENT      */
dcl PSELIM  lit '36';  /* FC 36 - ENVELOPE LIMIT 0-4095   */
dcl PSEVAL  lit '37';  /* FC 37 - ENVELOPE CURRENT VAL    */
dcl PSEDEL  lit '38';  /* FC 38 - ENVELOPE CURRENT DELTA  */

dcl PSRCVOL lit '40';  /* FC 40 - RIGHT CUR  VOL          */
dcl PSRDVOL lit '41';  /* FC 41 - RIGHT DEST VOL          */
dcl PSLCVOL lit '42';  /* FC 42 - LEFT  CUR  VOL          */
dcl PSLDVOL lit '43';  /* FC 43 - LEFT  DEST VOL          */

dcl PSINHON lit '44';  /* FC 44 - INHIBIT ON              */

             /* PSADC test function codes    */
dcl PSADNOP  lit '48';    /*  FC 48 - test FC, sends a NOP         */
dcl PSADREAD lit '49';    /*  FC 49 - test FC, sends a read        */
dcl PSADDOUT lit '50';    /*  FC 50 - test FC, sends a DATA OUT    */
dcl PSADCVRT lit '51';    /*  FC 51 - test FC, sends a CONVERT     */

             /* Front end control            */
dcl PSADMODE lit '52';    /*  FC 52 - set mode for sampling        */
dcl PSADVOL  lit '53';    /*  FC 53 - write volume                 */
dcl PSADACT  lit '54';    /*  FC 54 - activate channel             */
dcl PSADID   lit '55';    /*  FC 55 - identify                     */
dcl PSADSC0  lit '56';    /*  FC 56 - read sample count of chan 0  */
dcl PSADSC32 lit '57';    /*  FC 57 - read sample count of chan 32 */
dcl PSADMC   lit '58';    /*  FC 58 - max number of sampling chans */
dcl PSADEVSM lit '59';    /*  FC 59 - even stereo master           */
dcl PSADENV  lit '60';    /*  FC 60 - envelope                     */

    /* D to A controller function codes */
dcl PSMUTE   lit '64';    /*  FC 64 - mute channel                 */
dcl PSCMAP   lit '65';    /*  FC 65 - channel map                  */
dcl PSRPEAK  lit '66';    /*  FC 66 - read peak                    */

/***************************************************************************/
/* This table contains all current STM configurations. Use the M.S.nybble
   of the returned PSADID word as an index into the table. The three values
   for each index are: prm_present, daughter_type, and #_stm_boxes.  */

 dcl stm_data  data 
     /* 0 = 0 0 0 0 = NO STM AT ALL              */  (0, 0, 0,
     /* 1 = 0 0 0 1 = NO PRM, OLD SAFES, 1 BOX   */   0, 0, 1,
     /* 2 = 0 0 1 0 = NO PRM, OLD SAFES, 2 BOXES */   0, 0, 2,
     /* 3 = 0 0 1 1 = NO PRM, OLD SAFES, 3 BOXES */   0, 0, 3,
     /* 4 = 0 1 0 0 = NO PRM, OLD SAFES, 4 BOXES */   0, 0, 4,
     /* 5 = 0 1 0 1 = UNUSED                     */   0, 0, 0,
     /* 6 = 0 1 1 0 = UNUSED                     */   0, 0, 0,
     /* 7 = 0 1 1 1 = UNUSED                     */   0, 0, 0,
     /* 8 = 1 0 0 0 =    PRM, NEW SAFES, 4 BOXES */   1, 1, 4,
     /* 9 = 1 0 0 1 = NO PRM, NEW SAFES, 1 BOX   */   0, 1, 1,
     /* 10= 1 0 1 0 = NO PRM, NEW SAFES, 2 BOXES */   0, 1, 2,
     /* 11= 1 0 1 1 = NO PRM, NEW SAFES, 3 BOXES */   0, 1, 3,
     /* 12= 1 1 0 0 = NO PRM, NEW SAFES, 4 BOXES */   0, 1, 4,
     /* 13= 1 1 0 1 =    PRM, NEW SAFES, 1 BOX   */   1, 1, 1,
     /* 14= 1 1 1 0 =    PRM, NEW SAFES, 2 BOXES */   1, 1, 2,
     /* 15= 1 1 1 1 =    PRM, NEW SAFES, 3 BOXES */   1, 1, 3);

/***************************************************************************/
/******************     Global variable declarations     *******************/
  dcl d51_data                     fixed;
  dcl d57_data                     fixed;

  dcl model_D_exists               boolean;
  dcl able_processor_type               fixed;
  dcl  model_b lit '0';
  dcl  model_c lit '1';
  dcl  model_d lit '2';

  dcl external_memory_exists       boolean;
  dcl external_memory_size           fixed;
  dcl #_external_memory_sectors      fixed;

  dcl d16_exists                   boolean;
  dcl d70_exists                   boolean;
  dcl smpte_exists                 boolean;
  dcl poly_exists                  boolean;
  dcl d32x_exists                  boolean;
  dcl d100a_exists                 boolean;
  dcl d110a_exists                 boolean;
  dcl d57_exists                   boolean;
  dcl d40q_exists                  boolean;
  dcl m64k_exists                  boolean;
  dcl d34_gpi_exists               boolean;

  dcl d24_exists                   boolean;
  dcl d24_map                        fixed;

  dcl midi_exists                  boolean;
  dcl mi70_map                       fixed;
  dcl #_midi_systems                 fixed;

  dcl dsp70_exists                 boolean;
  dcl #_dsp70_boards                 fixed;
  dcl dsp70_map                      fixed;

  dcl d115d_exists                 boolean;
  dcl d115d_map                      fixed;

  dcl psac1_exists(psmaxbins-1)      boolean;
  dcl psac2_exists(psmaxbins-1)      boolean;
  dcl psadc_exists(psmaxbins-1)      boolean;
  dcl dddac_exists(psmaxbins-1)      boolean;

  dcl #_poly_bins                     fixed;
  dcl #_poly_voices(psmaxbins-1)      fixed;
  dcl #_psacs(psmaxbins-1)            fixed;

  dcl ad_config(psmaxbins-1)          fixed;
  dcl prm_exists(psmaxbins-1)         fixed;
  dcl #_stm_boxes(psmaxbins-1)        fixed;
  dcl daughter_type(psmaxbins-1)      fixed;
  dcl #_daughters(psmaxbins-1)        fixed;

  dcl #_poly_mbytes(psmaxbins-1)      fixed;
  /*
  dcl #_poly_sectors(psmaxbins-1)     fixed;
  dcl #_poly_sectors_lsw(psmaxbins-1) fixed;
  dcl #_poly_sectors_msw(psmaxbins-1) fixed;
  */
  dcl total_stm_inputs                fixed;
  dcl total_poly_voices               fixed;
  dcl total_megabytes                 fixed;


/***************************************************************************/

// Routine captures a PSD value and a time value
// for a poly value that changes on its own - like an envelope current value.
// The value is polled and the time is measured. The value is polled until
// 3 equal values are read around the time measurement.
dcl consistent_micros fixed;
dcl consistent_msecs  fixed;

GetConsistentTimes: proc;
   consistent_msecs  = interp_fetch_real_msecs (0);
   consistent_micros = interp_fetch_real_micros(0);
end GetConsistentTimes;

GetConsistentValues: proc;
    dcl (x,y,z) fixed;

    x = read(psd);
    consistent_msecs  = interp_fetch_real_msecs(0);
    y = read(psd);
    consistent_micros = interp_fetch_real_micros(0);
    z = read(psd);

    while (x != y or x != z)
    {
       x = read(psd);
       consistent_msecs  = interp_fetch_real_msecs(0);
       y = read(psd);
       consistent_micros = interp_fetch_real_micros(0);
       z = read(psd);
    }

    return x;
end GetConsistentValues;

dcl really.run.at.deferred.time fixed;

// Mechanism to bump program execution to a dedicated thread
// within the kernel

Activate.Deferred.Interpretation: proc;
   // Must activate real_time
   interp_activate_real_time(true);             // Set interpret_at_interrupt_prior == true
   interpret_set_timebase_mode(1);              // Set rtp_is_playing == true; set interpret_at_defrd_prior == true
   really.run.at.deferred.time = true;
end Activate.Deferred.Interpretation;

Deactivate.Deferred.Interpretation: proc;
   interp_activate_real_time(false);            // Set interpret_at_interrupt_prior == false
   interpret_set_timebase_mode(0);              // Set rtp_is_playing == false; set interpret_at_defrd_prior == false
   really.run.at.deferred.time = false;
end Deactivate.Deferred.Interpretation;

Really.Peek: proc;
   return peek;
end Really.Peek;

Really.Run.Host: proc;
   interp_do_interrupts();

   // 0 = ABLE hardware; 1 = timer task; 2 = deferred task; 3 = iokit; 4 = no kernel extension; running main loop
   if (interp_current_level(0) == 0)         // Nothing if running on Able
      return;

   if (interp_current_level(0) == 4) {       // No kernel - running in app - better give host some CPU time
      interp_run_host();
      return;
   }

   if (really.run.at.deferred.time == 0) {   // If this build not set up for deferred interpretation
      interp_run_host();
      return;
   }

   while (interp_current_level(0) != 2) {    // Chill...
      interp_run_host();                     // Break out of iokit thread or timer thread
      interp_do_interrupts();
   }

   // Return when we are at deferred task level and can really hog the CPU
   // without crunching the mac
end Really.Run.Host;

Really.Do.Delay: proc(n);
   dcl n fixed;

   if (interp_is_running != 0)
      interp_usleep(n*5000);

   else while (n > 0) {
      write(3) = 0;
      n = n - 1;
   }
end Really.Do.Delay;

/***************************************************************************/
pbmread:proc(bin#,msw,lsw);           /* set up for poly system memory read*/
  dcl (bin#,msw,lsw) fixed;

   /*  msw = msw + shr(lsw,8);*/     /* normalize  */
   /*  lsw = lsw & 255; */
   disable;
   write(psc) = 64 * bin#;   /* select channel 0 in bin #          */
   write(psf) = psrma;       /* write memory address function code */
   write(psd) = msw;         /* upper 16 bits                      */
   write(psd) = lsw;         /* lower 8 bits                       */
   enable;

end pbmread;

/***************************************************************************/
pbmwrite:proc(bin#,msw,lsw);        /* set up for poly system memory write */
   dcl (bin#,msw,lsw) fixed;

   /*  msw = msw + shr(lsw,8);*/     /* normalize  */
   /*  lsw = lsw & 255; */

   disable;
   write(psc) = 64 * bin#;   /* select channel 0 for bin 1         */
   write(psf) = pswma;       /* write memory address function code */
   write(psd) = msw;         /* upper 16 bits                      */
   write(psd) = lsw;         /* lower 8 bits                       */
   enable;
end pbmwrite;

/***************************************************************************/
psmread:proc(msw,lsw);               /* set up for poly system memory read */
   dcl (msw,lsw) fixed;

   /* msw = msw + shr(lsw,8);*/     /* normalize  */
   /* lsb = lsb & 255;*/
   disable;
   write(psc) = 0;           /* select channel 0 for bin #1       */
   write(psf) = psrma;       /* read memory address function code */
   write(psd) = msw;         /* upper 16 bits       */
   write(psd) = lsw;         /* lower  8 bits       */
   enable;
end psmread;

/***************************************************************************/
psmwrite:proc(msw,lsw);    /* POLY SYNTH MEMORY WRITE */
   dcl (msw,lsw) fixed;

   /*  msw = msw + shr(lsw,8);*/     /* normalize  */
   /*  lsw = lsw & 255; */
   disable;
   write(psc) = 0;           /* select channel 0 for bin 1         */
   write(psf) = pswma;       /* write memory address function code */
   write(psd) = msw;         /* upper 16 bits                      */
   write(psd) = lsw;         /* lower 8 bits                       */
   enable;
end psmwrite;


/***********************************************************************/
polyinit: proc;
  dcl (i,j,k) fixed;
  dcl bin# fixed;
  dcl daughter_map fixed;
  dcl psnumv_data fixed;
  dcl (increment,modulus) fixed;
  dcl (sector,page_and_word) fixed;
  dcl memory_found boolean;

  dcl ned_daughter lit '0';
  dcl analogic_daughter lit '1';
  increment = 1;  modulus = 1;   /* sample rate of 101.01 */
  #_poly_bins = 0;
  total_poly_voices = 0;

  disable;
  if poly_exists then do;
    do i = 0 to 64*(psmaxbins-1) by 64;     /* Init up to 4 poly systems */
     write(psc) = i + 1;                    /* see if system exists      */
     if (read(psc) & "HFF") = i+1 then do;  /* if subsystem exists ...   */
        bin# = #_poly_bins;                 /* bin#: 0 - 3;              */
        #_daughters(bin#) = 0; /* @@ */
        #_poly_bins = #_poly_bins + 1;      
        write(psf) = PSRMA; write(psd) = 0; /* Reset computer interface  */
        write(psf) = psnumv;             
        psnumv_data = read(psd);

        k = psnumv_data;
        psac1_exists(bin#) =  shr((k & "H10"),4);
        psac2_exists(bin#) =  shr((k & "H20"),5);
        #_psacs(bin#) = psac1_exists(bin#) + psac2_exists(bin#);
        k = (k & "HF")*4;
        if (^psac2_exists(bin#)) & (k > 16) then k = 16;
        if  ^psac1_exists(bin#)  then k = 0;
        #_poly_voices(bin#) = k;
        total_poly_voices = total_poly_voices + #_poly_voices(bin#);

        if (psnumv_data & "H40") <> 0 then do;   /* If PSADC exists ...  */
           psadc_exists(bin#) = true;    
           write(psf) = PSADMC;             /* set # sampling chans to 0 */
           write(psd) = 0;
           write(psf) = PSADEVSM;           /* reset stereo masters    */
           do j = i to i+30 by 2;           /*  (even chans 0-30)      */
            write(psc) = J;
            write(psd) = 0;
           end;
        end;
        if (psnumv_data & "H80") <> 0 then do; /* reset sampling units */
           write(psc) = i;                    
           write(psf) = PSADID;
           write(psd) = 0;                  /* Send an ident command      */

           Really.Do.Delay(1); Really.Run.Host();

           ad_config(bin#) = read(psd);     /* get STM configuration      */

           k = shr(ad_config(bin#),12) & "HF"; /* extract top 4 bits */
           prm_exists(bin#)     = stm_data(3*k)  & "H0001";
           daughter_type(bin#)  = stm_data(3*k+1) & "H0001";
           #_stm_boxes(bin#)     = stm_data(3*k+2) & "H0007";

           daughter_map = ad_config(bin#) & "HFF";
           do k = 0 to 7;
             if daughter_map & 1 = 1 then do;
                #_daughters(bin#) = #_daughters(bin#) + 1;
                total_stm_inputs = total_stm_inputs + 2;
             end;
             daughter_map = shr(daughter_map,1);
           end;

           write(psf) = PSADMODE;           /* STM mode of 0 */
           write(psd) = 0;
           do j = i to i + 15;              /* Initialize all 16 channels */
              write(psc) = j;
              write(psf) = PSADVOL;         /* Set gain to unity          */
              if daughter_type(bin#) = ned_daughter
              then write(psd) = 0;
              else write(psd) = 3;
              write(psf) = PSADACT;         /* No active channels      */
              write(psd) = 0;
           end;
        end;

        do j = 0 to 63;     /* ZERO OUT EACH CHANNEL - INCLUDING GHOST/REFRESH CHANNEL(S) */
           write(psc) = i+j; write(psf) = PSWL;
           write(psd) = "HFFFF"; write(psd) = "HFFFF"; /* wave length of 1 */
           write(psd) =       0; write(psd) =  255;    /* base addr of 255 */
           write(psd) = "HFFFF"; write(psd) = "HFFFF"; /* loop length of 1 */
           write(psd) =       0; write(psd) =    0;    /* phase incr of 0  */
           write(psd) = increment - 1;             /* Sample rate = 101.01 */
           write(psd) = 256 - modulus; 
           write(psd) =   0;                       /* Off with no loop     */

           if j < #_poly_voices(bin#) then do; /* zero env/vol for existing dacs */
              write(psf) = PSEMOD;                  /* write env info           */
              write(psd) = 4095; write(psd) = 4095; 
              write(psd) =   64; write(psd) = 4095; /* DELTA, COUNT        */
              write(psd) = 4095;                    /* ENV ACCUMULATOR     */
              write(psd) =    0; write(psd) =    0; /* LIMIT, CVAL         */

              write(psf)=PSRCVOL;              /* write VOL INFO           */
              write(psd)=   0; write(psd)=0;   /* R, L CVOL                */
              write(psd)=   0; write(psd)=0;   /* R, L DVOL                */
           end;
        end;   /* OF CHANNEL LOOP         */

        write(psc)  = i;
        write(psf) = psnumv;
        if (read(psc)&"400")<>0 then do;      /* if DDDAC exists then    */
          dddac_exists(bin#) = true;
          write(psc) = I;                     /* select this subsystem   */
          write(psf) = psmute;                /* and unmute it           */
          write(psx) = 0;                    
          do j = i to i+31;                   /* Set initial channel map */
            write(psc) = J;                   /* Each oscillator to its  */
            write(psf) = pscmap;              /*   own channel           */
            write(psx) = j;
          end;
        end;                               
      end;   /* of if subsystem exists  */
    end;     /* of loop over subsystems */


    /* determine ammount of poly memory */
    do bin# = 0 to #_poly_bins - 1;

      /* First set up to detect for 32 Meg PSMC system wrap-around */
      /* Clear 1st 2 words of Mbyte 33 (PSBMC) or Mbyte 0 (PSMC)   */
      sector = 0; page_and_word = "H0100"; 
      call pbmwrite(bin#,sector,page_and_word);
      write(psd) = 0; write(psd) = 0; 

      #_poly_mbytes(bin#) = 0;
      sector = 0; page_and_word = 0;
      memory_found = true;
      do while memory_found;
        call pbmwrite(bin#,sector,page_and_word);
        write(psd) = "HA5A5"; write(psd) = "H5A5A"; 
        call pbmread (bin#,sector,page_and_word);

        if (read(psd) = "HA5A5") & (read(psd) = "H5A5A") then do;
           sector = sector + 2048;        /* count 2048 (1Meg) more sectors   */
           if sector = 0 then do;
             page_and_word = page_and_word + "H0100";
           end;
           #_poly_mbytes(bin#) = #_poly_mbytes(bin#) + 1;

           if #_poly_mbytes(bin#) = 32 then do; /* check for PSMC wrap-around */
             call pbmread (bin#,sector,page_and_word);
             if (read(psd) = "HA5A5") & (read(psd) = "H5A5A") 
             then memory_found = false; /* PSMC wrap-around */
           end;

        end;
        else memory_found = false;
      end; /* do while memory found */

    end;  /* do bin# */
    enable; 

  call pbmwrite(0,0,0); /* reset to poly bin 0 */
  call pbmread (0,0,0); /* reset PSF fifo */
  end; /* if poly exists */

  if #_poly_bins > psmaxbins then #_poly_bins = psmaxbins;

end polyinit;

/***********************************************************************/
ext_sectors: proc;
   dcl (i,amount) fixed;
   
   if external_memory_exists then do;
     write("60") = 1;
     if read("60") <> 1 then return 0;        /* page 1 does not exist ? */

     I=read("62");                              /* save contents of memory */
     write("62") = 0;                           /* stuffed correctly? */
     if read("62") <> 0 then return 0;          /* first half of card 0 is unstuffed? */
     write("62")=I;                             /* restore memory */
 
     amount = 256;                              /* we have at least one half stuffed board */
     do while amount < 16384;
        write("60") = amount;                   /* select memory page */
        if read("60") <> amount then return amount;

        I=read("62");                           /* save contents of memory */
        write("62") = 0;
        if read("62") <> 0 then do;             /* doNE */
           return amount;
        end;
        write("62")=I;                          /* restore memory */
        amount = amount + 256;
     end;
     return 16384;
  end;
end ext_sectors;

/***********************************************************************/
/***********************     Main Program    ***************************/
/***********************************************************************/

d70_exists              = false;
external_memory_exists  = false;
poly_exists             = false;
d32x_exists             = false;
d100a_exists            = false;
d110a_exists            = false;
d24_exists              = false;
d57_exists              = false;
model_d_exists          = false;
d40q_exists             = false;
m64k_exists             = false;

d51_data = read("51");
if (d51_data & "H0100") > 0 then d70_exists              = true;
if (d51_data & "H0200") > 0 then external_memory_exists  = true;
if (d51_data & "H0400") > 0 then poly_exists             = true;
if (d51_data & "H0800") > 0 then d32x_exists             = true;
if (d51_data & "H1000") > 0 then d100a_exists            = true;
if (d51_data & "H2000") > 0 then d110a_exists            = true;
if (d51_data & "H4000") > 0 then d24_exists              = true;
if (d51_data & "H8000") > 0 then d57_exists              = true;

if d57_exists then do;
   d57_data = read("57");
   if (d57_data & "H01") > 0 then model_d_exists = true;
   if (d57_data & "H02") > 0 then d40q_exists    = true;
   if (d57_data & "H04") > 0 then m64k_exists    = true;
   if (d57_data & "H08") > 0 then d34_gpi_exists = true;
   if (d57_data & "H10") > 0 then d115d_exists   = true;
end;

if model_d_exists then able_processor_type = model_d;
else do;
  write("300") = 0;
  write("270") = 1;
  if read("300") = 0 then able_processor_type = model_b;
  else able_processor_type = model_c;
end;

call polyinit;

begin;
  dcl i fixed;
  total_megabytes = 0;
  do i = 0 to psmaxbins - 1;
     total_megabytes = total_megabytes + #_poly_mbytes(i);
  end;
end;

d16_exists = false;
if m64k_exists then d16_exists = true;
else begin;
  dcl i fixed;

  disable;
  i = 500;
  do while (not d16_exists) and (i > 0);
   if (read(1) & "H0080") <> 0 then d16_exists = true;
   write("3") = 0; 
   i = i - 1;
  end;
  enable;
end;

#_external_memory_sectors = ext_sectors;
external_memory_size = int(#_external_memory_sectors/4);

if d24_exists then begin;
   dcl (i,j) fixed;

   j = 1;
   do i = 0 to 3;
	 interp_set_scsi_id(interp_set_scsi_id_poll_host, i, 7);
     write("24") = ("H1000" or shl(1, 8 + i));
     if (read("24") and "H0F00") = shl(1, 8 + i)
       then d24_map = d24_map \ j;
     j = shl(j,1);
   end;
end;

if d70_exists then begin;
  dcl (i,j) fixed;

  write("70") = "H8";                                   /* Reset board */
  if (read("70") & "HFF") = 8 then smpte_exists = true;

  mi70_map = 0;
  #_midi_systems = 0;                 /* count existing subsystems  */
  do i = 0 to 7;                      /* check for subsys's 1-8     */
    write("70") = i + 16;             /* for Midi system            */
    if read("70") = i + 16 then do;
      #_midi_systems = #_midi_systems + 1;
      mi70_map = mi70_map \ shl(1,i);
    end;
  end;
  if #_midi_systems > 0 then midi_exists = true;

/* Now check to see if there are any  DSP70's in the system.. */
  dsp70_map = 0;
  do i = 0 to 7;                       /* Bit position 5 is the DSP70 flag */
     write("70") = i + 32;             /* j counts existing DSP70 's */
     if ( read("70") = i + 32 ) then do;
        dsp70_map = dsp70_map \ shl(1,i);
        #_dsp70_boards = #_dsp70_boards + 1;
     end;
  end;
  if dsp70_map ^= 0 then dsp70_exists = true;   /* must be a least one dsp70 */
  write("70") = 16;                    /* Set for MIDI select */
end;

/* Count and map D115D boards */
d115d_map = 0;
if d115d_exists then begin;
  dcl i fixed;

  do i = 0 to 3;
    write(cpsel) = i \ cp#sel_group_20; /* Try to select */
    if (read(cpsel) = (i \ cp#sel_group_20)) 
    then d115d_map = d115d_map \ shl(1,i);
  end; /* for each board */
end;




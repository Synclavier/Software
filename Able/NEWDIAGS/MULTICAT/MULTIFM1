/***************************************************************************//*****************     Multi-channel routines for FM     *******************//***************************************************************************/route_fm_voices:  proc returns (boolean);   dcl (routed,i)  fixed;   routed = true;   do i = 0 to 255;                              /* clear 'shorts'        */     mt_short(i) = false;   end;   do i = 0 to num_fmv-1 by 2;                   /* loop over FM channels */      call fm_turn_on(i,0,255);                         /* turn on full left pan */      pstring('              ');  pnum(i/2,2);  pstring('     ');      routed = routed & search_for_input(fm_map,i); /* search for mt input  */      call fm_turn_on(i,63,255);                        /* turn on full right pan */      pstring('     ');      routed = routed & search_for_input(fm_map,i+1); /* search for mt input */      call fm_turn_off(i);                             /* clear real input i */      if (i mod 4)=2 then crlf;   end; /* loop over real input channels */   crlf;   return routed;end route_fm_voices;/***************************************************************************/fm_rte_err: proc;                        /* show PS routing errors         */  dcl (r_flag,s_flag,left_col) boolean;  dcl (i,j,card_num) fixed;  clear_screen;  pos(2,5);               /* clear screen, position cursor */  r_flag = false;                        /* init no-route flag to false   */  s_flag = false;                        /* init short flag to false      */  do i = 0 to num_fmv-1;                 /* do for each voice (l & r)     */    if fm_map(i) = -1 then r_flag = true;/* if map has no-route, set flag */    if fm_map(i) = -2 then s_flag = true;/* if map has short, set flag    */  end;  if r_flag then do;                     /* if a voice didn't route then  */    pstringr('The following FM voices did not route:');    pstring('      ');    j = 0;    do i = 0 to num_fmv-1;               /* do for each voice (l & r)    */      if fm_map(i) = -1 then do;         /* if voice didn't route then   */        pnum(i/2,2);                     /* display channel number       */        if i & 1 then pstring('R');      /* if right then display 'R'    */        else pstring('L');               /* if left then display 'L'     */        pstring(',');                    /* display comma                */        j = j + 1;                       /* count voices listed on line  */        if j = 16 then do;               /* if 16 on this display line,  */          wchar(bs); wchar(sp);          /* erase last comma displayed   */          crlf; pstring('      '); j = 0;/* carriage return, margin      */        end; /* if */      end; /* if */    end; /* do */    wchar(bs); wchar(sp);                /* erase last comma displayed   */    crlf; crlf; pstring('    ');         /* skip a line, margin          */  end; /* if */  if s_flag then do;                     /* if mt inputs shorted then    */    pstringr('The following FM voices routed to more than one MT1 input:');    pstring('      ');    j = 0;                               /* count chans on display line  */    do i = 0 to num_fmv-1;               /* do for each voice (l & r)    */      if fm_map(i) = -2 then do;         /* if voice routed > 1 time     */        pnum(i/2,2);                     /* display channel number       */        if i & 1 then pstring('R');      /* if right then display 'R'    */        else pstring('L');               /* if left then display  'L'    */        pstring(',');                    /* display comma                */        j = j + 1;                       /* count chans on display line  */        if j = 16 then do;               /* if at end of display line    */          wchar(bs); wchar(sp);          /* erase last comma displayed   */          crlf; pstring('      '); j = 0;/* carriage return, margin      */        end; /* if */      end; /* if */    end; /* do */    wchar(bs); wchar(sp);                /* erase last comma displayed  */    crlf; crlf; pstring('    ');         /* skip a line, margin         */    call mt1_short;                      /* display mt1 shorts          */  end; /* if flag */end fm_rte_err;/***************************************************************************/map_fm:proc;  dcl chr fixed;mapfm1:;  clear_typeahead;  if num_fmv>0 then do;                  /* fm voices exist */    clear_screen;    pos(1,14); pstring('FM voice routing, Multi-channel test - ');    display_release_date;     display_map_heading;    if route_fm_voices then pstring('       FM voices route properly.');    else do;       wchar(bel);       pstring('       FM voice routing error, press <RETURN> for more information...');       chr = rchar;       call fm_rte_err;    end;    crlf;    pstring('       Press <RETURN> to continue or any key to map FM voices again...');    chr = rchar;    if chr <> cr then goto MAPFM1;    end; /* fm voices exist */end map_fm;/***************************************************************************/dcl determine_mt2_type lit 'call #determine_mt2_type';#determine_mt2_type:  proc;  dcl dc_low     lit  '0';           /* waveform types for poly and FM */  dcl dc_hi      lit  '1';  dcl sine       lit  '2';  dcl (found,i)  fixed;   mt2_type = inverting;   init_fm_wave(dc_low);   do i = 0 to num_fmv-1 by 2;                   /* loop over FM channels */      call fm_turn_on(i,0,255);                         /* turn on full left pan */      found = find_dc;      call fm_turn_off(i);                             /* clear real input i */      if found then return;   end; /* loop over real input channels */   mt2_type = non_inverting;   init_fm_wave(dc_hi);   do i = 0 to num_fmv-1 by 2;                   /* loop over FM channels */      call fm_turn_on(i,0,255);                         /* turn on full left pan */      found = find_dc;      call fm_turn_off(i);                             /* clear real input i */      if found then return;   end; /* loop over real input channels */end #determine_mt2_type;
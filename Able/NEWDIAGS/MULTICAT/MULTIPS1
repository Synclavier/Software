/***************************************************************************//*****************     Multi-channel routines for poly     *****************//***************************************************************************/route_ps_voices:  proc returns(boolean);   dcl routed boolean;   dcl (bin#,bin_base,i) fixed;   routed = true;   do i = 0 to 255;                /* reset "short" array to no shorts */     mt_short(i) = false;   end;   do bin# = 0 to (#_poly_bins - 1);     bin_base = bin# * 64;     do i = 0 to (#_poly_voices(bin#) - 1);        call poly_turn_on(bin#,i,0,4095);                      /* pan it to left */        pstring('              ');  pnum((bin_base/2)+i,2);  pstring('     ');        routed = routed & search_for_input(ps_map,bin_base+i+i);        call poly_turn_on(bin#,i,4095,4095);                  /* pan it to right */        pstring('     ');        routed = routed & search_for_input(ps_map,bin_base+i+i+1);        call poly_turn_off(bin#,i);        if (i mod 2)=1 then crlf;        flush_term;        Really.Run.Host();     end;   end;   crlf;   return routed;end route_ps_voices;/***************************************************************************/ps_rte_err: proc;                        /* show PS routing errors         */  dcl (r_flag,s_flag,left_col) boolean;  dcl (i,j,card_num)  fixed;  dcl (bin#,bin_base) fixed;  clear_screen;  pos(2,5);               /* clear screen, position cursor */  r_flag = false;                        /* init no-route flag to false   */  s_flag = false;                        /* init short flag to false      */  do bin# = 0 to (#_poly_bins - 1);      /* do for each poly bin          */    bin_base = bin# * 64;    do i = 0 to ((2 * #_poly_voices(bin#)) - 1); /* do for each voice (l&r) */      if ps_map(bin_base + i) = -1 then r_flag = true; /* if map has no-route, set flag */      if ps_map(bin_base + i) = -2 then s_flag = true; /* if map has short, set flag    */    end;  end;  if r_flag then do;                     /* if a voice didn't route then  */    if no_poly_lefts then pstringr('The following mono (right) PS voices did not route:');    else pstringr('The following PS voices did not route:');    pstring('      ');    j = 0;    do bin# = 0 to (#_poly_bins - 1);      /* do for each poly bin          */      bin_base = bin# * 64;      do i = 0 to ((2 * #_poly_voices(bin#)) - 1); /* do for each voice (l&r) */      if (no_poly_lefts & ((i & 1)=0))          then i = i + 1;                      /* skip right channels      */        if ps_map(bin_base+i) = -1 then do;/* if voice didn't route then   */          pnum((bin_base+i)/2,2);          /* display channel number       */          if i & 1 then pstring('R');      /* if right then display 'R'    */          else pstring('L');               /* if left then display 'L'     */          pstring(',');                    /* display comma                */          j = j + 1;                       /* count voices listed on line  */          if j = 16 then do;               /* if 16 on this display line,  */            wchar(bs); wchar(sp);          /* erase last comma displayed   */            crlf; pstring('      '); j = 0;/* carriage return, margin      */          end; /* if */        end; /* if */      end; /* do i */    end; /* do bin# */    wchar(bs); wchar(sp);                /* erase last comma displayed   */    crlf; crlf; pstring('    ');         /* skip a line, margin          */  end; /* if */  if s_flag then do;                     /* if mt inputs shorted then    */    if no_poly_lefts then pstringr('The following mono (right) PS voices routed to more than one MT1 input:');    else pstringr('The following PS voices routed to more than one MT1 input:');    pstring('      ');    j = 0;                               /* count chans on display line  */    do bin# = 0 to (#_poly_bins - 1);      /* do for each poly bin          */      bin_base = bin# * 64;      do i = 0 to ((2 * #_poly_voices(bin#)) - 1); /* do for each voice (l&r) */      if (no_poly_lefts & ((i & 1)=0))          then i = i + 1;                      /* skip right channels      */        if ps_map(bin_base+i) = -2 then do;/* if voice routed > 1 time     */          pnum((bin_base+i)/2,2);          /* display channel number       */          if i & 1 then pstring('R');      /* if right then display 'R'    */          else pstring('L');               /* if left then display  'L'    */          pstring(',');                    /* display comma                */          j = j + 1;                       /* count chans on display line  */          if j = 16 then do;               /* if at end of display line    */            wchar(bs); wchar(sp);          /* erase last comma displayed   */            crlf; pstring('      '); j = 0;/* carriage return, margin      */          end; /* if    */        end; /* if     */      end; /* do i    */    end; /* do bin # */    wchar(bs); wchar(sp);                /* erase last comma displayed  */    crlf; crlf; pstring('    ');         /* skip a line, margin         */    call mt1_short;                      /* display mt1 shorts          */  end; /* if flag */  flush_term;  Really.Run.Host();end ps_rte_err;/***************************************************************************/dcl check_for_mono_voices lit 'call #check_for_mono_voices';#check_for_mono_voices: proc;   dcl i fixed;   dcl (bin#,bin_base) fixed;   no_poly_lefts = true;   do bin# = 0 to (#_poly_bins - 1);      /* do for each poly bin          */     bin_base = bin# * 64;     do i = 0 to ((2 * #_poly_voices(bin#)) - 1) by 2; /* do for each left*/       if ps_map(bin_base + i) <> -1 then no_poly_lefts = false; /* if map has no-route, set flag */     end;   end;   all_poly_rights = true;   do bin# = 0 to (#_poly_bins - 1);      /* do for each poly bin          */     bin_base = bin# * 64;     do i = 1 to ((2 * #_poly_voices(bin#)) - 1) by 2; /* do for each right*/       if ps_map(bin_base + i) < 0  then all_poly_rights = false;      end;   end;   if no_poly_lefts & all_poly_rights then mono_poly_voices = true;     Really.Run.Host();end #check_for_mono_voices;/***************************************************************************/map_poly:proc;  dcl chr fixed;mapps1:;  clear_typeahead;  if total_poly_voices > 0 then do;                        /* poly voices exist */    clear_screen;    pos(1,14); pstring('Poly voice routing, Multi-channel test - ');    display_release_date;     display_map_heading;     if route_ps_voices then pstring('       Poly voices route properly');     else do;       check_for_mono_voices;       if no_poly_lefts & all_poly_rights then do;         pstring('       Poly voices route properly if system has mono voices.');         crlf;         pstring('       (All rights routed properly, no lefts routed)');       end;       else do;         wchar(bel);          pstring('       PS voice routing error, press <RETURN> for more information...');         chr = rchar;         call ps_rte_err;       end;     end;     crlf;     pstring('       Press <RETURN> to continue or any key to map PS voices again...');     chr = rchar;     if chr <> cr then goto MAPPS1;  end; /* poly voices exist */  Really.Run.Host();end map_poly;/***************************************************************************/
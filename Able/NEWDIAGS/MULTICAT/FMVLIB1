/*New England Digital CorporationFM routines for Multi-channel testing programWritten May 1986, WSLModification history:  01/09/89     WSL : Removed from main program into this insert file  *//* Required for stand-alone compilation:   nothing.*//***************************************************************************//***********************  Global literals  *********************************/dcl max_fm_chan      lit '63';                         /* Max FM channels  */dcl ch1_mem          lit  '1';                         /* FM wave memory 1 *//***************************************************************************//***********************  Global variables  ********************************/dcl num_fmv      fixed;          /* number of fm channels (FM voices * 2)  */dcl fm_map(63)   fixed;          /* FM voices mt input #'s                 *//***************************************************************************//***********************     FM routines    ********************************/fm_turn_off:  proc(chan);                           /* turn off FM channel */   dcl chan fixed; /* channel "pair" to be turned off */   write("160") = chan;    /* first do even channel */   write("161") = "10";    write("162") = 255;   write("161") = "11";    write("162") = 255;   write("161") = "12";    write("162") =   0;   write("161") = "02";    write("162") =   0;   write("161") = "01";    write("162") = 255;   write("161") = "00";    write("162") = 255; /* large inc to zero theta  */   write("160") = chan+1;  /* now do odd channel */    write("161") = "10";    write("162") = 255;   write("161") = "11";    write("162") = 255;   write("161") = "12";    write("162") =   0;   write("161") = "00";    write("162") = 255;    write("161") = "13";    write("162") =   0; /* zero out volume register */end fm_turn_off;/***************************************************************************/fm_init: proc; /* turn off all channels */   dcl chan fixed;   do chan = 0 to max_fm_chan by 2;     write("160") = chan;       /* see if chan exists */     if read("160") then call fm_turn_off(chan);       end;end fm_init;/***************************************************************************/dcl set_fm_freq lit 'call #set_fm_freq';#set_fm_freq: proc(chan,num,inc,iadd);   /* pass chan, notenum, inc, adder */   dcl (chan,num,inc,iadd) fixed;   disable; /* don't let this get interrupted */   write("160") = chan;   /* SELECT CARRIER(?) CHANNEL */   write("161") = "02";   write("162") = iadd; /* adder value */    write("161") = "01";   write("162") =  num; /* note number */    write("161") = "00";   write("162") =  inc; /* increment   */   write("160") = chan+1; /* select MODULATOR(?) channel */   write("161") = "02";   write("162") = iadd; /* adder value */    write("161") = "01";   write("162") =  num; /* note number */    write("161") = "00";   write("162") =  inc; /* increment   */    enable;end #set_fm_freq;/***************************************************************************/dcl set_fm_wave_memory lit 'call #set_fm_wave_memory';#set_fm_wave_memory: proc(chan,mem#); /* channel, wave mem # */   dcl (chan,mem#) fixed;   write("160") = chan+1;  /* select channel         */   write("161") =   "04";  /* function code 'TIM'    */   write("162")=MEM#+32;   /* indicate wave memory # */end #set_fm_wave_memory;/***************************************************************************/dcl set_fm_pan lit 'call #set_fm_pan';#set_fm_pan: proc(chan,pan); /* pan was index shift count (ishc) in maxsyn */   dcl (chan,pan) fixed;     /* pan = 0-left,  127? - right */   write("160") = chan;   write("161") = "13";  write("162") = pan;end #set_fm_pan;/***************************************************************************/dcl set_fm_vol lit 'call #set_fm_vol';#set_fm_vol: proc(chan,vol); /* channel, volume 0-255 */   dcl (chan,vol) fixed;   if vol ige 255 then vol = 255;   write("160") = chan+1;                      /* select channel */   write("161") =   "13";  write("162") = VOL; /* 'vol' function */end #set_fm_vol;/***************************************************************************/dcl open_fm_env lit 'call #open_fm_env';#open_fm_env:proc(chan); /* set env attack rate to 0 ms. and limit to max*/  dcl (chan) fixed;  /* adder & divisor = 255 from calcrate(0ms) in maxsyn */  write("160") = chan+1; /* select channel */  write("161") = "11";  write("162") = 255;  /* adder */  write("161") = "10";  write("162") = 255;  /* divisor */  write("161") = "12";  write("162") = 254;end #open_fm_env;/***************************************************************************/count_fm_voices: proc;  dcl (i,j) fixed;  j = 0;  do i = 0 to max_fm_chan;      /* count # of synthesizer channels */    write("160") = i;    if read("160") then j = j+1;  end;  return j; /* number of voices */end count_fm_voices;/***************************************************************************/dcl init_fm_wave lit 'call #init_fm_wave';#init_fm_wave:  proc(wave_type);    dcl wave_type fixed;   dcl (i,j) fixed;   call fm_init;                                /* initialize FM synths    */   do i = 0 to max_fm_chan by 16;                  /* for each bank           */     write("160") = i;                          /* see if chan exists      */     if read("160") then do;             write("160")=i+1;                      /* zero Mem Addr Register  */         write("161")= 6;         write("162") = 0;         write("161")="04";                     /* 'TIM' function          */         write("162")=1+32;                     /* select memory to load   */         write("161")="07";                     /* 'MEM' function          */         do j = 0 to 255;           do case wave_type;             write("162") = 255; /* 0 - dc_low */             write("162") =   0; /* 1 - dc_hi  */             write("162") = (128 + int((127*sin(j*2*3.14159265/256)))) & "HFF";            end; /* case */         end;      end;   end;   /* restore MEM# for channel pair 0/1 */   write("160")=1; write("161")="04"; write("162")=ch1_mem+32;end #init_fm_wave;/***************************************************************************/fm_turn_on:  proc(chan,pan,vol);                            /* turn on FM channel */   dcl (chan,pan,vol) fixed;   dcl i fixed;   /* 180,122,1 are notenum, noteinc, & note add from freq(4400) in maxsyn/.stab-7 */   set_fm_freq(chan,180,122,1);   set_fm_wave_memory(chan,1);                     /* link to wave mem 1 */   set_fm_pan(chan,shl(pan,2));   set_fm_vol(chan,vol);   open_fm_env(chan);   Really.Do.Delay(1); /* delay for voice to start */end fm_turn_on;/***************************************************************************/
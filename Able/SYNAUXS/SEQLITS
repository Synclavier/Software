/* Seqlits - literals for sequencer interface module   Modified:   08/19/91 - PF  - Added definitions for Hz Info Record   06/19/91 - PF  - Added Event.Type.Poly*//* Literals for Event Records                        *//* An "Event" is an action, of any type, that is to occur at a specific    *//* sequencer time.  An event may be a musical note, a real time            *//* controller movement (update), a cue trigger, or the triggering of       *//* a section of a cue.  The Independent Loop Start and End points are      *//* also considered events for our purposes.                                *//* Basically, an Event corresponds to one note record in the sequence.     *//* "Rest Notes", however, are not counted as events.                       *//* An Event Record is a 16-bit array that holds all the information about  *//* an event in a fixed-field format (ie not compacted).  When the event    *//* is stored in a sequence, some information is stored in a 4-word         *//* sequencer note record, and other information is stored in the timbre    *//* area.  Routines in "Seqmod" provide easy ways to to store an entire     *//* event in the sequence, look up info about an event, etc.                *//* Event Records provide a standard format for passing complete events     *//* between procedures, or between computers such as the MAC and Able.      *//* The following literals describe the format of an Event Record when      *//* it is stored in a fixed point array:                                    */dcl Event.Record.Size   lit '100'; /* Number of words needed in array 0-99 */dcl Event.Track#        lit ' 0';  /* absolute sequence track# of event    */dcl Event.Time.Msb      lit ' 1';  /* sequencer time of event (msb)        */dcl Event.Time.Lsb      lit ' 2';  /* sequencer time of event (lsb)        */dcl Event.Time.Count    lit ' 3';  /* sequencer time count (starts with 0) */dcl Event.Type          lit ' 4';  /* holds type of event this is          */dcl    Event.Type.Note      lit '0';  /* 0 = basic musical note trigger    */dcl    Event.Type.Rte       lit '1';  /* 1 = real time effects update      */dcl    Event.Type.Cue       lit '2';  /* 2 = basic cue trigger             */dcl    Event.Type.Ilp       lit '3';  /* 3 = indep loop start or end       */dcl    Event.Type.Event     lit '4';  /* 4 = complex cue event             */dcl    Event.Type.Poly      lit '5';  /* 5 = poly event trigger            */dcl Event.W1            lit ' 5';  /* holds copy of 4 word sequencer       */dcl Event.W2            lit ' 6';  /* note record.  Mostly used for        */dcl Event.W3            lit ' 7';  /* debugging and internal operations.   */dcl Event.W4            lit ' 8';dcl Event.Key#          lit ' 9';  /* holds key # for musical notes        */dcl Event.Cue.Id        lit '10';  /* ID # of underlying cue               */dcl Event.Duration.Msb  lit '11';  /* holds event duration in sequencer    */dcl Event.Duration.Lsb  lit '12';  /* time units                           */dcl Event.Priority      lit '13';  /* priority of this event for layering  */dcl Event.Output        lit '14';  /* holds event specific output routing  */dcl Event.Volume        lit '15';  /* volume for this event,  0 - 1000     */dcl Event.Pan           lit '16';  /* pan info for this event,  -50 to 50  *//* $page - more Event Record Literals                                      */dcl Event.Cue.Name      lit '17';  /* cue name, N.E.D. string format       */dcl Event.Cue.Max.Bytes lit '32';  /* max no. of characters in cue name    */dcl Event.Cue.Max.Words lit '17';  /* 16-bit words needed for longest name */dcl Event.In.Msb        lit '34';  /* holds relative in time from          */dcl Event.In.Lsb        lit '35';  /* specified cue point (samples)        */dcl Event.Out.Msb       lit '36';  /* holds relative out time from         */dcl Event.Out.Lsb       lit '37';  /* specified cue point (samples)        */dcl Event.Mark.Msb      lit '38';  /* holds 'mark offset' point for this   */dcl Event.Mark.Lsb      lit '39';  /* event (samples)                      */dcl Event.Fade.In       lit '40';  /* holds fade in time,  milliseconds    */dcl Event.Fade.Out      lit '41';  /* holds fade out time,  milliseconds   */dcl Event.Control.Bits  lit '42';  /* holds special control bits:          */dcl   Event.Muted           lit ' 1'; /* true if this event is muted       */dcl Event.SVol          lit '43';  /* holds event start volume             */dcl Event.EVol          lit '44';  /* holds event ending volume            */dcl Event.LE.Msb        lit '45';  /* holds loop end time                  */dcl Event.LE.Lsb        lit '46';dcl Event.LL.Msb        lit '47';  /* holds loop length                    */dcl Event.LL.Lsb        lit '48';dcl Event.Caption       lit '49';  /* caption starts here in ned format    */dcl Event.Cap.Max.Bytes lit '96';  /* max no. of characters in caption     */dcl Event.Cap.Max.Words lit '49';  /* 16-bit words to hold longest caption *//* $page - Sequencer Pointers *//* A Sequencer Pointer is a 4-word array that contains enough information  *//* to precisely identify one event in a sequence.   NOTE: the first four   *//* words of an Event Record (defined above) are a Sequence Pointer.        */dcl Spointer.Record.Size  lit '4'; /* Number of words needed in array, 0-3 */dcl Spointer.Track#       lit '0'; /* absolute sequence track# of event    */dcl Spointer.Time.Msb     lit '1'; /* sequencer time of event (msb)        */dcl Spointer.Time.Lsb     lit '2'; /* sequencer time of event (lsb)        */dcl Spointer.Time.Count   lit '3'; /* sequencer time count (starts with 0) *//* $page - status codes                                                    *//* Status codes are returned by most procedures.   They are as follows     */dcl Good.Event.Status     lit  '  0';  /* good status, action completed    *//* Significant Error codes:                                                */dcl Bad.Event.Track#      lit  ' -1';  /* -1 = track # is out of range     */dcl Event.Seq.Err         lit  ' -2';  /* -2 = bad sequence data file      */dcl Event.Noroom#1        lit  ' -3';  /* -3 = no room in note area        */dcl Event.Noroom#2        lit  ' -4';  /* -4 = no room in timbre area      */dcl Event.Noroom#3        lit  ' -5';  /* -5 = limit of 500 events/trk     */dcl Event.Missing         lit  ' -6';  /* -6 = event to delete not there   */dcl Event.Music.Track     lit  ' -7';  /* -7 = can't place Q on music trk  *//* Special codes (may or may not be error)                                 *//* from Get Sequencer Event Information:                                   */dcl Get.Info.Next         lit  ' 1';  /*  1 = not found, got next one      */dcl Get.Info.Empty        lit  ' 2';  /*  2 = track was empty              */dcl Get.Info.EOT          lit  ' 3';  /*  3 = end of track reached before  */                                      /*      specified note was found     *//* $page - Literals for output of basic snapshot routine     */dcl index.start       lit '240';  /* start of index for ordering recorder display */dcl  snap#notes       lit '  1';  /* take snap shot of notes */dcl  snap#rtes        lit '  2';  /* take snap shot of rtes  */dcl  snap#ilps        lit '  4';  /* take snap shot of ilps  */dcl  snap#begs        lit '  8';  /* set screen begin/end    */dcl  snap#runs        lit ' 16';  /* run syns before shuffle */                                  /* snapshot                */dcl  snap#nobackup    lit ' 32';  /* take precise snapshot   */                                  /* of specified time       *//* Hz Info Record Literals                                                 *//* The info record is used to return information from the                  *//* routine Get.Event.HZ.Information.                                       */dcl Hzinfo.Record.Size  lit '14';  /* Number of words needed in array 0-13 */dcl Hzinfo.delay     lit ' 0';   /* envelope delay          */dcl Hzinfo.noteinc   lit ' 1';dcl Hzinfo.notenum   lit ' 2';dcl Hzinfo.noteadd   lit ' 3';dcl Hzinfo.ms.msb    lit ' 4';   /* mark start offset       */dcl Hzinfo.ms.lsb    lit ' 5';dcl Hzinfo.onloop    lit ' 6';   /* loop on/off boolean     */dcl Hzinfo.extend    lit ' 7';   /* scrub beyond event bool */dcl Hzinfo.len.msb   lit ' 8';   /* event length            */dcl Hzinfo.len.lsb   lit ' 9';dcl Hzinfo.tlen.msb  lit '10';   /* total (audio) length    */dcl Hzinfo.tlen.lsb  lit '11';dcl Hzinfo.llen.msb  lit '12';   /* loop length             */dcl Hzinfo.llen.lsb  lit '13';
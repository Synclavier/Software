/* Block Memory Management Literals */   /* Memory Definition */   /* The routines can use external or poly memory. The memory space can      be determined at run time using MDEVI as a variable or compile time      using MDEVI as a literal. It is about 20% faster to use a literal,      but then only one memory space can be used.      To use literals, the variables USINGPOLY and MDEVI must be changed      as shown below and all modules using the memory block routines      must be recompiled.   *//*    dcl UsingPoly     lit '0'; */ /* use external memory *//*   dcl mdevi         lit 'mdi'; *//*   dcl UsingPoly     lit '1'; */ /* use poly memory *//*   dcl mdevi         lit 'psd'; */   /* Pointer Definition */   /* A pointer to a word in external or poly memory is defined      using a two-word array, as follows:        15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0      +---------------------------------------------------------------+   0: |  Bin  | 0 | 0 |   Word Offset within Sector  |    MS Sector   |      |---------------------------------------------------------------|   1: |                          LS Sector                            |      +---------------------------------------------------------------+   */   dcl ptr$msw       lit '0'; /* MS word of pointer */   dcl ptr$lsw       lit '1'; /* LS word of pointer */   dcl ptr#len       lit '2'; /* no. words used by pointer */   /* Block Definition */   /* Blocks of memory are pointed to by pointers. The format of a      memory block is given below:      +------------------------------+   0: | No. words allocated to block |      |------------------------------|   1: | No. words actually used      |      |------------------------------|   2: | MS pointer to data           |      |------------------------------|   3: | LS pointer to data           |      |------------------------------|   4: | Block data                   |      |------------------------------|                   .                   .   n:              .   */   dcl mem$alloc     lit '0'; /* no. words allocated */   dcl mem$used      lit '1'; /* no. words used */   dcl mem$ptr       lit '2'; /* pointer to another block */   dcl mem$data      lit '4'; /* start of data field */   dcl mem#len       lit '4'; /* no. words used for block control variables */   /* Tree Definition */   /* A node on a balanced binary tree is defined using the following      fields in addition to the previously defined memory block fields:      +------------------------------+   4: | MS pointer to left subtree   |      |------------------------------|   5: | LS pointer to left subtree   |      |------------------------------|   6: | MS pointer to right subtree  |      |------------------------------|   7: | LS pointer to right subtree  |      |------------------------------|   8: | Red/Black flag               |      |------------------------------|   9: | Length of primary key        |      |------------------------------|   10:| Primary key data             |      |------------------------------|                   .                   .   n:              .   */   dcl tree$leftptr  lit '4'; /* pointer to left subtree */   dcl tree$rightptr lit '6'; /* pointer to right subtree */   dcl tree$red      lit '8'; /* red/black flag */   dcl tree$key      lit '9'; /* start of key field */   dcl tree#len      lit '5'; /* no. words used for tree control variables */   /* TreeInsert return codes */   dcl NodeCreated   lit '0';  /* new tree node created */   dcl NodeFound     lit '1';  /* tree node found */   dcl NoMoreRoom    lit '-1'; /* no room for new memory blocks */
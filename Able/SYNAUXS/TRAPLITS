/* TRAPLITS  $TITLE  Literals for Protocol Packet Definition / Access   Modified:   02/04/92 - cj  - New sync messages for DTD/DSP   12/15/91 - PF  - Added some more defs to P#Data_Transfer   12/07/91 - PF  - Added Max_Block_Length   11/14/91 - PF  - Added P#Data_Transfer packet super and sub-type defs   11/04/91 - PF  - Added 'Quick Update' feature   10/10/91 - MWH - Add "ping" message for protocol handshaking   09/20/91 - CJ  - Added in time offset to cue.data.by.id record   04/26/91 - PF  - made T#MIDInet_Filename one byte longer   03/13/91 - KJC - made L#Configuration one byte longer; added T#Set_Ext_Rec_Triggers   01/10/91 - tss - made L#Start_Trk_Snapshot two bytes longer   01/10/91 - MWH - Report which tracks have had new notes   11/08/90 - MWH - Reformat DS routines   10/30/90 - MWH - Added scrub cue by time & channel inactive messages   10/22/90 - CJ  - added directory messages   08/27/90 - PF  - Support all MIDI controllers   07/12/90 - cj  - changed length of mark_time message   07/11/90 - cj  - added literals for raw SMPTE time message   05/10/90 - cj  - added messages to get at cue info by id   03/07/90 - PF  - added Req_Valid_Tracks and Valid_Tracks   01/03/90 - MWH - Request all routing info is longer to fix a bug   12/14/89 - MWH - Move "AEE Notice" from Utilities to Events super-type   11/09/89 - MWH - Lengthen current time message for move speed   10/06/89 - MWH - Enhance/optimize sequence snapshot for Editview   10/04/89 - cj  - added literals for T#Data_Area_Record   09/28/89 - MWH - Clean up a few names for consistency with the MAC   09/11/89 - MWH - Fix a few lengths for MIDInet changes   08/24/89 - PF  - Added MIDInet sync out path to T#Time_Sync   08/24/89 - PF  - Deleted T#MIDI_Input_Routing message   08/24/89 - PF  - Added T#All_Notes_Off, T#Clear_MIDI_Routing, T#MIDInet_Filename           08/16/89 - MWH - Rework the protocol for release 2.2   07/31/89 - cj  - Added literals for CMX recording messages   07/26/89 - TSS - Added P#Clavier packet super- and sub-type defs   07/20/89 - cj  - Added inc.trap.dbug literal   07/14/89 - MWH - Add new packet definitions for event handling & CMX   06/26/89 - PF  - Added Max_Packet_Length and T#MIDI_Bulk literals   06/20/89 - MWH - Add sequence scrubbing   06/12/89 - MWH - Add new protocol messages for MAC event editor window   04/27/89 - MWH - Support for multiple D115 boards & channels; timeouts   03/21/89 - MWH - Shorten Event Status Bulk to be only "New Seq Info"   01/27/89 - MWH - Remove ECHO packet type; fix some Network_Level lengths   01/24/89 - MWH - Undo temp kludge to event status messages (was for MIDI)   01/13/89 - PF  - Monster MIDI code   01/11/89 - MWH - Add Auto Punch feature   12/21/88 - MWH - Add several new messages   11/29/88 - MWH - Simplify track setup messages   11/15/88 - MWH - Add group storage on Synclavier plus many new messages   11/09/88 - MWH - Clean up messages and update lengths   09/26/88 - MWH - Add individual message types & lengths   09/22/88 - TSS - Added CB#STATUS & CW#STATUS literals   09/21/88 - MWH - Created file*/dcl inc.trap.dbug        lit '1';  /* include debug code         *//* Specific Packet Type Codes      *//* Super-types first (high byte)   */dcl P#Base_Type          lit ' 1'; /* Regular packets start at 1 */dcl P#Clav_Base_Type     lit '32'; /* Clavier packets start at 32 */dcl P#Clavier_Emulate    lit '(P#Clav_Base_Type + 1)'; /* Clavier Button Panel Emulation *//* DESCRIPTION OF P#Clavier_Emulate PACKETS: */dcl CB#Status  lit '5';  /* subtype code for Clavier Emulation BUTTON Status packet */                         /* sent from ABLE to external devices */dcl CW#Status  lit '10'; /* subtype code for Clavier Emulation WINDOW Status packet */                         /* sent from ABLE to external devices *//* Begin of RS422 Type Codes  */dcl P#Network_Level      lit '(P#Base_Type +  0)'; /* Network (reserved)   */dcl P#Playback           lit '(P#Base_Type +  1)'; /* Playback             */dcl P#Creation_Recording lit '(P#Base_Type +  2)'; /* Creation / Recording */dcl P#Sequence_Editing   lit '(P#Base_Type +  3)'; /* Sequence Editing     */dcl P#Sound_Editing      lit '(P#Base_Type +  4)'; /* Sound Editing        */dcl P#Archival           lit '(P#Base_Type +  5)'; /* Archival             */dcl P#Retrieval          lit '(P#Base_Type +  6)'; /* Retrieval            */dcl P#Time_Base          lit '(P#Base_Type +  7)'; /* Time Base            */dcl P#Track_Setup        lit '(P#Base_Type +  8)'; /* Track Setup          */dcl P#Utility            lit '(P#Base_Type +  9)'; /* Utility              */dcl P#Events             lit '(P#Base_Type + 10)'; /* Events               */dcl P#MIDI               lit '(P#Base_Type + 11)'; /* MIDI                 */dcl P#Clavier            lit '(P#Base_Type + 12)'; /* Clavier on RS422     */dcl P#Mixer              lit '(P#Base_Type + 13)'; /* Mixer Control        *//*                                           14       reserved */dcl P#Data_Transfer      lit '(P#Base_Type + 15)'; /* Data Transfer        */dcl P#Num_Packet_Types   lit '16';   /* Number of types of packet defined  */dcl P#LOCAL              lit '240';                /* D115D to Able msg    */dcl Able_Packet_Head     lit '4';    /* Size in bytes of Able length/dest  */dcl Max_Packet_Length    lit '66';   /* Maximum packet size in bytes       */dcl Max_Block_Length     lit '10000';/* Maximum block transfer size in bytes for use with XFER.PTR *//* Now, declare both super and sub-TYPEs as they are packed into one word. *//* Also, declare the TOTAL ABLE LENGTH of each packet here.  This is the   *//* standard length as carried on the network, plus 4 bytes added locally.  *//* Full P#Type words for P#Network_Level packets */dcl T#Net_Crash_Part1         lit '(shl(P#Network_Level,8)      |  16)';  /* Machine Crashed (part-1) */dcl L#Net_Crash_Part1         lit '(Able_Packet_Head            +  66)';dcl T#Net_Crash_Part2         lit '(shl(P#Network_Level,8)      |  17)';  /* Machine Crashed (part-2) */dcl L#Net_Crash_Part2         lit '(Able_Packet_Head            +  66)';dcl T#Net_Crash_Request       lit '(shl(P#Network_Level,8)      |  20)';  /* Able requesting a maching reload */dcl L#Net_Crash_Request       lit '(Able_Packet_Head            +   2)';dcl T#Net_Reload_Base_Addr    lit '(shl(P#Network_Level,8)      |  21)';  /* Starting address to load on 68000 */dcl L#Net_Reload_Base_Addr    lit '(Able_Packet_Head            +   6)';dcl T#Net_Reload_Data         lit '(shl(P#Network_Level,8)      |  22)';  /* Reload data chunk */dcl L#Net_Reload_Data         lit '(Able_Packet_Head            +  66)';dcl T#Net_Reload_Start_Addr   lit '(shl(P#Network_Level,8)      |  23)';  /* Go at this address (reload complete) */dcl L#Net_Reload_Start_Addr   lit '(Able_Packet_Head            +   6)';dcl T#Net_Here_Is             lit '(shl(P#Network_Level,8)      |  32)';  /* Here am I */dcl L#Net_Here_Is             lit '(Able_Packet_Head            +   3)';dcl T#Net_Relay_Data          lit '(shl(P#Network_Level,8)      |  33)';  /* Forward message on to another peripheral */dcl L#Net_Relay_Data          lit '(Able_Packet_Head            +  68)';dcl T#Net_Routing_Status      lit '(shl(P#Network_Level,8)      |  34)';  /* Publish network connectivity */dcl L#Net_Routing_Status      lit '(Able_Packet_Head            +   2)';dcl T#Net_Block               lit '(shl(P#Network_Level,8)      |  48)';  /* Multiple Block Message       */dcl T#Net_Block_Start            lit '1'; /* bit for start block */dcl T#Net_Block_Last             lit '2'; /* bit for end block   *//* Full P#Type words for P#Playback packets */dcl T#Play                    lit '(shl(P#Playback,8)           |   0)';  /* Play */dcl L#Play                    lit '(Able_Packet_Head            +   2)';dcl T#Stop                    lit '(shl(P#Playback,8)           |   1)';  /* Stop */dcl L#Stop                    lit '(Able_Packet_Head            +   2)';dcl T#Rewind                  lit '(shl(P#Playback,8)           |   2)';  /* Rewind */dcl L#Rewind                  lit '(Able_Packet_Head            +   2)';dcl T#Fast_Forward            lit '(shl(P#Playback,8)           |   3)';  /* Fast forward */dcl L#Fast_Forward            lit '(Able_Packet_Head            +   2)';dcl T#Locate                  lit '(shl(P#Playback,8)           |   4)';  /* Locate */dcl L#Locate                  lit '(Able_Packet_Head            +  10)';dcl T#Req_Motion_Status       lit '(shl(P#Playback,8)           |   5)';  /* Get motion status */dcl L#Req_Motion_Status       lit '(Able_Packet_Head            +   4)';dcl T#Motion_Status           lit '(shl(P#Playback,8)           |   6)';  /* Motion status */dcl L#Motion_Status           lit '(Able_Packet_Head            +   6)';dcl T#Play_Cue                lit '(shl(P#Playback,8)           |  16)';  /* Play Cue */dcl L#Play_Cue                lit '(Able_Packet_Head            +   2)';dcl T#Play_Edit               lit '(shl(P#Playback,8)           |  17)';  /* Play Edit */dcl L#Play_Edit               lit '(Able_Packet_Head            +   2)';dcl T#Play_From               lit '(shl(P#Playback,8)           |  18)';  /* Play From anchor point */dcl L#Play_From               lit '(Able_Packet_Head            +   7)';dcl T#Play_To                 lit '(shl(P#Playback,8)           |  19)';  /* Play to anchor point */dcl L#Play_To                 lit '(Able_Packet_Head            +   7)';dcl T#Pause_Continue          lit '(shl(P#Playback,8)           |  20)';  /* Pause/Continue current cue */dcl L#Pause_Continue          lit '(Able_Packet_Head            +   2)';dcl T#Stop_DTD                lit '(shl(P#Playback,8)           |  21)';dcl L#Stop_DTD                lit '(Able_Packet_Head            +   2)';dcl T#Start_Scrubbing         lit '(shl(P#Playback,8)           |  32)';  /* Stack sequence events to scrub */dcl L#Start_Scrubbing         lit '(Able_Packet_Head            +  44)';dcl T#Scrub_Seq               lit '(shl(P#Playback,8)           |  33)';  /* Scrub to a new time */dcl L#Scrub_Seq               lit '(Able_Packet_Head            +   6)';dcl T#Stop_Scrubbing          lit '(shl(P#Playback,8)           |  34)';  /* Stop scrubbing */dcl L#Stop_Scrubbing          lit '(Able_Packet_Head            +   2)';dcl T#Scrub_Cue               lit '(shl(P#Playback,8)           |  35)';  /* Move shuttle knob */dcl L#Scrub_Cue               lit '(Able_Packet_Head            +   5)';dcl T#Scrub_Cue_By_Time       lit '(shl(P#Playback,8)           |  36)';  /* Scrub by absolute time */dcl L#Scrub_Cue_By_Time       lit '(Able_Packet_Head            +   6)';dcl T#Play_Event              lit '(shl(P#Playback,8)           |  48)';dcl L#Play_Event              lit '(Able_Packet_Head            +  10)';dcl T#Req_Audition_Mode       lit '(shl(P#Playback,8)           |  64)';dcl L#Req_Audition_Mode       lit '(Able_Packet_Head            +   4)';dcl T#Audition_Mode           lit '(shl(P#Playback,8)           |  65)';dcl L#Audition_Mode           lit '(Able_Packet_Head            +   5)';dcl T#Set_Audition_Mode       lit '(shl(P#Playback,8)           |  66)';dcl L#Set_Audition_Mode       lit '(Able_Packet_Head            +   3)';dcl T#DS_Audition_Status      lit '(shl(P#Playback,8)           |  81)';dcl L#DS_Audition_Status      lit '(Able_Packet_Head            +  18)';/* Full P#Type words for P#Creation_Recording packets */dcl T#Start_Record            lit '(shl(P#Creation_Recording,8) |   0)';  /* Start record */dcl L#Start_Record            lit '(Able_Packet_Head            +   2)';dcl T#Start_Punch             lit '(shl(P#Creation_Recording,8) |   1)';  /* Start punch */dcl L#Start_Punch             lit '(Able_Packet_Head            +   2)';dcl T#Stop_Record             lit '(shl(P#Creation_Recording,8) |   2)';  /* Stop record */dcl L#Stop_Record             lit '(Able_Packet_Head            +   2)';dcl T#Req_Auto_Punch_Info     lit '(shl(P#Creation_Recording,8) |  16)';dcl L#Req_Auto_Punch_Info     lit '(Able_Packet_Head            +   4)';dcl T#Auto_Punch_Info         lit '(shl(P#Creation_Recording,8) |  17)';dcl L#Auto_Punch_Info         lit '(Able_Packet_Head            +  18)';dcl T#Set_Auto_Punch_Mode     lit '(shl(P#Creation_Recording,8) |  18)';  /* Set auto-punch mode */dcl L#Set_Auto_Punch_Mode     lit '(Able_Packet_Head            +   3)';dcl T#Set_Rehearse_Mode       lit '(shl(P#Creation_Recording,8) |  19)';  /* Set rehearse mode */dcl L#Set_Rehearse_Mode       lit '(Able_Packet_Head            +   3)';dcl T#Set_Auto_Punch_Time     lit '(shl(P#Creation_Recording,8) |  20)';  /* Set an auto-punch time */dcl L#Set_Auto_Punch_Time     lit '(Able_Packet_Head            +   7)';dcl T#Req_Recording_Time      lit '(shl(P#Creation_Recording,8) |  32)';dcl L#Req_Recording_Time      lit '(Able_Packet_Head            +  22)';dcl T#Recording_Time_Avail    lit '(shl(P#Creation_Recording,8) |  33)';dcl L#Recording_Time_Avail    lit '(Able_Packet_Head            +  12)';dcl T#Req_DTD_Rec_State       lit '(shl(P#Creation_Recording,8) |  34)';dcl L#Req_DTD_Rec_State       lit '(Able_Packet_Head            +   4)';dcl T#DTD_Rec_State           lit '(shl(P#Creation_Recording,8) |  35)';dcl L#DTD_Rec_State           lit '(Able_Packet_Head            +   6)';dcl T#Set_DTD_Rec_Ready       lit '(shl(P#Creation_Recording,8) |  36)';dcl L#Set_DTD_Rec_Ready       lit '(Able_Packet_Head            +   3)';dcl T#Arm_For_Man_Alloc_Rec   lit '(shl(P#Creation_Recording,8) |  37)';dcl L#Arm_For_Man_Alloc_Rec   lit '(Able_Packet_Head            +   6)';dcl T#Arm_For_Seq_Trig_Rec    lit '(shl(P#Creation_Recording,8) |  38)';dcl L#Arm_For_Seq_Trig_Rec    lit '(Able_Packet_Head            +  11)';dcl T#Arm_For_Punch_In_Rec    lit '(shl(P#Creation_Recording,8) |  39)';dcl L#Arm_For_Punch_In_Rec    lit '(Able_Packet_Head            +  11)';dcl T#Set_Ext_Rec_Triggers    lit '(shl(P#Creation_Recording,8) |  40)';dcl L#Set_Ext_Rec_Triggers    lit '(Able_Packet_Head            +  14)';dcl T#Erase_Cue_For_Retake    lit '(shl(P#Creation_Recording,8) |  48)';dcl L#Erase_Cue_For_Retake    lit '(Able_Packet_Head            +   2)';dcl T#Block_Cue               lit '(shl(P#Creation_Recording,8) |  49)';dcl L#Block_Cue               lit '(Able_Packet_Head            +   2)';/* Full P#Type words for P#Sequence_Editing packets */dcl T#Save_Sequence           lit '(shl(P#Sequence_Editing,8)   |   0)';  /* Save snapshot of current sequence */dcl L#Save_Sequence           lit '(Able_Packet_Head            +   2)';dcl T#Restore_Sequence        lit '(shl(P#Sequence_Editing,8)   |   1)';  /* Restore to .UNDOSEQ */dcl L#Restore_Sequence        lit '(Able_Packet_Head            +   2)';dcl T#Erase_Sequence          lit '(shl(P#Sequence_Editing,8)   |   2)';  /* Erase the whole sequence */dcl L#Erase_Sequence          lit '(Able_Packet_Head            +   2)';dcl T#Data_Area_Record        lit '(shl(P#Sequence_Editing,8)   |   4)';  /* Event description, w/o name or caption */dcl L#Data_Area_Record        lit '(Able_Packet_Head            +  10)';dcl T#Able_Seq_Path			  lit '(shl(P#Sequence_Editing,8)   |   9)';  /* Able seq path text string from aud-mot */dcl L#Able_Seq_Path           lit '(Able_Packet_Head            +   7)';dcl T#Recall_Path_Sequence	  lit '(shl(P#Sequence_Editing,8)   |  11)';  /* Recall seq specified by path */dcl T#Store_Path_Sequence	  lit '(shl(P#Sequence_Editing,8)   |  12)';  /* Store sequence into able path */dcl T#Scroll_Sequence_Path	  lit '(shl(P#Sequence_Editing,8)   |  13)';  /* Scroll seq path forward or backwards */dcl T#Req_Seq_Snapshot        lit '(shl(P#Sequence_Editing,8)   |  16)';  /* Ask for snapshot of events on tracks */dcl L#Req_Seq_Snapshot        lit '(Able_Packet_Head            +  50)';dcl T#Req_Seq_Event           lit '(shl(P#Sequence_Editing,8)   |  17)';dcl L#Req_Seq_Event           lit '(Able_Packet_Head            +  12)';dcl T#Req_Default_Event       lit '(shl(P#Sequence_Editing,8)   |  18)';  /* Request the default values for an event */dcl L#Req_Default_Event       lit '(Able_Packet_Head            +   6)';dcl T#Start_Seq_Snapshot      lit '(shl(P#Sequence_Editing,8)   |  19)';  /* Start of newest event data for this track */dcl L#Start_Seq_Snapshot      lit '(Able_Packet_Head            +  50)';dcl T#Start_Trk_Snapshot      lit '(shl(P#Sequence_Editing,8)   |  20)';  /* Start of newest event data for this track */dcl L#Start_Trk_Snapshot      lit '(Able_Packet_Head            +   8)';dcl T#Sequence_Event          lit '(shl(P#Sequence_Editing,8)   |  21)';  /* Event description, w/o name or caption */dcl L#Sequence_Event          lit '(Able_Packet_Head            +  66)';dcl T#End_Trk_Snapshot        lit '(shl(P#Sequence_Editing,8)   |  22)';  /* The last event data packet for this track has already been sent */dcl L#End_Trk_Snapshot        lit '(Able_Packet_Head            +   6)';dcl T#End_Seq_Snapshot        lit '(shl(P#Sequence_Editing,8)   |  23)';dcl L#End_Seq_Snapshot        lit '(Able_Packet_Head            +   4)';dcl T#Place_Seq_Event         lit '(shl(P#Sequence_Editing,8)   |  32)';dcl L#Place_Seq_Event         lit '(Able_Packet_Head            +  64)';dcl T#Change_Event_Item       lit '(shl(P#Sequence_Editing,8)   |  33)';  /* Change an item in an event */dcl L#Change_Event_Item       lit '(Able_Packet_Head            +  15)';dcl T#Req_Event_String        lit '(shl(P#Sequence_Editing,8)   |  34)';  /* Request a string for an event or track */dcl L#Req_Event_String        lit '(Able_Packet_Head            +  14)';dcl T#Event_String            lit '(shl(P#Sequence_Editing,8)   |  35)';  /* The string data for an event or track */dcl L#Event_String            lit '(Able_Packet_Head            +  15)';dcl T#Set_Event_String        lit '(shl(P#Sequence_Editing,8)   |  36)';dcl L#Set_Event_String        lit '(Able_Packet_Head            +  13)';dcl T#Delete_Event            lit '(shl(P#Sequence_Editing,8)   |  37)';  /* Delete an event from a track */dcl L#Delete_Event            lit '(Able_Packet_Head            +  10)';dcl T#Recall_Event_For_Edit   lit '(shl(P#Sequence_Editing,8)   |  38)';dcl L#Recall_Event_For_Edit   lit '(Able_Packet_Head            +  10)';dcl T#Request_Changed_Trks    lit '(shl(P#Sequence_Editing,8)   |  39)';dcl L#Request_Changed_Trks    lit '(Able_Packet_Head            +  4)';dcl T#Changed_Trks            lit '(shl(P#Sequence_Editing,8)   |  40)';dcl L#Changed_Trks            lit '(Able_Packet_Head            +  38)';dcl T#Delete_Trk_Time         lit '(shl(P#Sequence_Editing,8)   |  48)';  /* Remove time from a track */dcl L#Delete_Trk_Time         lit '(Able_Packet_Head            +  12)';dcl T#Insert_Trk_Time         lit '(shl(P#Sequence_Editing,8)   |  49)';  /* Add time to a track */dcl L#Insert_Trk_Time         lit '(Able_Packet_Head            +  12)';dcl T#Place_Cue               lit '(shl(P#Sequence_Editing,8)   |  64)';  /* Place cue in sequence */dcl L#Place_Cue               lit '(Able_Packet_Head            +   2)';/* Full P#Type words for P#Sound_Editing packets */dcl T#Req_Cue_Data            lit '(shl(P#Sound_Editing,8)      |   0)';  /* Get reel info w/o selecting */dcl L#Req_Cue_Data            lit '(Able_Packet_Head            +   5)';dcl T#Cue_Data                lit '(shl(P#Sound_Editing,8)      |   1)';  /* Set/Gets current cue data */dcl L#Cue_Data                lit '(Able_Packet_Head            +  61)';dcl T#Set_Cue_Times           lit '(shl(P#Sound_Editing,8)      |   2)';dcl L#Set_Cue_Times           lit '(Able_Packet_Head            +   7)';dcl T#Set_Cue_Tracks          lit '(shl(P#Sound_Editing,8)      |   3)';dcl L#Set_Cue_Tracks          lit '(Able_Packet_Head            +  21)';dcl T#Set_Place_Cue_Track     lit '(shl(P#Sound_Editing,8)      |   4)';dcl L#Set_Place_Cue_Track     lit '(Able_Packet_Head            +   4)';dcl T#Set_Place_Mode          lit '(shl(P#Sound_Editing,8)      |   5)';dcl L#Set_Place_Mode          lit '(Able_Packet_Head            +   3)';dcl T#Req_Cue_String          lit '(shl(P#Sound_Editing,8)      |   6)';dcl L#Req_Cue_String          lit '(Able_Packet_Head            +   7)';dcl T#Cue_String              lit '(shl(P#Sound_Editing,8)      |   7)';dcl L#Cue_String              lit '(Able_Packet_Head            +   9)';dcl T#Set_Cue_String          lit '(shl(P#Sound_Editing,8)      |   8)';dcl L#Set_Cue_String          lit '(Able_Packet_Head            +   6)';dcl T#Cue_Data_By_ID          lit '(shl(P#Sound_Editing,8)      |  10)';dcl L#Cue_Data_By_ID          lit '(Able_Packet_Head            +  64)';dcl T#Cue_String_By_ID        lit '(shl(P#Sound_Editing,8)      |  12)';dcl L#Cue_String_By_ID        lit '(Able_Packet_Head            +  11)';dcl T#Copy_Cue_Memory         lit '(shl(P#Sound_Editing,8)      |  16)';  /* Copy between current cue and cue memories */dcl L#Copy_Cue_Memory         lit '(Able_Packet_Head            +   5)';dcl T#Cut_From_Cue            lit '(shl(P#Sound_Editing,8)      |  17)';  /* Cut sound to a reel */dcl L#Cut_From_Cue            lit '(Able_Packet_Head            +   3)';dcl T#Paste_Into_Cue          lit '(shl(P#Sound_Editing,8)      |  18)';  /* Paste sound from a reel */dcl L#Paste_Into_Cue          lit '(Able_Packet_Head            +   4)';dcl T#Chain_To_Cue            lit '(shl(P#Sound_Editing,8)      |  19)';  /* Chain sound from a reel */dcl L#Chain_To_Cue            lit '(Able_Packet_Head            +   3)';dcl T#Fill_Cue                lit '(shl(P#Sound_Editing,8)      |  20)';  /* Fill sound from a reel */dcl L#Fill_Cue                lit '(Able_Packet_Head            +   4)';dcl T#Slide_Cue               lit '(shl(P#Sound_Editing,8)      |  21)';  /* Slide cue */dcl L#Slide_Cue               lit '(Able_Packet_Head            +   8)';dcl T#Select_Reel             lit '(shl(P#Sound_Editing,8)      |  22)';  /* Select reel to edit */dcl L#Select_Reel             lit '(Able_Packet_Head            +   3)';/* Full P#Type words for P#Archival packets */dcl T#Arch_Store_Cue          lit '(shl(P#Archival,8)           |   0)';   /* Save Current Cue */dcl L#Arch_Store_Cue          lit '(Able_Packet_Head            +   2)';/* Full P#Type words for P#Retrieval packets */dcl T#Req_Dir_Key_By_Name     lit '(shl(P#Retrieval,8)          |  0)';dcl L#Req_Dir_Key_By_Name     lit '(Able_Packet_Head            + 11)';dcl T#Req_Dir_Key_By_Index    lit '(shl(P#Retrieval,8)          |  1)';dcl L#Req_Dir_Key_By_Index    lit '(Able_Packet_Head            + 13)';dcl T#Req_Dir_Key_By_ID       lit '(shl(P#Retrieval,8)          |  2)';dcl L#Req_Dir_Key_By_ID       lit '(Able_Packet_Head            + 13)';dcl T#Directory_Key           lit '(shl(P#Retrieval,8)          |  3)';  /* Directory information  */dcl L#Directory_key           lit '(Able_Packet_Head            + 21)';dcl T#Directory_Info          lit '(shl(P#Retrieval,8)          |  9)';  /* Directory information  */dcl L#Directory_Info          lit '(Able_Packet_Head            + 18)';dcl T#Directory_Entries       lit '(shl(P#Retrieval,8)          | 11)';  /* Directory Entries      */dcl T#DS_Open_Status          lit '(shl(P#Retrieval,8)          | 17)';dcl L#DS_Open_Status          lit '(Able_Packet_Head            + 24)';dcl T#DS_Transfer             lit '(shl(P#Retrieval,8)          | 20)';dcl T#DS_Copy_Status          lit '(shl(P#Retrieval,8)          | 23)';dcl L#DS_Copy_Status          lit '(Able_Packet_Head            + 22)';dcl T#DS_Activate_Status      lit '(shl(P#Retrieval,8)          | 25)';dcl L#DS_Activate_Status      lit '(Able_Packet_Head            + 18)';dcl T#Update_Entries          lit '(shl(P#Retrieval,8)          | 33)';/* Full P#Type words for P#Time_Base packets */dcl T#Current_Time            lit '(shl(P#Time_Base,8)          |   0)';  /* current seq AND dtd time */dcl L#Current_Time            lit '(Able_Packet_Head            +  14)';dcl T#Req_Time_Parameters     lit '(shl(P#Time_Base,8)          |   1)';dcl L#Req_Time_Parameters     lit '(Able_Packet_Head            +   4)';dcl T#Time_Parameters         lit '(shl(P#Time_Base,8)          |   2)';dcl L#Time_Parameters         lit '(Able_Packet_Head            +  23)';dcl T#Set_Time_Parameter      lit '(shl(P#Time_Base,8)          |   3)';dcl L#Set_Time_Parameter      lit '(Able_Packet_Head            +   7)';dcl T#Req_Sync_Mode           lit '(shl(P#Time_Base,8)          |  16)';dcl L#Req_Sync_Mode           lit '(Able_Packet_Head            +   4)';dcl T#Sync_Mode               lit '(shl(P#Time_Base,8)          |  17)';dcl L#Sync_Mode               lit '(Able_Packet_Head            +   8)';dcl T#Set_Sync_Mode           lit '(shl(P#Time_Base,8)          |  18)';dcl L#Set_Sync_Mode           lit '(Able_Packet_Head            +   4)';dcl T#Set_MIDI_Sync_Out       lit '(shl(P#Time_Base,8)          |  19)';dcl L#Set_MIDI_Sync_Out       lit '(Able_Packet_Head            +   3)';dcl T#Set_MIDINet_Sync_Out    lit '(shl(P#Time_Base,8)          |  20)';dcl L#Set_MIDINet_Sync_Out    lit '(Able_Packet_Head            +   3)';dcl T#Take_Current_Time       lit '(shl(P#Time_Base,8)          |  21)';dcl L#Take_Current_Time       lit '(Able_Packet_Head            +   3)';dcl T#Req_Mark_Time           lit '(shl(P#Time_Base,8)          |  22)';dcl L#Req_Mark_Time           lit '(Able_Packet_Head            +   4)';dcl T#Mark_Time               lit '(shl(P#Time_Base,8)          |  23)';dcl L#Mark_Time               lit '(Able_Packet_Head            +  10)';dcl T#Set_Mark_Time           lit '(shl(P#Time_Base,8)          |  24)';dcl L#Set_Mark_Time           lit '(Able_Packet_Head            +   6)';dcl T#Cur_SMPTE_Time          lit '(shl(P#Time_Base,8)          |  26)';dcl L#Cur_SMPTE_Time          lit '(Able_Packet_Head            +  10)';dcl T#Valid_Saved_Marks       lit '(shl(P#Time_Base,8)          |  28)';dcl L#Valid_Saved_Marks       lit '(Able_Packet_Head            +  38)';dcl T#Saved_Mark              lit '(shl(P#Time_Base,8)          |  30)';dcl L#Saved_Mark              lit '(Able_Packet_Head            +  12)';dcl T#DTD_DSP_Sync_Mode       lit '(shl(P#Time_Base,8)          |  49)';dcl L#DTD_DSP_Sync_Mode       lit '(Able_Packet_Head            +   6)';/* Full P#Type words for P#Track_Setup packets */dcl T#Req_Track_States        lit '(shl(P#Track_Setup,8)        |   0)';dcl L#Req_Track_States        lit '(Able_Packet_Head            +   5)';dcl T#Track_States            lit '(shl(P#Track_Setup,8)        |   1)';dcl L#Track_States            lit '(Able_Packet_Head            +  57)';dcl T#Set_Track_State         lit '(shl(P#Track_Setup,8)        |   2)';dcl L#Set_Track_State         lit '(Able_Packet_Head            +   7)';dcl T#Set_Mult_Tracks         lit '(shl(P#Track_Setup,8)        |   3)';dcl L#Set_Mult_Tracks         lit '(Able_Packet_Head            +  56)';dcl T#Clear_All_Tracks        lit '(shl(P#Track_Setup,8)        |   4)';dcl L#Clear_All_Tracks        lit '(Able_Packet_Head            +   3)';/* dcl T#Req_Single_Track_State  lit '(shl(P#Track_Setup,8)        |   6)';  *//* dcl L#Req_Single_Track_State  lit '(Able_Packet_Head            +   7)';  */dcl T#Single_Track_State      lit '(shl(P#Track_Setup,8)        |   7)';dcl L#Single_Track_State      lit '(Able_Packet_Head            +  12)';dcl T#Req_Group               lit '(shl(P#Track_Setup,8)        |  16)';dcl L#Req_Group               lit '(Able_Packet_Head            +   5)';dcl T#Group                   lit '(shl(P#Track_Setup,8)        |  17)';dcl L#Group                   lit '(Able_Packet_Head            +  57)';dcl T#Multi_Group             lit '(shl(P#Track_Setup,8)        |  18)';dcl L#Multi_Group             lit '(Able_Packet_Head            +  57)';dcl T#Set_Group               lit '(shl(P#Track_Setup,8)        |  19)';dcl L#Set_Group               lit '(Able_Packet_Head            +  55)';dcl T#Set_Multi_Group         lit '(shl(P#Track_Setup,8)        |  20)';dcl L#Set_Multi_Group         lit '(Able_Packet_Head            +  55)';dcl T#Req_Valid_Groups        lit '(shl(P#Track_Setup,8)        |  21)';dcl L#Req_Valid_Groups        lit '(Able_Packet_Head            +   4)';dcl T#Valid_Groups            lit '(shl(P#Track_Setup,8)        |  22)';dcl L#Valid_Groups            lit '(Able_Packet_Head            +   8)';dcl T#Set_Group_State         lit '(shl(P#Track_Setup,8)        |  23)';dcl L#Set_Group_State         lit '(Able_Packet_Head            +   5)';dcl T#Req_All_Routing         lit '(shl(P#Track_Setup,8)        |  32)';dcl L#Req_All_Routing         lit '(Able_Packet_Head            +  40)';dcl T#Req_MIDI_In_Out         lit '(shl(P#Track_Setup,8)        |  33)';dcl L#Req_MIDI_In_Out         lit '(Able_Packet_Head            +   7)';dcl T#MIDI_In_Out             lit '(shl(P#Track_Setup,8)        |  34)';dcl L#MIDI_In_Out             lit '(Able_Packet_Head            +   9)';dcl T#Set_MIDI_In_Out         lit '(shl(P#Track_Setup,8)        |  35)';dcl L#Set_MIDI_In_Out         lit '(Able_Packet_Head            +   7)';dcl T#Req_Multichan           lit '(shl(P#Track_Setup,8)        |  36)';dcl L#Req_Multichan           lit '(Able_Packet_Head            +   6)';dcl T#Multichan               lit '(shl(P#Track_Setup,8)        |  37)';dcl L#Multichan               lit '(Able_Packet_Head            +   8)';dcl T#Set_Multichan           lit '(shl(P#Track_Setup,8)        |  38)';dcl L#Set_Multichan           lit '(Able_Packet_Head            +   6)';dcl T#Req_DTD_Inputs          lit '(shl(P#Track_Setup,8)        |  39)';dcl L#Req_DTD_Inputs          lit '(Able_Packet_Head            +   6)';dcl T#DTD_Inputs              lit '(shl(P#Track_Setup,8)        |  40)';dcl L#DTD_Inputs              lit '(Able_Packet_Head            +   8)';dcl T#Set_DTD_Inputs          lit '(shl(P#Track_Setup,8)        |  41)';dcl L#Set_DTD_Inputs          lit '(Able_Packet_Head            +   6)';dcl T#Req_DTD_Outputs         lit '(shl(P#Track_Setup,8)        |  42)';dcl L#Req_DTD_Outputs         lit '(Able_Packet_Head            +   6)';dcl T#DTD_Outputs             lit '(shl(P#Track_Setup,8)        |  43)';dcl L#DTD_Outputs             lit '(Able_Packet_Head            +   8)';dcl T#Set_DTD_Outputs         lit '(shl(P#Track_Setup,8)        |  44)';dcl L#Set_DTD_Outputs         lit '(Able_Packet_Head            +   6)';dcl T#Req_Valid_Tracks        lit '(shl(P#Track_Setup,8)        |  45)';dcl L#Req_Valid_Tracks        lit '(Able_Packet_Head            +   4)';dcl T#Valid_Tracks            lit '(shl(P#Track_Setup,8)        |  46)';dcl L#Valid_Tracks            lit '(Able_Packet_Head            +  36)';/* Full P#Type words for P#Utility packets */dcl T#Req_Configuration       lit '(shl(P#Utility,8)            |   0)';dcl L#Req_Configuration       lit '(Able_Packet_Head            +   4)';dcl T#Configuration           lit '(shl(P#Utility,8)            |   1)';dcl L#Configuration           lit '(Able_Packet_Head            +  14)';dcl T#Help_Message            lit '(shl(P#Utility,8)            |  16)';dcl L#Help_Message            lit '(Able_Packet_Head            +  66)';dcl T#Multi_Help_Message      lit '(shl(P#Utility,8)            |  17)';dcl L#Multi_Help_Message      lit '(Able_Packet_Head            +  66)';dcl T#Req_Ping                lit '(shl(P#Utility,8)            |  32)';dcl L#Req_Ping                lit '(Able_Packet_Head            +   4)';dcl T#Ping                    lit '(shl(P#Utility,8)            |  33)';dcl L#Ping                    lit '(Able_Packet_Head            +   4)';dcl T#Req_Error_Text      	  lit '(shl(P#Utility,8)            |   18)';dcl T#Error_Text      		  lit '(shl(P#Utility,8)            |   19)';dcl L#Error_Text       	  	  lit '(Able_Packet_Head            +   8)';/* Full P#Type words for P#Events packets */dcl T#Set_Event_Enables       lit '(shl(P#Events,8)             |   0)';dcl L#Set_Event_Enables       lit '(Able_Packet_Head            +  34)';dcl T#Timbre_Info_Event       lit '(shl(P#Events,8)             |   1)';dcl L#Timbre_Info_Event       lit '(Able_Packet_Head            +   4)';dcl T#Sequencer_Event         lit '(shl(P#Events,8)             |   2)';dcl L#Sequencer_Event         lit '(Able_Packet_Head            +   4)';dcl T#Entry_Writes_Event      lit '(shl(P#Events,8)             |   3)';dcl L#Entry_Writes_Event      lit '(Able_Packet_Head            +   4)';dcl T#Param_Info_Event        lit '(shl(P#Events,8)             |   4)';dcl L#Param_Info_Event        lit '(Able_Packet_Head            +   4)';dcl T#DTD_Info_Event          lit '(shl(P#Events,8)             |   5)';dcl L#DTD_Info_Event          lit '(Able_Packet_Head            +   4)';dcl T#Poly_Event              lit '(shl(P#Events,8)             |   6)';dcl L#Poly_Event              lit '(Able_Packet_Head            +   4)';dcl T#Error_Type_Event        lit '(shl(P#Events,8)             |   7)';dcl L#Error_Type_Event        lit '(Able_Packet_Head            +   4)';dcl T#SMPTE_Event             lit '(shl(P#Events,8)             |   8)';dcl L#SMPTE_Event             lit '(Able_Packet_Head            +   4)';dcl T#Clavier_Event           lit '(shl(P#Events,8)             |   9)';dcl L#Clavier_Event           lit '(Able_Packet_Head            +   4)';dcl T#AEE_Notice              lit '(shl(P#Events,8)             | 160)';dcl L#AEE_Notice              lit '(Able_Packet_Head            +  10)';/* Full P#Type words for P#MIDI packets */dcl T#Note_Off                lit '(shl(P#MIDI,8)               |   1)';dcl L#Note_Off                lit '(Able_Packet_Head            +   8)';dcl T#Note_On                 lit '(shl(P#MIDI,8)               |   2)';dcl L#Note_On                 lit '(Able_Packet_Head            +   8)';dcl T#Poly_Pressure           lit '(shl(P#MIDI,8)               |   3)';dcl L#Poly_Pressure           lit '(Able_Packet_Head            +   8)';dcl T#Control_Change          lit '(shl(P#MIDI,8)               |   4)';dcl L#Control_Change          lit '(Able_Packet_Head            +   8)';dcl T#Switch_Change           lit '(shl(P#MIDI,8)               |   5)';dcl L#Swtich_Change           lit '(Able_Packet_Head            +   8)';dcl T#Program_Change          lit '(shl(P#MIDI,8)               |   6)';dcl L#Program_Change          lit '(Able_Packet_Head            +   6)';dcl T#Channel_Pressure        lit '(shl(P#MIDI,8)               |   7)';dcl L#Channel_Pressure        lit '(Able_Packet_Head            +   6)';dcl T#Pitch_Bend              lit '(shl(P#MIDI,8)               |   8)';dcl L#Pitch_Bend              lit '(Able_Packet_Head            +   6)';dcl T#MIDI_SPP                lit '(shl(P#MIDI,8)               |   9)';dcl L#MIDI_SPP                lit '(Able_Packet_Head            +   4)';dcl T#MIDI_Timing_Clock       lit '(shl(P#MIDI,8)               |  10)';dcl L#MIDI_Timing_Clock       lit '(Able_Packet_Head            +   2)';dcl T#MIDI_Start              lit '(shl(P#MIDI,8)               |  11)';dcl L#MIDI_Start              lit '(Able_Packet_Head            +   2)';dcl T#MIDI_Continue           lit '(shl(P#MIDI,8)               |  12)';dcl L#MIDI_Continue           lit '(Able_Packet_Head            +   2)';dcl T#MIDI_Stop               lit '(shl(P#MIDI,8)               |  13)';dcl L#MIDI_Stop               lit '(Able_Packet_Head            +   2)';dcl T#System_Exclusive        lit '(shl(P#MIDI,8)               |  14)';dcl L#System_Exclusive        lit '(Able_Packet_Head            +  66)';dcl T#MIDI_Control_Change     lit '(shl(P#MIDI,8)               |  15)';dcl L#MIDI_Control_Change     lit '(Able_Packet_Head            +   8)';dcl T#MIDI_Bulk               lit '(shl(P#MIDI,8)               |  16)';dcl L#MIDI_Bulk               lit '(Able_Packet_Head            +  66)';dcl T#MIDI_EOX                lit '(shl(P#MIDI,8)               |  17)';dcl L#MIDI_EOX                lit '(Able_Packet_Head            +   4)';dcl T#All_Notes_Off           lit '(shl(P#MIDI,8)               |  18)';dcl L#All_Notes_Off           lit '(Able_Packet_Head            +   4)';dcl T#Clear_MIDI_Routing      lit '(shl(P#MIDI,8)               |  19)';dcl L#Clear_MIDI_Routing      lit '(Able_Packet_Head            +   2)';dcl T#MIDInet_Filename        lit '(shl(P#MIDI,8)               |  21)';dcl L#MIDInet_Filename        lit '(Able_Packet_Head            +  36)';/* Full P#Type words for P#Clavier packets */dcl T#Press_Button                 lit '(shl(P#Clavier,8)       |   0)';dcl L#Press_Button                 lit '(Able_Packet_Head       +   4)';dcl T#Press_and_Release_Button     lit '(shl(P#Clavier,8)       |   1)';dcl L#Press_and_Release_Button     lit '(Able_Packet_Head       +   4)';dcl T#Release_Button               lit '(shl(P#Clavier,8)       |   2)';dcl L#Release_Button               lit '(Able_Packet_Head       +   4)';dcl T#Release_All_Buttons          lit '(shl(P#Clavier,8)       |   3)';dcl L#Release_All_Buttons          lit '(Able_Packet_Head        +  2)';dcl T#Jog_Knob                     lit '(shl(P#Clavier,8)       |   4)';dcl L#Jog_Knob                     lit '(Able_Packet_Head       +   4)';dcl T#Set_Knob_Position            lit '(shl(P#Clavier,8)       |   5)';dcl L#Set_Knob_Position            lit '(Able_Packet_Head       +   4)';dcl T#Req_Clavier_Info             lit '(shl(P#Clavier,8)       |   6)';dcl L#Req_Clavier_Info             lit '(Able_Packet_Head       +   4)';/* Full P#Type words for P#Data_Transfer packets */dcl T#Request_Data_Read            lit '(shl(P#Data_Transfer,8) |   0)';dcl T#Data_Read                    lit '(shl(P#Data_Transfer,8) |   1)';dcl T#Request_Data_Write           lit '(shl(P#Data_Transfer,8) |   2)';dcl T#Data_Write                   lit '(shl(P#Data_Transfer,8) |   3)';dcl L#Data_Write                   lit '(Able_Packet_Head       +   6)';/* status literals for trapxfr (also used in trapnet) */dcl b#success       lit ' 1';                        /* operation successful */dcl b#complete      lit ' 2';                        /* complete response fits in one 10k block xfer */dcl b#busy          lit ' 4';                        /* received block before finished processing prior */dcl b#overflow      lit ' 8';                        /* block exceeds implemented buffer size */dcl s#good_status   lit '(b#success | b#complete)';  /* literal for no error *//* Full P#Type words for P#D115D packets */dcl T#D115_Chan_Active        lit '(shl(P#LOCAL,8)              |   0)';dcl L#D115_Chan_Active        lit '(Able_Packet_Head            +   2)';dcl T#D115_Lost_Rx            lit '(shl(P#LOCAL,8)              |   1)';dcl L#D115_Lost_Rx            lit '(Able_Packet_Head            +   2)';dcl T#D115_Lost_Tx            lit '(shl(P#LOCAL,8)              |   2)';dcl L#D115_Lost_Tx            lit '(Able_Packet_Head            +   2)';dcl T#D115_Chan_Inactive      lit '(shl(P#LOCAL,8)              |   3)';dcl L#D115_Chan_Inactive      lit '(Able_Packet_Head            +   2)';
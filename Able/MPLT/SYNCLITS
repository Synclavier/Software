/* :MPLT:SYNCLITS - EXTERNAL MEMORY ORGANIZATION, SEQUENCER LITERALS *//*   5/15/86 - "official" creation of release-M modules*//* EXTERNAL MEMORY IS ALLOCATED IN TWO PHASES:   DURING INITIALIZATION - SYNCLAVIER LOOK UP TABLES ARE ALLOCATED                            FROM THE TOP OF MEMORY DOWN.   THESE                           LOOK UP TABLES INCLUDE SINE TABLES,                           FREQUENCY TABLES, LOG TABLES, A NULL TIMBRE,                           ETC.   THESE TABLES ARE NOT MOVED DURING                            RUN TIME.                           (SEE VARIABLES DEFINED IN 040-GLOB)   RUN TIME              - OTHER AREAS ARE ALLOCATED IN REAL TIME                           OUT OF THE REMAINING (LOWER) MEMORY.                           THESE INCLUDE AREAS FOR TIMBRE INFORMATION,                           SEQUENCER NOTES, TIMBRE BANK, ETC.   LOWER EXTERNAL MEMORY:           (REAL TIME ALLOCATION)                  SECTOR #    LENGTH        CONTENTSZEROES               0           1          ZEROESBAS.PTR              1        BAS.LEN       BASE SECTOR FOR SEQUENCEPAR.PTR            (VAR)      PAR.LEN       TIMBRE PARAMETER AREANAH.PTR            (VAR)      NAH.LEN       NOTE AREABNK.PTR            (VAR)      BNK.LEN       TIMBRE BANK AREAINF.PTR            (VAR)      INF.LEN       SEQUENCER INFO AREATIM.PTR            (VAR)      TIM.LEN       PRECOMPUTED TIMBRE/PARTIALTRD.PTR            (VAR)      TRD.LEN       TIMBRE DISPLAY - ONLY CHANGED IN 'TERMINAL'TRD.PTR+TRD.LEN    (VAR)       (VAR)        SYNCLAVIER LOOK UP TABLES                    (VAR)       (VAR)        OBJECT CODE SWAP FILESEXAMOUNT                                    */           /* $PAGE  Sequencer Data Structure, Memory Management Routines *//* DEFINITIONS FOR SEQUENCER DATA STRUCTURE: *//* CONTENTS OF A SEQUENCES:   1.  BASE SECTOR - SECTOR 0 OF A SEQUENCE - CONTAINS MISC INFORMATION                     AND POINTERS TO TIMBRES, NOTES, MUSIC PRINTING,                     AND OTHER INFORMATION.              (BAS.PTR,BAS.LEN)   2.  TIMBRE PARAMETERS   (FORMAT DEFINED IN 120-TDEF)  (PAR.PTR,PAR.LEN)   3.  NOTE INFORMATION - CONSISTS OF:                   (NAH.PTR,NAH.LEN)          NOTE AREA HEADER - 1 SECTOR,  HOLDS POINTERS FOR UP TO                             256 TRACKS.          TRACK HEADER     - 1 SECTOR FOR EACH NON-EMPTY TRACK.                             CONTAINS MISC INFO FOR THE TRACK (LOOP,                             PLAY POINTERS, RTE DATA) AS WELL                             AS A POINTER TO THE FIRST BLOCK                             OF ACTUAL NOTES.   A TRACK HEADER                             SECTOR IS ALSO ALLOCATED FOR                             THE KEYBOARD AND SPLIT KEYBOARD.          NOTE SEGMENTS    - 1 SECTOR EACH.   LINKED LIST OF                             BLOCKS.   EACH BLOCK CONTAINS                             A FORWARD & REVERSE POINTER AND                             UP TO 126 2-WORD NOTE RECORD   4.  MUSIC PRINTING INFORMATION - UNDEFINED FORMAT     (INF.PTR,INF.LEN) *//* $PAGE - DEFINITIONS FOR BASE SECTOR: */DCL SEQ.SCALE        LIT '00'; /* LOCATIONS 0-11 - HOLDS ACTIVE SCALE */DCL SEQ.SPEED        LIT '12'; /* HOLDS LATEST SEQUENCER SPEED */DCL SEQ.CLICK        LIT '13'; /* HOLDS SEQUENCER CLICK RATE */DCL SEQ.CRM          LIT '14'; /* CLICK RATE MULTIPLIER */DCL SEQ.SMODE        LIT '15'; /* SMPTE MODE            */DCL SEQ.SMBITS       LIT '16'; /* SMPTE START # OF BITS */DCL SEQ.SECFRA       LIT '17'; /* SMPTE SECONDS/FRAMES  */DCL SEQ.HRSMIN       LIT '18'; /* SMPTE HRS/MINS        */DCL NUM.SEQ.PARAMS   LIT '19'; /* NUMBER OF KNOB PARAMETERS IN SEQ LIST *//* 19-31: FREE */DCL MAGIC.NUMBER     LIT '32'; /* USED TO DETECT VALID DATA */DCL SEQ.OCTRATIO     LIT '33'; /* STORE ACTIVE OCTAVE RATIO HERE *//* SEQ.LOOP-SEQ.S.P.T.C MUST BE IN ORDER */DCL SEQ.LOOP         LIT '34'; /* TRUE IF OVERALL LOOP        */DCL SEQ.G.P.T        LIT '35'; /* PLAY TIME LSB OF LOOP END   */DCL SEQ.G.P.T.C      LIT '36'; /* PLAY TIME MSB OF LOOP END   */                                                            DCL SEQ.S.P.T        LIT '37'; /* PLAY TIME LSB OF LOOP START */DCL SEQ.S.P.T.C      LIT '38'; /* PLAY TIME MSB OF LOOP START */DCL SEQ.COUNTIN      LIT '39'; /* COUNT IN # OF BEATS         */DCL SEQ.LOOPLEN      LIT '40'; /* LOOP LENGTH IN BEATS        *//* 41-47: FREE */DCL SEQ.LIVE.CLICK   LIT '48'; /* LIVE CLICK TRACK FOR SEQUENCER   */DCL SEQ.MPREV        LIT '49'; /* MUSIC PRINTING REV#              */DCL SEQ.NUMTIMBS     LIT '50'; /* NUMBER OF TIMBRES IN TIMBRE INFO *//* 51-62: FREE */DCL SEQ.NUMSEC       LIT '63'; /* TOTAL # OF SECTORS IN SEQUENCE */DCL SEQ.BAS          LIT '64'; /* RELATIVE POINTER TO BASE SECTOR */                               /*          LENGTH                 */DCL SEQ.PAR          LIT '66'; /* RELATIVE POINTER TO TIMBRE INFO */                               /*          LENGTH                 */DCL SEQ.NAH          LIT '68'; /* RELATIVE POINTER TO NOTE AREA   */                               /*          LENGTH                 */DCL SEQ.INF          LIT '70'; /* RELATIVE POINTER TO MP INFO     */                               /*          LENGTH                 *//* 72,74,76,78 - OTHER RELATIVE POINTERS FOR FUTURE BLOCKS     *//* 80-255: FREE *//* MAGIC NUMBERS: */DCL MAGIC#1          LIT '"123456"'; /* INDICATES 10 MS. DURATIONS IN SEQ. */DCL MAGIC#2          LIT '"123457"'; /* INDICATES 5  MS. DURATIONS IN SEQ. */DCL MAGIC#3          LIT '"123460"'; /* INDICATES SFM SEQUENCE             */DCL MAGIC#4          LIT '"123461"'; /* INDICATES TIMBRE FRAME FORMAT      */DCL MAGIC#5          LIT '"123462"'; /* INDICATES 32 TRACK FORMAT          *//* $PAGE - DEFINITIONS FOR NOTE AREA HEADER, TRACK BASE SECTOR *//* DEFINITIONS FOR NOTE AREA HEADER: *//* NOTE AREA HEADER CONTAINS 256 POINTERS,  1 FOR EACH POSSIBLE TRACK.   EACH POINTER IS A SECTOR NUMBER (RELATIVE TO THE NOTE AREA HEADER)   THAT CONTAINS THE TRACK HEADER SECTOR FOR THAT TRACK *//* DEFINITIONS TRACK HEADER SECTOR: *//* REAL TIME INFORMATION: */ DCL THD.FOR       LIT    '( 0)';    /* FORWARD POINTER TO FIRST NOTE LIST SEGMENT */DCL THD.REV       LIT    '( 1)';    /* REVERSE POINTER (ALWAYS 0 FOR TRACK HEADER SECTOR) */DCL THD.TRK       LIT    '( 2)';    /* HOLDS TRACK # FOR GARBAGE COLLECT  */DCL THD.NEVF      LIT    '( 3)';    /* FORWARD POINTER FOR NEXT EVENT QUE */DCL THD.NEVR      LIT    '( 4)';    /* REVERSE POINTER FOR NEXT EVENT QUE */DCL THD.MRNPTR    LIT    '( 5)';    /* MOST RECENT NPTR FOR THIS TRACK    */DCL THD.ARP       LIT    '( 6)';    /* ARPEGGIATE  NPTR FOR THIS TRACK    */DCL THD.ACTIVE    LIT    '( 7)';    /* TRUE FOR ACTIVE TRACKS             *//* CURRENT PLAY POINTERS & INFO: */DCL THD.NMSB      LIT    '( 8)';    /* NEXT EVENT MSB ABSOLUTE TIME */DCL THD.NLSB      LIT    '( 9)';    /* NEXT EVENT LSB ABSOLUTE TIME */DCL THD.LMSB      LIT    '(10)';    /* LAST EVENT MSB ABSOLUTE TIME */DCL THD.LLSB      LIT    '(11)';    /* LAST EVENT LSB ABSOLUTE TIME */DCL THD.WRD       LIT    '(12)';    /* CURRENT PLAY POINTER - WRD # */DCL THD.SEC       LIT    '(13)';    /* CURRENT PLAY POINTER - SEC # */DCL THD.CXPOS     LIT    '(14)';    /* CURRENT TRANSPOSITION        */DCL THD.CTIMB     LIT    '(15)';    /* CURRENT TIMBRE #             */DCL THD.CLPITCH   LIT    '(16)';    /* CURRENT LAST PITCH           */DCL THD.CTBITS    LIT    '(17)';    /* CURRENT REAL TIME RPT/ARP BITS */DCL THD.CG.VAL    LIT    '(18)';    /* CURRENT MIDI PORTAMENTO SWITCH */DCL THD.CPROGRAM  LIT    '(19)';    /* CURRENT MIDI PROGRAM NUMBER    *//* 20-23: RESERVED FOR FUTURE EXPANSION */DCL THD.RTES      LIT    '(24)';    /* CURRENT REAL TIME EFFECTS    *//* USER INFORMATION STORED HERE: */DCL THD.MIDI      LIT    '(32)';    /* MIDI ROUTING FOR TRACK       */DCL THD.TVOL      LIT    '(33)';    /* TRACK VOLUME                 */DCL THD.TROU      LIT    '(34)';    /* TRACK ROUTING                */DCL THD.TPAN      LIT    '(35)';    /* TRACK PAN                    */DCL THD.ORATIO    LIT    '(36)';    /* OCTAVE RATIO FOR THIS TRACK  *//* MUST BE IN ORDER */DCL THD.NACT      LIT    '(37)';    /* NUMBER OF ACTIVE NOTES       */DCL THD.NDEC      LIT    '(38)';    /* NUMBER OF DECAY  NOTES       */DCL THD.SXPOS     LIT    '(39)';    /* TRACK STARTING TRANSPOS      */DCL THD.STIMB     LIT    '(40)';    /* STARTING TIMBRE #            */DCL THD.SLPITCH   LIT    '(41)';    /* STARTING LAST PITCH INFO     */DCL THD.NN.MSB    LIT    '(42)';    /* NUMB OF NOTES - MSB          */DCL THD.NN.LSB    LIT    '(43)';    /* NUMB OF NOTES - LSB          *//* $PAGE  -  TRACK HEADER SECTOR (CONTINUED) *//* THD.CPLIST, THD.CPSUM, THD.CPPSUM MUST BE IN ORDER */DCL THD.CPLIST    LIT    '(44)';    /* POINTER FOR LINKED LIST OF TRACKS USING CHANNEL PRESSURE */DCL THD.CPSUM     LIT    '(45)';    /* CURRENT  CHANNEL PRESSURE VALUES ON EACH TRACK */DCL THD.CPPSUM    LIT    '(46)';    /* PREVIOUS CHANNEL PRESSURE VALUES ON EACH TRACK *//* THD.CPLIST, THD.RF.TC, THD.RF.PARS MUST BE IN ORDER */DCL THD.ARLIST    LIT    '(47)';    /* ACTIVE RIBBON LINKED LIST    */DCL THD.RF.TC     LIT    '(48)';    /* DUPLICATE RIBBON TIME CONST  */DCL THD.RF.PARS   LIT    '(49)';    /* PARAMS TO UPDATE             */DCL THD.SCALE     LIT    '(50)';    /* SPECIAL SCALE FOR THIS TRACK *//* THD.UPD.PARS, THD.UPD.QUED, THD.UPD.LINK MUST BE IN ORDER */DCL THD.UPD.PARS  LIT    '(62)';    /* UPDATE PAR BITS              */DCL THD.UPD.QUED  LIT    '(63)';    /* TRUE IF LINKED               */DCL THD.UPD.LINK  LIT    '(64)';    /* UPDATE LINK                  */DCL THD.TRIGGER   LIT    '(65)';    /* TRIGGER SIDE FOR PING/PONG   */DCL THD.INFO.TRIGGER.KEY LIT '(66)'; /* NONZERO WHEN INFO MODE KEY TRIGGER HAS OCCURRED *//* INFO IN TRACK HEADER SECTOR FOR START OF OVERALL LOOP */DCL THD.LP.NMSB      LIT    '(67)';    /* LOOP NEXT EVENT MSB ABSOLUTE TIME */DCL THD.LP.NLSB      LIT    '(68)';    /* LOOP NEXT EVENT LSB ABSOLUTE TIME */DCL THD.LP.LMSB      LIT    '(69)';    /* LOOP LAST EVENT MSB ABSOLUTE TIME */DCL THD.LP.LLSB      LIT    '(70)';    /* LOOP LAST EVENT LSB ABSOLUTE TIME */DCL THD.LP.WRD       LIT    '(71)';    /* LOOP PLAY POINTER - WRD # */DCL THD.LP.SEC       LIT    '(72)';    /* LOOP PLAY POINTER - SEC # */DCL THD.LP.CXPOS     LIT    '(73)';    /* LOOP TRANSPOSITION        */DCL THD.LP.CTIMB     LIT    '(74)';    /* LOOP TIMBRE #             */DCL THD.LP.CLPITCH   LIT    '(75)';    /* LOOP LAST PITCH           */DCL THD.LP.CTBITS    LIT    '(76)';    /* LOOP REAL TIME RPT/ARP BITS */DCL THD.LP.CG.VAL    LIT    '(77)';    /* LOOP MIDI PORTAMENTO SWITCH */DCL THD.LP.CPROGRAM  LIT    '(78)';    /* LOOP MIDI PROGRAM NUMBER    *//* 79-82: RESERVED FOR FUTURE EXPANSION */DCL THD.LP.RTES      LIT    '(83)';    /* LOOP REAL TIME EFFECTS    *//* 91-94: FREE *//* INDEPENDENT LOOPS: */DCL THD.ILP          LIT    '(95)';    /* TRUE IF INDEP LOOP           */DCL THD.COUNTIN.MSB  LIT    '(96)';    /* 32-BIT COUNT-IN DURATION IN MSEC */DCL THD.COUNTIN.LSB  LIT    '(97)';DCL THD.LOOPLEN.MSB  LIT    '(98)';    /* 32-BIT ILP LENGTH IN MSEC */DCL THD.LOOPLEN.LSB  LIT    '(99)';/* $PAGE  -  TRACK HEADER SECTOR (CONTINUED) *//* INFO FOR START OF INDEPENDENT LOOP */DCL THD.ILS.WRD       LIT    '(100)';    /* ILS PLAY POINTER - WRD # */DCL THD.ILS.SEC       LIT    '(101)';    /* ILS PLAY POINTER - SEC # */                                            DCL THD.ILS.CXPOS     LIT    '(102)';    /* ILS TRANSPOSITION        */DCL THD.ILS.CTIMB     LIT    '(103)';    /* ILS TIMBRE #             */DCL THD.ILS.CLPITCH   LIT    '(104)';    /* ILS LAST PITCH           */DCL THD.ILS.CTBITS    LIT    '(105)';     /* ILS REAL TIME RPT/ARP BITS */DCL THD.ILS.CG.VAL    LIT    '(106)';     /* ILS MIDI PORTAMENTO SWITCH */DCL THD.ILS.CPROGRAM  LIT    '(107)';     /* ILS MIDI PROGRAM NUMBER    *//* 108-111: RESERVED FOR FUTURE EXPANSION */DCL THD.ILS.RTES      LIT    '(112)';    /* ILS REAL TIME EFFECTS    *//* INFO FOR END OF INDEPENDENT LOOP */DCL THD.ILE.WRD       LIT    '(120)';    /* ILE PLAY POINTER - WRD # */DCL THD.ILE.SEC       LIT    '(121)';    /* ILE PLAY POINTER - SEC # */                                 DCL THD.ILE.CXPOS     LIT    '(122)';    /* ILE TRANSPOSITION        */DCL THD.ILE.CTIMB     LIT    '(123)';    /* ILE TIMBRE #             */DCL THD.ILE.CLPITCH   LIT    '(124)';    /* ILE LAST PITCH           */DCL THD.ILE.CTBITS    LIT    '(125)';    /* ILE REAL TIME RPT/ARP BITS */DCL THD.ILE.CG.VAL    LIT    '(126)';    /* ILE MIDI PORTAMENTO SWITCH */DCL THD.ILE.CPROGRAM  LIT    '(127)';    /* ILE MIDI PROGRAM NUMBER    *//* 128-131: RESERVED FOR FUTURE EXPANSION */DCL THD.ILE.RTES      LIT    '(132)';    /* ILE REAL TIME EFFECTS	*/DCL THD.USAGE         LIT    '(140)';    /* TIMBRE USAGE TABLE		*/                                         /* 16 2-WORD ENTRIES		*/                                         /* HOLDS TIMBRE #, COUNT	*/DCL THD.USAGE.LEN     LIT    '( 32)';/* THE FOLLOWING TWO VARIABLES CONTAIN THE CONTROLLER NUMBER TO WHICH THE   EQUIVALENT SYNCLAVIER EXPRESSION IS SUPPOSED TO BE ROUTED. EACH ARRAY CAN   SUPPORT ROUTINGS OF UP TO 8 CONTINUOUS CONTROLLERS AND 8 SWITCH INPUTS FOR   EACH TIMBRE (0-17).  VALID CONTROLLER/SWITCH NUMBERS ARE IN THE RANGE 0-95. *//* THD.SYN.CROUT, THD.SYN.SROUT MUST BE IN ORDER */DCL THD.SYN.CROUT     LIT    '(172)';  /* SYNCLAVIER TO MIDI ROUTING ARRAY FOR CONTINUOUS CONTROLLERS */DCL THD.SYN.SROUT     LIT    '(180)';  /* SYNCLAVIER TO MIDI ROUTING ARRAY FOR SWITCHES */DCL THD.NUM.NLS       LIT    '(188)';  /* # OF NOTE LIST SEGMENTS FOR TRACK *//* INDEP LOOP COUNTERS (KEEP NEXT SIX WORDS IN ORDER) */DCL THD.ILPCTR       LIT    '(189)';  /* CURRENT ILP COUNTER       */DCL THD.ANY.FOR      LIT    '(190)';  /* SET TO 1 IF MORE NOTES IN FORWARD DIR */DCL THD.ANY.REV      LIT    '(191)';  /* SET TO 1 IF MORE NOTES IN REVERSE DIR */DCL THD.LP.ILPCTR    LIT    '(192)';  /* LOOP ILP COUNTER          */DCL THD.LP.ANY.FOR   LIT    '(193)';  /* SET TO 1 IF MORE NOTES IN FORWARD DIR */DCL THD.LP.ANY.REV   LIT    '(194)';  /* SET TO 1 IF MORE NOTES IN REVERSE DIR *//* 195-255: FREE *//* $PAGE - DEFINITIONS FOR NOTE LIST SEGMENT *//* EACH NOTE LIST SEGMENT CONTAINS A FORWARD POINTER,  A REVERESE POINTER,   A TRACK NUMBER,  AND UP TO 126 NOTE RECORDS.   EACH NOTE SEGMENT   TERMINATES WITH A (-1) *//* DEFINITIONS: *//* NLS.FOR - NLS.LP MUST BE IN ORDER */DCL NLS.FOR       LIT    '(  0)';    /* FORWARD POINTER TO NEXT NOTE LIST SEGMENT */DCL NLS.REV       LIT    '(  1)';    /* REVERSE POINTER TO LAST NOTE LIST SEGMENT (OR TRACK HEADER SECTOR) */DCL NLS.TRK       LIT    '(  2)';    /* HOLDS TRACK # FOR GARBAGE COLLECT  */DCL NLS.FP        LIT    '(  3)';    /* POINTER IN SECTOR TO FIRST RECRD   */DCL NLS.LP        LIT    '(  4)';    /* POINTER IN SECTOR TO LAST  RECRD   */DCL NLS.FIRSTL    LIT    '(  8)';    /* FIRST NOTE RECORD WOULD GO HERE */DCL NLS.LAST      LIT    '(251)';    /* LAST NOTE RECORD WOULD GO HERE  */DCL NLS.EOS       LIT    '( -1)';    /* FLAG AT END OF NOTE RECORDS     *//* $PAGE - NOTE RECORD DESCRIPTION *//*   FOR EACH NOTE THAT IS RECORDED IN THE SEQUENCER MEMORY, A TWO WORD OR A.  FOUR WORD RECORD IS STORED IN MEMORY.   TWO WORD RECORDS ARE USED FOR MOST.  SIMPLE NOTES (I.E. NOTES WITHOUT REAL TIME EFFECTS OR VOLUME), WHILE FOUR.  WORD RECORDS ARE REQUIRED FOR NOTES WITH REAL TIME EFFECTS OR VOLUME DATA..  .    A BIT IN THE RECORD INDICATES WHETHER THE RECORD IS TWO WORDS OR FOUR .  WORDS LONG.   TO FACILITATE SCANNING THE NOTE LIST BACKWARDS (DURING.  REWIND),  ALL FOUR WORD RECORDS ARE FLAGGED WITH A SPECIAL BYTE (I.E..  'VEL.NOTE') IN THEIR LAST WORD..  .    A TWO WORD NOTE RECORD IS AS FOLLOWS:.  .       [10 BITS - TIME DELTA, MS. ]   [4 BITS - DURATION MSB ]  [2 BITS - RECORD TYPE].       [10 BITS - DURATION LSB    ]   [6 BITS - KEY #        ]..    A FOUR WORD NOTE RECORD IS AS FOLLOWS:..       [10 BITS - TIME DELTA, MS. ]   [4 BITS - DURATION MSB ]  [2 BITS - RECORD TYPE].       [10 BITS - DURATION LSB    ]   [6 BITS - KEY #        ].       [ 8 BITS - SBITS           ]   [8 BITS - RTE DATA     ].       [ 8 BITS - VOLUME/OTHER    ]   [2 RAISE/LOWER]  [6 BITS - 62 DECIMAL - VEL.NOTE]...SUB FIELDS:..    RECORD TYPE FIELD:..       0 - TWO  WORD BASIC    RECORD.       1 - FOUR WORD BASIC    RECORD.       2 - TWO  WORD EXPANDED RECORD.       3 - FOUR WORD EXPANDED RECORD.    ENCODED DURATION DATA - 14 BITS:..       UPPER  4 BITS:    [ 2 BITS - POWER OF 4 EXPONENT                    ].                         [ 2 BITS - UPPER  2 BITS OF 12 BIT DURATION (MS.) ]..       LOWER 10 BITS:    [10 BITS - LOWER 10 BITS OF 12 BIT DURATION (MS.) ]. .    SWITCH AND FLAG BITS  -  8 BITS:  (SEE DEFINITIONS)..            BIT 0 - GLIDE FOOT SWITCH (KBD)       |.            BIT 1 - REPEAT FOOT SWITCH (KBD)      |==> STRING NUMBER IF B.GUI=1.            BIT 2 - ARPEGGIATE FOOT SWITCH (KBD)  |.            BIT 3 - INDICATES A GUITAR NOTE.            BIT 4 - INDICATES TIED NOTE.  SLUR FROM PREVIOUS NOTE.            BIT 5 - INDICATES VALID VOLUME DATA..            BIT 6 - INDICATES TO RE-ARTICULATE AFTER TIED NOTE .            BIT 7 - INDICATES AN 'UPDATE' RECORD. |==> REDEFINES LOWER BITS...    RAISE/LOWER BITS - 2 BIT FIELD FROM LAST WORD OF 4 WORD RECORD:..            BIT 0 - INDICATES LOWER THE NOTE BY 1 OCTAVE (LOWER.KEY= 64).            BIT 1 - INDICATES REASE THE NOTE BY 1 OCTAVE (RAISE.KEY=128).$PAGE - UPDATE RECORD FORMAT..    FORMAT FOR UPDATE RECORDS:..            - UPDATE RECORDS ARE ALWAYS 4 WORD RECORDS.            - B.UPD (BIT 7) IS ALWAYS SET IN AN UPDATE RECORD.            - UPDATE RECORDS FOR GUITAR: B.GUI IS SET.                 1. DURATION FIELD - HOLDS 10-BIT TWO'S COMPLEMENT.                    PITCH DELTA (-512 THROUGH +511).  RECORDS CHANGES.                    IN THE GUITAR PITCH..                 2. KEY NUMBER FIELD - HOLDS KEY NUMBER NEAREST TO.                    THE NEW PITCH (USED MOSTLY BY CHANNEL STEALING.                    ALGORITHM).                 3. RTE FIELD        - HOLDS POSSIBLE NEW RTE KNOB.                    VALUE FOR GUITAR.                 4. VOLUME FIELD     - HOLDS POSSIBLE NEW VOLUME DATA.                    FOR GUITAR.                 5. BITS FIELD - B.UPD + B.GUI + STRING# (0-5).                    NOTE: STRING 6 IS USED TO INDICATE GUITAR HOLD.                          SWITCH..            - UPDATE RECORDS FOR KEYBOARD:.                 1. B.UPD IS SET, B.GUI IS ZERO. ALL OTHER BITS RESERVED..                 2. USED FOR RECORDING CHANGES IN REAL TIME EFFECTS.                 3. KEY NUMBER FIELD - HOLDS KEY NUMBER IF PRESSURE CHANGE.                                       OTHERWISE UNUSED (SET TO C2).                 4. DURATION FIELD (10) BITS..                    DIVIDED INTO A 2 BIT (LOWER 2 BITS) AND AN 8 BIT (UPPER 8.                    BITS) FIELD.  2 BIT FIELD DESCRIBES TYPE..                       A. TYPE 0:  INDICATES REAL TIME EFFECTS UPDATE.                                   RECORD.   UPPER 8 BITS CONTAIN TWO 4-BIT.                                   ROUTING FIELDS.  THEY ROUTE THE RTE DATA FIELD.                                   AND THE VOLUME FIELD TO TWO SEPARATE.                                   EFFECTS..                       B. TYPE 1:  TOGGLE BITS.  UPPER 8 BITS IS A BITS.                                   WORD FOR THE TBITS ARRAY.  USED FOR.                                   REAL TIME RECORDING OF REPEAT/ARPEGGIATE.                                   BUTTONS,  FOOT SWITCHES..                       C. TYPE 2:  PRESSURE RECORD.   UPPER 8 BITS ARE THE.                                   NEW PRESSURE FOR THIS KEY.   KEY # FIELD.                                   IDENTIFIES THE KEY.  VOL FIELD, RTE FIELD.                                   ARE UNUSED..                       D. TYPE 3:  MIDI DATA RECORD..                 5. RTE FIELD, VOL FIELD - SEE (4)*//* $PAGE - NOTE RECORD BIT & FIELD DEFINITIONS     *//* DEFINITIONS FOR 2-WORD AND 4-WORD NOTE RECORDS: */DCL RTE.MAX      LIT '225';   /* LARGEST RTE PEDAL POSITION */DCL VEL.NOTE     LIT ' 62';   /* NOTE # 62 MEANS VELOCITY DATA WHEN SCANNING BACKWARDS */DCL REST.NOTE    LIT ' 63';   /* NOTE # 63 MEANS A REST */DCL LOWER.KEY    LIT ' 64';   /* THIS BIT IS SET IN 4-WORD RECORDS TO LOWER KEY BY 1 OCTAVE */DCL RAISE.KEY    LIT '128';   /* THIS BIT IS SET IN 4-WORD RECORDS TO RAISE KEY ONE OCTAVE *//* BIT DEFINITIONS FOR LOWER HALF OF 'SBITS'       *//* STORED IN UPPER HALF OF WORD 2 OF 4-WORD RECORD */DCL B.GLI  LIT   '1'; /* FOOT SWITCH - GLIDE */DCL B.REP  LIT   '2'; /* FOOT SWITCH - REPEAT */DCL B.ARP  LIT   '4'; /* FOOT SWITCH - ARPEGGIATE */DCL B.GUI  LIT   '8'; /* INDICATES GUITAR NOTE - MEANS LOWER 3 BITS ARE STRING NUMBER INSTEAD OF PEDAL */DCL B.TIE  LIT  '16'; /* CONSTRUCTS A SLUR FROM PREVIOUS NOTE TO THIS NOTE */DCL B.VOL  LIT  '32'; /* INDICATES VALID VOLUME DATA STORED IN RECORD */DCL B.ART  LIT  '64'; /* INDICATES AN ARTICULATED TIE */DCL B.UPD  LIT '128'; /* INDICATES UPDATE RECORD *//* $SUBTITLE  Variables Used to Keep Track of Sequencer States and Loop Times *//* **** NOTE ****  -  DURING RUN TIME,  THE KEYBOARD AND SPLIT KEYBOARD   AREA TREATED AS TRACKS IN MANY WAYS.   LOOK UP TABLES FOR TRACKS   ARE THEREFORE OFFSET BY 2 WORDS WHEN COMPARED TO THE TRACKS OF THE   SEQUENCER. *//* RUN-TIME DATA STRUCTURE: */DCL MAX.TRACKS       LIT   '256';     /* MAX # OF TRACKS PROCESSED   */DCL NUM.KBD.TRACKS   LIT   '  2';     /* NUM OF KEYBOARD TRACKS      */DCL MAX.TIMBRES      LIT   '256';     /* MAX # OF TIMBRES PROCESSED  *//* $PAGE - STORAGE AREAS FOR EACH TIMBRE *//* A BLOCK OF STORAGE IS ALLOCATED FOR EACH ACTIVE TIMBRE.   THIS   BLOCK HOLDS PRECOMPUTED INFORMATION FOR THE BASIC TIMBRE AND   UP TO FOUR PARTIALS.   THIS SECTOR CONTAINS NUMEROUS PRE-COMPUTED INFORMATION FOR   EACH PARTIAL (STORED NORMALLY WITH A STRIDE OF 4)  AS WELL   AS PRECOMPUTED INFORMATION FOR EACH TIMBRE.   USE THE FOLLOWING DEFINITIONS: *//* FOR EACH PARTIAL: *//* TIM.VOLUME.LEV IS PUT *//* FIRST TO PROVIDE      *//* SPEEDY LOOKUP DURING  *//* NOTE START            */DCL TIM.VOLUME.LEV        LIT  '(  0)';  /* HOLDS COMPUTED VOLUME LEVEL *//* SET UP BY COMPACT.TIMBRES:  */DCL TIM.PARTIAL.POINTERS  LIT  '(  4)';  /* WRD POINTER TO START OF PARTIAL (OFF OF PAR.PTR) */DCL TIM.PINFO.POINTERS    LIT  '(  8)';  /* WRD POINTER TO PINFO AREA (OFF OF PAR.PTR) *//* SET UP BY ALLOC.TIMBRE:     */DCL TIM.SYNTH.TYP         LIT  '( 12)';  /* SYNTH TYPE            */DCL TIM.KBDTAB.PTR        LIT  '( 16)';  /* POINTER TO KBD LOOK UP TABLE - RELATIVE TO TIM.PTR, OFF BY ONE */DCL TIM.WMEM#             LIT  '( 20)';  /* FOR FM WAVE MEMORY    */DCL TIM.CAN.USE.BOTH      LIT  '( 24)';  /* ALLOCATION            *//* SET UP BY COMPUTE.ENV.PARAMS */DCL TIM.OPTIONS           LIT  '( 28)';  /* PARTIAL OPTIONS       */DCL TIM.PARTIAL.VOL       LIT  '( 32)';  /* PARTIAL VOLUME FOR EACH PARTIAL - FROM PARTIAL */DCL TIM.EATLIM            LIT  '( 36)';  /* EATLIM - EIDTMC       */DCL TIM.EATLIM.STR        LIT  '(  5)';  /* STRIDE THEREOF        */DCL (EATLIM.LOC)          LIT ' 0';      /* ENV ATK  LIMIT  0-255 */DCL (EATINT.LOC)          LIT ' 1';      /* ENV ATK  INTERP INFO  */DCL (EIDLIM.LOC)          LIT ' 2';      /* ENV IDEC LIMIT  0-255 */DCL (EIDINT.LOC)          LIT ' 3';      /* ENV IDEC INTERP INFO  */DCL (EIDTMC.LOC)          LIT ' 4';      /* ENV IDEC TIME   CONST */DCL TIM.I.ISHC            LIT  '( 56)';  /* INDEX SHIFT COUNT.    */DCL TIM.IATLIM            LIT  '( 60)';  /* IATLIM - IIDTMC       */DCL TIM.IATLIM.STR        LIT  '(  5)';  /* STRIDE THEREOF        */DCL (IATLIM.LOC)          LIT ' 0';      /* INX ATK  LIMIT  0-255 */DCL (IATINT.LOC)          LIT ' 1';      /* INX ATK  INTERP INFO  */DCL (IIDLIM.LOC)          LIT ' 2';      /* INX IDEC LIMIT  0-255 */DCL (IIDINT.LOC)          LIT ' 3';      /* INX IDEC INTERP INFO  */DCL (IIDTMC.LOC)          LIT ' 4';      /* INX IDEC TIME   CONST */DCL TIM.EFDINT            LIT  '( 80)';  /* EFDINT - SFDTMC       */DCL TIM.EFDINT.STR        LIT  '(  6)';  /* STRIDE THEREOF        */DCL (EFDINT.LOC)          LIT '0';       /* ENV FDEC INTERP INFO  */DCL (IFDINT.LOC)          LIT '1';       /* INX FDEC INTERP INFO  */DCL (EFDTMC.LOC)          LIT '2';       /* ENV FDEC TIME   CONST */DCL (IFDTMC.LOC)          LIT '3';       /* INX FDEC TIME   CONST */DCL (SFDENV.LOC)          LIT '4';       /* ENV FDEC (SPLICING)   */DCL (SFDTMC.LOC)          LIT '5';       /*          (SPLICING)   *//* WRITE(MAL)=TIM.DEC.ADJ+(PTL*TIM.DEC.ADJ.STR); */DCL TIM.DEC.ADJ           LIT  '(104)';  /* DECAY ADJUST LOOK UP FOR EACH PARTIAL */DCL TIM.DEC.ADJ.STR       LIT  '(  5)';  /* STRIDE THEREOF                 */DCL TIM.HARM.ADJ          LIT  '(124)';  /* HARDMONIC ADJUST LOOK UP TABLE */DCL TIM.HARM.ADJ.STR      LIT  '(  8)';  /* STRIDE THEREOF                 */DCL TIM.LOOP.INTERP       LIT  '(156)';  /* INFO FOR LOOPING TIMBRE FRAME  */DCL TIM.LOOP.DELTAS       LIT  '(160)';  /* FOR EXPONENTIAL INFO FOR TIMBRE FRAME LOOP *//* SET UP BY COMPUTE.LOGS:  */DCL TIM.LOG.RA            LIT  '(164)';  /* LOG OF RATIO            */DCL TIM.LOG.PT            LIT  '(168)';  /* LOG OF PARTIAL TUNING   */DCL TIM.LOG.NCH           LIT  '(172)';  /* HOLDS LOG OF PAR CHORUS */DCL TIM.LOG.NCHCH         LIT  '(176)';  /* HOLDS LOG OF CHORUS/PAR CHORUS */                          /* SET UP BY COMPUTE.RBITS: */DCL TIM.INIT.STPOS        LIT  '(180)';  /* HOLDS INITIAL STEREO POSITION *//* ?????????????? */DCL TIM.PAN.PHASE         LIT  '(184)';  /* TO SYNCHRONIZE STEREO *//* NEXT STARTS AT 188 *//* FOR EACH TIMBRE: *//* SET UP BY COMPACT.TIMBRES:    */DCL TIM.MISC.POINTER      LIT  '(192)';  /* WRD POINTER TO MISC AREA (OFF OF PAR.PTR) */DCL TIM.TINFO.POINTER     LIT  '(193)';  /* WRD POINTER TO TINFO AREA (OFF OF PAR.PTR) */DCL ZERO.TIME      LIT     '50' ;    /* PLAY.TIME.LSB OF SCRIPT=0.000 */
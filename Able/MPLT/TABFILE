/* $d */insert ':-xpl:termutil';insert ':-xpl:catrtns';dcl OLDFILE(4)   fixed,    NEWFILE(4)   fixed,    TYPE         fixed,    TAB_THRESH   fixed,    TAB_FLAG     fixed,    CON_FLAG     fixed,    OBUFF(20480) fixed,    NBUFF(20480) fixed,    END_POINT    label;dcl CATBUFFER(C#DIR_MAX-1) fixed;ERROR:procedure (MESS);  dcl MESS fixed array;  crlf; pstringr(MESS); crlf;  goto END_POINT;end ERROR;PROCESS_FILE:procedure (LENGTH) returns (fixed);  dcl LENGTH    fixed,      (OI,NI)   fixed,      (C,I)     fixed,      SPACE_CNT fixed,      OFLOP     fixed,      NFLOP     fixed;  dcl UPPER lit '1',      LOWER lit '0';  GET_CHAR:procedure returns (fixed);    if OFLOP = LOWER then do;      C = (OBUFF(OI) & "HFF");      if C = 0 then OI    = OI + 1;               else OFLOP = UPPER;    end;    else do;      C     = shr(OBUFF(OI),8);      OI    = OI + 1;      OFLOP = LOWER;    end;    return (C);  end GET_CHAR;  PUT_CHAR:procedure (C);    dcl C fixed;    if NFLOP = LOWER then do;      NFLOP     = UPPER;      NBUFF(NI) = C;    end;    else do;      NFLOP     = LOWER;      NBUFF(NI) = NBUFF(NI) \ shl(C,8);      NI        = NI + 1;    end;  end PUT_CHAR;  OI = 0; OFLOP = LOWER;  NI = 0; NFLOP = LOWER;  do while OI < LENGTH;    /* Handle line number */    if ~CON_FLAG then do;      NBUFF(NI) = OBUFF(OI);      NI = NI + 1;    end;    OI = OI + 1;    /* Scan off text */    SPACE_CNT = 0;    C         = GET_CHAR;    do while C ~= 0;      if C = 32 then SPACE_CNT = SPACE_CNT + 1;      else do;        if SPACE_CNT < TAB_THRESH then do I = 1 to SPACE_CNT;          call PUT_CHAR (32); /* SP */        end;        else call PUT_CHAR (9); /* TAB */        call PUT_CHAR (C);        SPACE_CNT = 0;      end;      C = GET_CHAR;    end;    if SPACE_CNT < TAB_THRESH then do I = 1 to SPACE_CNT;      call PUT_CHAR (32); /* SP */    end;    if CON_FLAG then call PUT_CHAR (13); /* CR */    else do;      if NFLOP = LOWER then call PUT_CHAR (0);      call PUT_CHAR (0);    end;  end;  return (NI);end PROCESS_FILE;get_string ('Old file name: ',1,OLDFILE,8); crlf;get_string ('New file name: ',1,NEWFILE,8); crlf;TAB_FLAG = get_yn ('Tabulate? '); crlf;if TAB_FLAG then do;  pstring ('Tab threshold: '); TAB_THRESH = getnum; crlf;end;if TAB_THRESH < 1 \ TAB_THRESH > 256 then TAB_THRESH = 1;CON_FLAG = get_yn ('Convert? ');  crlf;if ~TAB_FLAG & ~CON_FLAG then call ERROR ('No changes.');call set_catbuf (addr(CATBUFFER(0)),0);if ~locate (OLDFILE,1) then call ERROR ('Old file not available.');if F#TYPE ~= T#TEXT then call ERROR ('Old file must be a text file.');if F#MS_LENGTH ~= 0 \ F#LS_LENGTH igt 80 then call ERROR ('Old file too big.');call readdata (F#MS_SECTOR,F#LS_SECTOR,OBUFF,F#WORDS);F#WORDS = PROCESS_FILE (F#WORDS);if CON_FLAG then TYPE = T#DATA;            else TYPE = T#TEXT;if ~replace (NEWFILE,TYPE,F#MS_LENGTH,F#LS_LENGTH,F#WORDS,1)then call ERROR ('Unable to save new file.');call writedata (F#MS_SECTOR,F#LS_SECTOR,NBUFF,F#WORDS);END_POINT:flush_term;
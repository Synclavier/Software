STRING_PROCESS:procedure swap2; /* Processes the character string and returns the character representing a symbol or command code*/  dcl (C,LEN,A) fixed,   /* Character, length */      SX        fixed,      SYM       boolean, /* Set if last char was a symbol */      DIR       boolean; /* Symbol direction */  DRAW_STRING:procedure ();  end DRAW_STRING;  CREATE_RECORD:procedure;        LEN = BUFF(1);        if LEN > 1 \ TSIZE = 2 \ BOXTX then do; /* Create a multi-word record */          if LEN then call pbyte(location(addr(BUFF(1))),LEN,0);          LEN = WORD_LEN(LEN)+1;          BUFF(0) = shl("140",8) \ LEN;          if TSIZE = 2 & EDIT_FONT ~= F_USER# then BUFF(0) = BUFF(0) \ R_DTX; /* Double size chars */          if BOXTX                            then BUFF(0) = BUFF(0) \ R_BTX; /* Boxed chars */        end;        else do;                /* Create a two-word record */          LEN = 2; BUFF(0) = shl("100",8) \ (BUFF(2) & LBYTE);        end;        BUFF(1) = shl(XOFF/4 & MASK6,6) \ CY/3;        if AUX_FONT then BUFF(1) = BUFF(1) \ R_AUX;        if CHARSET  then BUFF(1) = BUFF(1) \ R_LIB;        if EDIT_FONT = F_ALPHA# \ (LEN = 2 & SYM) then do;          BUFF(0) = BUFF(0) \ R_ALF; /* Make this an alpha record */          if DIR then BUFF(1) = BUFF(1) \ R_DIR; /* Set direction bit */        end;        else BUFF(1) = shl(EDIT_FONT,12) \ BUFF(1);        call INSERT_RECORD (MASTER_VOICE,LEN,BUFF); /* Insert a record into an edit list */        call EDIT_MARK (XBASE);                     /* Draw an edit mark */  end CREATE_RECORD;  BUFF(1) = 0; CX = XBASE + XOFF; SX = CX; A = 0; DIR = 0;  do forever;    C = SYMBOL_PROCESS;    if C = del & BUFF(1) > 0 then do;      BUFF(1) = BUFF(1) - 1;      C       = byte(location(addr(BUFF(1))),BUFF(1));      call SETUP_FONTS (SYM\EDIT_FONT=F_ALPHA#,AUX_FONT,CHARSET,EDIT_FONT);      call LOOKUP_SYMBOL (C);      if SYM_ADFT < F_MUSIC# then A = A - SYM_XADV*10;                             else A = A - SYM_XADV*CSC#;      vector_mode; data_level(1);      if BOXTX then do; /* Erase box if boxed text */        imove_to (SX-7,CY- 4*TSIZE); iplot (CX+1,CY- 4*TSIZE);        iplot    (CX+1,CY+13*TSIZE); iplot (SX-7,CY+13*TSIZE);        iplot    (SX-7,CY- 4*TSIZE);      end;      CX = XBASE + XOFF + A*TSIZE / CSC#;      call PLOT_CHARACTER (C,CX,CY,DIR);      data_level(0);      if BOXTX & BUFF(1) > 0 then do; /* Draw box if boxed text */        imove_to (SX-7,CY- 4*TSIZE); iplot (CX+1,CY- 4*TSIZE);        iplot    (CX+1,CY+13*TSIZE); iplot (SX-7,CY+13*TSIZE);        iplot    (SX-7,CY- 4*TSIZE);      end;    end;    else if sp <= C & C ~= del & (C & COM_BIT) = 0 & BUFF(1) < 128 then do;      /* PLOT_CHARACTER may trash SYM_XXXX so do it as late as possible */      SYM = (C >= "200");      if AUX_FONT & CHARSET then if SYM then C = C - "200";                                        else C = C + "200";      call pbyte (location(addr(BUFF(1))),BUFF(1),C);      BUFF(1) = BUFF(1) + 1;      call SETUP_FONTS (SYM\EDIT_FONT=F_ALPHA#,AUX_FONT,CHARSET,EDIT_FONT);      call LOOKUP_SYMBOL (C);      if SYM_FLIP & BUFF(1) = 1 then DIR = GET_DIRECTION;                                else DIR = UP#;      if TSIZE = 2 & EDIT_FONT ~= F_USER# then DIR = DIR \ SIGN_BIT; /* Tells PlotCharacter to use large chars */      if SYM_ADFT < F_MUSIC# then A = A + SYM_XADV*10;                             else A = A + SYM_XADV*CSC#;      if BOXTX then do; /* Remove end of present box */        imove_to (CX+1,CY- 4*TSIZE); data_level (1);        iplot    (CX+1,CY+13*TSIZE); data_level (0);      end;      call PLOT_CHARACTER (C,CX,CY,DIR);      CX = XBASE + XOFF + A*TSIZE / CSC#;      if BOXTX then do; /* Draw box if boxed text (this is hideously redundant w/ plot_record) */        imove_to (SX-7,CY- 4*TSIZE); iplot (CX+1,CY- 4*TSIZE);        iplot    (CX+1,CY+13*TSIZE); iplot (SX-7,CY+13*TSIZE);        iplot    (SX-7,CY- 4*TSIZE);      end;      if AUX_FONT & SYM then do;        call CREATE_RECORD;        return (0);      end;    end;    else do;      if BUFF(1) > 0 then call CREATE_RECORD;      return (C);    end;  end;end STRING_PROCESS;
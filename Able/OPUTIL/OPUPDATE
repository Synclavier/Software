/* Index file update utility *//* 02/27/97 - CJ - Restructured for MAC compilation */insert ':-xpl:reldat';insert ':-xpl:asciilit';				/* ASCII literals    */insert ':-xpl:termutil'; 				/* Interrupt terminal utilities */insert ':-xpl:scsiswap';				/* SCSI routines     */insert ':-xpl:catswap';					/* Catalog routines	*/insert ':-xpl:fileswap';				/* file i/o				*/insert ':-xpl:scsicmds';				/* SCSI				 	*/insert ':-xpl:optical';					/* optical specific	*/insert ':-xpl:devutil';insert ':-xpl:messages';insert ':-xpl:intrprtr';dcl Title       data ('Optical Index File Update Utility - ');/* Interrupt Handler: */dcl real.milliseconds fixed;when d03int then real.milliseconds = real.milliseconds + 5;insert ':oputil:ablesim';				/* bring in RTP simulation		*/insert ':oputil:recrdsou';				/* cloned ex-mem record mod	*/insert ':synsou:indexmod:indexsrc';	/* and index routines			*/enable;/* Main program Variables: */dcl Name(H#Name_Max) fixed;dcl DestSerial       fixed;dcl TreeName(100) fixed;dcl catbuf(c#Dir_Max - 1) fixed;dcl ok boolean;dcl DestStatBuf   (Stat#Rec_Length - 1) fixed;dcl OpName   		(NAM_BUF_SIZE_BYTES/2) fixed;dcl SenseMes 		(MESSAGE_BUF_SIZE/2) fixed;dcl CatMes   		(MESSAGE_BUF_SIZE/2) fixed;dcl StatMes  		(100)                fixed;dcl WhichDev 		fixed;dcl DoIt     		fixed;dcl GotIt    		fixed;dcl i        		fixed;dcl Complete		fixed;/* Main Program */call init_optical_controller;							/* init controller */call set_catbuf(addr(catbuf(0)),0); 				/* catalog buffer */call DefineStack(0,128);								/* define stack in external memory */call DefineMArea(-1,0,128,0,examount - 128);		/* use remainder of external memory for update */Complete = true;DoIt  = false;GotIt = false;while (DoIt == false || GotIt == false){	if (Complete) != 0	{		clear_screen;		pstring(Title); pstringr(rel.date);		crlf;		pstringr ('Utility to update Optical Volume Index File.');		crlf;		pstringr ('Instructions:');		pstringr ('   Press <RETURN> to construct or update the .INDEX file');		pstringr ('                  for the Optical Volume shown below.');		crlf;		flush_term;				if (find_device(10) == 0 && find_device(11) != 0)			WhichDev = 11;		else			WhichDev = 10;					if (find_device(10) != 0 && find_device(11) != 0)			pstringr('   Press <SPACE> or <i> to select a different Optical Drive');		else			pstringr('   Press <SPACE> to update the information displayed');				pstringr('   Press <BREAK> or Q to quit');				complete = false;	}		pos(12, 0);		fetch_level_name(WhichDev, OpName);	StatMes(0) = 0;		if (WhichDev == 10)		{erase_line; pstring ('UPDATE: Optical Zero: "O0:"  '); pstringr(OpName);}	else		{erase_line; pstring ('UPDATE: Optical One : "O1:"  '); pstringr(OpName);}		GotIt = false;	if (ReadHeader(WhichDev) != 0)	{		call Get_File_Name(H$Name, H#Name_Max, Name); /* get name from buffer */		DestSerial = gbuf(H$Serial);				if (Get_Statistics(WhichDev, DestStatBuf) != 0)		{			dcl (ms_tot, ls_tot, ms_used, ls_used, percent, megabytes_used) fixed;			dcl (ms_avail, ls_avail, megabytes_avail) fixed;						ms_used = DestStatBuf(Stat$MS_Used);			ls_used = DestStatBuf(Stat$LS_Used);						ms_avail = DestStatBuf(Stat$MS_Free);			ls_avail = DestStatBuf(Stat$LS_Free);						ms_tot = ms_used + ms_avail;			ls_tot = ls_used + ls_avail;			if (ls_tot ILT ls_used)				ms_tot = ms_tot + 1;						write("5") = ls_used;	/* no. sectors used */			write("4") = ms_used;;			write("7") = 2048;								/* divide to get megabytes */			megabytes_used = read("5") + (read("4") != 0); /* round up */						write("5") = ls_avail;	/* no. sectors used */			write("4") = ms_avail;;			write("7") = 2048;								/* divide to get megabytes */			megabytes_avail = read("5");						while (ms_tot != 0)			{				ls_tot  = shr(ls_tot,  1) | shl(ms_tot,  15);				ms_tot  = shr(ms_tot,  1);				ls_used = shr(ls_used, 1) | shl(ms_used, 15);				ms_used = shr(ms_used, 1);			}						write(5) = ls_used; write(6) = 100; write("324") = read(5); write(7) = ls_tot;			percent = read(5);						erase_line; pstring ('   Volume Name:    '); pstringr (name);			erase_line; pstring ('   Serial Number:  '); pnum(DestSerial, 6); crlf;			erase_line; pstring ('   Megabytes used: '); pnum(megabytes_used, 6);							pstring ('   ('); pnum(percent, 2); pstring ('% full)');							pstring ('   Megabytes available: '); pnum(megabytes_avail, 6); crlf;					GotIt = true;		}	}	if (GotIt == false)	{		get_sense_code_message        (S$SenseKey, SenseMes);		add_optical_sense_code_message(S$SenseKey, SenseMes);		get_cat_code_message          (C#Status,   CatMes  );		add_optical_cat_code_message  (C#Status,   CatMes  );			erase_line; pstringr ('   Could not read volume header:');		erase_line; pstring  ('      S$SenseKey = '); pnum (S$SenseKey, 6); pstring ('  '); pstringr(SenseMes);		erase_line; pstring  ('      C#Status   = '); pnum (c#status,   6); pstring ('  '); pstringr(CatMes  );		GotIt = false;				copy.error.message('   Drive is not ready; see specific error message above', StatMes);	}		if (GotIt != 0 && StatMes(0) == 0)			copy.error.message('   Press <RETURN> to start .INDEX file update', StatMes);		pos(17, 0);	erase_line; pstringr ('Status:');	erase_line; pstringr (StatMes);		i    = rchar;	DoIt = false;	if (i == a.refresh)		Complete = true;			else if (i == a.sp && find_device(10) != 0 && find_device(11) != 0)		WhichDev = WhichDev XOR 1;			else if (i == a.i && find_device(10) != 0 && find_device(11) != 0)		WhichDev = WhichDev XOR 1;			else if (i == l.i && find_device(10) != 0 && find_device(11) != 0)		WhichDev = WhichDev XOR 1;			else if (i == a.q || i == l.q || i == 0)		exit(0);		if (i == a.cr) DoIt = true;}pos(20,0);flush_term;ok = Open_Optical(TreeName,WhichDev);						/* try to open optical volume */if (not ok) and (S$SenseKey = S$Good) then do;	/* catalog error */	if (c#status = e#no_file)							/* no index file or index file not up to date */	or (c#status = e#not_uptodate)	then ok = true;										/* ok to do update */end;if (ok) and (Update_Index_File(TreeName,WhichDev)) then do;	pstringr ('');	pstringr ('   Update successful - index file created');	flush_term;end;else do;	get_sense_code_message        (S$SenseKey, SenseMes);	add_optical_sense_code_message(S$SenseKey, SenseMes);	get_cat_code_message          (C#Status,   CatMes  );	add_optical_cat_code_message  (C#Status,   CatMes  );	flush_term;	print;	print '   Update failed:';	print '      S$SenseKey = ', S$SenseKey, '  ', string(SenseMes);	print '      C#Status   = ', c#status,   '  ', string(CatMes  );end;
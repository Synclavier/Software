/* Program to print out optical volume name */insert ':-xpl:reldat';insert ':-xpl:termutil'; /* Interrupt terminal utilities */insert ':-xpl:scsi';insert ':-xpl:catrtns';insert ':-xpl:scsicmds';insert ':-xpl:optical';insert ':-xpl:devutil';insert ':-xpl:messages';dcl Title       data ('Optical Volume ID Utility - ');Get_File_Name: proc(BufIndex,Len,Name); /* get file name from optical disk buffer */   dcl BufIndex fixed; /* starting index of name in buffer */   dcl Len      fixed; /* length of name in words */   dcl Name     fixed array; /* array space to return name in */   dcl (i,c)   fixed;   Name(0) = 0; i = 0; c = -1; /* get the name of the file */   do while (i ilt Len) and (c <> 0); /* loop over characters of file name */      c = gbuf(BufIndex + i); /* get word of file name */      if c <> 0 then do; /* there's a character in there somewhere */         Name(1 + i) = c; /* store character(s) */         Name(0) = Name(0) + 1 + (shr(c,8) <> 0); /* count the no. characters */      end;      i = i + 1; /* next word */   end;end Get_File_Name;dcl Name				(H#Name_Max) fixed;dcl optbuf			(H#Rec_Length - 1)     	fixed;dcl O0Name			(NAM_BUF_SIZE_BYTES/2) 	fixed;dcl O1Name			(NAM_BUF_SIZE_BYTES/2) 	fixed;dcl SenseMes		(MESSAGE_BUF_SIZE/2) 	fixed;dcl CatMes  		(MESSAGE_BUF_SIZE/2) 	fixed;dcl DestStatBuf   (Stat#Rec_Length - 1) 	fixed;dcl GotIt											fixed;dcl Serial											fixed;enable;												/* for terminal output */clear_screen;pstring(Title); pstringr(rel.date);crlf;pstringr ('Utility to print out name of Optical Volume in O0: and O1:');crlf;flush_term;call init_optical_controller;					/* interrogate type and configur */call set_optbuf(addr(optbuf(0)),0);fetch_level_name(10, O0Name);fetch_level_name(11, O1Name);print 'Optical Zero: "O0:"  ', string(O0Name);GotIt = false;if (ReadHeader(10) != 0){   call Get_File_Name(H$Name, H#Name_Max, Name); /* get name from buffer */	serial = gbuf(H$Serial);		if (Get_Statistics(10, DestStatBuf) != 0)	{		dcl (ms_tot, ls_tot, ms_used, ls_used, percent, megabytes_used) fixed;		dcl (ms_avail, ls_avail, megabytes_avail) fixed;				ms_used = DestStatBuf(Stat$MS_Used);		ls_used = DestStatBuf(Stat$LS_Used);				ms_avail = DestStatBuf(Stat$MS_Free);		ls_avail = DestStatBuf(Stat$LS_Free);				ms_tot = ms_used + ms_avail;		ls_tot = ls_used + ls_avail;		if (ls_tot ILT ls_used)			ms_tot = ms_tot + 1;				write("5") = ls_used;	/* no. sectors used */		write("4") = ms_used;;		write("7") = 2048;								/* divide to get megabytes */		megabytes_used = read("5") + (read("4") != 0); /* round up */				write("5") = ls_avail;	/* no. sectors used */		write("4") = ms_avail;;		write("7") = 2048;								/* divide to get megabytes */		megabytes_avail = read("5");				while (ms_tot != 0)		{			ls_tot  = shr(ls_tot,  1) | shl(ms_tot,  15);			ms_tot  = shr(ms_tot,  1);			ls_used = shr(ls_used, 1) | shl(ms_used, 15);			ms_used = shr(ms_used, 1);		}				write(5) = ls_used; write(6) = 100; write("324") = read(5); write(7) = ls_tot;		percent = read(5);				erase_line; pstring ('   Volume Name:    '); pstringr (name);		erase_line; pstring ('   Serial Number:  '); pnum(serial, 6); crlf;		erase_line; pstring ('   Megabytes used: '); pnum(megabytes_used, 6);						pstring ('   ('); pnum(percent, 2); pstring ('% full)');						pstring ('   Megabytes available: '); pnum(megabytes_avail, 6); crlf;				flush_term;				GotIt = true;	}}if (GotIt == false){	get_sense_code_message        (S$SenseKey, SenseMes);	add_optical_sense_code_message(S$SenseKey, SenseMes);	get_cat_code_message          (C#Status,   CatMes  );	add_optical_cat_code_message  (C#Status,   CatMes  );	flush_term;   print '   Could not read volume header:';   print '      S$SenseKey = ', S$SenseKey, '  ', string(SenseMes);	print '      C#Status   = ', c#status,   '  ', string(CatMes  );   print;}print;print 'Optical One:  "O1:"  ', string(O1Name);GotIt = false;if (ReadHeader(11) != 0){   call Get_File_Name(H$Name, H#Name_Max, Name); /* get name from buffer */	serial = gbuf(H$Serial);		if (Get_Statistics(11, DestStatBuf) != 0)	{		dcl (ms_tot, ls_tot, ms_used, ls_used, percent, megabytes_used) fixed;		dcl (ms_avail, ls_avail, megabytes_avail) fixed;				ms_used = DestStatBuf(Stat$MS_Used);		ls_used = DestStatBuf(Stat$LS_Used);				ms_avail = DestStatBuf(Stat$MS_Free);		ls_avail = DestStatBuf(Stat$LS_Free);				ms_tot = ms_used + ms_avail;		ls_tot = ls_used + ls_avail;		if (ls_tot ILT ls_used)			ms_tot = ms_tot + 1;				write("5") = ls_used;	/* no. sectors used */		write("4") = ms_used;;		write("7") = 2048;								/* divide to get megabytes */		megabytes_used = read("5") + (read("4") != 0); /* round up */				write("5") = ls_avail;	/* no. sectors used */		write("4") = ms_avail;;		write("7") = 2048;								/* divide to get megabytes */		megabytes_avail = read("5");				while (ms_tot != 0)		{			ls_tot  = shr(ls_tot,  1) | shl(ms_tot,  15);			ms_tot  = shr(ms_tot,  1);			ls_used = shr(ls_used, 1) | shl(ms_used, 15);			ms_used = shr(ms_used, 1);		}				write(5) = ls_used; write(6) = 100; write("324") = read(5); write(7) = ls_tot;		percent = read(5);				erase_line; pstring ('   Volume Name:    '); pstringr (name);		erase_line; pstring ('   Serial Number:  '); pnum(serial, 6); crlf;		erase_line; pstring ('   Megabytes used: '); pnum(megabytes_used, 6);						pstring ('   ('); pnum(percent, 2); pstring ('% full)');						pstring ('   Megabytes available: '); pnum(megabytes_avail, 6); crlf;				flush_term;				GotIt = true;	}}if (GotIt == false){	get_sense_code_message        (S$SenseKey, SenseMes);	add_optical_sense_code_message(S$SenseKey, SenseMes);	get_cat_code_message          (C#Status,   CatMes  );	add_optical_cat_code_message  (C#Status,   CatMes  );	flush_term;   print '   Could not read volume header:';   print '      S$SenseKey = ', S$SenseKey, '  ', string(SenseMes);	print '      C#Status   = ', c#status,   '  ', string(CatMes  );   print;}
/* External memory manager matching RTP: */DCL DISKIO.INFO [4]     ARRAY;     /* INFO USED BY POLYREAD, POLYWRITE, EXTREAD, EXTWRITE            */INSERT ':SYNLITS:COMLITS';          /* COMPILATION FLAGS */INSERT ':SYNLITS:GLOBLITS';         /* GLOBAL ITEMS      */INSERT ':SYNLITS:SAMPLITS';         /* SND FILE ITEMS    */INSERT ':SYNAUXS:XMEMLITS';         /* ext memory LITS   */DCL EXAMOUNT FIXED PUBLIC;  						/* SECTORS OF EXTERNAL MEMORY AVAIL   */EXAMOUNT = CORE(LOC.EMSIZE)			- CORE(CORE(1)+C#SWPLEN);     		/* GET AMOUNT OF EXTERNAL MEMORY AVAILABLE */ALLOC.EXAMOUNT:PROC(NUM) PUBLIC SWAPABLE;  	/* ALLOCATE & ZERO OUT EXTERNAL MEMORY */	DCL (NUM,I,J) FIXED;	IF (EXAMOUNT ILT 64) THEN DO; 				/* OUT OF ROOM */		RETURN 0;	END;	IF (EXAMOUNT-64) ILT NUM THEN DO; 			/* OUT OF ROOM */		RETURN 0;	END;	EXAMOUNT=EXAMOUNT-NUM;	WRITE(MAM)=EXAMOUNT;		DO I=0 TO NUM-1;                      		/* ZERO OUT    */		RPC 256;		WRITE(MDI)=0;	END;	RETURN EXAMOUNT;END ALLOC.EXAMOUNT;DCL COPY.BUF    (ALT.COPY.BLEN-1) FIXED PUBLIC;  /* BUF USED BY COPY ROUTINES - CAN BE USED BY OTHERS WITH CARE */COPY.IN:PROC(DES,LEN) PUBLIC;           /* COPY BLOCK INTO MAIN MEMORY - SET UP MAM & MAL BEFORE CALLING */   DCL (DES,LEN) FIXED;   WRITE("313")=DES;                    /* SET UP CORE POINTER */	DO WHILE LEN IGE 64;              	 /* COPY 64 WORD CHUNKS */		RPC 64;		WRITE("373")=READ(MDI);		LEN=LEN-64;	END;	IF LEN<>0 THEN DO;                	 /* FINISH OUT          */		RPC LEN;		WRITE("373")=READ(MDI);	END;END COPY.IN;COPY.OUT:PROC(SOU,LEN) PUBLIC;          /* COPY BLOCK TO EX MEM - SET UP MAM & MAL BEFORE CALLING */   DCL (SOU,LEN) FIXED;   WRITE("313")=SOU;                    /* SET UP CORE POINTER     */	IF LEN IGT (256-READ(MAL))        	 /* STOP AT SECTOR BOUND    */	THEN DO;                          	 /* TO AVOID HARDWARE BUG   */		LEN=LEN-(256-READ(MAL));		RPC 256-READ(MAL);             	 /* REMEMBER -1 IN LITERAL  */		WRITE(MDI)=READ("373");       	END;	DO WHILE LEN IGE 64;              	 /* COPY 64 WORD CHUNKS     */		RPC 64;                        	 /* REPEAT CTR 64 TIMES     */		WRITE(MDI)=READ("373");        	 /* ALLOWS INTERRUPTS       */		LEN=LEN-64;                    	 /* MORE FREQUENTLY         */	END;	IF LEN<>0 THEN DO;                	 /* SOME REMAINING */		RPC LEN;		WRITE(MDI)=READ("373");	END;END COPY.OUT;COPY.EXT.MEM:PROC(SOUM,SOUL,DESM,DESL,LEN) PUBLIC;  /* HIGH SPEED COPIES - COPIES UP OR DOWN, ANY LENGTH, IN EXTERNAL MEMORY */   DCL (SOUM,SOUL,DESM,DESL,LEN,I) FIXED;   SOUM=SOUM+SHR(SOUL,8); SOUL=SOUL&255;     /* CONVERT FROM BASE+ OFFSET TO SECTOR + WORD */   DESM=DESM+SHR(DESL,8); DESL=DESL&255;     /* CONVERT FROM BASE+ OFFSET TO SECTOR + WORD */   IF (SOUM=DESM)&(SOUL=DESL) THEN RETURN;   /* CHECK HERE FOR EQUAL - NO NEED TO MOVE */   IF (LEN=0)                 THEN RETURN;   /* ALSO ZERO LENGTH */   IF (SOUM IGT DESM)\((SOUM=DESM)&(SOUL IGT DESL)) THEN DO; /* COPY DOWN */      DO WHILE LEN<>0;                       /* PROCESS DESIRED WORDS */         I=ALT.COPY.BLEN;                    /* GET DISK BUFFER LENGTH IN WORDS */         IF I IGT LEN THEN I=LEN;         WRITE(MAM)=SOUM; WRITE(MAL)=SOUL;         CALL COPY.IN(ADDR(COPY.BUF(0)),I);  /* GET DATA FROM EX MEM */         SOUM=READ(MAM);  SOUL=READ(MAL);    /* GET CONTINUATION ADDRESS */         WRITE(MAM)=DESM; WRITE(MAL)=DESL;   /* SET UP DESTINATION */         CALL COPY.OUT(ADDR(COPY.BUF(0)),I); /* WRITE DATA OUT */         DESM=READ(MAM);  DESL=READ(MAL);    /* GET CONTINUATION ADDRESS */         LEN=LEN-I;                          /* ACCOUNT FOR WORDS COPIED */      END;   END;   ELSE DO; /* COPY UP - MUST START AT TOP AND WORK DOWN */      SOUL=SOUL+LEN; DESL=DESL+LEN; /* COMPUTE TOP POINTERS */      SOUM=SOUM+SHR(SOUL,8); SOUL=SOUL&255;      DESM=DESM+SHR(DESL,8); DESL=DESL&255;      DO WHILE LEN<>0;                          /* PROCESS DESIRED WORDS */         I=ALT.COPY.BLEN;                       /* GET DISK BUFFER LENGTH IN WORDS */         IF I IGT LEN THEN I=LEN;         SOUL=SOUL-I;                           /* BACK UP POINTER BY LENGTH TO COPY */         IF SOUL<0 THEN DO;                     /* BACK UP MSB AS WELL */            SOUM=SOUM+("177400"\SHR(SOUL,8));   /* CONSTRUCT - NUMBER, ADD IN */            SOUL=SOUL&255;                      /* GET POSITIVE MSB */         END;         WRITE(MAM)=SOUM; WRITE(MAL)=SOUL;         CALL COPY.IN(ADDR(COPY.BUF(0)),I);     /* GET DATA FROM EX MEM */         DESL=DESL-I;                           /* BACK UP POINTER BY LENGTH TO COPY */         IF DESL<0 THEN DO;                     /* BACK UP MSB AS WELL */            DESM=DESM+("177400"\SHR(DESL,8));   /* CONSTRUCT - NUMBER, ADD IN */            DESL=DESL&255;                      /* GET POSITIVE MSB */         END;         WRITE(MAM)=DESM; WRITE(MAL)=DESL;      /* SET UP DESTINATION */         CALL COPY.OUT(ADDR(COPY.BUF(0)),I);    /* WRITE DATA OUT */         LEN=LEN-I;                             /* ACCOUNT FOR WORDS COPIED */      END;   END;END COPY.EXT.MEM;COPY.EXT.MEM.SEC:PROC(SOU,DES,SECL) PUBLIC;  /* SECTOR BOUNDARIES & LENGTH  */   DCL (SOU,DES,SECL) FIXED;   IF SOU=DES THEN RETURN;            /* NO WORK TO DO IF IN PLACE   */   IF SECL=0  THEN RETURN;            /* ZERO LENGTH                 */   IF SOU ILT DES THEN DO;            /* COPYING UP - START FROM TOP */      SOU=SOU+SECL; DES=DES+SECL;   END;   DO WHILE SECL IGT 250;             /* COPY IN CHUNKS */      IF SOU ILT DES THEN DO;         /* BACK UP FOR COPY */         SOU=SOU-250; DES=DES-250;      END;      CALL COPY.EXT.MEM(SOU,0,DES,0,SHL(250,8));      IF SOU IGT DES THEN DO;         /* INCREMENT AFTER IF COPYING UP */         SOU=SOU+250; DES=DES+250;      END;      SECL=SECL-250;   END;   IF SOU ILT DES THEN DO;      SOU=SOU-SECL; DES=DES-SECL;   END;   CALL COPY.EXT.MEM(SOU,0,DES,0,SHL(SECL,8));END COPY.EXT.MEM.SEC;/* Required by SCSI: */ABORT.SCSI:proc public; end;/* From terminal primitive: */Display_Update_Status: proc(mode,count,total) public swapable; /* display status message on screen from laser disk update */	dcl mode  fixed; /* mode to display */	dcl count fixed; /* no. items processed so far */	dcl total fixed; /* total no. items to process */	dcl i     fixed;	if mode = 0 then do; /* intitialize */		/* reserve for initilize */	end;	else do;		if total = 0 then i = 100; /* deal with divide by zero */		else do;			write("5") = count; /* calculate percent complete */			write("6") = 100;			write("324") = read("5");			write("7") = total; /* percent = (count / total) * 100 */			i = read("5");		end;		pstring ('   ');		do case mode - 1; /* print different messages */			pstring ('Reading category list:  ');			pstring ('Reading optical disk:   ');			pstring ('Updating file list:     ');			pstring ('Updating category list: ');		end;		pnum(count,6); pstring (' processed out of ');		pnum(total,6); pstring (', ');		pnum(i,    6); pstringr('% complete');	end;end Display_Update_Status;/* Update variable: */dcl new.poly.contents fixed;
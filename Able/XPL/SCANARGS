/* $subtitle Scan Command Line Arguments *//* This module contains procedures to scan off the command line arguments.  from the MONITOR...  By:  Karim J. Chichakly on 26 March 1987 */module command_args;   configuration modelC, nomuldiv;   insert ':-xpl:syslits'; /* system literals */   insert ':-xpl:strings'; /* string processing */   /* This procedure strips the program name (or command name) off the command   .  line and sets things up so NEXT_ARG can strip off the command arguments.   .  It returns TRUE if the program was initiated via the RUN command and   .  FALSE otherwise.  The following examples demonstrate what PROGNAME   .  and the returned RUN flag are in various situations.   .   .  command line                  progname     run flag   .  ------------                  --------     --------   .  compare x y                   compare      false   .  run compare x y               compare      true   .  old compare;run               run          true   .  old compare;com               com          false   .  new j;pla bach13              pla          false   */   setup_args: proc(progname) returns (boolean) public; /* setup to get command line arguments */      dcl progname  fixed array; /* put program name here */      dcl arg_start fixed; /* start of argument list */      dcl arg_end   fixed; /* end of argument list */      arg_end = core(loc.usr1) + core(loc.usr2); /* find end of command */      arg_start = strspn (loc(loc.tyb), ' ,', core(loc.usr1)); /* find end of program name (must be present) */      if arg_start igt arg_end then arg_start = arg_end; /* watch for end (implicitly handles -1) */      call strncpy (progname, loc(loc.tyb), core(loc.usr1), arg_start - 1); /* extract program name */      arg_start = strspn (loc(loc.tyb), ' ', arg_start); /* look for next space (in case we stopped at comma) */      if arg_start igt arg_end then arg_start = arg_end; /* watch for end */      call strntin (loc(loc.tyb), arg_start, arg_end); /* set up token scanner */      return (core(loc.rst) = 2); /* return whether this was a RUN */   end setup_args;   /* This procedure returns the next command line argument in ARG (it   .  also returns a pointer to ARG).  SETUP_ARGS must be called before   .  this procedure. */   next_arg: proc(arg) returns (pointer) public; /* get next command line argument */      dcl arg fixed array; /* next command line argument */      return (strtok (arg, ' ')); /* separate args by spaces */   end next_arg;end command_args;
   dcl clock        lit '"137"'; /* clock device */   dcl default_date lit '0'; /* no date */   dcl default_time lit '0'; /* no time */   get_date: proc returns (fixed) public recursive swappable; /* get date from clock */      dcl date fixed; /* date */      dcl i    fixed;      date = default_date; /* assume no date available */      if (read("51") and "100000") <> 0 then do; /* extended ID bits set */         if (read("57") and "4") <> 0 then do; /* M64K present */            write(clock) = shl(1, 8); /* reset RTC address */            i = read(clock); /* throw away 1/100 seconds */            i = read(clock); /* throw away hour */            i = read(clock); /* throw away minutes */            i = read(clock); /* throw away seconds */            date = shl(read(clock), 5); /* store month */            date = (date or read(clock)); /* store day */            date = (date or shl(read(clock), 9)); /* store year */         end; /* of M64K present */      end; /* of extended ID bits set */      return (date); /* return the date */   end get_date;   get_time: proc returns (fixed) public recursive swappable; /* get time from clock */      dcl time fixed; /* time */      dcl i    fixed;      time = default_time; /* assume no time available */      if (read("51") and "100000") <> 0 then do; /* extended ID bits set */         if (read("57") and "4") <> 0 then do; /* M64K present */            write(clock) = shl(3, 8); /* set RTC address command register */            write(clock) = "10"; /* be paranoid - set 12 hour mode */            write(clock) = shl(1, 8); /* reset RTC address */            i = read(clock); /* throw away 1/100 seconds */            i = read(clock); /* get hours */            time = (shl(i, 15 - 7) and "100000"); /* store AM/PM bit */            time = (time or shl(i and "17", 11)); /* store hours */            time = (time or shl(read(clock), 5)); /* store minutes */            time = (time or shr(read(clock), 1)); /* store seconds/2 */         end; /* of M64K present */      end; /* of extended ID bits set */      return (time); /* return the time */   end get_time;
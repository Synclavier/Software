/* MESSAGES - Routines for SCSI and Catalog Routine error messages */module message_module;	configuration ModelC,MulDiv;		insert ':-xpl:catrout';			/* catalog literals 	 */	insert ':-xpl:scsilits';		/* SCSI literals drivers */	insert ':-xpl:optlits';			/* Optical Disk literals */		insert ':-xpl:messages';		/* our own header file	 */		begin;							/* localize ourselves	 */   	copy.error.message:proc (sou, des) public recursive;		dcl (sou) array;		dcl (des) array;		dcl (i  ) fixed;				do i = 0 to sou(0) - 1;			pbyte(des, i, byte(sou, i));		end;				des(0) = sou(0);	end copy.error.message;	add.error.message:proc (sou, des) public recursive;		dcl (sou) array;		dcl (des) array;		dcl (i  ) fixed;				do i = 0 to sou(0) - 1;			if (des(0) < MESSAGE_BUF_SIZE)			{				pbyte(des, des(0), byte(sou, i));				des(0) = des(0) + 1;			}		end;	end add.error.message;	get_sense_code_message: proc(code, message) public recursive;		dcl code    fixed;		dcl message array;				message(0) = 0;				if (code > 0 && shr(code,8) != 0)		{			code = shr(code, 8);						if      (code == S$CheckCondition)	copy.error.message('Check Condition',     message);			else if (code == S$ConditionMet  )	copy.error.message('Condition Met',       message);			else if (code == S$Busy          )	copy.error.message('Busy',                message);			else if (code == S$Reserved      )	copy.error.message('Reserved',            message);			else                                copy.error.message('Unknown SCSI status', message);		}				else		{			if      (code == S$RecoveredError  )	copy.error.message('Recovered Error' ,                                    message);			else if (code == S$NotReady        )	copy.error.message('Drive is Not Ready; Check Media if Removable',        message);			else if (code == S$MediumError     )	copy.error.message('Medium Error; The Drive cannot be read',              message);			else if (code == S$HardwareError   )	copy.error.message('Hardware Error; The Drive reports it is broken',      message);			else if (code == S$IllegalRequest  )	copy.error.message('Illegal Request',                                     message);			else if (code == S$UnitAttention   )	copy.error.message('Unit Attention',                                      message);			else if (code == S$DataProtect     )	copy.error.message('Write Protected; The Media is write-protected',       message);			else if (code == S$BlankCheck      )	copy.error.message('Media is Blank',                                      message);			else if (code == S$VendorUnique    )	copy.error.message('Vendor-Specific',                                     message);			else if (code == S$CopyAborted     )	copy.error.message('Copy Aborted',                                        message);			else if (code == S$VolumeOverflow  )	copy.error.message('Volume Overflow; The Media is full',                  message);			else if (code == S$ArbFailed       )	copy.error.message('Arbitration Failed; SCSI termination is faulty',      message);			else if (code == S$SelFailed       )	copy.error.message('Selection Failed; The Drive is off or not connected', message);			else if (code == S$IdentFailed     )	copy.error.message('Ident Failed',                                        message);			else if (code == S$D24NotThere     )	copy.error.message('No D24 Hardware',                                     message);			else if (code == S$BadBusState     )	copy.error.message('Bad SCSI Bus State; SCSI termination is faulty',      message);			else if (code == S$BadInitiator    )	copy.error.message('Bad Host ID',                                         message);			else if (code == S$BadDevice       )	copy.error.message('Device is not available at this time',                message);			else if (code == S$GoodConnect     )	copy.error.message('Good SCSI Status',                                    message);			else                                    copy.error.message('Unknown SCSI status',                                 message);		}	end get_sense_code_message;		get_cat_code_message: proc(code, message) public recursive;		dcl code    fixed;		dcl message array;				message(0) = 0;				if      (code == e#none       )	copy.error.message('Good Catalog Status' ,                                   message);		else if (code == e#OS         )	copy.error.message('System Catalog Error with Magic Number',                 message);		else if (code == e#buffer     )	copy.error.message('No Catalog Buffer',                                      message);		else if (code == e#no_dir     )	copy.error.message('Missing Directory',                                      message);		else if (code == e#no_config  )	copy.error.message('Drive not Configured',                                   message);		else if (code == e#no_floppy  )	copy.error.message('No Floppy in Drive',                                     message);		else if (code == e#FCB        )	copy.error.message('System Error with FCB Number',                           message);		else if (code == e#level      )	copy.error.message('System Eror with Device Level Specifier',                message);		else if (code == e#storage    )	copy.error.message('No Storage Available',                                   message);		else if (code == e#cstorage   )	copy.error.message('No Contiguous Storage Available',                        message);		else if (code == e#dir_full   )	copy.error.message('Directory Full',                                         message);		else if (code == e#invalid    )	copy.error.message('Invalid Directory',                                      message);		else if (code == e#name       )	copy.error.message('Bad File Name',                                          message);		else if (code == e#duplicate  )	copy.error.message('Duplicate File Name',                                    message);		else if (code == e#no_file    )	copy.error.message('File Not Found',                                         message);		else if (code == e#not_cat    )	copy.error.message('Not a Catalog',                                          message);		else if (code == e#treename   )	copy.error.message('Bad Treename',                                           message);		else if (code == e#no_path    )	copy.error.message('Missing Path Directory',                                 message);		else if (code == e#type       )	copy.error.message('File Type Mismatch',                                     message);		else if (code == e#protect    )	copy.error.message('Write Protected Media',                                  message);		else if (code == e#too_large  )	copy.error.message('File Too Large',                                         message);		else if (code == e#truncate   )	copy.error.message('Truncation Error',                                       message);		else if (code == e#diskerror  )	copy.error.message('Disk Error: The Disk cannot be read',                    message);				else if (code == e#bad_volume     )	copy.error.message('Bad Volume Header - Not an N.E.D. Optical Disk',     message);		else if (code == e#bad_index   	  )	copy.error.message('Corrupt .INDEX File',                                message);		else if (code == e#no_index       )	copy.error.message('No .INDEX file for this Volume',                     message);		else if (code == e#volume_changed )	copy.error.message('Volume Change Error',                                message);		else if (code == e#not_uptodate   )	copy.error.message('.INDEX File is Out-of-Date',                         message);		else if (code == e#formatted      )	copy.error.message('Cannot Format - Volume is not blank',                message);		else if (code == e#record_full    )	copy.error.message('Disk is Full',                                       message);		else if (code == e#stack_full     )	copy.error.message('Out of Memory during Update',                        message);		else if (code == e#not_initialized)	copy.error.message('Media is not N.E.D. Format; FORMAT before use',      message);				else                                copy.error.message('Unknown Catalog status', message);	end get_cat_code_message;		add_optical_sense_code_message: proc(code, message) public recursive;		dcl code    fixed;		dcl message array;				if (code > 0 && shr(code,8) != 0)		{			code = shr(code, 8);						if      (code == S$CheckCondition)		add.error.message('',                    message);			else if (code == S$ConditionMet  )		add.error.message('',                    message);			else if (code == S$Busy          )		add.error.message('',                    message);			else if (code == S$Reserved      )		add.error.message('',                    message);			else                                	add.error.message('',                    message);		}				else		{			if      (code == S$RecoveredError  )	add.error.message('',                    message);			else if (code == S$NotReady        )	add.error.message('',                    message);			else if (code == S$MediumError     )	add.error.message('',                    message);			else if (code == S$HardwareError   )	add.error.message('',                    message);			else if (code == S$IllegalRequest  )	add.error.message('',                    message);			else if (code == S$UnitAttention   )	add.error.message('',                    message);			else if (code == S$DataProtect     )	add.error.message('',                    message);			else if (code == S$BlankCheck      )	add.error.message('',                    message);			else if (code == S$VendorUnique    )	add.error.message('',                    message);			else if (code == S$CopyAborted     )	add.error.message('',                    message);			else if (code == S$VolumeOverflow  )	add.error.message('',                    message);			else if (code == S$ArbFailed       )	add.error.message('',                    message);			else if (code == S$SelFailed       )	add.error.message('',                    message);			else if (code == S$IdentFailed     )	add.error.message('',                    message);			else if (code == S$D24NotThere     )	add.error.message('',                    message);			else if (code == S$BadBusState     )	add.error.message('',                    message);			else if (code == S$BadInitiator    )	add.error.message('',                    message);			else if (code == S$BadDevice       )	add.error.message('',                    message);			else if (code == S$GoodConnect     )	add.error.message('',                    message);			else                                    add.error.message('',                    message);		}	end add_optical_sense_code_message;			add_optical_cat_code_message: proc(code, message) public recursive;		dcl code    fixed;		dcl message array;				if      (code == e#none       )		add.error.message('',                                      message);		else if (code == e#OS         )		add.error.message('',                                      message);		else if (code == e#buffer     )		add.error.message('',                                      message);		else if (code == e#no_dir     )		add.error.message('',                                      message);		else if (code == e#no_config  )		add.error.message('',                                      message);		else if (code == e#no_floppy  )		add.error.message('',                                      message);		else if (code == e#FCB        )		add.error.message('',                                      message);		else if (code == e#level      )		add.error.message('',                                      message);		else if (code == e#storage    )		add.error.message('',                                      message);		else if (code == e#cstorage   )		add.error.message('',                                      message);		else if (code == e#dir_full   )		add.error.message('',                                      message);		else if (code == e#invalid    )		add.error.message('',                                      message);		else if (code == e#name       )		add.error.message('',                                      message);		else if (code == e#duplicate  )		add.error.message('',                                      message);		else if (code == e#no_file    )		add.error.message('; must UPDATE .INDEX file before copy', message);		else if (code == e#not_cat    )		add.error.message(''',                                     message',                                          message);		else if (code == e#treename   )		add.error.message(''',                                     message',                                           message);		else if (code == e#no_path    )		add.error.message('; .INDEX subcatalog is missing',        message);		else if (code == e#type       )		add.error.message('',                                      message);		else if (code == e#protect    )		add.error.message('',                                      message);		else if (code == e#too_large  )		add.error.message('',                                      message);		else if (code == e#truncate   )		add.error.message('; .INDEX subcatalog must be enlarged',  message);		else if (code == e#diskerror  )		add.error.message('',                                      message);			else if (code == e#bad_volume     )	add.error.message('',                                      message);		else if (code == e#bad_index   	  )	add.error.message('',                                      message);		else if (code == e#no_index       )	add.error.message('',                                      message);		else if (code == e#volume_changed )	add.error.message('',                                      message);		else if (code == e#not_uptodate   )	add.error.message('',                                      message);		else if (code == e#formatted      )	add.error.message('',                                      message);		else if (code == e#record_full    )	add.error.message('',                                      message);		else if (code == e#stack_full     )	add.error.message('',                                      message);		else if (code == e#not_initialized)	add.error.message('',                                      message);				else                                add.error.message('',                                      message);	end add_optical_cat_code_message;		end;	end message_module;
/* 400-MISC $TITLE  Some Miscellaneous New Panel Routines (Used to be in main loop) */

/*
   03/14/91 - CJ  - Removed unneeded publics to reduce symbol table
   01/09/91 - PF  - allow editing of Beats Per Measure display
   06/28/89 - cj  - allow VK button panel to flicker but not send stuff
                    over RS232 protocol
   10/20/88 - TSS - DISABLE FLICKER OPERATIONS & VOICE OUTPUT 
                    IF RS232 PROTOCOL RUNNING
   11/12/87 - MWH - Make timer comparisons unsigned to fix "30 sec hang"
   08/25/86 - TS - ADDED CODE TO DO THD.ACTIVE.MIDI.RTES DISPLAY
   08/06/86 - EEG - added is.button.soloed
   08/06/86 - TS - ADDED CODE TO DISPLAY OVERWRITE BUTTON INFO
   05/15/86 - "official" creation of release-M modules
*/

BLINK.TNAME.CURSOR:  PROC SWAPABLE; /* BLINK ALPHA NUMERIC CURSOR IN WINDOW */
   CURSOR.BLINK=CURSOR.BLINK XOR 1; /* TOGGLE BLINK STATE */
   CALL DISPLAY.TIMBRE.NAME(TIM.HEAD.LOOKUP(0,TIM.TINFO.POINTER),0); /* PRESENT DISPLAY  */
   IF CURSOR.BLINK<>0 THEN BLINK.MS=REAL.MILLISECONDS-300;  /* 100 MSEC */
   ELSE                    BLINK.MS=REAL.MILLISECONDS;      /* 400 MSEC */
   NEW.UPPER=0; NEW.LOWER=0;        /* DO NOT TRY TO BLINK SPOKEN CURSOR */
END BLINK.TNAME.CURSOR;

BLINK.BPM.CURSOR:  PROC SWAPABLE;
   CURSOR.BLINK=CURSOR.BLINK XOR 1; /* TOGGLE BLINK STATE */
   CALL DISPLAY.METER;
   IF CURSOR.BLINK<>0 THEN BLINK.MS=REAL.MILLISECONDS-300;  /* 100 MSEC */
   ELSE                    BLINK.MS=REAL.MILLISECONDS;      /* 400 MSEC */
   NEW.UPPER=0; NEW.LOWER=0;        /* DO NOT TRY TO BLINK SPOKEN CURSOR */
END BLINK.BPM.CURSOR;

DCL FLICKER.MS FIXED;               /* TIME BASE */

DO.FLICKER:  PROC SWAPABLE;         /* CAUSES RTE BUTTONS TO FLICKER WHEN HELD */
   IF (REAL.MILLISECONDS-FLICKER.MS) IGT 950
   THEN DO;                         /* FLASHING - RETRIGGER */
      FLICKER.PARAMS=1;             /* SET FLAG TO START FLICKER DISPLAY */
      PERFORM.FLICKER=0;            /* RESET OUR FLAG - DONE WITH FLICKER TIMER FOR NOW */
      CALL COMPUTE.RTE.BUTTONS;     /* PRESENT COMPLETE DISPLAY */
      IF NEW.PAN=0 THEN CALL PANEL.RESCAN;
   END;
END DO.FLICKER;

DO.RTE.DISPLAY: PROC PUBLIC SWAPABLE; /* DO RTE DISPLAY IN SEVERAL LOOPS FOR SPEED */
	DCL TINFO.PTR			FIXED;
	DCL (I,J,K,L)			FIXED;
	DCL SAVED.CLAV.INFO	FIXED STATIC;

   DO CASE (RTE.DISPLAY.STATE);                /* DIVIDE WORKLOAD UP */
      ;                                        /* DO NOTHING FIRST TIME THROUGH - RECOVER FROM COMPUTE.RBITS TIME */
      DO; CALL TURN.OFF.PARAMS; TOGGLE=0; END; /* FIRST: CALL ROUTINE TO TURN OFF ALL PARAMETER LITES */
      DO;                                      /* NEXT:  TURN ON EXPRESSION INPUT LITES */
         DO I=0 TO 7;CALL OFF(VKVEL.L+I);END;  /* TURN OFF SOURCE LITES FOR STARTERS */
         IF HELD.MIDI.BUTTON<>0 THEN DO;       /* SHOW LIGHTS FOR ACTIVE MIDI RTES */
            CALL OFF(PTUN.L);                  /* TURN OFF PTUNING BUTTON */
            J=TRK.HEAD.LOOKUP(0,THD.ACTIVE.MIDI.RTES); /* LOOK UP BITS */
            DO I=0 TO 7;                       /* LOOP OVER EXPRESSION INPUTS */
               IF (J&BITS(I))<>0               /* MIDI EXPRESSION ENABLED */
               THEN CALL ON(OVERWRITE.LOOKUP(I)); /* LIGHT THE BUTTON */
            END;
         END;
         ELSE IF (HELD.RTE.BUTTONS&512)<>0 THEN DO; /* SHOW LIGHTS FOR OVERWRITE BUTTON */
            CALL OFF(PTUN.L);                  /* TURN OFF PTUNING BUTTON */
            DO I=0 TO 5;                       /* LOOP OVER EXPRESSION INPUTS */
               IF (RTE.OVERWRITE.BITS&BITS(I))<>0 /* EXPRESSION ENABLED FOR OVERDUB */
               THEN CALL ON(OVERWRITE.LOOKUP(I)); /* LIGHT THE BUTTON */
            END;
         END;
         ELSE DO;                              /* SHOW LIGHTS FOR OTHER EXPRESSION BUTTONS */
            IF RTE.OVERWRITE.BITS<>0 THEN CALL ON(VKOVE.L); /* LIGHT OVERWRITE BUTTON IF ANY ENABLED */
            TINFO.PTR=TIM.HEAD.LOOKUP(0,TIM.TINFO.POINTER);
            IF TINFO.PTR=0 THEN DO;               /* NO TINFO BLOCK - LOOK UP FROM OLD RTE'S */
               I=P.LOOKUP(TIM.HEAD.LOOKUP(0,TIM.MISC.POINTER)+RTE.LOC);  /* GET ORIGINAL RTE WORD */
               IF  ((I&"000006")<>0)              /* PEDAL AND VEL HAD BEEN SELECTED */
               AND ((I&"000170")<>0)              /* AND ONE PARTIAL SELECTED */
               AND ((I&"177400")<>0)              /* AND ONE PARAMETER SELECTED */
               THEN CALL ON(VKVEL.L);             /* VELOCITY IS ACTIVE (ROUTED TO WHERE PEDAL WAS, IF NOT VIBRATO) */
            END;
            ELSE DO;                              /* DISPLAY FOR EACH ONE */
               DO I=0 TO 7;                       /* CHECK EACH SOURCE */
                  J=TINFO.PTR+TI.RTE+I*5;         /* GET POINTER TO RTE INFO */
                  K=0;
                  DO L=1 TO 4;K=K\P.LOOKUP(J+L);END; /* SEE IF ANY BITS SET */
                  IF  (P.LOOKUP(J)<>0)            /* IF AT LEAST ONE PARTIAL SELECTED */
                  AND (K<>0)                      /* AND ONE FUNCTION SELECTED */
                  THEN CALL ON(VKVEL.L+I);        /* TURN ON BUTTON */
               END;
            END;
         END;
      END;
      DO;                                      /* NEXT - DISPLAY PARAMETERS OR FLICKER */
         IF (FLICKER.PARAMS<>0)
         THEN DO;                              /* FLICKER DESIRED */
            CALL FLICKER.PARAMETER.BUTTONS;    /* TURN ALL ELIGIBLE BUTTONS ON */
            FLICKER.PARAMS=0;                  /* CLEAR OUR FLAG */
            PERFORM.FLICKER=1;                 /* SET FLAG FOR PERIODIC CHECK */
  				ANY.MISC.FUNCTIONS = TRUE;
            FLICKER.MS=REAL.MILLISECONDS;      /* SET TIME BASE */
         END;
         ELSE DO;
            CALL TURN.ON.PARAMS;               /* DISPLAY PARAMETERS FIRST IF NO FLICKER REQUIRED */
            RTE.DISPLAY.STATE=RTE.DISPLAY.STATE+2; /* SKIP EXTRA STATES IF NO FLICKER */
         END;
         IF NEW.PAN=0 THEN CALL PANEL.RESCAN;
      END;
      DO; CALL TURN.OFF.PARAMS; TOGGLE=0; END; /* TURN FLICKER LIGHTS OFF */
      DO; CALL TURN.ON.PARAMS;  TOGGLE=0; END; /* LIGHT THOSE REQUIRED    */
      CALL DISPLAY.PARTIAL.BUTTONS;            /* DISPLAY PARTIAL BUTTONS FOR SELECTED PARTIALS */
      CALL DISPLAY.SEQUENCER.STATUS;           /* CLEAR SEQUENCER BUTTONS IF ANY HELD */
      CALL DISPLAY.TRACK.BUTTONS;              /* SET UP CORRECT TRACK BUTTONS */
      CALL COMPUTE.TOGGLE.DISPLAY;             /* CALL TO SET UP TOGGLE BUTTONS ON PANEL (PORT,VIBRATO,FILTERS,REPEAT/ARPEG) */
      DO;
         CALL DISPLAY.TIMBRE.RECALL.BUTTONS;   /* TIMBRE RECALL BUTTONS OR CLEAR THEM */
         CALL DISPLAY.BANK.BUTTONS;            /* BANK BUTTONS OR CLEAR THEM */
      END;
      DO;                                      /* TRY THESE ALL AT ONCE */
         CALL DISPLAY.SMT.SKT.BUTTONS;         /* DISPLAY CORRECT SMT, SKT BUTTONS */
         CALL DISPLAY.HGS;                     /* DISPLAY APPROPRIATE HARMONIC GROUP SELECT */
         CALL DISPLAY.SEQUENCER.RECALL.BUTTONS;/* SEQUENCER RECALL OR CLEAR THEM */
      END;
      PRESENT.RTE.DISPLAY=0;                   /* RESET FLAG WHEN DONE */
   END;

   RTE.DISPLAY.STATE=RTE.DISPLAY.STATE+1;      /* DIVIDE WORKLOAD UP */

   /* IF THE TERMULATOR IS RUNNING OVER THE D50, WE CANNOT SEND      */
   /* ALL THESE BUTTON ON/OFF ITEMS TO THE MAC OR IT WILL CRUNCH.    */
   /* WAIT UNTIL THE DISPLAY HAS SETTLED AND THEN SEND IT OVER.      */
   /* THIS SHOULD ALLOW THE FLICKER TO OCCUR ON THE VK BUT ON        */
   /* ON THE MAC.                                                    */

   /* NOTE: RUNNING THE MAC OVER THE RS422 PROTOCOL SHOULD ALLOW     */
   /* IT TO FLICKER!!                                                */

   IF USE.D50.PROTOCOL <> 0      /* IF TALKING TO MAC OVER D50       */
   THEN DO;                      /* THEN HOLD OFF ON BUTTON UPDATES  */

      /* IF WE WILL BE COMING BACK HERE TO FINISH UP THE DISPLAY,    */
      /* JUST SAVE THE NEW CLAV INFO BITS FOR LATER.                 */

      IF PRESENT.RTE.DISPLAY <> 0 THEN DO;
         SAVED.CLAV.INFO  = SAVED.CLAV.INFO \ NEW.CLAVIER.INFO;
         NEW.CLAVIER.INFO = 0;
      END;

      /* ONLY WHEN WE ARE THROUGH WITH THE FLICKERING SHOULD WE      */
      /* SEND THE D50 PROTOCOL MESSAGES OVER TO THE MAC              */

      ELSE DO;
         NEW.CLAVIER.INFO = NEW.CLAVIER.INFO \ SAVED.CLAV.INFO;
         SAVED.CLAV.INFO  = 0;
      END;
   END;

END DO.RTE.DISPLAY;

/* $PAGE */

HANDLE.MISC.NEW.PAN.FUNCS:  PROC /*PUBLIC*/; 	/* DOES A FEW MISCELLANEOUS FUNCTIONS FOR NEW RTE COMPILATIONS */
	DCL I FIXED;
	insert ':-xpl:syslits';
	
	IF NEW.BUTTON.LIST(0)<>0               /* PROCESS EACH BUTTON PRESS OR RELEASE 			 */
	THEN CALL NEW.BUTTON;                  /* CALL SWAP PROCEDURE TO PROCESS BUTTON COMMAND */
	
	IF ((NEW.PAN=1)&(LOWER.DISP=LINES.DISP))
	OR ((NEW.PAN=0)&(UPPER.DISP=LINES.DISP))
	THEN DO;                             /* KEYBOARD ERROR DISPLAYED */
	  IF REMOVE.KBD.ERROR=0
	  THEN REMOVE.KBD.ERROR=1;          /* WAIT FOR 1 LOOP W NO ERRORS */
	  ELSE DO;
		  REMOVE.KBD.ERROR=0;            /* DONE WITH FLAG */
		  IF NEW.PAN THEN CALL CLEAR.LOWER;
		  ELSE            CALL CLEAR.UPPER;
		  IF PLAY<>0 THEN NEW.BEAT.NUMBER = 1;  /* REFRESH BEAT DISPLAY */
	  END;
	END;
	
	IF DISPLAY.TRACK.INFO<>0 THEN DO; 	  /* NEED TO CHECK FOR TIME TO DISPLAY TRK INFO */
	  IF (REAL.MILLISECONDS-DISPLAY.TRACK.INFO) IGT 100
	  THEN DO;                       	  /* TIME TO DO DISPLAY */
		  DISPLAY.TRACK.INFO = 0;
		  CALL COMPUTE.START.TIME.DISPLAY(DISPLAY.TRACK.#);
		  
		  /* SET UP FOR A POSSIBLE TRACK GROUP DEFINITION */
        
		  import (CORE(LOC.EMAREA), em.disallow_grouping_by_holding, LOCATION(ADDR(i)), 1); /* bring in group button preference */
		  
		  IF ((PLAY == 0)
		  &&  (i    == 0))
		  {
			  ALLOW.TRACK.GROUP.DEFINE = TRUE; /* NOW CHECK FOR A TRACK GROUP DEFINITION     */
			  TRACK.BUTTON.PRESS.TIME  = REAL.MILLISECONDS;
			  TGRP.TRACK.SELECT        = DISPLAY.TRACK.#;
		  }
	  END;
	END;
	
   IF  (NEW.PAN<>0)
   AND (UPPER.DISP=(TNAME.L-PAR.L))
   AND ((REAL.MILLISECONDS-BLINK.MS) IGT 400)
   THEN CALL BLINK.TNAME.CURSOR; /* BLINK ALPHA NUMERIC CURSOR IN WINDOW */

   IF  (NEW.PAN<>0)
   AND (UPPER.DISP=(BPM.L-PAR.L))
   AND (HELD.CLIK.BUTTON<>0)
   AND (HELD.SPEED.BUTTON<>0)
   AND ((REAL.MILLISECONDS-BLINK.MS) IGT 400)
   THEN CALL BLINK.BPM.CURSOR;

   IF (PERFORM.FLICKER<>0)       /* ALLOW FLICKER WITH D50 PROTOCOL  */
   THEN CALL DO.FLICKER;         /* RTE BUTTONS HELD - SPECIAL CHECK */

   IF PRESENT.RTE.DISPLAY<>0
   THEN CALL DO.RTE.DISPLAY;     /* PERFORM RTE DISPLAY -- MULTI-STATE FUNCTION */
      
	IF INFO.MODE<>0 THEN BEGIN;  /* POSSIBLY REFRESH REAL-TIME TRACK BUTTON DISPLAY */
	  IF (REAL.MILLISECONDS-INFO.MODE.UPDATE.TIME) IGT 100
	  THEN DO;                   /* TIME TO DO REFRESH OF DISPLAY */
		  CALL DISPLAY.ACTIVE.TRACKS;
		  INFO.MODE.UPDATE.TIME=REAL.MILLISECONDS;     /* APPROX 10 UPDATES/SECOND */
	  END;
	END;

	IF INSERT.DELETE.LOCKED<>0 THEN DO; /* POSSIBLY UNLOCK OPERATIONS */
	  IF (REAL.MILLISECONDS-INSERT.DELETE.UNLOCK.TIME) IGT 250
	  THEN DO;                  /* OK TO UNLOCK INSERT/DELETE OPERATIONS */
		  INSERT.DELETE.LOCKED=0;
		  IF UPPER.DISP<>ERR.DISP THEN DO; /* DON'T HAVE SOME ERROR IN WINDOW */
			  CALL CLEAR.UPPER;
			  CALL DISPLAY.NUMB.LEFT;
		  END;
	  END;
	END;
  
	IF  (NEW.PAN     <>0)
	AND (INC.KBD.MAPS<>0)                /* USE KBD MAPPING LOGIC */
	AND (PRESSURE.CALIBRATION.MODE<>0)   /* RUNNING PRESSURE CALIBRATION */
	AND (PRESSURE.CALIBRATION.KEY > 0)   /* KEY CURRENTLY SELECTED */
	THEN BEGIN;
	  
	  IF (NEW.ORK == 0) THEN DO;
		  DISABLE;                        /* AVOID KEYBOARD SCAN RIGHT HERE */
		  WRITE(CREG)=1;                  /* INDICATE KEYBOARD OPCODES */
		  WRITE(DREG)="200"\(PRESSURE.CALIBRATION.KEY-9);  /* REQUEST DATA FOR THIS KEY */
		  WRITE(CREG)="40"\1;
		  WRITE(CREG)=1;
		  WRITE(CREG)="100"\1;         /* PULSE_EXWR */
		  I=READ(DREG)&"377";          /* EXTRACT PRESSURE */
		  WRITE(CREG)=1;               /* REMOVE READ */
		  ENABLE;                      /* ALLOW KEYBOARD SCAN NOW */
	  END;
	  ELSE I = 0;
	
	  WRITE(MAM) = PMAP.PTR + 1;      /* POINT AT BASELINE PRESSURE TABLE */
	  WRITE(MAL) = PRESSURE.CALIBRATION.KEY;
	  I = I - READ(MD);               /* SUBTRACT OFF BASE LINE PRESSURE VALUE */
	  IF I < 0 THEN I = 0;            /* LIMIT TO ZERO */
	
	  IF (PRESSURE.CALIBRATION.VALUE<>I) /* PRESSURE IS DIFFERENT */
	  THEN DO;
		  PRESSURE.CALIBRATION.VALUE = I; /* LATCH VALUE */
		  CALL PRESSURE.CALIBRATION.DISPLAY(PRESSURE.CALIBRATION.KEY,I);
	  END;
	END;
	
	/* DETECT PRESS OF TRACK PAN BUTTON FOR 2 SECONDS */
	
	IF (HELD.TPAN.BUTTON != 0)
	{
		IF ((TPAN   != 0)
		&&  ((REAL.MILLISECONDS - TIME.OF.TPAN.PRESS) IGT 2000))
		{
			DO I=0 TO NUM.TRACK.BUTTONS-1;		/* RESET BUTTON ASSIGNMENTS					*/
				WRITE(MAM) = TBUT.PTR;
				WRITE(MAL) = I;
				WRITE(MD ) = (READ(MD)&"177400") | (I + NUM.KBD.TRACKS);
			END;
			
			ABORT.BOUNCE.SMT.SKT();
		
			NEW.SEQ.INFO = NEW.SEQ.INFO \ 2;		/* TREAT AS NEW TIMBRE NAME UPDATE...		*/
			
			CALL CLEAR.DISPLAY;
				
         CALL EMIT.STRING(0,'Track Buttons   Reset to Default');
			UPPER.DISP   = TPANRESET.DISP;
			BOTH.DISPLAY = 1;
			SUPRESS.BEAT.DISPLAY=1;                   /* STOP BEAT DISPLAYS MOMENTARILY */
			BEAT.DISPLAY.TIME=REAL.MILLISECONDS;      /* HOLD DISPLAY FOR 5 SECONDS */
		}
	}

	
	/* CHECK FOR HOLDING A TRACK BUTTON FOR 2 SECONDS: START OF GROUP DEFINITION			*/
	
	IF (ALLOW.TRACK.GROUP.DEFINE != 0)
	{
		IF ((REAL.MILLISECONDS - TRACK.BUTTON.PRESS.TIME) IGT 2000)
		{
			TOGGLE.TRACK.SOLO.STATE(TGRP.TRACK.SELECT);	/* UNDO UNDESIRED SOLOING THAT JUST OCCURRED... */
			
			CALL CLEAR.DISPLAY;
				
			WRITE(MAM) = TRK.HEAD;							/* SEE IF THIS TRACK IS POSSIBLY A GROUP TRACK		*/
			WRITE(MAL) = TGRP.TRACK.SELECT;
		
			IF (READ(MD) != 0)								/* IF THD EXISTS, GET GROUP LIST POITNER				*/
				I = TRK.HEAD.LOOKUP(TGRP.TRACK.SELECT, THD.GROUPLIST);
			ELSE
				I = 0;

			IF (I == 0)				
				CALL EMIT.STRING(0,'Create Track    Group...');
			ELSE
				CALL EMIT.STRING(0,'Modify Track    Group...');
			
			UPPER.DISP           = TGROUP.DISP;
			BOTH.DISPLAY         = 1;
			SUPRESS.BEAT.DISPLAY = 1;                   /* STOP BEAT DISPLAYS MOMENTARILY */
			BEAT.DISPLAY.TIME    = REAL.MILLISECONDS;   /* HOLD DISPLAY FOR 5 SECONDS */

		   ALLOW.TRACK.GROUP.DEFINE = FALSE;
			TGRP                     = TRUE;
			TRACK.STATE              = TRACK.STATE.DEFINE.GROUP;
			
			DISPLAY.TRACK.BUTTONS();
		 }
	}
	
	/* CHECK FOR TRACK GROUP DEFINING ENDING BY PRESSING ANY OTHER BUTTON */
	
	IF (TGRP != 0)												  /* IF CREATING/MODIFYING A TRACK GROUP	*/
	{
		IF (UPPER.DISP != TGROUP.DISP)					  /* IF DISPLAY HAS DISAPPEARED BY 			*/
			ABORT.BOUNCE.SMT.SKT();							  /* PRESSING ANOTHER BUTTON, THEN CLEAN	*/
		ELSE														  /* UP.  OTHERWISE, KEEP BEAT DISPLAY		*/
		{															  /* SUPPRESSED INDEFINITELY				   */
			SUPRESS.BEAT.DISPLAY = 1;                   /* STOP BEAT DISPLAYS MOMENTARILY 		*/
			BEAT.DISPLAY.TIME    = REAL.MILLISECONDS;   /* HOLD DISPLAY FOR 5 SECONDS 				*/
		}
	}
	
   /* IF R2-232 PROTOCOL RUNNING, DON'T DO VOICE OUTPUT SINCE */
   /* IT WILL JUST CONFUSE PEOPLE WHO ACCIDENTALLY TURN IT ON */

	#if (inc.voice.output)
		IF  (NEW.PAN<>0) AND (SPEAK.IT<>0)     /* VOICE OUTPUT ACTIVATED */
		AND (USE.D50.PROTOCOL = 0)             /* DON'T DO WITH PROTOCOL */
		THEN DO;                               /* CHECK FOR NEW OUTPUT   */
			IF D42.OUTPUT.HAPPENING<>0 THEN DO; /* CHECK TIMER            */
				IF (REAL.MILLISECONDS-SPEAK.TIME) IGT 2000
				THEN D42.OUTPUT.HAPPENING=0;
			END;
	
			ELSE IF ((NEW.UPPER\NEW.LOWER)<>0)  /* IF  DISPLAY CHANGED    */
			THEN CALL DO.VOICE.OUTPUT;          /* THEN CALL PROCEDURE    */
		END;
	#endif
	
	/* Reset flag so we don't spend time coming back here */
	/* if we don't need to...										*/

	IF ((NEW.BUTTON.LIST(0)        == (0            ))
   &&  (LOWER.DISP                != (LINES.DISP   ))
	&&  (DISPLAY.TRACK.INFO        == (0            ))
	&&  (UPPER.DISP                != (TNAME.L-PAR.L))
	&&  (UPPER.DISP                != (BPM.L  -PAR.L))
	&&  (PERFORM.FLICKER           == (0            ))
	&&  (PRESENT.RTE.DISPLAY       == (0            ))
	&&  (INFO.MODE                 == (0            ))
	&&  (INSERT.DELETE.LOCKED      == (0            ))
	&&  (PRESSURE.CALIBRATION.MODE == (0            ))
	&&  (HELD.TPAN.BUTTON          == (0            ))
	&&  (ALLOW.TRACK.GROUP.DEFINE  == (0            ))
	&&  (TGRP                      == (0            )))
	{
		#if (inc.voice.output)
			IF  (SPEAK.IT == 0)
				ANY.MISC.FUNCTIONS = 0;
		#else
				ANY.MISC.FUNCTIONS = 0;
		#endif
	}
	
END HANDLE.MISC.NEW.PAN.FUNCS;

/* returns true if passed button is currently soloed   */
IS.BUTTON.SOLOED: PROC(BUTTON) PUBLIC SWAPABLE;
   DCL BUTTON FIXED;
   DCL TRK    FIXED;

   WRITE(MAM)=TBUT.PTR;
   WRITE(MAL)=BUTTON;
   TRK=READ(MD)&255;
  
   WRITE(MAL)=TRK;
   
   IF ((READ(MD)&B.SOLOED.TRK)<>0)
   THEN RETURN TRUE;
   ELSE RETURN FALSE;

END IS.BUTTON.SOLOED;


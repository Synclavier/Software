/* 077-OLDW - NUMERIC WINDOW DISPLAY ROUTINE FOR OLD PANEL */

/*
   11/12/87 - MWH - Make timer comparisons unsigned to fix "30 sec hang"
   09/18/86 - TS - MADE SOME CHANGES TO DISPLAY.TRACK.START PROC
   08/25/86 - TS - MADE CHANGE FOR THD.ACTIVE.MIDI.RTES
   06/20/86 - CJ - MOVED SMPTE.ONOFF DECLARATION
   05/15/86 - "official" creation of release-M modules
*/

/* THIS FILE CONTAINS PROCEDURES THAT PRESENT THE WINDOW DISPLAYS */
/* ON THE ORIGINAL KEYBOARD                                       */

/*  'DISPLAY.WINDOW.NUM' IS CALLED TO CALCULATE THE DIGITS TO DISPLAY IN THE FOUR
     DIGIT LED DISPLAY ON THE CONTROL PANEL.

     DISPLAY IS PASSED TWO ARGUMENTS:
       WORD - A BINARY NUMBER WHOSE DECIMAL EQUIVALENT IS TO BE DISPLAYED
       DP   - A NUMBER THAT INDICATES THE DECIMAL POINT SETTING. 
       UNS  - A NUMBER THAT INDICATES THE UNITS TO DISPLAY. */

DCL DIGITS DATA ("77","6","133","117","146","155","174","47","177","147");

dcl prompt0 lit '0';
dcl prompt1 lit '0';

DISPLAY.ORK.WINDOW.NUMBER:PROCEDURE(WORD,DP,UNS); /* PASS NUMBER, DP PS, UNITS - NON SWAPPED SINCE IT IS USED FOR BEAT DISPLAY */
  DCL (WORD,DP,UNS) FIXED;
  DCL LIST(3)       FIXED; /* COMPUTE FOUR DIGITS */
  DCL (I,J,SIGN)    FIXED;

  SIGN=0; /* ASSUME POSITIVE NUMBER */
  IF WORD<0 THEN DO;
    WORD=-WORD; SIGN="100"; /* SET SIGN TO - FOR DISPLAY */
    IF DP=3 THEN DP=1; /* USE SINGLE DP FOR NEGATIVE RATIOS (CONSTANT XXX.X HERTZ MODULATOR) */
    DO WHILE WORD>=1000; LOAD WORD; DIV 10; WORD=RES; DP=DP-1; END;
  END;
  ELSE IF WORD > 9999 THEN DO;      /* POSITIVE NUMBER - CHECK FOR >9999 */ 
     LOAD WORD; DIV 10; WORD=RES;   /* DIVIDE BY 10 */
     IF (UNS=1)&(DP=0) THEN DO; UNS=0; DP=2; END; /* CHANGE TO 10.00 SECONDS */
     ELSE DP=DP-1;                  /* JUST MOVE DECIMAL POINT */
  END;

  DO I=0 TO 3;       /* COMPUTE 4 DIGITS (START WITH 1000 INSTEAD OF 10000) */
    LOAD WORD; DIV POWERS(I+1);
    LIST(I)=RES;     /* MOST SIG */
    WORD=READ(4);    /* READ MULTIPLY DIVIDE TO GET MODULO */
  END;

  J=0;                /* FIND FIRST NONZERO DIGIT */
  DO WHILE (J<3)&(LIST(J)=0)&(J<4-DP); J=J+1; END; /* FIND FIRST DIGIT TO DISPLAY */
  DO I=J TO 3;        /* LOOK UP BCD'S AS REQUIRED */
    LIST(I)=DIGITS(LIST(I));
    IF I=4-DP THEN LIST(I)=LIST(I)\"200"; /* LIGHT DECIMAL POINT IF REQUIRED */
  END;

  IF J<>0 THEN LIST(J-1)=SIGN; /* STORE SIGN */
  WINDOW.BITS(1)=SHL(LIST(0),8)+LIST(1);
  WINDOW.BITS(0)=SHL(LIST(2),8)+LIST(3);
  WINDOW.BITS(2)=UNS;      /* SET UP UNITS BIT WORD */
  CALL LOAD.ORK.DISPLAY;   /* LOAD IT INTO WINDOW   */

END DISPLAY.ORK.WINDOW.NUMBER;

/* $PAGE - OLD PANEL WINDOW DISPLAY ROUTINES CALLED BY MAIN PROGRAM */

DISPLAY.ORK.SIGNON:PROC(NUMV) PUBLIC SWAPABLE; /* DISPLAY SIGN-ON MESSAGE */
   DCL NUMV FIXED;

   CALL DISPLAY.ORK.WINDOW.NUMBER(NUMV,0,0); /* DISPLAY # OF VOICES AVAILABLE */
   WINDOW.BITS(1)=WINDOW.BITS(1)\PROMPT1; 
   WINDOW.BITS(0)=WINDOW.BITS(0)\PROMPT0;
   CALL LOAD.ORK.DISPLAY;
END DISPLAY.ORK.SIGNON;

DISPLAY.ORK.ERR:PROC(NUM) PUBLIC SWAPABLE; /* DISPLAY ERR0 - ERR9, ER10 - ER19 */
  DCL NUM FIXED;

  IF NUM<10 THEN WINDOW.BITS(0)="050000"+DIGITS(NUM); /* R */
  ELSE           DO; /* USE MULTIPLY DIVIDE TO REDUCE CODE */
     LOAD NUM;DIV 10;
     WINDOW.BITS(0)=SHL(DIGITS(READ(5)),8)+DIGITS(READ(4));
  END;
  WINDOW.BITS(1)="074520"; /* ER */
  WINDOW.BITS(2)=0; /* NO UNITS */
  CALL LOAD.ORK.DISPLAY;
END DISPLAY.ORK.ERR;

DISPLAY.ORK.BEAT.NUMBER:PROC(N); /* SPECIAL PROCEDURE - NON SWAPPED FOR SPEED */
  DCL (N) FIXED;

  CALL DISPLAY.ORK.WINDOW.NUMBER(N,0,0);     /* DO IT */
END DISPLAY.ORK.BEAT.NUMBER;

DISPLAY.ORK.FRAME.NUMBER:PROC(NUM) PUBLIC SWAPABLE;        /* DISPLAY A FRAME NUMBER IN WINDOW */
  DCL NUM FIXED;
  CALL DISPLAY.ORK.WINDOW.NUMBER(NUM,0,0);   /* DISPLAY NUMBER WITH NO UNITS */
END DISPLAY.ORK.FRAME.NUMBER;


/* $PAGE - MORE WINDOW DISPLAY ROUTINES (CALLED BY MAIN PROGRAM) */

DISPLAY.ORK.TIMBRE.RECALL.INFO:PROC(NUM.PARS,NUM.FRAMES) SWAPABLE; /* PASS NUMBER OF PARTIALS, NUMBER OF FRAMES */
   DCL (NUM.PARS,NUM.FRAMES) FIXED;
   IF NUM.PARS>9 THEN DO; /* TWO DIGIT DISPLAY */
     WINDOW.BITS(1)="040006"; /* '-1' */
     NUM.PARS=NUM.PARS-10;
   END;
   ELSE WINDOW.BITS(1)="100"; /* DASH */
   WINDOW.BITS(0)=SHL(DIGITS(NUM.PARS),8)+"100";
   WINDOW.BITS(2)=0; /* NO UNITS */
   IF (NUM.FRAMES<>0) THEN DO; /* DISPLAY # OF FRAMES AS WELL */
      IF (NUM.FRAMES<10)\((WINDOW.BITS(1)&"177400")<>0) THEN DO; /* FEWER THAN 10 FRAMES, OR MORE THAN 9 PARTIALS - MOVE OVER BY ONE */
         WINDOW.BITS(1)=SHL(WINDOW.BITS(1),8)+SHR(WINDOW.BITS(0),8);
         WINDOW.BITS(0)=SHL(WINDOW.BITS(0),8);
      END;
      ELSE WINDOW.BITS(1)=WINDOW.BITS(0); /* MOVE OVER BY 2 DIGITS */
      IF NUM.FRAMES>=10 THEN DO;
         IF NUM.FRAMES>=99 THEN NUM.FRAMES=99;
         LOAD NUM.FRAMES; DIV 10; NUM.FRAMES=READ(4); /* GET REMAINDER */
         WINDOW.BITS(0)=SHL(DIGITS(READ(5)),8);
      END;
      WINDOW.BITS(0)=WINDOW.BITS(0)\DIGITS(NUM.FRAMES);
   END;
   CALL LOAD.ORK.DISPLAY;               /* PRESENT INFO TO USER */
END DISPLAY.ORK.TIMBRE.RECALL.INFO;

DCL (NOTES.LEFT.MSB)    FIXED PUBLIC; /* FOR DISPLAY PURPOSES ONLY  -  MSB */
DCL (NOTES.LEFT.LSB)    FIXED PUBLIC; /*                            -  LSB */

DISPLAY.ORK.NUMB.LEFT:PROC SWAPABLE;             /* DISPLAY # OF NOTES LEFT IN SEQUENCER */
  IF (NOTES.LEFT.MSB INE    0)
  OR (NOTES.LEFT.LSB IGT 9999)
  THEN CALL DISPLAY.ORK.WINDOW.NUMBER(          9999,0,0);
  ELSE CALL DISPLAY.ORK.WINDOW.NUMBER(NOTES.LEFT.LSB,0,0);
END DISPLAY.ORK.NUMB.LEFT;

DISPLAY.ORK.TRACK.START:PROC(TRK,F,MSB,LSB); /* DISPLAY START TIME OF FIRST NOTE ON TRACK - PASS PLAY TIME, PLAY TIME CARRIES, CLICK RATE - NON SWAPPED FOR SPEED */
   DCL (TRK,F,MSB,LSB) FIXED; /* FORMAT F: 0 = EMPTY TRACK, OTHERS BEAT DISPLAY */

   IF F=0                                        /* EMPTY TRACK DISPLAY */
   THEN CALL DISPLAY.ORK.WINDOW.NUMBER(1,0,0);   /* DISPLAY 1 FOR OLD KEYBOARD IF EMPTY TRACK */
   ELSE DO;                                      /* NORMAL CASE */

      IF LSB ILT ZERO.TIME THEN MSB=MSB-1;       /* NOTE IS IN EARLIER GROUP */
      LSB=LSB-ZERO.TIME;                         /* GET ACTUAL DISTANCE (0-X) INTO THIS GROUP */

      LOAD LSB; ULOAD MSB;
      DIV SAMP.CLICK.RATE;                       /* MSEC/CLICK */
      CALL DISPLAY.ORK.WINDOW.NUMBER(RES+1,0,0); /* DISPLAY BEAT # - HUMANS START COUNTING WITH 1 */

   END;

END DISPLAY.ORK.TRACK.START;

/* $PAGE - WINDOW DISPLAY ROUTINE TO DISPLAY PARAMETERS (ORIGINAL SYNCLAVIER II PANEL) */

DISPLAY.ORK.PAR.NUM:PROC(VAL,DP,UN) SWAPABLE;      /* DISPLAY TIMBRE PARAMETER */
   DCL (VAL,DP,UN) FIXED;
   CALL DISPLAY.ORK.WINDOW.NUMBER(VAL,DP,UN&255);  /* SIMPLE DISPLAY FOR OLD PANEL */
END DISPLAY.ORK.PAR.NUM;

DISPLAY.SIGNED.ORK.PAR.NUM:PROC(VAL,UN) PUBLIC SWAPABLE; /* DISPLAY A SIGNED SHORT BYTE (STEREO CENTER, HARMONIC ADJUST) */
   DCL (VAL,UN)  FIXED;
   IF VAL<0 THEN DO; /* CASE FOR NEGATIVE VALUE */
      CALL DISPLAY.ORK.PAR.NUM(-VAL,0,UN); /* SET IT UP */
      IF VAL>-10 THEN WINDOW.BITS(0)=WINDOW.BITS(0)\"40000"; /* PUT IN MINUS SIGN */
      ELSE            WINDOW.BITS(1)="100";
      CALL LOAD.ORK.DISPLAY;
   END;
   ELSE CALL DISPLAY.ORK.PAR.NUM(VAL,0,UN); /* POSITIVE OR ZERO */
END DISPLAY.SIGNED.ORK.PAR.NUM;

DISPLAY.ORK.VIBRATO:PROC(CODE) SWAPABLE; /* DISPLAY A VIBRATO CODE AS BASE WITH MODIFIER BITS */
   DCL (CODE) FIXED;
   CALL DISPLAY.ORK.PAR.NUM((CODE&"17")+1,0,4); /* SET UP BASE */
   IF (CODE&"020")<>0 THEN WINDOW.BITS(1)=WINDOW.BITS(1)\"10000"; /* INVERT BIT */
   IF (CODE&"040")<>0 THEN WINDOW.BITS(1)=WINDOW.BITS(1)\ "2000"; /* QUANTIZE BIT */
   IF (CODE&"100")<>0 THEN WINDOW.BITS(1)=WINDOW.BITS(1)\   "20"; /* RAISE BIT */
   CALL LOAD.ORK.DISPLAY;
END DISPLAY.ORK.VIBRATO;

/* $PAGE - SPECIAL WINDOWN ROUTINES FOR 'LINES' DISPLAY ("----") */

DCL LINES            DATA ("040100","040100",0);

ORK.KBD.ERROR:PROC SWAPABLE;       /* PRESENT ERROR ON KEYBOARD NOTE */
  DCL (I) FIXED;

  DO I=0 TO 2;
    WINDOW.BITS(I)=LINES(I);
  END;

   CALL LOAD.ORK.DISPLAY;
END ORK.KBD.ERROR;

DISPLAY.ORK.MORE.NOTES:PROC(M) SWAPABLE;
   DCL M FIXED;
   IF M<>0 THEN DO;             /* DISPLAY LINES IF MORE NOTES */
      DO M=0 TO 2;
         WINDOW.BITS(M)=LINES(M);
      END;
      CALL LOAD.ORK.DISPLAY;
   END;                         /* BUT MUST NOT SET TYP */
END DISPLAY.ORK.MORE.NOTES;

ORK.DISK.MESSAGE:PROC;              /* WRITES THE WORD 'donE' IN THE WINDOW DISPLAY */
   WINDOW.BITS(0)="052171";
   WINDOW.BITS(1)="057134";
   WINDOW.BITS(2)=0;
   CALL LOAD.ORK.DISPLAY;
END ORK.DISK.MESSAGE;


DISPLAY.ORK.WINDOW.MESSAGE:PROC (MSG) SWAPABLE;
   DCL MSG ARRAY;
   DCL I   FIXED;

   DO I=0 TO 2;
      WINDOW.BITS(I)=WINDOW.BITS(I)\MSG(I);
   END;
   CALL LOAD.ORK.DISPLAY;
END DISPLAY.ORK.WINDOW.MESSAGE;

DISPLAY.ORK.WINDOW.TIMES:PROC(U,L) SWAPABLE;  /* DISPLAY SMPTE TIMES */
   DCL (U,L) FIXED;

   LOAD U; DIV 10;
   WINDOW.BITS(1)=SHL(DIGITS(READ(5)),8)\DIGITS(READ(4));
   LOAD L; DIV 10;
   WINDOW.BITS(0)=SHL(DIGITS(READ(5))\"200",8)\DIGITS(READ(4));
   CALL LOAD.ORK.DISPLAY;                 /* LOAD IT INTO WINDOW   */
END DISPLAY.ORK.WINDOW.TIMES;

DISPLAY.ORK.SMODE:PROC(MODE) PUBLIC SWAPABLE;   /* DISPLAY SMPTE MODE IN LOWER */
   DCL (MODE) FIXED;
   DCL MSG.OFF DATA ("000"+SHL("161",8),"161"+SHL("077",8),0);
   DCL MSG.DF  DATA ("161"+SHL("136",8),"077"+SHL("117",8),0);
   DCL MSG.30  DATA ("000"+SHL("000",8),"077"+SHL("117",8),0);
   DCL MSG.25  DATA ("000"+SHL("000",8),"155"+SHL("133",8),0);
   DCL MSG.24  DATA ("000"+SHL("000",8),"146"+SHL("133",8),0);

   IF SMPTE.ONOFF=0
   THEN CALL DISPLAY.ORK.WINDOW.MESSAGE(MSG.OFF);
   ELSE DO CASE (MODE);                      /* PRESENT SMPTE MODE */
      CALL DISPLAY.ORK.WINDOW.MESSAGE(MSG.DF);
      CALL DISPLAY.ORK.WINDOW.MESSAGE(MSG.30);
      CALL DISPLAY.ORK.WINDOW.MESSAGE(MSG.25);
      CALL DISPLAY.ORK.WINDOW.MESSAGE(MSG.24);
   END;
END DISPLAY.ORK.SMODE;

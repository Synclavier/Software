/* 195-PLAY   $TITLE  POLY ROUTINES TO PLAY A SAMPLE OF A SOUND FILE ONCE   Modified:   02/07/91 - MWH - Combine 3200, 6400 and 9600 RTP's   02/24/89 - TSS - Fixed poly ram >> 32mb bugs (sign extend into page bits)   10/03/88 - SGS - Fixed bugs in MONO VOICE routing for MC Outputs   08/18/87 - MWH - Rename to 195-PLAY   08/05/87 - MWH - Author   */DCL PB.LEFT   FIXED;       /* LEFT CHANNEL TO PLAY FILE WITH */                           /* ALSO SERVES AS MONO CHANNEL, IN POLY VOICE SYSTEMS */DCL PB.RIGHT  FIXED;       /* RIGHT CHANNEL TO USE, IF STEREO FILE IN POLY VOICE SYSTEM */DCL FAST.RATE LIT '12';    /* 26  MSEC CROSS FADE */DCL SLOW.RATE LIT '2';     /* 160 MSEC CROSS FADE */POLY.ALLOC.CHANS: PROC(BASE,STEREO) PUBLIC SWAPABLE;   DCL BASE   FIXED ARRAY;                /* POLY FILE BASE */   DCL STEREO FIXED;                      /* 1 IF SOUND FILE IS STEREO */   DCL BIN    FIXED;                      /* POLY BIN CONTAINING SOUND FILE */   DCL PTR    POINTER;                    /* POINTS TO PROPER FREE CHANNEL LIST */   DCL I      FIXED;   PB.LEFT  = 0;   PB.RIGHT = 0;   BIN = SHR(BASE(LW#MSB),BASE#BIN_P);    /* GET BIN NUMBER */   PTR = CORE(ADDR(FP0.PTR) + BIN);       /* AND FREE CHANNEL LIST FOR BIN */   IF  (CORE(PTR) <= STEREO)   THEN RETURN 0;                         /* NOT ENOUGH CHANNELS FOR PLAYBACK */   IF (STEREO  = 0)                       /* IF MONO SOUND FILE               */   OR (POLYADCS(BIN) = 0)                 /* OR NO ADC CONTROLLER             */   THEN DO;                               /* THEN PLAY MONO                   */      PB.LEFT = CORE(PTR+CORE(PTR));      /* GRAB CHANNEL FROM END OF LIST    */      CORE(PTR) = CORE(PTR) - 1;          /* ONE LESS CHANNEL FREE            */   END;   ELSE DO;                               /* MUST FIND MATCHED PAIR           */      I=CORE(PTR);                        /* START AT END                     */      DO WHILE  (I >= 2)                  /* GOING BACKWARDS                  */      AND       ((CORE(PTR+I) <> (CORE(PTR+I-1)+1))      OR         (CORE(PTR+I-1)));         I=I-1;      END;      IF I<2      THEN RETURN 0;                      /* NO STEREO PAIR AVAILABLE         */      PB.LEFT  = CORE(PTR+I-1);           /* FOUND A PAIR                     */      PB.RIGHT = CORE(PTR+I  );      CALL BLOCKMOVE (LOCATION(PTR+I+1),  /* SLIDE DOWN THE REST OF THE LIST  */                      LOCATION(PTR+I-1),                      CORE(PTR)-I     );      CORE(PTR) = CORE(PTR) - 2;          /* TWO LESS FREE CHANNELS NOW       */      IF PB.LEFT THEN DO;                 /* IF LEFT CHANNEL IS ODD           */         I=PB.LEFT;                       /* THEN SWAP LEFT AND RIGHT         */         PB.LEFT = PB.RIGHT;         PB.RIGHT = I;      END;   END;   RETURN 1;END POLY.ALLOC.CHANS;POLY.FREE.CHANS:PROC PUBLIC SWAPABLE;   DCL I   FIXED;   DCL PTR POINTER;   IF PB.LEFT = 0 THEN RETURN;    /* NO CHANNELS IN USE                 */   DISABLE;   IF PB.RIGHT <> 0 THEN DO;      /* IF STEREO, SHUT OFF RIGHT TOO      */      WRITE(PSC) = PB.RIGHT;      WRITE(PSF) = PSELIM;      WRITE(PSD) = 0;             /* SET ENVELOPE LIMIT TO 0            */   END;   WRITE(PSC) = PB.LEFT;   WRITE(PSF) = PSELIM;   WRITE(PSD) = 0;                /* SET ENVELOPE LIMIT TO 0            */   ENABLE;   I=1;   DO WHILE I<>0;                 /* WAIT FOR LEFT ENVELOPE TO BE ZERO  */		CHILL.OUT.AND.RUN.SYN();      DISABLE;      WRITE(PSC) = PB.LEFT;      WRITE(PSF) = PSEVAL;      I=READ(PSD);      ENABLE;   END;   CALL CLEANUP.SYNTH(PB.LEFT,PB.RIGHT);  /* STOP CHANNEL AT END OF NOTE TO KEEP CHANNELS IN PHASE */   PTR=CORE(ADDR(FP0.PTR) + (SHR(PB.LEFT,6)&"3"));  /* SET TO POLY LIST: FP0.PTR + BIN */   CORE(PTR)=CORE(PTR)+1;                 /* ONE MORE FREE      */   CORE(PTR+CORE(PTR))=PB.LEFT;           /* PUT ON END OF LIST */   IF PB.RIGHT <> 0 THEN DO;              /* IF IT WAS STEREO   */      CORE(PTR)=CORE(PTR)+1;              /* ONE MORE FREE      */      CORE(PTR+CORE(PTR))=PB.RIGHT;       /* PUT ON END OF LIST */   END;   PB.LEFT       = 0;      /* CHANNELS ARE NOT CURRENTLY IN USE */   PB.RIGHT      = 0;END POLY.FREE.CHANS;POLY.PLAY:PROC(BASE,SECS,TLENS,TLENW,LLENS,LLENW,LOOP,STEREO,SAMPLE.RATE,RATE) PUBLIC SWAPABLE;   DCL BASE  FIXED ARRAY;      /* BASE SECTOR IN POLY MEMORY             */   DCL SECS        FIXED;      /* STARTING SECTOR OFFSET FROM BASE       */   DCL TLENS       FIXED;      /* TOTAL LENGTH TO PLAY IN SECTORS        */   DCL TLENW       FIXED;      /* LENGTH IN WORDS TO ADD TO TLENS        */   DCL LLENS       FIXED;      /* LOOP LENGTH IN SECTORS                 */   DCL LLENW       FIXED;      /* LOOP LENGTH WORDS TO ADD TO LLENS      */   DCL LOOP        FIXED;      /* SET TO 1 IF LOOPING FILE, 0 OTHERWISE  */   DCL STEREO      FIXED;      /* SET TO 1 IF STEREO FILE, 0 OTHERWISE   */   DCL SAMPLE.RATE FIXED;      /* SF.SAMPLE.RATE FROM THE SOUND FILE     */   DCL RATE        FIXED;      /* SET TO 1 FOR FAST ENVELOPE, 0 FOR SLOW */   DCL XBASE(1)    FIXED;      /* LOCAL PLACE TO BUILD 32-BIT OFFSET     */   DCL (J,K)       FIXED;   CALL COPY32(BASE,XBASE);                /* GET SOUND FILE BASE  */   CALL ADD16(SECS,XBASE);                 /* ADD OFFSET TO IT     */   TLENS = TLENS + SHR(TLENW,8);           /* NORMALIZE            */   TLENW = TLENW & "377";   LLENS = LLENS + SHR(LLENW,8);   LLENW = LLENW & "377";   TLENS = NOT(TLENS);                     /* GET TWO'S COMPLEMENT */   TLENW = NOT(TLENW);   TLENW = TLENW + 1;   IF TLENW = 0 THEN TLENS = TLENS + 1;    /* CARRY                */   LLENS = NOT(LLENS);                     /* GET TWO'S COMPLEMENT */   LLENW = NOT(LLENW);   LLENW = LLENW + 1;   IF LLENW = 0 THEN LLENS = LLENS + 1;    /* CARRY                */   TLENW = TLENW | "177400";               /* SIGH EXTEND INTO PAGE BITS */   LLENW = LLENW | "177400";   CALL COMPUTE.PSYN.FREQ(2816+LOG1000(SAMPLE.RATE)-LOG1000(500)+1024);   DISABLE;         IF PB.RIGHT <> 0 THEN DO;               /* STEREO PLAYBACK                    */      WRITE(PSC)=PB.RIGHT;                 /* DECAY RIGHT CHANNEL AS WELL */      WRITE(PSF)=PSON;                     /* ON/OFF BIT         */      WRITE(PSD)=0;                        /* TURN CHANNEL OFF NOW TO PREPARE FOR SPLICE (IN CASE STOLEN CHANNEL) */      IF MULTI.THERE<>0 THEN DO;           /* INITIALIZE MULTI STUFF HERE FOR POLY */         WRITE(MAM)=TRK.HEAD;              /* POINT TO TRACK HEAD         */         WRITE(MAM)=READ(MD);              /* FOR KEYBOARD                */         WRITE(MAL)=THD.TROU;         J=READ(MD);                                K=SHL(J,8);                       /* GET RIGHT ROUTING (IN LOWER HALF) */         J=J&"177400";                     /* GET LEFT  ROUTING (IN UPPER HALF) */         WRITE(D32)="21";                  /* SELECT MULTI I/O  */         WRITE(MAM)=MPOLY.PTR;             /* POINT AT MULTICHANNEL-POLY MAP */         WRITE(MAL)=PB.RIGHT&"377";        /* POLY VOICE NUMBER */         IF MONO_VOICES_PRESENT THEN DO;   /* IF VOICE IS MONO DAC STYLE */            WRITE(D33)=K\(READ(MD)&255);   /* ROUTE RIGHT CHANNEL DAC TO RIGHT OUTPUT */         END;         ELSE DO;            WRITE(D33)=J\(SHR(READ(MD),8)); /* ROUTE LEFT INPUT TO LEFT OUTPUT */            WRITE(D33)=K\(READ(MD)&255);    /* ROUTE RITE INPUT TO RITE OUTPUT */         END;      END;      /* FOR MONO DAC VOICE CARDS, NO SPECIAL LOGIC REQUIRED */      /* ALWAYS PAN HARD RIGHT, SINCE NO LEFT DACS ON CARD   */      WRITE(PSF)=PSRCVOL;                  /* LOAD CURR & DEST VOL */      WRITE(PSD)=4095; WRITE(PSD)=0;       /* RIGHT, LEFT          */      WRITE(PSD)=4095; WRITE(PSD)=0;       /* RIGHT, LEFT          */      WRITE(PSF)=PSWL;                     /* WAVE TABLE LENGTH ENTRY */      WRITE(PSD)=0;   WRITE(PSD)=0;        /* WAVE TABLE LENGTH */      WRITE(PSD)=0;   WRITE(PSD)=0;        /* BASE ADDRESS      */      WRITE(PSD)=0;   WRITE(PSD)=0;        /* LOOP LENGTH       */      WRITE(PSD)=0;   WRITE(PSD)=0;        /* PHASE INC          */      WRITE(PSD)=255; WRITE(PSD)=0;        /* INCREMENT, MODULUS */      WRITE(PSF)=PSEINC;      WRITE(PSD)=4095;                     /* INCREMENT AT 25 KHZ RATE */      IF RATE <> 0 THEN DO;         WRITE(PSD) = FAST.RATE;         RATE = 0;      END;      ELSE WRITE(PSD)=SLOW.RATE;           /* DELTA - YIELDS 160 MSEC    */   END;                                    /* OF STEREO SOUND FILE */         /* START LEFT CHANNEL FOR PLAYBACK */   WRITE(PSC)=PB.LEFT;                     /* SELECT OUR CHANNEL */   WRITE(PSF)=PSON;                        /* ON/OFF BIT         */   WRITE(PSD)=0;                           /* TURN CHANNEL OFF NOW TO PREPARE FOR SPLICE (IN CASE STOLEN CHANNEL) */   IF MULTI.THERE<>0 THEN DO;              /* INITIALIZE MULTI STUFF HERE FOR POLY */      WRITE(MAM)=TRK.HEAD;                 /* POINT TO TRACK HEAD         */      WRITE(MAM)=READ(MD);                 /* FOR KEYBOARD                */      WRITE(MAL)=THD.TROU;      J=READ(MD);                             K=SHL(J,8);                          /* GET RIGHT ROUTING (IN LOWER HALF) */      J=J&"177400";                        /* GET LEFT  ROUTING (IN UPPER HALF) */      WRITE(D32)="21";                     /* SELECT MULTI I/O  */      WRITE(MAM)=MPOLY.PTR;                /* POINT AT MULTICHANNEL-POLY MAP */      WRITE(MAL)=PB.LEFT&"377";            /* POLY VOICE NUMBER */      IF MONO_VOICES_PRESENT THEN DO;      /* IF VOICE IS ONLY MONO (ONLY A RIGHT INPUT) */         WRITE(D33)=J\(READ(MD)&255);      /* ROUTE LEFT CHANNEL DAC TO LEFT OUTPUT */      END;      ELSE DO;         WRITE(D33)=J\(SHR(READ(MD),8));   /* ROUTE LEFT INPUT TO LEFT OUTPUT */         WRITE(D33)=K\(READ(MD)&255);      /* ROUTE RITE INPUT TO RITE OUTPUT */      END;   END;   WRITE(PSF)=PSRCVOL;                     /* LOAD CURR & DEST VOL */   IF MONO_VOICES_PRESENT THEN DO;         /* FOR MONO DAC VOICE CARDS */      /* ALWAYS PAN HARD RIGHT, SINCE NO LEFT DACS ON CARD */      WRITE(PSD)=4095; WRITE(PSD)=0;       /* RIGHT, LEFT          */      WRITE(PSD)=4095; WRITE(PSD)=0;       /* RIGHT, LEFT          */   END;   ELSE IF PB.RIGHT<>0 THEN DO;            /* STEREO               */      WRITE(PSD)=0; WRITE(PSD)=4095;       /* RIGHT, LEFT          */      WRITE(PSD)=0; WRITE(PSD)=4095;       /* RIGHT, LEFT          */   END;   ELSE DO;                                /* MONO                 */      WRITE(PSD)=2048; WRITE(PSD)=2048;    /* RIGHT, LEFT          */      WRITE(PSD)=2048; WRITE(PSD)=2048;    /* RIGHT, LEFT          */   END;   WRITE(PSF)=PSWL;                       /* WAVE TABLE LENGTH ENTRY */   WRITE(PSD)=TLENS;                      /* TOTAL LENGTH SECTOR     */   WRITE(PSD)=TLENW;                      /* TOTAL LENGTH WORD       */   WRITE(PSD)=XBASE(LW#LSB);              /* BASE SECTOR             */   WRITE(PSD)=SHL(XBASE(LW#MSB)&BASE#PAGE_B,8) \ 0;  /* PAGE # IN UPPER BYTE; WORD OFFSET = 0 */   WRITE(PSD)=LLENS;                      /* LOOP LENGTH SECTOR      */   WRITE(PSD)=LLENW;                      /* LOOP LENGTH WORD        */   WRITE(PSF)=PSPI;                       /* WRITE FREQ INFO         */   WRITE(PSD)=0;       WRITE(PSD)=SHL(NOTEADD,STEREO);    /* PHASE INC          */   WRITE(PSD)=NOTEINC; WRITE(PSD)=NOTENUM;     /* INCREMENT, MODULUS */   WRITE(PSF)=PSEINC;   WRITE(PSD)=4095;                     /* INCREMENT AT 25 KHZ RATE */   IF RATE <> 0 THEN DO;                /* IF FAST RATE REQUIRED */      WRITE(PSD) = FAST.RATE;           /* THEN DO A FAST FADE */      RATE = 0;   END;                                 /* ELSE DO A NORMAL FADE */   ELSE WRITE(PSD)=SLOW.RATE;           /* DELTA - YIELDS 160 MSEC    */   IF PB.RIGHT<>0 THEN DO;              /* STEREO SOUND FILE? */      WRITE(PSF)=PSADEVSM;              /* SET UP THIS CHANNEL AS THE EVEN STEREO MASTER */      WRITE(PSD)=1;      WRITE(PSC)=PB.RIGHT;              /* TURN ON SLAVE CHAN */      WRITE(PSF)=PSELIM;                /* ENV LIM/CVAL    */      WRITE(PSD)=4095;      WRITE(PSF)=PSON;                  /* ON/OFF FUNCTION CODE */      IF LOOP <> 0      THEN WRITE(PSD)=3;                /* ON WITH LOOP         */      ELSE WRITE(PSD)=1;                /* ON WITHOUT LOOP      */   END;   WRITE(PSC)=PB.LEFT;                  /* TURN ON SLAVE CHAN */   WRITE(PSF)=PSELIM;                   /* ENV LIM/CVAL       */   WRITE(PSD)=4095;   WRITE(PSF)=PSON;                     /* ON/OFF FUNCTION CODE */   IF LOOP <> 0   THEN WRITE(PSD)=3;                   /* ON WITH LOOP         */   ELSE WRITE(PSD)=1;                   /* ON WITHOUT LOOP      */   ENABLE;END POLY.PLAY;POLY.PLAY.SFILE:PROC(BASE) PUBLIC SWAPABLE;   DCL BASE  FIXED ARRAY;      /* BASE SECTOR IN POLY MEMORY             */   DCL STEREO      FIXED;      /* SET TO 1 IF STEREO FILE, 0 OTHERWISE   */   DCL SAMPLE.RATE FIXED;      /* POLY SAMPLING RATE                     */   DCL LENS        FIXED;      /* SECTORS IN SOUND PORTION OF SOUND FILE */   DCL J           FIXED;   CALL PSMREAD(BASE,0,BL.STEREO);   STEREO = READ(PSD);                    /* READ STEREO BIT          */   IF POLY.ALLOC.CHANS(BASE,STEREO) = 0   /* SET UP CHANNEL(S) TO USE */   THEN RETURN 0;                         /* NO CHANNELS              */   CALL PSMREAD(BASE,SF.HDR,SF.SAMPLE.RATE);   SAMPLE.RATE = READ(PSD);               /* USE RATE IF PRESENT      */   IF SAMPLE.RATE = 0 THEN DO;            /* NO RATE IS THERE         */      CALL PSMREAD(BASE,SF.HDR,SF.PERIOD.INDEX);  /* SO CALCULATE IT  */      J = READ(PSD);      LOAD 300;                                   /* GET KHZ * 10...  */      MUL 1000;                                   /* ...WHICH IS RATE */      WRITE("300") = RES;                         /* KEEP HW HAPPY    */      DIV J;      SAMPLE.RATE = RES;                          /* GET RESULTS      */      IF REM IGE SHR(J,1)      THEN SAMPLE.RATE = SAMPLE.RATE + 1;         /* ROUND UP         */   END;   CALL PSMREAD(BASE,0,BL.LEN);   LENS = READ(PSD) - SHR(BL.POLY,8);      /* LENGTH OF SOUND      */      CALL POLY.PLAY(BASE,SHR(BL.POLY,8),LENS,0,0,0,0,STEREO,SAMPLE.RATE,1);   RETURN 1;END POLY.PLAY.SFILE;POLY.WAIT.SF:PROC PUBLIC SWAPABLE;   DCL I FIXED;   I = 1;   DO WHILE I <> 0;               /* WAIT FOR VOLUME TO BE ZERO  */      DISABLE;      WRITE(PSC) = PB.LEFT;      WRITE(PSF) = PSRON;      I = READ(PSD);      ENABLE;		IF I <> 0 THEN DO;			CHILL.OUT.AND.RUN.SYN();		END;	     END;END POLY.WAIT.SF;
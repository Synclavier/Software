/*	:SYNRSOU:03-PRIM:131-SDF1  -  MORE SEQUENCER DEFINITIONS	*/

/*
Modified:
2001/06/30 - TY  - Modified CLEAN.TRACK.HEADS() so that zeroed (muted) multichannel assignments will no longer
						 be treated as unrouted and consequently overwritten.  Also out-of-range channels are now
						 transposed into range rather than being set to 0 so that relative settings can be preserved.
1999/04/11 - TY  - Modified "CLEAN.TRACK.HEADS" to utilize 4.20 user defaults
1991/04/24 - PF  - Init pedal 1 of THD.LIVE.RTES to RTE.MAX instead of zero
1991/02/13 - cj  - Did not create default tempo map on startup
1991/02/01 - PF  - Old sequence compatibility with respect to Tempo Maps
1990/11/12 - PF  - Sustain feature clean up
1990/10/10 - PF  - Add call to Create.Default.Tempo.Map in COMPUTE.TRK.HEADS
1990/08/27 - PF  - Support all MIDI controllers
1990/07/10 - PF  - Initialize Meter Map in COMPUTE.TRK.HEADS
1989/09/23 - CJ  - Added tempo and meter map ptrs
1989/07/17 - PF  - ADDED CHECK FOR "MIDINET THERE" IN CLEAN.TRACK.HEADS
1989/04/21 - CJ  - LOOK UP EVENT NAME IN LOOKUP.TIMBRE.NAME
1988/07/06 - pf  - Fix MIDI routing > available outputs
1988/03/15 - cj  - Send over info to dtd after changing track volume, routing
1987/11/17 - CJ  - MODIFIED SPEED.COMP TO DO NEW VS OLD COMPARISON
1987/01/06 - CJ  - CHECKED REPSCAN AND PRESCAN FOR INC.POLY, INC.MONO
1986/12/29 - CJ  - MONO SAMPLING ITEMS
1986/10/24 - TS  - INIT THD.MIDI.RTES TO 0 INSTEAD OF RTE.MAX IN CLEAN.TRACK.HEADS
1986/10/14 -CJ,BW- FIXED GET.BNK.STORAGE BUG
1986/10/09 - TS  - MADE CLEAN.TRACK.HEADS DETECT SOME THD.NN.MSB/LSB BUGS AND FIX THEM
1986/09/12 - TS  - PUT SAMP.BPM INTO SPEED.COMP & READ MARK TIME FROM SEQ
1986/08/24 - TS  - INITIALIZED THD.ACTIVE.MIDI.RTES IN CLEAN.TRACK.HEADS
1986/08/21 -TS,EG- FIXED BUG IN CLEAN.TRACK.HEADS THAT ERASED PTRS TO ILP RECORDS
1986/08/03 - cj  - fixed enable/disable bug in speed.comp
1986/07/25 - TS  - WHEN FREEING UP NLS, PUT (-1) IN NLS.FOR, NLS.REV, NLS.TRK
1986/07/24 - tss - removed insert.debug code
1986/07/15 -CJ,TS- ADDED MIDI ITEMS TO CLEAN.TRACK.HEADS
1986/07/13 - CJ  - ADDED NEW.SEQ, RECW,RECS TO NAH.COLLECT
1986/07/09 - CJ  - DELETED OLD BEAT SYNC ITEMS FROM SPEED.COMP
1986/06/20 -     - DELETED SMPTE.BPT
1986/06/18 - CJ  - SET NEW.MOTION IN SPEED.COMP
1986/06/11 - TSS - Deleted references to RECORD.SEC,RECORD.WRD,CONTINUE.SEC,CONTINUE.WRD
1986/06/10 - TSS - Fixed usage cntr bug in COMPACT.TIMBRES when freeing up timbres
1986/05/15 - "official" creation of release-M modules
*/

insert ':synmods:giddcl';

/*	COMPUTE.TRK.HEADS, ADJUST.TIM.HEADS	*/

/*	COMPUTE.TRK.HEADS - SETS UP LOOK UP TABLE POINTING
	TO EACH TRACK HEADER SECTOR (ABSOLUTE POINTERS).  LOOK UP
	TABLE IS STORED IN EXTERNAL MEMORY POINTED TO BY TRK.HEAD	*/

COMPUTE.TRK.HEADS: PROC PUBLIC SWAPABLE;		/*	RECOMPUTE ABS TRACK HEAD POINTERS AFTER MOVING NOTE AREA	*/
	DCL (I,J)	FIXED;

	IF NAH.LEN=0 THEN DO;					/*	NO NOTE AREA			*/
		WRITE(MAM)=TRK.HEAD;					/*	SO FILL WITH ZEROES	*/
		WRITE(MAL)=NUM.KBD.TRACKS;
		DO I=NUM.KBD.TRACKS TO MAX.TRACKS-1;
			WRITE(MDI)=0;
		END;

		DO I = 0 TO #.OF.MAP.PTRS-1;		/*	AND INITIALIZE MAP POINTERS	*/
			CORE(ADDR(TEMPO.MAP.PTR)+I) = 0;
		END;

		RETURN;
	END;

	DO I=NUM.KBD.TRACKS TO MAX.TRACKS-1;
		WRITE(MAM)=NAH.PTR;					/*	GET INFO FROM NOTE ARE HEADER	*/
		WRITE(MAL)=I;
		J=READ(MD);								/*	GET REL PTR TO TRACK				*/

		IF J<>0 THEN J=J+NAH.PTR;			/*	COMPUTE ABSOLUTE POINTER		*/

		WRITE(MAM)=TRK.HEAD;
		WRITE(MAL)=I;
		WRITE(MD) =J;
	END;

	/*	SET UP ABSOLUTE POINTERS FOR TEMPO AND METER MAPS:						*/

	DO I = 0 TO #.OF.MAP.PTRS-1;			/*	AND INITIALIZE MAP POINTERS	*/
		WRITE(MAM) = BAS.PTR;
		WRITE(MAL) = SEQ.MAP.PTRS + I;
		J			  = READ(MD);

		IF J<>0 THEN J=J+NAH.PTR;			/*	COMPUTE ABSOLUTE POINTER		*/

		CORE(ADDR(TEMPO.MAP.PTR)+I) = J;
	END;

	/*	INITIALIZE TEMPO MAP INFORMATION:	*/

	IF TEMPO.MAP.PTR <> 0 THEN DO;			/*	Tempo Map present				*/
		write(mam) = Tempo.Map.Ptr;			/*	access first block			*/
		write(mal) = Tempo.Map.FP;				/*	get pointer to start			*/
		Tempo.Map.Cur = read(mdi);				/*	should be Tempo.Map.First	*/
		Tempo.Map.Len = read(md);				/*	get ending pointer too.		*/
	END;
	CALL NORMALIZE.TEMPO.MAP.CUR;				/*	set up global variables		*/

	/*	INITIALIZE METER MAP INFORMATION:	*/

	IF METER.MAP.PTR <> 0 THEN DO;
		write(mam) = Meter.Map.Ptr;			/*	access first block			*/
		write(mal) = Meter.Map.FP;				/*	get pointer to start			*/
		Meter.Map.Cur = read(mdi);				/*	should be Meter.Map.First	*/
		Meter.Map.Len = read(md);				/*	get ending pointer too.		*/
	END;
	call Normalize.Meter.Map.Cur;				/*	set up global variables		*/

END COMPUTE.TRK.HEADS;


/*	ADJUST.TIM.HEADS - CORRECT ABSOLUTE TIMBRE HEAD POINTERS FOR	*/
/*	MOVEMENTS OF TIM.PTR BLOCKS												*/

/*	NOTE: ADJUST.TIM.HEADS STARTS WITH TRACK 1.  IT ASSUMES			*/
/*	THAT THE TRACK HEAD FOR TRACK 0 HAS BEEN ALLOCATED OUT OF		*/
/*	THE FIXED EXTERNAL MEMORY SPACE AND DOES NOT MOVE.					*/

ADJUST.TIM.HEADS:PROC (AMT) PUBLIC SWAPABLE;
	DCL (I,J,AMT)	FIXED;							/*	AMOUNT TO ADJUST BY	*/

	WRITE(MAM)=TIM.HEAD;								/*	KEYBOARD TIM.HEAD IS ABSOLUTE	*/
	WRITE(MAL)=1;										/*	SO START WITH 1	*/
	DO I=1 TO MAX.TIMBRES-1;
		J=READ(MD);
		IF J<>0 THEN J=J+AMT;
		WRITE(MDI)=J;
	END;
END ADJUST.TIM.HEADS;

/*	$PAGE - CLEAN TRACK HEADS	*/


CLEAN.TRACK.HEADS:PROC(START) PUBLIC SWAPABLE;
	DCL (I,J,K,L,START,TRK,THP)	FIXED;
	DCL (INSPECT.NLS)					FIXED;
	DCL (NUM.SCANNED)					FIXED;
	DCL (LAST.SEG)						FIXED;
	DCL (DTD.SOLOS)					FIXED;

	/*	INIT TO NO TRACKS SOLOED	*/

	WRITE(MAM)=TBUT.PTR;
	WRITE(MAL)=START;

	DO TRK=START TO MAX.TRACKS-1;
		WRITE(MDI)=READ(MD) & (NOT(B.SOLOED.TRK\B.MUTED.TRK));
	END;

	NUM.OF.SOLOED.TRACKS = 0;						/*	WE JUST CLEARED ALL SOLOED TRACKS	*/
	RECD.TRK					= 0;						/*	NO TRACK ARMED FOR RECORDING			*/

	/*	RESTORE DTD TRACK SOLOING	*/

	WRITE(MAM) = BAS.PTR;
	WRITE(MAL) = SEQ.DTD.SOLOS;
	DTD.SOLOS = READ(MD);

	DO I=FIRST.LOD.TRACK TO LAST.LOD.TRACK-1;
		IF ((DTD.SOLOS & BITS(I - FIRST.LOD.TRACK)) != 0)
		{
			WRITE(MAM)=TBUT.PTR;
			WRITE(MAL)=I;

			IF ((READ(MD) & B.SOLOED.TRK) == 0)
			{
				WRITE(MD) = READ(MD) | B.SOLOED.TRK;
				NUM.OF.SOLOED.TRACKS = NUM.OF.SOLOED.TRACKS + 1;
			}
		}
		END;

	CPLIST0=0;
	ARLIST0=0;
	UPLIST0=0;

	WRITE(MAM)=USE.PTR;								/*	ZERO OUT USAGE CTRS	*/
	WRITE(MAL)=NUM.KBD.TRACKS;

	DO I=NUM.KBD.TRACKS TO MAX.TIMBRES-1;
		WRITE(MDI)=0;
	END;

	DO TRK=START TO MAX.TRACKS-1;

		WRITE(MAM)=TRK.HEAD;							/*	LOOK UP TABLE		*/
		WRITE(MAL)=TRK;								/*	INDEX					*/

		THP=READ(MD);

		IF  (THP IGE NAH.PTR+NAH.LEN)				/*	BAD TRACK HEAD		*/
		AND (TRK IGE NUM.KBD.TRACKS)				/*	BUT OK FOR KBD		*/
		THEN DO;
			WRITE(MD)=0;								/*	NO TRACK HEAD		*/
			WRITE(MAM)=NAH.PTR;
			WRITE(MAL)=TRK;
			WRITE(MD)=0;
		END;

		ELSE IF THP<>0 THEN DO;
			// RESTORE SOLO STATE

			WRITE(MAM)=THP;							/*	POINT TO TRK HEAD	*/
			WRITE(MAL)=THD.ACTIVE;

			IF ((READ(MD) & B.SOLOED.TRK) != 0)
			{
				WRITE(MAM)=TBUT.PTR;
				WRITE(MAL)=TRK;

				IF ((READ(MD) & B.SOLOED.TRK) == 0)
				{
					WRITE(MD) = READ(MD) | B.SOLOED.TRK;
					NUM.OF.SOLOED.TRACKS = NUM.OF.SOLOED.TRACKS + 1;
				}
			}

			WRITE(MAM)=THP;							/*	POINT TO TRK HEAD	*/

			WRITE(MAL)=THD.TRK;
			IF READ(MD)<>TRK THEN DO;
				WRITE(MAM)=TRK.HEAD;					/*	LOOK UP TABLE		*/
				WRITE(MAL)=TRK;						/*	INDEX					*/
				WRITE(MD)=0;							/*	NO TRACK HEAD		*/
				WRITE(MAM)=NAH.PTR;
				WRITE(MAL)=TRK;
				WRITE(MD)=0;
			END;

			ELSE DO;										/*	CLEAN IT				*/
				WRITE(MAL)=THD.NACT;					/*	THD.NACT				*/
				WRITE(MDI)=0;
				WRITE(MDI)=0;							/*	THD.NDEC				*/

				WRITE(MAL)=THD.CPLIST;				/*	CHAN PRE LIST		*/
				WRITE(MDI)=0;
				WRITE(MDI)=0;							/*	THD.CPSUM			*/
				WRITE(MDI)=0;							/*	THD.CPPSUM			*/

				WRITE(MAL)=THD.ARLIST;				/*	RIBBON LIST			*/
				WRITE(MD )=0;

				WRITE(MAL)=THD.UPD.PARS;
				WRITE(MDI)=0;
				WRITE(MDI)=0;							/*	THD.UPD.QUED		*/
				WRITE(MD )=0;							/*	THD.UPD.LINK		*/

				WRITE(MAL)=THD.TRIGGER;				/*	INIT ST TRIGGER	*/
				WRITE(MD )=0;

				WRITE(MAL)=THD.LP.NMSB;				/*	ZERO LP INFO NOW	*/
				DO I=THD.LP.NMSB TO THD.LP.RTES+7;
					WRITE(MDI)=0;
				END;

				WRITE(MAL)=THD.ILS.CXPOS;
				DO I=THD.ILS.CXPOS TO THD.ILS.RTES+7;
					WRITE(MDI)=0;
				END;

				WRITE(MAL)=THD.ILE.CXPOS;
				DO I=THD.ILE.CXPOS TO THD.ILE.RTES+7;
					WRITE(MDI)=0;
				END;

				WRITE(MAL)=THD.TROU;					/*	INIT TRACK ROUT	*/

				IF MULTI.THERE=0						/*	NO MULTI HW			*/
				THEN WRITE(MD)=0;						/*	NO ROUTING			*/

				ELSE DO;									/*	MAKE SURE IN RANGE	*/

					IF TRK<NUM.KBD.TRACKS			/*	KBD - OUTPUT 0		*/
					THEN WRITE(MD)=64+SHL(64,8);

					else
					{	//	Adjust if out of range, else keep.  (NOTE: Zero is no longer considered out of range.)
						//	If out of range, then transpose into range maintaining the relationships between left/right pairs and with
						//	other tracks having out-of-range channels.  i.e., in an 8-channel system (11,12) should transpose to (3,4).
						//	This way, when a sequence created on a large machine is loaded into a smaller machine, the user
						//	won't have to wonder if the reset tracks were supposed to be routed in stereo or not.

						//	right channel
						if ((read(MD)&255) != 0)		//	if not muted
						{	write(5) = read(MD)&63;		//	original_channel_number
							if (read(5) > MULTI.MAX)	//	if out of range
							{	write(7) = MULTI.MAX;
								write(5) = read(4);		//	read(4) == original_channel_number mod MULTI.MAX
								write(4) = 64;				//	addend
								write(6)	= 1;				//	initiate add
								write(MD) = (read(MD)&"177400") | read(5);			//	merge the new channel into the pair
							}
						}
						//	left channel
						if ((read(MD)&(!255)) != 0)	//	if not muted
						{	write(5) = shr(read(MD),8)&63;	//	original_channel_number
							if (read(5) > MULTI.MAX)	//	if out of range
							{	write(7) = MULTI.MAX;
								write(5) = read(4);		//	read(4) == original_channel_number mod MULTI.MAX
								write(4) = 64;				//	addend
								write(6)	= 1;				//	initiate add
								write(MD) = (read(MD)&"000377") | shl(read(5),8);	//	merge the new channel into the pair
							}
						}
					}

				END;

				// Init THD.MIDI.  That is, turn off any midi routings
				// that point to hardware that is not available
				// at this time.
				WRITE(MAL)=THD.MIDI;					/*	INIT MIDI ROUT		*/

				IF TRK<NUM.KBD.TRACKS				/*	KBD - NO DEFAULT MIDI	*/
				THEN WRITE(MD)=0;

				ELSE DO;									/*	CHECK ROUTING	*/
				
					// Eliminate routings to non-existent hardware - MIDINet box
					if (((read(md)   & THD.MIDI.MIDINET  ) != 0)
					&&  ((MIDI.THERE & MIDI.THERE.MIDINET) == 0))
						WRITE(MD)=READ(MD)&(not(THD.MIDI.MIDINET));
					
					// Eliminate routings to non-existent hardware - OMS MIDI
					if (((read(md)   & THD.MIDI.OMS      ) != 0)
					&&  ((MIDI.THERE & MIDI.THERE.OMS    ) == 0))
						WRITE(MD)=READ(MD)&(not(THC.MIDI.OMS.ALL));
					
					// Eliminate routings to non-existent hardware - Original MIDI
					if (((read(md)   & THD.MIDI.OMS      ) == 0)
					&&  ((read(md)   & THD.MIDI.ORIG     ) != 0)
					&&  ((MIDI.THERE & MIDI.THERE.ORIG   ) == 0))
						WRITE(MD)=READ(MD)&(not(THD.MIDI.ORIG));
					
					// Check range to systems available if original hardware in use
					if (((read(md) & THD.MIDI.OMS ) == 0)
					&&  ((read(md) & THD.MIDI.ORIG) != 0))
					{								
						I=SHL(READ(MD)&7,2)\(SHR(READ(MD),5)&3);
						IF I>MAX.MIDI.CHAN-1 THEN DO;
							WRITE(MD)=READ(MD)&(not(THD.MIDI.ORIG));
						END;
					}
				END;

				IF READ(MD)=0 THEN CALL CLEAR.MIDI.OUT.CONTROLLERS(TRK);
				ELSE					 CALL SET.MIDI.OUT.CONTROLLERS  (TRK);

				WRITE(MAM)=THP;

				WRITE(MAL)=THD.MIDI.CG.VAL;
				WRITE(MDI)=0;
				WRITE(MDI)=0;		/*	THD.MIDI.CPROGRAM	*/

				WRITE(MAL)=THD.MIDI.RTES;
				WRITE(MDI)=SHL(RTE.MAX,8);	/*	PEDAL 1				*/
				WRITE(MDI)=SHL(RTE.MAX,8);	/*	PEDAL 2				*/
				WRITE(MDI)=SHL(RTE.MAX,8);	/*	MOD WHEEL			*/
				WRITE(MDI)=SHL(RTE.MAX,8);	/*	BREATH CONTROLLER	*/
				WRITE(MDI)=0;					/*	PITCH WHEEL			*/
				WRITE(MDI)=0;					/*	RAW RIBBON			*/
				WRITE(MDI)=0;					/*	+FRIBBON				*/
				WRITE(MD )=0;					/*	-FRIBBON				*/

				WRITE(MAL)=THD.SUSTAIN;
				WRITE(MD )=0;					/*	CLEAR SUSTAIN STATES	*/

				WRITE(MAL)=THD.ACTIVE.MIDI.RTES;

				IF READ(MD)>=0 THEN DO;		/*	MSB NOT SET INDICATES UN-INITIALIZED VALUE	*/
					write("313") = GID(Default.MIDI.RTEs);
					write(mam) = THP;
					write(mal) = THD.ACTIVE.MIDI.RTES;
					write(md ) = read("313");

					WRITE(MAL)=THD.MIDI;
					IF (READ(MD)&THD.MIDI.PRESURE)<>0 THEN DO;	/*	IF PRESSURE TURNED ON	*/
						WRITE(MAL)=THD.ACTIVE.MIDI.RTES;
						WRITE(MD )=READ(MD)\B.PRESSURE;				/*	SET BIT HERE TOO	*/
					END;
				END;

				IF TRK<NUM.KBD.TRACKS THEN DO;				/*	INIT KEYBOARD	*/

					WRITE(MAL)=THD.ACTIVE;
					WRITE(MD )=1;									/*	ALWAYS ACTIVE	*/

					WRITE(MAL)=THD.TVOL;							/*	TRK VOL			*/
					WRITE(MD )=1000;								/*	MAX AT FIRST	*/

					WRITE(MAL)=THD.MIDX;                   /*	MIDI XPOS		*/
					WRITE(MD )=0;                          /*	0              */

				END;

				DO I=0 TO THD.USAGE.LEN-1 BY 2;
					WRITE(MAM)=THP;
					WRITE(MAL)=THD.USAGE+I;
					IF READ(MD)<>0 THEN DO;						/*	TIMBRE #			*/
						J=READ(MDI);								/*	GET TIMBRE #	*/
						K=READ(MD );								/*	COUNTER			*/
						WRITE(MAM)=USE.PTR;
						WRITE(MAL)=J;
						WRITE(MD )=READ(MD)+K;
					END;
				END;

				/*	FIX UP POSSIBLY GLOMMED SEQUENCER TRACKS	*/
				/*	WHICH HAVE GOTTEN NEGATIVE OR INCORRET		*/
				/*	VALUES FOR THD.NN.MSB/LSB DUE TO BUGS IN	*/
				/*	EARLY SOFTWARE										*/

				INSPECT.NLS=0;
				NUM.SCANNED=0;

				WRITE(MAM)=THP;	/*	POINT AT TRK HEAD	*/
				WRITE(MAL)=THD.NN.MSB;

				IF (READ(MD)<0)		/*	UNREASONABLE NUMBER OF NOTES	*/
				OR ((READ(MDI)=0) AND (READ(MD)=0))	/*	OR ZERO NOTES	*/
				THEN DO;					/*	RECALCULATE # OF NOTES ON TRK	*/
					INSPECT.NLS=1;
				END;

				WRITE(MAL)=THD.FOR;
				I=READ(MD);				/*	GET PTR TO FIRST NLS	*/
				LAST.SEG=THP;			/*	INIT BACK POINTER		*/

				J=0; K=0;				/*	ZERO OUT TEMP CTRS	*/

				DO WHILE I<>0;			/*	LOOP UNTIL WE HIT END OF TRK	*/

					NUM.SCANNED = NUM.SCANNED + 1;

					IF NUM.SCANNED=0 THEN DO;		/*	INFINITE LOOP DETECTED	*/
						WRITE(MAM)=LAST.SEG;
						WRITE(MD )=0;
						I=0;
					END;

					ELSE IF (I IGE NAH.LEN)
					THEN DO;				/*	BAD NLS PTR	*/
						WRITE(MAM)=LAST.SEG;
						WRITE(MD )=0;
						I=0;
					END;

					ELSE DO;

						WRITE(MAM)=NAH.PTR+I;	/*	POINT AT NLS	*/
						WRITE(MAL)=THD.TRK;
						IF READ(MD)<>TRK
						THEN DO;
							WRITE(MAM)=LAST.SEG;
							WRITE(MD )=0;
							I=0;
						END;

						ELSE DO;

							IF INSPECT.NLS<>0 THEN DO;

								WRITE(MAM)=NAH.PTR+I;	/*	POINT AT NLS	*/
								WRITE(MAL)=NLS.FP;		/*	GET PTR TO 1ST NOTE	*/
								L=READ(MD);
								WRITE(MAL)=L;

								DO WHILE READ(MD)<>NLS.EOS;	/*	LOOP WHILE NOT AT END OF NLS	*/

									IF READ(MD)				/*	COMPUTE PTR TO NEXT NOTE	*/
									THEN L=L+4;
									ELSE L=L+2;

									IF  (READ(MDI)>=0)	/*	NOT AN ALTERNATE FORMAT NOTE	*/
									AND ((READ(MD)&"77")<>REST.NOTE)	/*	OR A REST NOTE		*/
									THEN DO;					/*	INCREMENT NUMBER OF NOTES CTR	*/
										K=K+1;
										IF K=0 THEN J=J+1;
									END;

									WRITE(MAL)=L;			/*	POINT TO NEXT NOTE	*/
								END;
							END;

							LAST.SEG=NAH.PTR+I;
							WRITE(MAM)=NAH.PTR+I;		/*	POINT AT NLS	*/
							WRITE(MAL)=NLS.FOR;			/*	LOOK UP PTR TO NEXT NLS	*/
							I=READ(MD);

						END;	/*	OF TRK # MATCHES	*/
					END;		/*	OF PTR IN RANGE	*/
				END;			/*	OF LOOP				*/

				IF INSPECT.NLS<>0 THEN DO;;
					WRITE(MAM)=THP;			/*	RESTORE PTR TO TRK HEAD	*/
					WRITE(MAL)=THD.NN.MSB;
					WRITE(MDI)=J;				/*	REWRITE THD.NN.MSB	*/
					WRITE(MDI)=K;				/*	REWRITE THD.NN.LSB	*/
				END;


			END;

		END;	/*	OF TRK HAS A HEADER	*/

	END;		/*	OF LOOP OVER TRKS TO CLEAN	*/

	/*	CLEAN UP MIDI RTES	*/

	DO TRK=START TO MAX.TRACKS-1;
		WRITE(MAM)=MIDI.TRACK.RTES+TRK;
		RPC 256;
		WRITE(MDI)=(-1);
	END;

	NEW.MOTION				  = 1;	/*	SEND NEW CUE TRACK CONSTANTS	*/
	NEW.CUE.TRACK.SETTINGS = 1;	/*	OVER AFTER SEQUENCE RECALL		*/

END CLEAN.TRACK.HEADS;

INIT.LIVE.RTES:PROC PUBLIC SWAPABLE;
	DCL I	FIXED;

	DO I=NUM.KBD.TRACKS TO MAX.TRACKS-1;

		WRITE(MAM)=TRK.HEAD;
		WRITE(MAL)=I;

		IF READ(MD)<>0 THEN DO;					/*	WE HAVE A TRACK HEAD	*/

			WRITE(MAM)=READ(MD);
			WRITE(MAL)=THD.LIVE.RTES;

			WRITE(MDI)=RTE.MAX;
			WRITE(MDI)=SHL(RTE.MAX,8);
			WRITE(MDI)=SHL(RTE.MAX,8);
			WRITE(MDI)=SHL(RTE.MAX,8);
			WRITE(MDI)=0;
			WRITE(MDI)=0;
			WRITE(MDI)=0;
			WRITE(MDI)=0;

		END;
	END;

END INIT.LIVE.RTES;

/*	$PAGE - MEMORY SHUFFLE ROUTINES	*/

SHUFFLE.BAS.DOWN:PROC PUBLIC SWAPABLE;			/*	MOVE BAS PTR TO 1	*/

	CALL COPY.EXT.MEM.SEC(BAS.PTR,1,BAS.LEN);	/*	BASE SECTORS TO 1	*/
	BAS.PTR=1;

END SHUFFLE.BAS.DOWN;

SHUFFLE.PAR.DOWN:PROC PUBLIC SWAPABLE;			/*	MOVE PAR AREA DOWN IN MEMORY	*/

	CALL SHUFFLE.BAS.DOWN;

	CALL COPY.EXT.MEM.SEC(PAR.PTR,BAS.PTR+BAS.LEN,PAR.LEN);
	PAR.PTR=BAS.PTR+BAS.LEN;

END SHUFFLE.PAR.DOWN;

SHUFFLE.TIM.UP:PROC PUBLIC  SWAPABLE;			/*	SHUFFLE TIM.PTR UP TO TRD	*/
	DCL (I,J)	FIXED;

	I=TRD.PTR-TIM.LEN;								/*	LENGTH OF TIMBRE BLOCK AREA	*/
	IF TIM.PTR<>I THEN DO;							/*	MUST MOVE IT	*/
		CALL COPY.EXT.MEM.SEC(TIM.PTR,I,TIM.LEN);
		J=I-TIM.PTR;
		TIM.PTR=I;
		CALL ADJUST.TIM.HEADS(J);					/*	ADJUST POINTERS FOR MOVEMENT	*/
	END;

END SHUFFLE.TIM.UP;

SHUFFLE.INF.UP:PROC PUBLIC  SWAPABLE;

	CALL SHUFFLE.TIM.UP;

	CALL COPY.EXT.MEM.SEC(INF.PTR,TIM.PTR-INF.LEN,INF.LEN);
	INF.PTR=TIM.PTR-INF.LEN;

END SHUFFLE.INF.UP;

SHUFFLE.BNK.UP:PROC PUBLIC  SWAPABLE;

	CALL SHUFFLE.INF.UP;

	CALL COPY.EXT.MEM.SEC(BNK.PTR,INF.PTR-BNK.LEN,BNK.LEN);
	BNK.PTR=INF.PTR-BNK.LEN;

END SHUFFLE.BNK.UP;

/*	$PAGE - MEMORY ALLOCATION FOR PARAMETERS, ETC.	*/


/*	PASS TOTAL # OF SECTORS NOW NEEDED FOR PAR STORAGE	*/
/*	RETURNS 1 IF ALLOCATION WAS OK							*/
/*	RETURNS 0 IF SUFFICIENT MEMORY NOT AVAILABLE			*/

/*	PAR.LEN WILL BE EQUAL TO THE PASSED SIZE IF THE		*/
/*	ALLOCATION WAS OK												*/

GET.PAR.STORAGE:PROC(AMT) PUBLIC SWAPABLE;	/*	GET PAR.PTR STORAGE	*/
	DCL (I,J,K,AMT)	FIXED;						/*	PASS AMOUNT NEEDED	*/
	DCL (PAR.CHUNK)	LIT '10';					/*	CHUNK SIZE				*/

	IF (AMT ILE PAR.LEN) THEN DO;					/*	OK IF ENOUGH ALREADY	*/
		PAR.LEN=AMT;
		RETURN 1;
	END;

	NEXT:;

	I=AMT-PAR.LEN;									/*	GET AMOUNT NEEDED		*/
	J=NAH.PTR-(PAR.PTR+PAR.LEN);				/*	GET AMOUNT BETWEEN PAR AND NAH	*/

	IF (J IGE I) THEN DO;						/*	NO SHUFFLE NEEDED		*/
		PAR.LEN=AMT;
		RETURN 1;
	END;

	IF PAR.PTR<>BAS.LEN+1 THEN DO;			/*	BASE NOT AT 1, OR PARS NOT IMMEDIATELY ABOVE IT	*/
		CALL SHUFFLE.PAR.DOWN;
		GOTO NEXT;
	END;

	K=J+(BNK.PTR-(NAH.PTR+NAH.LEN));			/*	ADD AMOUNT BETWEEN NOTES AND BANK	*/

	IF K ILT I THEN DO;							/*	MUST SHUFFLE OTHER THAN NOTES UP	*/
		IF BNK.PTR<>TRD.PTR-TIM.LEN-INF.LEN-BNK.LEN
		THEN DO;
			CALL SHUFFLE.BNK.UP;
			GOTO NEXT;
		END;
		RETURN 0;									/*	NOT ENOUGH ROOM	*/
	END;

	/*	THERE IS ENOUGH ROOM	*/
	/*	MOVE NOTE AREA TO		*/
	/*	MAKE CONTIGUOUS BLOCK	*/

	IF (SHR(K-I,1) IGE PAR.CHUNK)
	THEN I=I-J+PAR.CHUNK;						/*	MOVE UP 10 EXTRA SECTORS IF PLENTY OF ROOM	*/
	ELSE I=I-J+SHR(K-I,1);						/*	ELSE SPLIT DIFFERENCE IF GETTING TIGHT	*/

	CALL COPY.EXT.MEM.SEC(NAH.PTR,NAH.PTR+I,NAH.LEN);
	NAH.PTR=NAH.PTR+I;
	CALL COMPUTE.TRK.HEADS;

	GOTO NEXT;										/*	SHOULD BE SPACE NOW	*/

END GET.PAR.STORAGE;

/*	$PAGE - MEMORY ALLOCATION FOR SEQUENCER NOTES	*/

/*	CALL 'CHECK.MEMORY.FOR.RECORD' AFTER MAKING SIGNIFICANT	*/
/*	ALTERATIONS TO THE SEQUENCER.										*/

/*	'MAXIMIZE.MEMORY.FOR.RECORD' SHOULD ONLY BE CALLED IN		*/
/*	UNUSUAL SITUATIONS (IE IF MEMORY IS VERY TIGHT)				*/

MAXIMIZE.MEMORY.FOR.RECORD:PROC PUBLIC SWAPABLE;	/*	MAKE MAX SPACE FOR RECORDING	*/

	CALL SHUFFLE.BNK.UP;								/*	BANK, INFO, TIM ==> UP		*/

	CALL SHUFFLE.PAR.DOWN;							/*	BASE, PARAMS	 ==> DOWN	*/

	CALL COPY.EXT.MEM.SEC(NAH.PTR,PAR.PTR+PAR.LEN,NAH.LEN);
	NAH.PTR=PAR.PTR+PAR.LEN;						/*	NOTES ABOVE PARAMS			*/
	CALL COMPUTE.TRK.HEADS;

END MAXIMIZE.MEMORY.FOR.RECORD;


CHECK.MEMORY.FOR.RECORD:PROC PUBLIC SWAPABLE;	/*	MAKE USEFUL SPACE FOR RECORDING	*/
	DCL (I,J)	FIXED;

	I=(BNK.PTR-(NAH.PTR+NAH.LEN));				/*	GAP BETWEEN NOTES & BANK	*/

	IF I IGT 100 THEN RETURN;						/*	100 SECTORS ABOVE NOTES - THAT SHOULD EVEN BE ENOUGH FOR OSCAR PETERSON	*/

	CALL SHUFFLE.BNK.UP;

	CALL SHUFFLE.PAR.DOWN;

	I=(BNK.PTR-(NAH.PTR+NAH.LEN));				/*	COMPUTE GAPS AGAIN	*/
	J=(NAH.PTR-(PAR.PTR+PAR.LEN));

	IF I ILT 20 THEN CALL MAXIMIZE.MEMORY.FOR.RECORD;	/*	MAXIMIZE IF GETTING VERY TIGHT	*/
	ELSE IF (I ILT 100) & (J IGE I) THEN DO;	/*	MOVE NOTES IF USEFUL GAIN	*/
		I=PAR.PTR+PAR.LEN;							/*	NOTES ABOVE PARAMS	*/
		CALL COPY.EXT.MEM.SEC(NAH.PTR,I,NAH.LEN);
		NAH.PTR=I;
		CALL COMPUTE.TRK.HEADS;
	END;

END CHECK.MEMORY.FOR.RECORD;

/*	$PAGE - GET STORAGE FOR TIMBRE BANK	*/


GET.BNK.STORAGE:PROC(AMT) PUBLIC SWAPABLE;	/*	GET BNK.PTR STORAGE	*/
	DCL (I,J,K,AMT)	FIXED;					/*	PASS AMOUNT NEEDED	*/

	IF (AMT ILE BNK.LEN) THEN DO;				/*	OK IF ENOUGH ALREADY	*/
		BNK.LEN=AMT;								/*	SET LENGTH				*/
		RETURN 1;									/*	DONE						*/
	END;

	NEXT:;

	I=AMT-BNK.LEN;									/*	GET AMOUNT MORE NEEDED	*/
	J=INF.PTR-(BNK.PTR+BNK.LEN);				/*	GET AMOUNT BETWEEN BNK AND INF	*/

	IF (J IGE I) THEN DO;						/*	NO SHUFFLE NEEDED			*/
		BNK.LEN=AMT;
		RETURN 1;
	END;

	IF (INF.PTR<>TRD.PTR-TIM.LEN-INF.LEN)
	THEN DO;											/*	MOVE INF AND TIMS UP	*/
		CALL SHUFFLE.INF.UP;
		GOTO NEXT;
	END;

	K=J+(BNK.PTR-(NAH.PTR+NAH.LEN));			/*	ADD AMOUNT BETWEEN NOTES AND BANK	*/

	IF K ILT I THEN DO;							/*	MUST SHUFFLE OTHER THAN BANK DOWN	*/
		CALL SHUFFLE.PAR.DOWN;
		IF NAH.PTR<>(PAR.PTR+PAR.LEN)			/*	REMOVE GAP BETWEEN PARS & NOTES		*/
		THEN DO;
			CALL COPY.EXT.MEM.SEC(NAH.PTR,PAR.PTR+PAR.LEN,NAH.LEN);
			NAH.PTR=PAR.PTR+PAR.LEN;
			CALL COMPUTE.TRK.HEADS;
			GOTO NEXT;
		END;
		RETURN 0;									/*	NO ROOM!	*/
	END;

	/*	THERE IS ENOUGH ROOM	*/
	/*	MOVE BANK TO			*/
	/*	MAKE CONTIGUOUS BLOCK	*/

	CALL COPY.EXT.MEM.SEC(BNK.PTR,BNK.PTR-(I-J),BNK.LEN);
	BNK.PTR=BNK.PTR-(I-J);

	GOTO NEXT;										/*	SHOULD BE SPACE NOW	*/

END GET.BNK.STORAGE;

/*	$PAGE - GET STORAGE FOR PRECOMPUTED TIMBRE ITEMS	*/


GET.TIM.STORAGE:PROC(AMT) PUBLIC SWAPABLE;	/*	GET TIM.PTR STORAGE	*/
	DCL (I,J,K,AMT)	FIXED;					/*	PASS AMOUNT NEEDED	*/
	DCL (TIM.CHUNK)	LIT '10';				/*	CHUNK SIZE			*/

	IF (AMT ILE TIM.LEN) THEN DO;				/*	OK IF ENOUGH ALREADY	*/
		TIM.LEN=AMT;
		RETURN 1;
	END;

	NEXT:;

	I=AMT-TIM.LEN;									/*	GET AMOUNT MORE NEEDED	*/
	J=TRD.PTR-(TIM.PTR+TIM.LEN);				/*	GET AMOUNT BETWEEN TIM AND TRD	*/

	IF (J IGE I) THEN DO;						/*	NO SHUFFLE NEEDED			*/
		TIM.LEN=AMT;
		RETURN 1;
	END;

	IF TIM.PTR<>(INF.PTR+INF.LEN) THEN DO;	/*	GAP BEFORE TIM.PTR		*/
		CALL COPY.EXT.MEM.SEC(TIM.PTR,INF.PTR+INF.LEN,TIM.LEN);
		K=INF.PTR+INF.LEN-TIM.PTR;
		TIM.PTR=INF.PTR+INF.LEN;
		CALL ADJUST.TIM.HEADS(K);				/*	ADJUST POINTERS FOR MOVEMENT	*/
		GOTO NEXT;
	END;

	IF INF.PTR<>(BNK.PTR+BNK.LEN) THEN DO;	/*	GAP BEFORE INF.PTR		*/
		CALL COPY.EXT.MEM.SEC(INF.PTR,BNK.PTR+BNK.LEN,INF.LEN);
		INF.PTR=BNK.PTR+BNK.LEN;
		GOTO NEXT;
	END;

	K=J+(BNK.PTR-(NAH.PTR+NAH.LEN));			/*	ADD AMOUNT BETWEEN NOTES AND BANK	*/

	IF K ILT I THEN DO;							/*	MUST SHUFFLE OTHER THAN BANK DOWN	*/
		CALL SHUFFLE.PAR.DOWN;
		IF NAH.PTR<>(PAR.PTR+PAR.LEN)			/*	REMOVE GAP BETWEEN PARS & NOTES	*/
		THEN DO;
			CALL COPY.EXT.MEM.SEC(NAH.PTR,PAR.PTR+PAR.LEN,NAH.LEN);
			NAH.PTR=PAR.PTR+PAR.LEN;
			CALL COMPUTE.TRK.HEADS;
			GOTO NEXT;
		END;
		RETURN 0;									/*	NO ROOM!	*/
	END;

	/*	THERE IS ENOUGH ROOM		*/
	/*	MOVE BANK TO				*/
	/*	MAKE CONTIGUOUS BLOCK	*/

	IF (SHR(K-I,1) IGE TIM.CHUNK)
	THEN I=BNK.PTR-I-TIM.CHUNK;				/*	MOVE 10 EXTRA SECTORS IF PLENTY OF ROOM	*/
	ELSE I=BNK.PTR-I-SHR(K-I,1);				/*	ELSE SPLIT DIFFERENCE IF GETTING TIGHT	*/

	CALL COPY.EXT.MEM.SEC(BNK.PTR,I,BNK.LEN);
	BNK.PTR=I;

	GOTO NEXT;										/*	SHOULD BE SPACE NOW	*/

END GET.TIM.STORAGE;

/*	$PAGE - GET STORAGE FOR TIMBRE DISPLAY	*/


/*	NOTE: GET.TRD.STORAGE MUST ONLY BE CALLED FROM THE TIMBRE DISPLAY
	SOFTWARE (I.E. 'TERMINAL' AND SUBROUTINES).  IT CAN NOT BE CALLED
	FROM THE MAIN LOOP, SINCE WE MIGHT HAVE INTERRUPTED THE
	TIMBRE DISPLAY CODE VIA RUN.SYN.LOOP	*/


/*	NOTE:  THE TRD AREA OF MEMORY IS GENERALLY TRASHED BY THIS
	ROUTINE.  THIS IS OK SINCE WE ARE ALWAYS CHANGING SCREENS
	WHEN THIS ROUTINE IS CALLED	*/


GET.TRD.STORAGE:PROC(AMT) PUBLIC SWAPABLE;	/*	GET TRD.PTR STORAGE	*/
	DCL (I,J,K,AMT)	FIXED;					/*	PASS AMOUNT NEEDED	*/

	IF (AMT ILE TRD.LEN) THEN DO;				/*	SHORTER TRD				*/
		TRD.PTR=TRD.PTR+TRD.LEN-AMT;			/*	TRASH INFO				*/
		TRD.LEN=AMT;								/*	PUT SPACE BELOW IT	*/
		RETURN 1;
	END;

	NEXT:;

	I=AMT-TRD.LEN;									/*	GET AMOUNT MORE NEEDED	*/
	J=TRD.PTR-(TIM.PTR+TIM.LEN);				/*	GET AMOUNT BETWEEN TIM AND TRD	*/

	IF (J IGE I) THEN DO;						/*	NO SHUFFLE NEEDED			*/
		TRD.PTR=TRD.PTR-I;						/*	MOVE BOTTOM DOWN			*/
		TRD.LEN=TRD.LEN+I;						/*	NOW LONGER					*/
		RETURN 1;
	END;

	IF TIM.PTR<>(INF.PTR+INF.LEN) THEN DO;	/*	GAP BEFORE TIM.PTR		*/
		CALL COPY.EXT.MEM.SEC(TIM.PTR,INF.PTR+INF.LEN,TIM.LEN);
		K=INF.PTR+INF.LEN-TIM.PTR;
		TIM.PTR=INF.PTR+INF.LEN;
		CALL ADJUST.TIM.HEADS(K);				/*	ADJUST POINTERS FOR MOVEMENT	*/
		GOTO NEXT;
	END;

	IF INF.PTR<>(BNK.PTR+BNK.LEN) THEN DO;	/*	GAP BEFORE INF.PTR		*/
		CALL COPY.EXT.MEM.SEC(INF.PTR,BNK.PTR+BNK.LEN,INF.LEN);
		INF.PTR=BNK.PTR+BNK.LEN;
		GOTO NEXT;
	END;

	K=J+(BNK.PTR-(NAH.PTR+NAH.LEN));			/*	ADD AMOUNT BETWEEN NOTES AND BANK	*/

	IF K ILT I THEN DO;							/*	MUST SHUFFLE OTHER THAN BANK DOWN	*/
		CALL SHUFFLE.PAR.DOWN;
		IF NAH.PTR<>(PAR.PTR+PAR.LEN)			/*	REMOVE GAP BETWEEN PARS & NOTES		*/
		THEN DO;
			CALL COPY.EXT.MEM.SEC(NAH.PTR,PAR.PTR+PAR.LEN,NAH.LEN);
			NAH.PTR=PAR.PTR+PAR.LEN;
			CALL COMPUTE.TRK.HEADS;
			GOTO NEXT;
		END;
		RETURN 0;									/*	NO ROOM!	*/
	END;

	/*	THERE IS ENOUGH ROOM	*/
	/*	MOVE BANK TO			*/
	/*	MAKE CONTIGUOUS BLOCK	*/

	CALL COPY.EXT.MEM.SEC(BNK.PTR,BNK.PTR-(I-J),BNK.LEN);
	BNK.PTR=BNK.PTR-(I-J);

	GOTO NEXT;										/*	SHOULD BE SPACE NOW	*/

END GET.TRD.STORAGE;

/*	$PAGE - GET A LARGE TEMPORARY XMEM BUFFER	*/

/*	GET.LARGE.TEMPORARY.XMEM.BUFFER IS USED TO GARBAGE COLLECT MEMORY	*/
/*	AND GET A LARGE SECTION OF EXTERNAL MEMORY AVAILABLE FOR				*/
/*	TEMPORARY USAGE (IE WHEN UPDATING THE LASER DISK)						*/

/*	PASS POINTER TO WHERE TO STORE XMEM BASE, XMEM PTR						*/

/*	ROUTINE WILL USE EXTBUF.PTR IF NO OTHER XMEM IS AVAILABLE			*/

GET.LARGE.TEMPORARY.XMEM.BUFFER:PROC (ARGLIST) PUBLIC SWAPABLE;
	DCL ARGLIST		ARRAY;
	DCL BUFBASE		FIXED;
	DCL BUFSECSIZE	FIXED;

	bnk.len = 0;		/*	toss bank to get memory	*/

	call MAXIMIZE.MEMORY.FOR.RECORD;

	BufBase	  = nah.ptr + nah.len;
	bufSecSize = bnk.ptr - BufBase;

	if bufSecSize ilt EXTBUF.LEN THEN DO;
		bufbase = extbuf.ptr;
		BufSecSize = extbuf.len;
	end;

	ARGLIST(0) = BUFBASE;
	ARGLIST(1) = BUFSECSIZE;
END GET.LARGE.TEMPORARY.XMEM.BUFFER;


/*	$PAGE - COLLECT MEMORY IN NOTE AREA	*/

/*	PERFORM GARBAGE COLLECT OF NOTE AREA:	*/

NAH.COLLECT:PROC PUBLIC SWAPABLE;
	DCL (I,J,K,L,M)	FIXED;
	DCL NPTR				FIXED;	/*	********* LOCAL NPTR ***********	*/

	/*	Create a system event when we shuffle memory around	*/
	/*	since the actual pointers to any notes might change:	*/

	NEW.SEQ.INFO = NEW.SEQ.INFO \ 4;

	IF NAH.LEN=0 THEN DO;
		CALL COMPUTE.TRK.HEADS;
		RETURN;							/*	NO COLLECT IF NO BLOCK	*/
	END;

	DO WHILE NAH.FREE<>0;			/*	MARK FREE BLOCKS WITH -1 TRACK #	*/
		WRITE(MAM)=NAH.PTR+NAH.FREE;
		NAH.FREE=READ(MD);			/*	GET FORWARD POINTER	*/
		WRITE(MDI)=(-1);				/*	PUT (-1) IN NLS.FOR (THIS WILL END TO	*/
		WRITE(MDI)=(-1);				/*	PUT (-1) IN NLS.REV  CATCH PROGRAMMING	*/
		WRITE(MDI)=(-1);				/*	PUT (-1) IN NLS.TRK  BUGS!!!!)			*/
	END;
	NAH.#FREE=0;						/*	NO FREE BLOCKS	*/

	I=1;									/*	BOTTOM UP POINTER		*/
	J=NAH.LEN;							/*	TOP DOWN  POINTER		*/

	DO WHILE J <> I;					/*	GARBAGE COLLECT UNTIL NO HOLES	*/

		WRITE(MAM)=NAH.PTR+I;		/*	POINT TO BLOCK	*/
		WRITE(MAL)=THD.TRK;

		DO WHILE (I ILT J)			/*	FIND FIRST FREE BLOCK	*/
		AND      (READ(MD) >= 0);	/*	BY SKIPPING OVER USED	*/
			I=I+1;						/*	BLOCKS FROM THE BOTTOM	*/
			WRITE(MAM)=NAH.PTR+I;	/*	(SEARCHING UPWARDS)		*/
			WRITE(MAL)=THD.TRK;
		END;

		WRITE(MAM)=NAH.PTR+J-1;		/*	POINT TO POSSIBLE BLOCK	*/
		WRITE(MAL)=THD.TRK;

		DO WHILE (J IGT I)			/*	FIND LAST USED BLOCK		*/
		AND      (READ(MD) < 0);	/*	BY SKIPPING FREE BLOCKS	*/
			J=J-1;						/*	FROM THE TOP (SEARCHING	*/
			WRITE(MAM)=NAH.PTR+J-1;	/*	DOWNWARDS)					*/
			WRITE(MAL)=THD.TRK;
		END;

		/*	IF A FREE BLOCK EXISTS LOWER IN MEMORY THAN A USED BLOCK,	*/
		/*	MOVE THE USED BLOCK DOWN IN PLACE OF THE FREE BLOCK.			*/
		/*	THIS HAS THE EFFECT OF MOVING ALL OF FREE MEMORY TO THE		*/
		/*	END OF THE NAH ARE WHERE IT CAN SIMPLY BE RELEASED.			*/

		IF J<>I THEN DO;				/*	FREE BLOCK BEFORE USED BLOCK	*/

			J=J-1;						/*	BACK UP POINTER TO USED BLOCK	*/

			DO K=0 TO 256-COPY.BLEN BY COPY.BLEN;
				WRITE(MAM)=NAH.PTR+J;		/*	READ IN 256 WORDS	*/
				WRITE(MAL)=K;
				CALL COPY.IN(ADDR(COPY.BUF(0)),COPY.BLEN);
				WRITE(MAM)=NAH.PTR+I;		/*	WRITE OUT 256 WORDS	*/
				WRITE(MAL)=K;
				CALL COPY.OUT(ADDR(COPY.BUF(0)),COPY.BLEN);
			END;

			WRITE(MAM)=NAH.PTR+I;
			K=READ(MDI); L=READ(MDI);	/*	READ THD.FOR, THD.REV	*/
			M=READ(MDI);					/*	GET  THD.TRK			*/

			IF K<>0 THEN DO;				/*	UPDATE BACK POINTER IN NEXT BLOCK	*/
				WRITE(MAM)=NAH.PTR+K;
				WRITE(MAL)=THD.REV;
				WRITE(MD )=I;				/*	NEW BACK POINTER		*/
			END;
			IF L<>0 THEN DO;				/*	UPDATE FORWARD POINTER IN PREVIOUS BLOCK	*/
				WRITE(MAM)=NAH.PTR+L;	/*	UPDATE THD.FOR			*/
				WRITE(MD )=I;
			END;

			/*	IF THERE IS NO BACK POINTER, THEN THIS MUST BE THE FIRST	*/
			/*	BLOCK ON A LINKED LIST.  IF IT IS ONE OF THE MAP DATA		*/
			/*	BLOCKS, THEN UPDATE THE HEAD POINTER IN THE BAS.PTR		*/
			/*	AREA.  OTHERWISE IT MUST BE A TRACK HEADER BLOCK, SO		*/
			/*	UPDATE THE POINTER IN THE NAH HEADER BLOCK.					*/
			/*	OF COURSE, CHECK FOR GROUP/AUX INFO AS WELL...				*/

			ELSE DO;											/*	NO BACK POINTER - MUST BE FIRST BLOCK	*/
				IF ((M&0xFF00) == SEQ.MAP.CODE)		/*	IF THIS IS TEMPO MAP	*/
				{												/*	DATA BLOCK, UPDATE	*/
					IF ((M&255) ilt #.OF.MAP.PTRS)	/*	IT'S HEADER POINTER.	*/
					{
						WRITE(MAM) = BAS.PTR;
						WRITE(MAL) = SEQ.MAP.PTRS + (M&255);
						WRITE(MD ) = I;
					}
				}

				ELSE IF ((M&0x3F00) == SEQ.GRPAUX.CODE)	/*	IF GROUP OR AUX INFO...		*/
				{
					WRITE(MAM)=NAH.PTR;							/*	ACCESS NAH PTR					*/
					WRITE(MAL)=M&255;								/*	POINT TO TRK HEAD FOR TRK	*/
					WRITE(MAM)=NAH.PTR+READ(MD);				/*	SET IT UP						*/
					WRITE(MAL)=THD.GROUPLIST + SHR(M,14);	/*	INDEX TO GROUP OR AUX INFO	*/
					WRITE(MD )=I;									/*	STORE REVISED POINTER		*/
				}

				ELSE											/*	ELSE MUST BE A TRK HEAD	*/
				{												/*	ITSELF						*/
					WRITE(MAM)=NAH.PTR;					/*	POINTER FOR TRACK			*/
					WRITE(MAL)=M;							/*	HEAD.							*/
					WRITE(MD )=I;
				}
			END;

			/*	$PAGE	*/

			/*	UPDATE SECTOR POINTERS	*/
			/*	IN TRACK HEADER SECTOR	*/

			IF (M&"177400") == 0					/*	IF BLOCK IS NOT A MAP BLOCK,	*/
			THEN DO;									/*	THEN CHECK TRACK HEADER			*/

				WRITE(MAM)=NAH.PTR;				/*	READ POINTER FROM NOTE AREA HEADER	*/
				WRITE(MAL)=M;						/*	LOOK UP POINTER TO TRACK HEADER		*/
				WRITE(MAM)=NAH.PTR+READ(MD);	/*	SET IT UP	*/

				WRITE(MAL)=THD.NEVF;				/*	POSSIBLY UPDATE NEXT EVENT FORWARD PTR	*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.NEVR;				/*	POSSIBLY UPDATE NEXT EVENT REVERSE PTR	*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.CPLIST;			/*	POSSIBLY UPDATE CHANNEL PRESSURE LIST	*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.ARLIST;			/*	POSSIBLY UPDATE ACTIVE RIBBON LIST		*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.UPD.LINK;		/*	SEE IF ON UPDATE LIST						*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.SEC;				/*	POSSIBLY UPDATE PLAY POINTER	*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.LP.SEC;			/*	POSSIBLY UPDATE LOOP POINTER	*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.ILS.SEC;			/*	POSSIBLY UPDATE ILS  POINTER	*/
				IF READ(MD)=J THEN WRITE(MD)=I;
				WRITE(MAL)=THD.ILE.SEC;			/*	POSSIBLY UPDATE ILE  POINTER	*/
				IF READ(MD)=J THEN WRITE(MD)=I;

				IF CPLIST0=J THEN CPLIST0=I;	/*	WE MIGHT BE FIRST ON CHANNEL PRESSURE LIST TOO	*/
				IF ARLIST0=J THEN ARLIST0=I;	/*	WE MIGHT BE FIRST ON RIBBON LIST TOO	*/
				IF UPLIST0=J THEN UPLIST0=I;	/*	WE MIGHT BE FIRST ON UPDATEN LIST TOO	*/

				IF NEXT.EVENT.QUEUE=J			/*	ALSO FRONT OF NEXT EVENT QUE	*/
				THEN NEXT.EVENT.QUEUE=I;

				NPTR=NOTELIST;						/*	PICK UP FIRST NOTE BLOCK		*/
				DO WHILE NPTR<>0;					/*	PROCESS EACH ONE					*/
					IF RECS=J THEN RECS=I;		/*	SEE IF RECORD POINTER			*/
					NPTR=NFPTR;						/*	PICK UP POINTER TO NEXT NOTE	*/
				END;									/*	OF NOTE LOOP	*/
			END;

		END;
	END;

	NAH.LEN=J;										/*	NEW NAH.LEN		*/

	CALL COMPUTE.TRK.HEADS;

END NAH.COLLECT;

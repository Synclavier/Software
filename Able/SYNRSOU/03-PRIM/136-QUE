/* 136-QUE  $TITLE  Que structure definitions/routines *//*   7/23/86 - CJ,KC - CHANGED RELP   5/15/86 - "official" creation of release-M modules*//* ACTIVE NOTES ARE STORED IN A TWO LEVEL QUEUE STRUCTURE.  THESE QUEUES   ARE MANAGED BY LINKED BLOCKS OF STORAGE CONTAINING INFORMATION FOR   EACH NOTE.   THE NOTE QUEUE CONTAINS A BLOCK FOR EACH ACTIVE NOTE.  LINKED FROM EACH   NOTE BLOCK IS AN ADDITIONAL QUEUE THAT CONTAINS A BLOCK FOR EACH PARTIAL   TIMBRE THAT IS ACTIVE FOR THE NOTE. *//* NOTE BLOCKS ARE ALSO USED TO HOLD SYNTHESIZER INFORMATION IMMEDIATELY   *//* PRIOR TO WRITING IT TO THE SYNTHESIZER.   NOTE BLOCK GETS/RELEASES MUST *//* BE INTERRUPT PROOF                                                      *//* BLOCKS ON THE NEWLIST QUEUE DO NOT HAVE ANY PARTIAL BLOCKS ALLOCATED FOR *//* THEM (SINCE THE NOTE HAS NOT STARTED YET).                               *//* $PAGE - DEFINITIONS FOR NOTE BLOCKS *//* THE FOLLOWING SYMBOLIC DEFINITIONS ARE PROVIDED: */DCL (NOTELIST)         FIXED PUBLIC; /* START OF ACTIVE NOTE LIST QUE  */DCL (KBDLIST)          FIXED PUBLIC; /* START OF QUE FOR NEW KBD NOTES */DCL (SEQLIST)          FIXED PUBLIC; /* START OF QUE FOR NEW SEQ NOTES */DCL (SEQLAST)          FIXED PUBLIC; /* END   OF QUE FOR NEW SEQ NOTES */DCL (TIELIST)          FIXED PUBLIC; /* START OF QUE FOR TIED    NOTES */DCL (TIELAST)          FIXED PUBLIC; /* END   OF QUE FOR TIED    NOTES */DCL (NPTR,NFREEP)      FIXED PUBLIC;/* $PAGE - PARTIAL BLOCK ROUTINES, PSTAT DEFINITIONS */DCL (PPTR ,PFREE) FIXED PUBLIC;DCL (GFREE) FIXED PUBLIC;            /* HOLDS LIST OF FREED UP 'GHOST' PARTIAL BLOCKS */RELP:PROC PUBLIC;                    /* RELEASE PARTIAL BLOCK - ZERO OUT BLOCK HERE TO REDUCE NOTE START DELAY */  CORE(PPTR)=PFREE; PFREE=PPTR;  IF INC.POLY OR (MODC<>0) THEN DO; /* USE RPC FOR ZERO    */     WRITE("300")=ADDR(UCHN);       /* GET POINTER TO UCHN */     RPC 18;     WRITE("360")=0;   END;  ELSE DO;                        /* NON-REPEAT COUNTER  */     WRITE("300")=ADDR(UCHN);     /* GET POINTER TO UCHN */     WRITE("360")=0; WRITE("360")=0; WRITE("360")=0;     /* ZERO OUT */     WRITE("360")=0; WRITE("360")=0; WRITE("360")=0;     /* 18 ITEMS */     WRITE("360")=0; WRITE("360")=0; WRITE("360")=0;     /* QUICKLY  */     WRITE("360")=0; WRITE("360")=0; WRITE("360")=0;     WRITE("360")=0; WRITE("360")=0; WRITE("360")=0;     WRITE("360")=0; WRITE("360")=0; WRITE("360")=0;   END;  WRITE("300")=ADDR(RRATO);       /* INITIALIZE RRATO, RCHOR */  WRITE("360")=10000;  WRITE("360")=10000; END RELP;
/* 303-SUB3   $TITLE  CHECK FOR REAL TIME SYNTHESIZER (KNOB) UPDATES   Modified:   02/07/91 - MWH - Combine 3200, 6400 and 9600 RTP's   04/05/90 - TSS - FIX STUCK MIDI NOTE/EXTRA NOTE OFF BUGS   08/24/89 - PF  - Added PATH argument to MIDI.NOTE.OFF   09/06/89 - MWH - Unsplit 06-MAIN now that the compiler can cope   10/14/88 - CJ  - DIFFERENT USE OF PARTIAL BLOCK ENTRIES TO                    START UP POLY NOTES IN MIDDLE   10/03/88 - SGS - Modified code to support MONO VOICE cards   01/12/88 - TS - SPLIT UP 06-MAIN MODULE INTO TWO PIECES   07/02/87 - MWH - kbd lookup table literals; restructured for 32 bit poly   06/22/87 - MWH - Move multi.syn2 to external memory at MFM.PTR   06/18/87 - MWH - Move MULTI.POLY array to external memory   07/24/86 - KJC,CJ - KBDTAB CHANGES   07/23/86 - KJC - changes for stereo playback   05/15/86 - "official" creation of release-M modules*//* SEE IF ANY SYNTHESIZER PARAMETERS MUST BE UPDATED DUE TO KNOB CHANGES *//* NOTE : WE MIGHT GET CALLED BEFORE A NOTE WAS QUED FOR ENV ATTACK      */KNOB.CHANGES: PROC SWAPABLE ;            /* PROCEDURE TO UPDATE SYNTH VALUES FROM KNOB CHANGE */   DCL (TB,TBP,PTL,TRK,THP)  FIXED   EXTERNAL;    DCL (I,J,K,L,M,N,P)       FIXED   EXTERNAL;   NPTR=NOTELIST;                       /* POINT TO FIRST BLOCK ON LIST */   DO WHILE NPTR<>0;                    /* CYCLE THROUGH EACH BLOCK     */     IF NSTAT<>2 THEN DO;               /* PROCESS NOTES HELD OR DECAYING */       TB=TIMBRE;                       /* LOOK UP HANDY INFO */       WRITE(MAM)=TIM.HEAD;       WRITE(MAL)=TB;       TBP=READ(MD);       TRK=TRACK;       WRITE(MAM)=TRK.HEAD;       WRITE(MAL)=TRK;       THP=READ(MD);       IF (RESET.BITS&R.RRATE)<>0 THEN CALL COMPUTE.RRATE; /* RECOMPUTE RRATE IF NEEDED */       PPTR=PTLST;                      /* SET UP POINTER TO PARTIAL LIST */       DO WHILE PPTR<>0;                /* PROCESS EACH PARTIAL           */          PTL=PARTL;                    /* LOOK UP PARTIAL # INTO CONVENIENT VARIABLE */          WRITE(MAM)=TBP;          WRITE(MAL)=TIM.PARTIAL.POINTERS+PTL;          PTPTR=READ(MD);          IF MCHN<>0 THEN DO;           /* DO UPDATE IF NOT MIDI BLOCK */             IF (RESET.BITS&R.WMEMS)<>0 THEN DO;   /* RESELECT WAVE MEMORY/RELOAD SPLICE MEMORY */                IF (SMCHN=0)\(FMPTR=0) THEN DO;    /* UPDATE MEMORY# IF SPLICING HAS NOT BEGUN */                   IF  ((INC.MONO=0)                       /* IF NO SAMPLING AT ALL */                   AND  (INC.POLY=0))                   OR (MCHN&(B.MONO\B.POLY))=0 THEN DO;    /* OR ORIGINAL SYNTHESIZER - COMPUTE ITEMS */                      WRITE(MAM)=TBP;                      WRITE(MAL)=TIM.WMEM#+PTL;                      IF (UCHN&255)<LSYN1.END THEN I=READ(MD)&255; /* SELECT NEW MEMORY UNLESS STOLEN SPLICE CHANNEL */                      ELSE                         I=SHR(READ(MD),8);                      FMINFO=(FMINFO&255)\SHL(I,8);   /* IN CASE NOTE HAS NOT STARTED */                      DISABLE;                      WRITE(CHA)=UCHN; WRITE(FUN)=TIM;                      IF I<>0 THEN WRITE(DAT)=I; /* SET NEW WAVE MEM - UNLESS NOT IN THIS SYNTHESIZER */                      ENABLE;                   END;                          /* OF BEGIN FOR ORIGINAL SYNTHESIZER */                   ELSE IF (INC.MONO<>0)&((MCHN&B.MONO)<>0) THEN DO;  /* MONO SAMPLING (W. DISK) */                      /* WAVE MEMORIES ARE NOT USED WITH MONO SYNTH */                   END;                   ELSE IF (INC.POLY<>0) THEN DO;                  /* MEANS POLY SYNTH */                      /* WAVE MEMORIES SELECTED? */                   END;                END;                /* $PAGE */                /* RELOAD WAVE MEMORY IF SPLICING SO CHANGE IS HEARD */                ELSE IF TB=0 THEN DO;             /* ELSE RELOAD WAVE MEMORIES IF KEYBOARD TIMBRE CHANGES DURING SPLICING */                   IF (MRLCH&"077777")=(SUCHN&"077777") THEN DO; /* USE SPLICE CHANNEL */                      I=ADDR(SUCHN); N=ADDR(SMCHN);                   END;                   ELSE DO;                       /* UCHN IS SOUNDING (INITIAL DECAY) */                      I=ADDR(UCHN); N=ADDR(MCHN);                    END;                    WRITE(MAM)=TBP;                   WRITE(MAL)=TIM.PARTIAL.POINTERS+PTL;                   J=FMPTR+READ(MD);                   IF P.LOOKUP(J)=MOR THEN DO;    /* IF FRAME STILL THERE,  RELOAD MEMORY */                      K=CORE(I);                  /* USE THIS CHANNEL FOR LOAD IF NOTHING FOUND */                      IF  ((INC.MONO=0)           /* IF NO SAMPLING AT ALL */                      AND  (INC.POLY=0))                      OR (K&(B.MONO\B.POLY))=0 THEN DO; /* FIND FREE WAVE MEMORY IN SAME PSYN TO AVOID CLICKS */                         L=K&"360";          /* GET PHYS SYNTHESIZER */                         M=1;                /* LOOK FOR FREE WAVE MEMORY IN SAME SYNTHESIZER TO AVOID CLICKS */                         IF L<LSYN1.END THEN P=FR1.PTR; ELSE P=FR2.PTR;                         DO WHILE (M<=CORE(P));                            IF (CORE(P+M)&"360")=L THEN DO; /* FREE CHANNEL IN SAME PSYN - USE ITS ASSOCIATED SPLICE MEMORY */                               K=CORE(P+M); /* GET CHANNEL NUMBER & NEW WAVE MEMORY */                               CORE(P+M)=(K&"170377")\(CORE(I)&"007400"); /* PUT CURRENTLY USED WAVE MEMORY BACK IN FREE LIST FOR LATER SPLICING */                               CORE(I)=(CORE(I)&"170377")\(K&"007400"); /* SAVE NEW WAVE MEMORY IN UCHN OR SUCHN */                               CORE(N)=(CORE(N)&"170377")\(K&"007400"); /* SAVE IN MCHN AS WELL */                               MRLCH=CORE(I); /* CHANGE WAVE NUMBER FOR LATER COMPARISONS */                               M=CORE(P); /* EXIT FROM LOOP */                            END;                            M=M+1;                         END;                         DISABLE;                            WRITE(CHA)=K; WRITE(FUN)=ZMA; WRITE(DAT)=0; /* LOAD WAVE SHAPE - BEGIN BY */                            WRITE(FUN)=TIM; WRITE(DAT)=(SHR(K,8)&"17")+48; /* SELECT MEMORY TO LOAD */                            WRITE(FUN)=MEM;                            INTCHA=K; INTFUN=MEM;                         ENABLE;                         L=J+S.ENV.T; /* GET POINTER TO WAVE TABLE IN FRAME */                         M=0;                         DO WHILE (M<128); /* LOAD TABLE */                            P=P.LOOKUP(L+M);                            WRITE(DAT)=P;                            WRITE(DAT)=ROT(P,8);                            M=M+1;                         END;                         DISABLE;                            WRITE(CHA)=CORE(I); WRITE(FUN)=TIM; WRITE(DAT)=(SHR(K,8)&"17")+48; /* NOW ASSIGN NEW WAVE TO ACTIVE CHANNEL TO AVOID CLICKS */                         ENABLE;                      END;       /* OF BEGIN FOR ORIGINAL SYNTHESIZER */                      ELSE IF (INC.MONO<>0)&((MCHN&B.MONO)<>0) THEN DO;  /* MONO SAMPLING (W. DISK) */                         /* SPLICING NOT USED WITH MONO SYNTH */                      END;                      ELSE IF (INC.POLY<>0) THEN DO;                  /* MEANS POLY SYNTH */                         /* POLY SYNTH SPLICE MEMORY */                      END;                   END;                END;             END;             /* $PAGE - HANDLE FREQUENCY/KNOB UPDATES */             IF (RESET.BITS&R.FREQS)<>0 THEN DO;     /* NEW FREQUENCY REQUIRED */                I=DESTF;                             /* SAVE ORIGINAL DESTF */                WRITE(MAM)=TRK.HEAD;                WRITE(MAL)=TRACK;                WRITE(MAM)=READ(MD);                WRITE(MAL)=THD.CXPOS;                IF (INC.AXE=0)\(GDATA=0)                 THEN DESTF=COMPUTE.KBD.PITCH(KEYN+READ(MD));  /* COMPUTE CORRECT PITCH FOR KEY IF KNOB CHANGES */                ELSE DESTF=COMPUTE.GUITAR.OCTAVE.RATIO(GPITCH);                IF P.LOOKUP(PTPTR+P.PTUNING)<0                 THEN DESTF=2816;                     /* STAY AT MIDDLE A */                CURRF=CURRF+DESTF-I;                 /* UPDATE CURRF BY SAME AMOUNT (MAKES PITCH ENVELOPES WORK BETTER) */                WRITE(MAM)=TBP;                WRITE(MAL)=TIM.SYNTH.TYP+PTL;                IF  (READ(MD)=TIM#POLY)              /* POLY PATCH */                OR  (READ(MD)=TIM#MONO) THEN DO;     /* MONO PATCH */                   WRITE(MAL)=TIM.KBDTAB.PTR+PTL;    /* CHECK CHANGING SEMITONE CORRECTION OR XPOS FIELD */                   IF READ(MD)<>0 THEN DO;                      WRITE(MAM)=TIM.PTR+READ(MD)-1;                    /* LOOK UP KEYBOARD INFO */                      WRITE(MAL)=SHL(PPTMB,1)+PPTMB+KLT.PATCH.TIM.PTR;  /* LOCATION WITHIN THE SECTOR */                      IF (READ(MD)<>0) THEN DO;      /* MAKE SURE STILL ASSIGNED */                         K=PTPTR+READ(MDI)+PT.SRATE; /* POINT TO FRAME IN QUESTION, SRATE ENTRY. */                         WRITE(MAM)=PAR.PTR+SHR(K,8);/* GET INFO FROM PATCH LIST FRAME */                         WRITE(MAL)=K;               /* READ INFO TO COMPUTE PITCH CORRECTLY */                         L =READ(MDI);               /* PT.SRATE - READ SAMPLING RATE FACTOR FOR FILE */                         M =READ(MDI);               /* READ SET OCTAVE FACTOR FOR FILE */                         N =READ(MDI);               /* READ FRACTIONAL PITCH OFFSET FOR TRANSPOSITION */                         K=(K+PT.TRA-PT.SRATE);      /* MOVE POINTER TO TRANSPOSITION FIELD */                         WRITE(MAM)=PAR.PTR+SHR(K,8);                         WRITE(MAL)=K;               /* READ INFO TO COMPUTE PITCH */                         IF (READ(MD)=0)             /* PT.TRA - NO TRANSPOSITION - CORRECT TO SETOCTAVE VALUE */                         THEN DO;                            MRLCH=1024-M-L;          /* NO TRANSPOSITION - CORRECT TO SETOCTAVE VALUE */                            WRITE("300")=READ(MDI);  /* POINT PAST TRANSPOSITION */                         END;                         ELSE DO;                    /* PT.TRA - USER SPECIFIED TRANSPOSITION */                            MRLCH=(2816+1024)-COMPUTE.PATCH.XPOS(READ(MDI)&255)+N-L;                         END;                         IF READ(MD)<>0 THEN DO;     /* ADD IN SEMITONE CORRECTION */                            IF READ(MD)<0 THEN DO;   /* PERFORM FAST SIGNED 32 BIT MATH HERE */                               LOAD -READ(MD);       /* CONVERT TO FREQ INFO FROM SEMITONES * 100 */                               MUL  1024;                               WRITE("300")=RES;                               DIV  1200;                               MRLCH=MRLCH-RES;                            END;                            ELSE DO;                               LOAD  READ(MD);                               MUL  1024;                               WRITE("300")=RES;                               DIV  1200;                               MRLCH=MRLCH+RES;                            END;                         END;                      END;                   END;                END;                                 /* OF BEGIN FOR PATCH LIST TIMBRES */                CALL SETUP.FRQS;                     /* SET UP BOTH MODULATOR & CARRIER HZ'S - OR COMPUTE & STORE INFO IF INACTIVE NOTE */             END;             /*  $PAGE - CHECK FOR NEW  ENVELOPE LIMITS */                       IF (RESET.BITS&R.ENPAR)<>0 THEN DO;         /* NEW ENVELOPE PARAMS */                IF  (NSTAT=0) THEN DO;                   /* IF NOTE STILL HELD */                   CALL COMPUTE.ENV;                     /* LOOK UP NEW ENV INFO */                   IF DO.FM<>0 THEN DO;                  /* FM INFO INCLUDED */                      IF (P.LOOKUP(PTPTR+P.DECADJ)&"176000")=0 THEN HADJ=0;  /* NO HARMONIC ADJUST */                      ELSE CALL COMPUTE.HADJ;            /* MUST COMPUTE HARMONIC ADJUST */                      CALL COMPUTE.INX;                  /* AND NEW INX INFO IN CASE REPEATING */                   END;                   IF EIDLIM=0 THEN DO;                  /* NEW LIMIT IS ZERO - CHECK FOR MIDI */                      DISABLE;                      K=MIDIRT;                          /* SAMPLE ROUTING */                      MIDIRT=0;                          /* AND CLEAR IT */                      IF (K<>0) & (PSTAT<>DELAY.STATE)                      THEN DO;  /* CHANGING ELIM - TURN OF MIDI NOTES IF EIDLIM=0 */                         CALL MIDI.NOTE.OFF(K, MIDIPATH, MIDIINFO); /* TURN NOTE OFF */                         /******/;                       /* NOTE - INTERRUPTS ARE TURNED ON BY MIDI.NOTE.OFF */                      END;                      ENABLE;                   END;                END;             END;             IF (RESET.BITS&R.ELIMS)<>0 THEN DO;      /* NEW ENV LIMITS REQUIRED */               IF (NSTAT=0) THEN DO;                  /* STOP KNOB UPDATES DURING FINAL DECAYS */                 IF  (PSTAT)                          /* IF PARTIAL IS ACTIVE */                 AND (EQF=0)                          /* AND NO LONGER LINKED TO AN ENV QUE */                 AND (C.E.L=0)                        /* AND NOT CURRENTLY SPLICING OR DECAYING TO SUSTL OF ZERO */                 THEN DO;                             /* UPDATE IN REAL TIME UNLESS SPLICE HAPPENING */                    IF  ((INC.MONO=0)                 /* IF NO SAMPLING AT ALL */                    AND  (INC.POLY=0))                    OR (MCHN&(B.MONO\B.POLY))=0 THEN DO;    /* OR ORIGINAL SYNTHESIZER - COMPUTE ITEMS */                       DISABLE;                       WRITE(CHA)=UCHN; WRITE(FUN)=ELIM; WRITE(DAT)=EIDLIM;                       ENABLE;                    END;       /* OF BEGIN FOR ORIGINAL SYNTHESIZER */                    ELSE IF (INC.MONO<>0)&((MCHN&B.MONO)<>0) THEN DO;  /* MONO SAMPLING (W. DISK) */                       DISABLE;                       IF MCHN=MONO.CHAN                       THEN MONO.ELIM=SHL(EIDLIM,8);                       ENABLE;                    END;                    ELSE IF (INC.POLY<>0) THEN DO;                     /* MEANS POLY SYNTH */                       DISABLE;                       IF UCHN<>0 THEN DO;                          WRITE(PSC)=UCHN;                          WRITE(PSF)=PSELIM;                          WRITE(PSD)=SHL(EIDLIM,4);                       END;                       WRITE(PSC)=MCHN;                       WRITE(PSF)=PSELIM;                       WRITE(PSD)=SHL(EIDLIM,4);                       ENABLE;                    END;                    IF P.E.E=1 THEN              /* RESET ADDER FOR FASTER RESPONSE */                    EDAT=EIDINT&"177400";        /* RESET EDAT TO RESET EXPONENTIATION IF THIS IS INITIAL DECAY */                 END;               END;               CALL COMPUTE.VOL;                 /* SET UP NEW VOLUME FIELDS */             END;             /* $PAGE - HANDEL KNOB CHANGES OF FM */             IF (RESET.BITS&R.ILIMS)<>0 THEN DO;         /* NEW INDEX LIMITS REQUIRED */               IF (NSTAT=0)&(DO.FM<>0)  THEN DO;         /* ACTIVE NOTE (NOT RELEASED) THAT USES FM */                 J=COMPUTE.STEREO;                       /* GET STEREO POSITION */                 IF J=256 THEN J=255;                    /* LIMIT TO MAX FOR FM SYNTH */                 WRITE(MAM)=TBP;                 WRITE(MAL)=TIM.I.ISHC+PTL;                 J=(J&"374")+READ(MD);                   /* SET UP INDEX SHIFT COUNT/STEREO WORD */                 FMINFO=(FMINFO&"177400")\J;             /* SAVE IN CASE PARTIAL HAS NOT HAPPENED */                 DISABLE;                                /* FOR WRITE AND CHECKING ISTAT */                 IF ISTAT<>0 THEN DO;                    /* INDEX ATTACK OR INDEX INITIAL DECAY HAS BEGUN */                   IF  ((INC.MONO=0)                     /* IF NO SAMPLING AT ALL */                   AND  (INC.POLY=0))                   OR (MCHN&(B.MONO\B.POLY))=0 THEN DO;  /* OR ORIGINAL SYNTHESIZER - COMPUTE ITEMS */                      WRITE(CHA)=MCHN;                   /* SELECT CHANNEL */                      WRITE(FUN)=ISHC; WRITE(DAT)=J;                      WRITE(FUN)=ILIM;                       IF ISTAT=1 THEN WRITE(DAT)=IATLIM;                      ELSE            WRITE(DAT)=IIDLIM;                      IF (SMCHN<>0) THEN DO;             /* UPDATE SPLICE CHANNEL TOO */                         WRITE(CHA)=SMCHN;               /* SELECT CHANNEL */                         WRITE(FUN)=ISHC; WRITE(DAT)=J;                         WRITE(FUN)=ILIM;                          IF ISTAT=1 THEN WRITE(DAT)=IATLIM;                         ELSE            WRITE(DAT)=IIDLIM;                      END;                   END;                         /* OF BEGIN FOR ORIGINAL SYNTHESIZER */                   IDAT=IIDINT&"177400";        /* REST IDAT TO RESET EXPONENTIATION IF THIS IS INITIAL DECAY */                 END;                       ENABLE;               END;                             /* IF NSTAT=0 BEGIN */             END;                               /* OF ILIM UPDATE REQUIRED */             /* $PAGE - KNOB CHANGES OF STEREO, VIBRATO */             /* CHECK FOR STEREO, VIBRATO UPDATES */             IF (RESET.BITS&R.STERO)<>0 THEN DO;    /* NEW STEREO LIMITS REQUIRED */                J=COMPUTE.STEREO;                   /* COMPUTE NEW STEREO POSITION */                IF  ((INC.MONO=0)                   /* IF NO SAMPLING AT ALL */                AND  (INC.POLY=0))                OR (MCHN&(B.MONO\B.POLY))=0 THEN DO;   /* OR ORIGINAL SYNTHESIZER - COMPUTE ITEMS */                   IF J=256 THEN J=255;                /* LIMIT TO HARDWARE MAX */                   WRITE(MAM)=TBP;                   WRITE(MAL)=TIM.I.ISHC+PTL;                   J=(J&"374")+READ(MD);                   /* SET UP INDEX SHIFT COUNT/STEREO WORD */                   FMINFO=(FMINFO&"177400")\J;             /* SAVE IN CASE PARTIAL HAS NOT HAPPENED */                   DISABLE;                   WRITE(CHA)=MCHN; WRITE(FUN)=ISHC;                   WRITE(DAT)=J; /* IF STATIC PAN, WRITE OUT ISHC AND STEREO */                   IF (SMCHN<>0) THEN DO;              /* UPDATE SPLICE CHANNEL TOO */                      WRITE(CHA)=SMCHN;                      WRITE(DAT)=J; /* WRITE OUT ISHC AND STEREO */                   END;                   ENABLE;                END;       /* OF BEGIN FOR ORIGINAL SYNTHESIZER */                ELSE IF (INC.MONO<>0)&((MCHN&B.MONO)<>0) THEN DO;  /* MONO SAMPLING (W. DISK) */                   /* MONO SYNTH DOES NOT USE STEREO */                END;                ELSE IF (INC.POLY<>0) THEN DO;                  /* MEANS POLY SYNTH */                   IDAT=J;                                      /* SAVE FOR LATER WRITES */                END;             END;             IF (RESET.BITS&R.VRATE)<>0 THEN DO;                /* NEW VIBRATO RATE NEEDED IN PARTIAL BLOCK */                WRITE(MAM)=TBP;                WRITE(MAL)=TIM.V.RATE.LOOK;                IF READ(MD)<>0 THEN DO;                   VRAT=SCALE(P.LOOKUP(PTPTR+P.VIBRATE));                END;                ELSE VRAT=P.LOOKUP(PTPTR+P.VIBRATE);   /* USE MAX RATE IF NO EFFECTS */                IF VIBWD=0 THEN DO;                    /* INITIALIZE VIBRATO IF DIALING IN */                   VIBWD=(-1);                         /* SET TO -1 TO INIT */                   L.V.T=REAL.MILLISECONDS;            /* SAVE CURRENT TIME TO DE-RANDOMIZE THINGS */                END;             END;             IF  ((RESET.BITS&R.MULTI)<>0)             /* MULTI ROUTE CHANGE */             AND (PSTAT<>DONE.STATE)                   /* AND NOTE STILL SOUNDING */             AND (MULTI.THERE<>0)                      /* MULTI THERE */             THEN DO;                                  /* RE-ROUTE */                WRITE(MAM)=TRK.HEAD;                WRITE(MAL)=TRACK;                WRITE(MAM)=READ(MD);                WRITE(MAL)=THD.TROU;                I=READ(MD);                   /* GET L & R ROUTING (WITH ON BIT SET) */                J=SHL(I,8);                   /* GET RIGHT ROUTING (IN LOWER HALF) */                I=I&"177400";                 /* GET LEFT  ROUTING (IN UPPER HALF) */                DISABLE;                      /* INTRPT ROUTINE WRITES TO MULTI */                WRITE(D32)="21";              /* SELECT MULTI I/O  */                IF  ((INC.MONO=0)                      /* IF NO SAMPLING AT ALL */                AND  (INC.POLY=0))                OR (MCHN&(B.MONO\B.POLY))=0 THEN DO;   /* OR ORIGINAL SYNTHESIZER - COMPUTE ITEMS */                   WRITE(MAM) = MFM.PTR;               /* POINT AT MULTI->FM MAP */                   WRITE(MAL) = SHR(MCHN&255,1);       /* GET CHAN ID       */                   WRITE(D33)=I\(SHR(READ(MD),8));     /* ROUTE LEFT INPUT TO LEFT OUTPUT */                   WRITE(D33)=J\(READ(MD)&255);        /* ROUTE RITE INPUT TO RITE OUTPUT */                   IF (SMCHN<>0) THEN DO;              /* IN CASE IT IS  */                      WRITE(MAL)=SHR(SMCHN&255,1);     /* SPLICE CHANNEL */                      WRITE(D33)=I\(SHR(READ(MD),8));  /* ROUTE LEFT INPUT TO LEFT OUTPUT */                      WRITE(D33)=J\(READ(MD)&255);     /* ROUTE RITE INPUT TO RITE OUTPUT */                   END;                END;                                    /* OF ORIGINAL SYNCLAV CASE */                ELSE IF (INC.POLY<>0)&((MCHN&B.POLY)<>0) THEN DO;  /* POLY SAMPLING (W. DISK) */                   ISTAT = READ(MD);                    /* SAVE FOR INTRPT ROUTINE IN CASE REPEAT NOTE */                   WRITE(MAM) = MPOLY.PTR;              /* POINT AT MULTICHANNEL-POLY MAP */                   WRITE(MAL) = MCHN&255;               /* POLY VOICE NUMBER */                   /* MCHN = THE ONLY CHANNEL IF MONO   SOUND FILE */                   /*        LEFT     CHANNEL IF STEREO SOUND FILE */                   /* UCHN = RIGHT    CHANNEL IF STEREO SOUND FILE */                   IF MONO_VOICES_PRESENT               /* MONO DAC VOICE CARDS */                   THEN WRITE(D33)=I\(READ(MD)&255);    /* ROUTE LEFT CHANNEL DAC TO LEFT OUTPUT */                   ELSE DO;                             /* STEREO VOICE CARDS */                      WRITE(D33)=I\(SHR(READ(MD),8));   /* ROUTE LEFT INPUT TO LEFT OUTPUT */                      WRITE(D33)=J\(READ(MD)&255);      /* ROUTE RITE INPUT TO RITE OUTPUT */                   END;                   IF UCHN <> 0 THEN DO;                /* STEREO SOUND FILE (LEFT VOICE CHANNEL) */                      WRITE(MAL) = UCHN&255;            /* POLY VOICE NUMBER */                      IF MONO_VOICES_PRESENT            /* MONO DAC VOICE CARDS */                      THEN WRITE(D33)=J\(READ(MD)&255); /* ROUTE RITE CHANNEL DAC TO RITE OUTPUT */                      ELSE DO;                         WRITE(D33)=I\(SHR(READ(MD),8)); /* ROUTE LEFT INPUT TO LEFT OUTPUT */                         WRITE(D33)=J\(READ(MD)&255);    /* ROUTE RITE INPUT TO RITE OUTPUT */                      END;                   END;                END;                ENABLE;             END;             /* $PAGE - KNOB CHANGES OF POLY SYNTH LOOP LENGTH */             IF  ((RESET.BITS&R.LOOPL)<>0)             /* CHANGE POLY SYNTH LOOP LENGTH */             AND (PSTAT<>DONE.STATE)                   /* AND NOTE STILL SOUNDING */             THEN DO;                IF  ((INC.POLY<>0))                    /* POLY ONLY */                AND ((MCHN&B.POLY)<>0)                 /* WITH A POLY CHANNEL */                THEN DO;                               /* CHECK FOR UPDATE REQUIRED */                   WRITE(MAM)=TBP;                     /* POINT TO TIMBRE HEAD */                   WRITE(MAL)=TIM.KBDTAB.PTR+PTL;      /* SHOULD BE LOOK UP TABLE */                   IF READ(MD)<>0 THEN DO;                      WRITE(MAM)=TIM.PTR+READ(MD)-1;                    /* LOOK UP KEYBOARD INFO */                      WRITE(MAL)=SHL(PPTMB,1)+PPTMB+KLT.PATCH.TIM.PTR;  /* LOCATION WITHIN THE SECTOR */                      IF (READ(MD)<>0) THEN DO;      /* MAKE SURE STILL ASSIGNED */                         K=PTPTR+READ(MD)+PT.WTABL;  /* POINT TO FRAME IN QUESTION, PT.WTABL ENTRY */                         DISABLE;                    /* FOR POLY I/O */                         IF PSTAT THEN DO;           			/* IF ACTIVE - WRITE TO SYNTH */                            WRITE(MAM)=PAR.PTR+SHR(K,8);		/* GET INFO FROM PATCH LIST FRAME */                            WRITE(MAL)=K;               		/* READ INFO TO COMPUTE PITCH CORRECTLY */                            WRITE(PSC)=MCHN;            		/* SELECT CHAN  */                            WRITE(PSF)=PSWL;            		/* WAVE TABLE LENGTH ENTRH */                            WRITE(PSD)=READ(MDI);       		/* PT.WTABL - MINUS LENGTH */                            WRITE(PSD)=READ(MDI);                            WRITE("300")=READ(MDI);     		/* PT.SOFS - SKIP BASE ADDRESS */                            WRITE("300")=READ(MDI);     		/* PT.WOFS - */                            WRITE(PSF)=PSLL;            		/* WRITE LOOP LENGTH */                            WRITE(PSD)=READ(MDI);       		/* PT.LOOPL */                            WRITE(PSD)=READ(MDI);                            WRITE(PSF)=PSON;            		/* ON/OFF */                            WRITE(PSD)=READ(MDI);       		/* PT.ONLOOP */                         END;                         WRITE(MAM)=PAR.PTR+SHR(K,8);/* GET INFO FROM PATCH LIST FRAME */                         WRITE(MAL)=K;               /* READ INFO TO COMPUTE PITCH CORRECTLY */                         MONU = READ(MDI);           /* SAVE IN PARTIAL BLOCK AS WELL */                         MNNM = READ(MDI);           /* AS WELL IN CASE NOTE HAS NOT STARTED,  OR FOR REPEAT/ARPEGGIATE */                         WRITE("300")=READ(MDI);     /* PT.SOFS - SKIP BASE ADDRESS */                         WRITE("300")=READ(MDI);     /* PT.WOFS - */                         IATINT = READ(MDI);         /* PT.LOOPL  */                         IIDLIM = READ(MDI);                         IIDINT = READ(MDI);         /* PT.ONLOOP */                         ENABLE;                      END;                   END;                END;             END;          END;         /* OF MCHN<>0 BEGIN            */          PPTR=PFPTR;  /* GO ON TO NEXT PARTIAL BLOCK */       END;            /* OF LOOP OVER PARTIALS */     END;              /* OF BEGIN FOR NSTAT<>2 */     NPTR=NFPTR;  END;                 /* OF LOOP OVER NOTES    */  RESET.BITS=RESET.BITS & (NOT(R.ILIMS\R.ELIMS\R.WMEMS\R.STERO\R.VRATE\R.FREQS\R.RRATE\R.ENPAR\R.MULTI\R.LOOPL)); /* THESE UPDATES HAVE BEEN PROCESSED ABOVE */END KNOB.CHANGES;
/*	:SYNRSOU:06-MAIN:325-NEW  $TITLE  SCAN NEW NOTES FROM KEYBOARD, SEQUENCER.  CHECK SMPTE.	*/

/*
Modified:
1998/07/06 - TY  - Modified the "CHECK TO DISPLAY NEW BEAT NUMBER" block to work when
						 using a click track.
1991/10/16 - cj  - Fixed bug: Smpte doesn't stop during recording
1991/09/13 - cj  - Fixed bug: "Cannot press record while SMPTE is not there"
1991/08/09 - cj  - Fixed bug: "Seq stays in PLAY after VITC drops out"
1991/05/23 - CJ  - moved tempo/meter event processing here from 311-samp
1991/03/14 - KJC - Added logic to generate external record triggers
1990/07/10 - PF  - Replace calls to DISPLAY.BEAT.NUMBER with NEW.BEAT.NUMBER flag
1990/07/10 - PF  - Reworked VK beat display code for Meter Map:
						 Begin using REAL.TIME.OF.NEXT.BEAT etc
1990/06/15 - CJ  - USED FORCE.TIME.MESSAGE INSTEAD OF LAST TIME MESSAGE
						 TO FORCE A CURRENT TIME MESSAGE SENDING
1990/03/21 - PF  - Compressed CLAV.PTR to 43 sectors
1990/01/25 - MWH - Fix "300 msec delay starting cues" bug (from EditView)
1989/11/17 - TSS - Fixed bugs in PLAY TO and AUTO PUNCH event flag handling
1989/01/19 - MWH - Add Auto Punch feature
1988/10/21 - TSS - Added code to keep WIMAGE up to date during SMPTE locked playing
1988/09/11 - cj  - changes to New.Sequencer.Forward.Motion and
						 Start.Up.Notes.In.Middle to try to get all cues to trigger.
1988/07/18 - CJ  - DOUBLE CHECK FOR GOOD SMPTE DATA BEFORE CALLING
						 CHECK.SMPTE.SYNCHRONIZATION.  Use new SMPTE.RATE
						 instead of GOOD.SMPTE for syncing up.
1988/06/17 - TSS - Removed spurious disable statement
1988/04/13 - PF  - ADDED REFERENCES TO CHORIG
1987/11/17 -CJ,TS- NEW.SMPTE.INFO ITEMS
1987/11/12 - MWH - Make timer comparisons unsigned to fix "30 sec hang"
1987/01/22 - CJ  - MOVE LOOP QUES TO FIX INFO NOTE TRIGGER BUG
1986/07/11 -CJ,TS- FIXED SMPTE DISPLAY OF BAD TIMES
1986/06/28 - CJ  - USED GOOD.SMPTE FOR SYNCING
1986/06/20 - CJ  - ADDED SMPTE ITEMS
1986/05/15 - "official" creation of release-M modules
*/


BEGIN;
	DCL (SMPTE.LAST)			FIXED;
	DCL FORCE.TIME.MESSAGE	FIXED EXTERNAL;	/*	FROM 10-INT	*/
	DCL (MSB,LSB)				FIXED;
	DCL SMPTE.AUTO.START		FIXED EXTERNAL;

	/*	SCAN KEYBOARD AND GUITAR	*/

	CALL SCANKBD;								/*	SCAN KEYBOARD	*/
	IF INC.AXE<>0 THEN CALL SCAN.AXE;	/*	GUITAR			*/

	DO WHILE RETRY.QUE<>0;					/*	RE-TRY ANY NOTES THAT FAILED LAST TIME (IF KEY IS STILL DOWN)	*/
		NPTR=RETRY.QUE;						/*	GET BLOCK POINTER	*/
		RETRY.QUE=NFPTR;						/*	SET UP FOR NEXT	*/
		LOAD CHORIG; ULOAD KEYN; MUL NUM.KEYS;
		WRITE(MAM)=CLAV.PTR+SHR(RES,8);
		WRITE(MAL)=RES;
		IF (READ(MD)&DOWN)<>0				/*	IF DESIRED NOTE IS STILL DOWN	*/
		THEN DO;									/*	QUE UP NOTE AGAIN	*/
			NFPTR=KBDLIST; KBDLIST=NPTR;	/*	KEYBOARD NOTES CAN GO IN ANY ORDER	*/
		END;
		ELSE DO;									/*	OOPS - KEY LIFTED.  NOTE NEVER SOUNDED.  WE TRIED	*/
			CORE(NPTR)=NFREEP;				/*	LINK US ON TO FRONT OF FREE QUE	*/
			NFREEP    =NPTR  ;
			WRITE(MD) =0;						/*	TRASH ALL BITS (HELD, SUSTAINED, ETC)	*/
		END;
	END;

	DISABLE;										/*	DISABLE INTERRUPTS FOR CHECK OF PLAY.TIME	*/
	IF  (NEW.BEAT.NUMBER<>0)				/*	CHECK TO DISPLAY NEW BEAT NUMBER	*/
	OR  ((PLAY<>0)								/*	SEQUENCER IS MOVING	*/
	AND (PLAY.TIME.LSB >= REAL.TIME.OF.NEXT.BEAT.LSB))	/*	TIME FOR NEXT BEAT	*/
	THEN DO;
		MSB=PLAY.TIME.MSB;					/*	LATCH CURRENT REAL TIME	*/
		LSB=PLAY.TIME.LSB;
		ENABLE;

		/*	COMPUTE CURRENT SEQUENCE TIME	*/
		CALL MAP.REAL.TIME.TO.SEQUENCE.TIME(LOC(ADDR(MSB)),LOC(ADDR(MSB)));

		/* WHEN USING INT OR EXT CLICK, UPDATE ON FLAG OR TIME */
		/* WHEN USING CLICK TRACK, UPDATE ON FLAG ONLY			 */
		IF (CLICK.TRACK.MODE ILT 4)\(NEW.BEAT.NUMBER<>0)
		THEN DO;							
			CALL DISPLAY.BEAT.NUMBER(LOC(ADDR(MSB)));	/*	DISPLAY BEAT NUMBER	*/
			NEW.BEAT.NUMBER = FALSE;						/*	CLEAR FLAG	*/
		END;

		/*	NOW COMPUTE REAL.TIME.OF.NEXT.BEAT FOR NEXT TIME THRU LOOP	*/
		CALL MAP.SEQUENCE.TIME.TO.NEAREST.BEATS(LOC(ADDR(MSB)),
															 LOC(ADDR(PRIOR.BEAT.MSB)),
															 LOC(ADDR(NEXT.BEAT.MSB)));
		/*	MAP NEXT BEAT TO REAL TIME	*/
		CALL MAP.SEQUENCE.TIME.TO.REAL.TIME(LOC(ADDR(NEXT.BEAT.MSB)),
														LOC(ADDR(REAL.TIME.OF.NEXT.BEAT.MSB)));

		/*	COMPUTE PRIOR BEAT ALSO (FOR REWIND CODE)	*/
		CALL MAP.SEQUENCE.TIME.TO.REAL.TIME(LOC(ADDR(PRIOR.BEAT.MSB)),
														LOC(ADDR(REAL.TIME.OF.PRIOR.BEAT.MSB)));

		/*	CHECK FOR CREATING 'NEW TEMPO' AND 'NEW METER EVENTS'	*/
		/*	ONCE EVERY CLICK.													*/
		CALL CHECK.FOR.TEMPO.METER.EVENTS(LOC(ADDR(SAMPLED.ACTUAL.SEQUENCE.TIME.MSB)));
	END;
	ELSE ENABLE;

	IF PLAY<>0 THEN DO;							/*	SCAN SEQUENCER	*/

		IF MOVE<>0 THEN DO;						/*	HANDLE FF/REW HERE	*/
			CALL HANDLE.SEQUENCER.MOVE;		/*	DO IT					*/
		END;
		ELSE DO;										/*	NORMAL PLAYING		*/
			IF (NEW.SEQUENCER.FORWARD.MOTION <> 0)
			THEN DO;									/*	STARTING UP			*/
				CALL START.UP.NOTES.IN.MIDDLE;
			END;
			
			IF (0)									// ANALYZE RESPONSE
			{
				DCL (A,B) FIXED STATIC;
				A = A+1;
				IF (A == 1000)
				{
					SEND PLAY.TIME.LSB - B;
					A = 0;
					B = PLAY.TIME.LSB;
				}
			}
			
			CALL SCAN.SEQUENCER.NOTES(ADVANCED.SEQ.TIME.MSB,ADVANCED.SEQ.TIME.LSB);

			/*	ONLY LOOK AT THE FOLLOWING IF THIS FLAG IS SET	*/
			IF CHECK.SEQUENCER.TIMES <> 0 THEN BEGIN;

				IF PLAY.SEQ.TO.A.TIME <> 0		/*	DOING A "PLAY TO"?	*/
				THEN DO;
					IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)),LOC(ADDR(SEQ.PLAY.TO.MSB))) >= LW#IEQ
					THEN DO;
						CALL STOP.PLAY;
						CALL DISPLAY.SEQUENCER.STATUS;	/*	SETS UP CORRECT SEQUENCER DISPLAY LIGHTS	*/
						PLAY.SEQ.TO.A.TIME = 0;	/*	DONE WITH "PLAY TO"	*/
					END;
				END;

				IF DELAY.NOTE.AND.CUE.STARTS <> 0		/*	DOING SILENT PRE-ROLL?	*/
				THEN DO;
					IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)),DELAY.NOTE.AND.CUE.TIME) >= LW#IEQ
					THEN DO;
						DELAY.NOTE.AND.CUE.STARTS = 0;	/*	DONE WITH PRE-ROLL	*/
						FORCE.TIME.MESSAGE = 1;				/*	FORCE CURRENT TIME TO BE SENT OVER THE PROTOCOL NOW	*/
					END;
				END;

				IF AUTO.PUNCH.IN.ARMED <> 0		/*	IF AUTO PUNCHING	*/
				THEN DO;
					IF RECD <> 0						/*	IF RECORDING		*/
					THEN DO;								/*	CHECK TO SEE IF RECORDING SHOULD GO OFF	*/
						IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)),LOC(ADDR(AUTO.PUNCH.OUT.MSB))) = LW#IGT
						THEN DO;
							CALL STOP.RECORD;			/*	EXIT AUTO-PUNCH	*/
							CALL DISPLAY.SEQUENCER.STATUS;	/*	SETS UP CORRECT SEQUENCER DISPLAY LIGHTS	*/
							AUTO.PUNCH.IN.ARMED = 0;
						END;
					END;

					ELSE DO;								/*	NOT RECORDING YET...START?	*/
						/*	DON'T START IF ALREADY PAST THE OUT TIME!!	*/
						IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)),LOC(ADDR(AUTO.PUNCH.OUT.MSB))) = LW#IGT
						THEN AUTO.PUNCH.IN.ARMED = 0;
						ELSE IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)),LOC(ADDR(AUTO.PUNCH.IN.MSB))) >= LW#IEQ
						THEN DO;
							IF START.RECORD = 0		/*	START AUTO-PUNCH	*/
							THEN CALL STOP.PLAY;		/*	STOP IF ERROR (NO TRACK, TIMBRE MISMACTH, ETC)	*/
							ELSE PNCH = 1;				/*	WE'RE OK, SET TO PUNCH-IN MODE	*/
							CALL DISPLAY.SEQUENCER.STATUS;	/*	SETS UP CORRECT SEQUENCER DISPLAY LIGHTS	*/
						END;
					END;	/*	OF START RECORDING	*/
				END;		/*	OF AUTO-PUNCHING	*/

				IF (EXT.REC.TRIGGER.STATE <> 0)	/*	IF TRIGGERING EXTERNAL HARDWARE DURING RECORD	*/
				THEN DO CASE (EXT.REC.TRIGGER.STATE - 1);
					IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)), PREROLL_TRIGGER) >= LW#IEQ
					THEN DO;								/*	1: TRIGGER PREROLL SIGNAL	*/
						WRITE("34") = (D34_CCC_BITS | BITS(B#PREROLL));	/*	TRIGGER IT	*/
						D34_TRIGGER_BITS = BITS(B#PREROLL);	/*	KEEP IT SET	*/
						EXT.REC.TRIGGER.STATE = EXT.REC.TRIGGER.STATE + 1;	/*	MOVE TO NEXT STATE	*/
					END;
					DO;									/*	2: CLEAR PREROLL TRIGGER	*/
						WRITE("34") = D34_CCC_BITS;
						D34_TRIGGER_BITS = 0;
						EXT.REC.TRIGGER.STATE = EXT.REC.TRIGGER.STATE + 1;	/*	MOVE TO NEXT STATE	*/
					END;
					IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)), REC_IN_TRIGGER) >= LW#IEQ
					THEN DO;								/*	3: TRIGGER RECORD IN SIGNAL	*/
						WRITE("34") = (D34_CCC_BITS | BITS(B#REC_IN));	/*	TRIGGER IT	*/
						D34_TRIGGER_BITS = BITS(B#REC_IN);	/*	KEEP IT SET	*/
						EXT.REC.TRIGGER.STATE = EXT.REC.TRIGGER.STATE + 1;	/*	MOVE TO NEXT STATE	*/
					END;
					DO;									/*	4: CLEAR RECORD IN TRIGGER	*/
						WRITE("34") = D34_CCC_BITS;
						D34_TRIGGER_BITS = 0;
						EXT.REC.TRIGGER.STATE = EXT.REC.TRIGGER.STATE + 1;	/*	MOVE TO NEXT STATE	*/
					END;
					IF COM32(LOC(ADDR(SAMPLED.ACTUAL.PLAY.TIME.MSB)), REC_OUT_TRIGGER) >= LW#IEQ
					THEN DO;								/*	5: TRIGGER RECORD OUT SIGNAL	*/
						WRITE("34") = (D34_CCC_BITS | BITS(B#REC_OUT));	/*	TRIGGER IT	*/
						D34_TRIGGER_BITS = BITS(B#REC_OUT);	/*	KEEP IT SET	*/
						EXT.REC.TRIGGER.STATE = EXT.REC.TRIGGER.STATE + 1;	/*	MOVE TO NEXT STATE	*/
					END;
					DO;									/*	6: CLEAR RECORD OUT TRIGGER	*/
						WRITE("34") = D34_CCC_BITS;
						D34_TRIGGER_BITS = 0;
						EXT.REC.TRIGGER.STATE = 0;	/*	4: ALL DONE	*/
					END;
				END;

				IF ( AUTO.PUNCH.IN.ARMED			/*	IF NO SPECIAL VARS TO LOOK AT...	*/
					| PLAY.SEQ.TO.A.TIME
					| DELAY.NOTE.AND.CUE.STARTS
					| EXT.REC.TRIGGER.STATE
					) = 0
				THEN CHECK.SEQUENCER.TIMES = 0;	/*	...CLEAR FLAG THAT GETS US IN HERE	*/

			END;			/*	OF CHECKING SEQUENCER TIMES	*/
		END;				/*	OF NORMAL PLAYING	*/

	END;
	ELSE DO;											/*	NOT PLAYING - ADVANCE QUES DURING INFO MODE	*/
		IF  (NEW.PAN<>0)							/*	NEW PANEL			*/
		AND ((INFO.MODE<>0)						/*	INFO MODE			*/
		AND (NUM.OF.HELD.TRACK.BUTTONS<>0))	/*	TRACK BUTTON HELD	*/
		OR  (TRIGGER.INFO.NOTES<>0)			/*	OR INFO NOTES TO START FROM SOMEWHERE ELSE	*/
		THEN CALL MOVE.LOOP.QUES;				/*	WHEN PLAY=0			*/
	END;

	/*	CHECK SMPTE:	*/

	IF (REAL.MILLISECONDS-SMPTE.LAST) IGT 100	/*	CHECK SMPTE ONLY	*/
	THEN BEGIN;											/*	10 TIMES/SEC		*/

		DCL SMPTE.POS DATA
		(16*256,19*256,22*256,25*256);		/*	WINDOW POS OF SMPTE DATA (UPPER HALF)	*/
		DCL WIMAGE.POS DATA
		(16,19,22,25);								/*	SMPTE.POS ARRAY/256	*/

		SMPTE.LAST=REAL.MILLISECONDS;

		IF SMPTE.ONOFF<>0 THEN BEGIN;			/*	IF SCANNING SMPTE, CHECK INFO	*/
			DCL SAMPLED.TIME.BASE.MODE FIXED;
			DCL LOCAL.KBD.MSECS        FIXED;

			/*	SAMPLE INTERRUPT VARIABLES:	*/

			WRITE("300")=ADDR(SAMPLED.RATE);
			WRITE("301")=ADDR(SMPTE.RATE);
			DISABLE;
			IF (INC.POLY<>0) THEN DO;
				RPC 9;
				WRITE("360")=READ("361");
			END;
			ELSE DO;
				WRITE("360")=READ("361");	/*	SAMPLED.RATE = SMPTE.RATE	*/
				WRITE("360")=READ("361");	/*	SAMPLED.TIME = SMPTE.TIME	*/
				WRITE("360")=READ("361");	/*	SAMPLED.ACCUM = SMPTE.ACCUM	*/
				WRITE("360")=READ("361");	/*	SAMPLED.ADVANCES = SMPTE.ADVANCES	*/
				WRITE("360")=READ("361");	/*	SAMPLED.BRATE = SMPTE.BRATE	*/
				WRITE("360")=READ("361");	/*	SAMPLED.RATE.ACCUM = SMPTE.RATE.ACCUM	*/
				WRITE("360")=READ("361");	/*	SAMPLED.INFO1 = SM.INFO1	*/
				WRITE("360")=READ("361");	/*	SAMPLED.INFO2 = SM.INFO2	*/
				WRITE("360")=READ("361");	/*	SAMPLED.INFO3 = SM.INFO3	*/
			END;
			SAMPLED.TIME.BASE.MODE=TIME.BASE.MODE;
			LOCAL.KBD.MSECS       =KBD.MILLISECONDS;
			ENABLE;

			/*	EXTRACT SMPTE TIME FOR DISPLAY AND/OR SYNC	*/

			CUR.BIT = SAMPLED.INFO1&127;		/*	GET BITS							*/
			CUR.FRA = SAMPLED.INFO2&255;		/*	FRAMES		LOOK UP INFO	*/
			CUR.SEC = SHR(SAMPLED.INFO2,8);	/*	SECONDS		FOR USE HERE	*/
			CUR.MIN = SAMPLED.INFO3&255;		/*	MINUTES		AND IN			*/
			CUR.HRS = SHR(SAMPLED.INFO3,8);	/*	HOURS			SMPTE.SUB		*/


			/*	DISPLAY ALL SMPTE DATA ON VK (EVEN IF NO DATA IS COMING IN)	*/
			/*	SO THAT WE TRACK ALL SMPTE TIMES										*/

			IF (SAMPLED.INFO2 <> SMPTE.LAST.INFO2)	/*	DETECT CHANGE IN	*/
			OR (SAMPLED.INFO3 <> SMPTE.LAST.INFO3)	/*	CURRENT SMPTE		*/
			THEN DO;											/*	READING				*/

				SMPTE.LAST.INFO2 = SAMPLED.INFO2;
				SMPTE.LAST.INFO3 = SAMPLED.INFO3;

				IF (NEW.PAN<>0) THEN DO;			/*	DISPLAY THIS TIME IN LOWER	*/

					IF  (LOWER.DISP<>SMPTE.DISP)	/*	IF NOT SMPTE				*/
					AND (LOWER.DISP<>BEATS.DISP)	/*	AND NOT BEATS				*/
					AND (LOWER.DISP<>LINES.DISP)	/*	AND LINES NOT DISPLAYED	*/
					THEN DO;
						SUPRESS.BEAT.DISPLAY=0; LOWER.DISP=0;
						NEW.BEAT.NUMBER = 1;			/*	TRY TO SET UP BEAT DISPLAY	*/
					END;

					IF LOWER.DISP=BEATS.DISP		/*	BEAT IS DISPLAYED	*/
					THEN DO;								/*	CONVERT TO SMPTE	*/
						CALL EMIT.STRING(18,':  :  :');
						LOWER.DISP=SMPTE.DISP;		/*	INDICATE SMPTE TIME THERE	*/
						NEW.LOWER = 0;					/*	BUT DO NOT ANNOUNCE SMPTE	*/
						DO I=0 TO 4;
							CORE(ADDR(DIS.HRS)+I)=(-1);
						END;
					END;

					DO I=0 TO 3;						/*	COMPARE NEW VS OLD	*/

						J=CORE(ADDR(DIS.HRS)+I);
						K=CORE(ADDR(CUR.HRS)+I);

						IF J<>K THEN DO;				/*	UPDATE REQUIRED	*/

							CORE(ADDR(DIS.HRS)+I)=K;

							IF LOWER.DISP=SMPTE.DISP	/*	IF SMPTE DISPLAYED	*/
							THEN DO;
								LOAD K; DIV 10;			/*	GET TWO DIGITS	*/
								IF (NEW.ORK == 0) THEN  DO;
									DISABLE;					/*	FOR CREG WRITE	*/
									WRITE(CREG)=2;			/*	SET UP DREG TO INDICATE ALPHA DISPLAY	*/
									WRITE(DREG)=(SMPTE.POS(I)    )\("60"+READ(5));
									WRITE(CREG)=2\"40";
									WRITE(CREG)=2;
									WRITE(DREG)=(SMPTE.POS(I)+256)\("60"+READ(4));
									WRITE(CREG)=2\"40";
									WRITE(CREG)=2;
									ENABLE;
								END;
								WIMAGE(WIMAGE.POS(I))   = "60"+RES;	/*	SAVE CHARS IN IMAGE ARRAY	*/
								WIMAGE(WIMAGE.POS(I)+1) = "60"+REM;	/*	FOR EVENTUAL PROTOCOL OUTPUT	*/
								NEW.CLAVIER.INFO = NEW.CLAVIER.INFO | "030000";	/*	SET BITS TO UPDATE ENTIRE LOWER DISPLAY	*/
							END;
						END;
					END;
				END;

				ELSE DO;									/*	DISPLAY ON SCREEN FOR OK	*/
					DO I=0 TO 4;
						CORE(ADDR(DIS.HRS)+I) = CORE(ADDR(CUR.HRS)+I);
					END;
				END;

				NEW.SMPTE.INFO=1;

			END;

			/*	NOW TRY TO LOCK UP TO SMPTE IF VALID	*/
			/*	DATA IS COMING IN							*/

			IF SAMPLED.RATE<>0 THEN DO;

				IF SLOCKED=0 THEN DO;				/*	NOT LOCKED - TRY TO LOCK UP	*/

					IF DISABLE.SMPTE.START=0		/*	START UP AND LOCK TO	*/
					THEN CALL LOCK.TO.SMPTE;		/*	SMPTE						*/

				END;

				/*	CHECK SMPTE SYNCHRONIZATION	*/

				ELSE IF (SAMPLED.TIME.BASE.MODE = 4)							/*	SEE IF FINAL LOCK UP HAS BEEN COMPLETED	*/
				AND     ((SAMPLED.ACCUM+SAMPLED.BRATE)>SMPTE.BIT.TARG)	/*	AND ADDITIONAL BITS HAVE GONE BY				*/
				THEN DO;

					/*	AFTER DROP OUT, CHECK MAJOR SYNCHRONIZATION	*/
					/*	TO DETECT BREAK IN SMPTE							*/

					IF CHECK.SMPTE.ERROR <> 0 THEN DO;		/*	CHECK FOR SMPTE	*/
						CALL CHECK.SMPTE.SYNCHRONIZATION;	/*	SYNC AFTER			*/
					END;												/*	DROP OUT				*/

					/*	ELSE PERFORM PRECISE SYNC CHECK AND ADJUST	*/
					/*	RATE ACCORDINGLY										*/

					ELSE DO;

						/*	COMPUTE # OF SMPTE BITS THAT HAVE	*/
						/*	GONE BY SINCE WE LAST CHECKED		*/
						/*	THE SYNCHRONIZATION					*/

						LOAD LOCAL.KBD.MSECS-SAMPLED.TIME;	/*	GET MSECS THAT HAVE PASSED SINCE LAST SAMPLING OF SMPTE	*/
						MUL SAMPLED.BRATE; MWAIT; DIV 20;	/*	PROJECT HOW MANY BITS HAVE GONE BY SINCE THEN				*/
						I=RES;										/*	THIS MANY BITS HAVE GONE BY SINCE WE SAMPLED SMPTE			*/
						IF REM>=10 THEN I=I+1;					/*	ROUND																		*/

						LOAD (SAMPLED.ACCUM+SMPTE.BRATE)+I-SMPTE.BIT.TARG;	/*	GET TOTAL BITS THAT HAVE GONE BY SINCE WE WERE HERE LAST	*/
						SMPTE.BIT.TARG=(SAMPLED.ACCUM+SMPTE.BRATE)+I;		/*	UPDATE ACCUMULATOR	*/
						MUL BITS.PER.MSEC.DEN(SM.MODE);		/*	ACCUMULATE BITS PER MSEC	*/
						SMPTE.SYNC.MSB=SMPTE.SYNC.MSB+URES;
						SMPTE.SYNC.LSB=SMPTE.SYNC.LSB+RES;
						IF SMPTE.SYNC.LSB ILT RES
						THEN SMPTE.SYNC.MSB=SMPTE.SYNC.MSB+1;

						/*	NOW COMPUTE THE # OF TIME BASE		*/
						/*	ADVANCES WE HAVE DONE SINCE THEN:	*/

						I=SAMPLED.ADVANCES-SMPTE.LAST.ADV;		/*	GET # OF ADVANCES WE HAVE DONE	*/
						SMPTE.LAST.ADV=SAMPLED.ADVANCES;			/*	UPDATE ACCUMULATOR			*/
						IF SAMPLED.RATE.ACCUM<SMPTE.LAST.RACC	/*	SEE IF WE HAVE ROUNDED UP	*/
						THEN DO;
							I=I-1;
							SMPTE.LAST.RACC=SMPTE.LAST.RACC-SMPTE.MODE.RATE;
						END;
						LOAD I;
						MUL BITS.PER.MSEC.NUM(SM.MODE);
						SMPTE.SYNC.MSB=SMPTE.SYNC.MSB-URES;
						IF SMPTE.SYNC.LSB ILT RES
						THEN SMPTE.SYNC.MSB=SMPTE.SYNC.MSB-1;
						SMPTE.SYNC.LSB=SMPTE.SYNC.LSB-RES;

						/*	CORRECT FOR LSB'S IN RATE ACCUMULATOR:	*/

						I=SAMPLED.RATE.ACCUM-SMPTE.LAST.RACC;
						SMPTE.LAST.RACC=SAMPLED.RATE.ACCUM;
						LOAD I;
						MUL BITS.PER.MSEC.NUM(SM.MODE);
						MWAIT; DIV SMPTE.MODE.RATE;
						IF SMPTE.SYNC.LSB ILT RES
						THEN SMPTE.SYNC.MSB=SMPTE.SYNC.MSB-1;
						SMPTE.SYNC.LSB=SMPTE.SYNC.LSB-RES;

						/*	NOW SEE IF WE ARE EARLY OR LATE:	*/

						IF SMPTE.SYNC.MSB>=0 THEN DO;       /*	MEANS WE HAVE NOT BEEN PLAYING FAST ENOUGH	*/
							LOAD SMPTE.SYNC.LSB; ULOAD SMPTE.SYNC.MSB;
							DIV BIT.RATE.FACTOR(SM.MODE);		/*	GET 12 * FULL BITS TO CORRECT	*/
							I=RES;									/*	PLAY FASTER BY THIS MANY BITS	*/

                     // Provide very gentle correction on DTD to reduce warbling
                     if (LOD.RUNNING == 1) {
                        IF I>=24 THEN I=I-24;         /*	PROVIDE TWO BIT SYNCHRONIZATION WINDOW	*/
                        ELSE          I=0;
                     }
                     else {                           // Lock up quickly to no window
                        I=SHL(I,2);
                     }
						END;

						ELSE DO;                            /*	MEANS WE HAVE BEEN PLAYING TOO FAST	*/
							IF SMPTE.SYNC.LSB=0 THEN DO;		/*	NEGATE NUMBER FOR DIVIDE	*/
								I=(-SMPTE.SYNC.MSB); J=0;
							END;
							ELSE DO;
								I=NOT(SMPTE.SYNC.MSB); J=(-SMPTE.SYNC.LSB);
							END;
							LOAD J; ULOAD I;
							DIV BIT.RATE.FACTOR(SM.MODE);		/*	GET 12 * FULL BITS TO CORRECT	*/
							I=(-RES);
                     if (LOD.RUNNING == 1) {
                        IF I<=(-24) THEN I=I+24;      /*	PROVIDE TWO BIT SYNCHRONIZATION WINDOW	*/
                        ELSE             I=0;
                     }
                     else {                           // Lock up quickly to no window
                        I=SHL(I,2);
                     }
						END;

						/*	SET UP SMPTE TRACK RATE THAT WILL PROVIDE THIS	*/
						/*	MUCH TIME CORRECTION IN .2 SECOND (1/12 OF 2.5	*/
						/*	SECONDS														*/

						SMPTE.TRACK.RATE=SMPTE.RATE + I;

					END;
				END;
			END;				/*	OF SAMPLED.RATE<>0	*/

			ELSE IF (SLOCKED          <> 0)		/*	ELSE IF LOCKED TO SMPTE NOW	*/
			OR      (SMPTE.AUTO.START <> 0)		/*	OR WE TRIED TO START UP			*/
			THEN DO;										/*	THEN SHUT DOWN						*/
				CALL STOP.SEQUENCER;
				SMPTE.AUTO.START = 0;
			END;

		END;					/*	OF SMPTE.ONOFF  <>0	*/

		/*	ELSE IF DISPLAY OF MTC IS DESIRED, THEN DO SO WHILE PLAYING	*/

		ELSE IF (NEW.MTC.VAL != 0)		/*	IF NEW MTC VALUE HAS COME IN	*/
		THEN DO;

			IF (SMPTE.ONOFF == 0)		/*	IF NOT USING SMPTE, LATCH CURRRENT MIDI TIME CODE VALUE	*/
			{									/*	FOR VARIOUS DISPLAY & TAKE ROUTINES								*/
				DISABLE;
				CUR.HRS = MIDI.TC.VAL(0);
				CUR.MIN = MIDI.TC.VAL(1);
				CUR.SEC = MIDI.TC.VAL(2);
				CUR.FRA = MIDI.TC.VAL(3);
				CUR.BIT = 0;
				ENABLE;

				NEW.SMPTE.INFO = 1;
			}

			NEW.MTC.VAL = 0;

			IF (DISPLAY.MTC != 0)
			THEN DO;
				IF  (LOWER.DISP<>SMPTE.DISP)	/*	IF NOT SMPTE				*/
				AND (LOWER.DISP<>BEATS.DISP)	/*	AND NOT BEATS				*/
				AND (LOWER.DISP<>LINES.DISP)	/*	AND LINES NOT DISPLAYED	*/
				THEN DO;
					SUPRESS.BEAT.DISPLAY=0; LOWER.DISP=0;
					NEW.BEAT.NUMBER = 1;			/*	TRY TO SET UP BEAT DISPLAY	*/
				END;

				IF LOWER.DISP=BEATS.DISP		/*	BEAT IS DISPLAYED	*/
				THEN DO;								/*	CONVERT TO SMPTE	*/
					CALL EMIT.STRING(18,':  :  :');
					LOWER.DISP=SMPTE.DISP;		/*	INDICATE SMPTE TIME THERE	*/
					NEW.LOWER = 0;					/*	BUT DO NOT ANNOUNCE SMPTE	*/
					DO I=0 TO 4;
						CORE(ADDR(DIS.HRS)+I)=(-1);
					END;
				END;

				IF LOWER.DISP=SMPTE.DISP	/*	IF SMPTE DISPLAYED	*/
				THEN DO;

					DO I=0 TO 3;						/*	COMPARE NEW VS OLD	*/

						J=CORE(ADDR(DIS.HRS)+I);
						K=MIDI.TC.VAL(I);

						IF J<>K THEN DO;				/*	UPDATE REQUIRED	*/

							CORE(ADDR(DIS.HRS)+I)=K;

							LOAD K; DIV 10;			/*	GET TWO DIGITS	*/

                     IF (NEW.ORK == 0) THEN  DO;
                        DISABLE;						/*	FOR CREG WRITE	*/
                        WRITE(CREG)=2;				/*	SET UP DREG TO INDICATE ALPHA DISPLAY	*/
                        WRITE(DREG)=(SMPTE.POS(I)    )\("60"+READ(5));
                        WRITE(CREG)=2\"40";
                        WRITE(CREG)=2;
                        WRITE(DREG)=(SMPTE.POS(I)+256)\("60"+READ(4));
                        WRITE(CREG)=2\"40";
                        WRITE(CREG)=2;
                        ENABLE;
                     END;

							WIMAGE(WIMAGE.POS(I))   = "60"+RES;	/*	SAVE CHARS IN IMAGE ARRAY	*/
							WIMAGE(WIMAGE.POS(I)+1) = "60"+REM;	/*	FOR EVENTUAL PROTOCOL OUTPUT	*/
							NEW.CLAVIER.INFO = NEW.CLAVIER.INFO | "030000";	/*	SET BITS TO UPDATE ENTIRE LOWER DISPLAY	*/
						END;
					END;
				END;
			END;			/*	OF IF (DISPLAY.MTC != 0)	*/
		END;				/*	OF NEW MTC VALUE HAS COME IN	*/
	END;					/*	OF TIME TO DO SMPTE	*/
END;						/*	OF BEGIN	*/

/* 320-RIBF  -  PRESSURE/RIBBON FILTER CODE *//*   11/10/88 - PF - FIXED RIBBON CODE TO WORK WITH MULTI TRACK MIDI CODE (THD.LIVE.RTES)   11/12/87 - MWH - Make timer comparisons unsigned to fix "30 sec hang"   05/15/86 - "official" creation of release-M modules*/BEGIN;   DCL (PRIOR.RF) FIXED;                   /* PRIOR TIME OF RIBBON FILTER */   DCL (T#)       FIXED;                   /* TRACK NUMBER */   IF (SAMPLED.REAL.MILLISECONDS-PRIOR.RF) IGT 10 THEN DO;   /* ONLY EVERY 10 MS, HOWEVER */      I=ARLIST0;                           /* SEARCH LINKED LIST OF TRACKS */      DO WHILE I<>0;                       /* PROCESS EACH TRACK THAT USES THE RIBBON */         WRITE(MAM)=NAH.PTR+I;             /* POINT TO TRACK HEAD */         WRITE(MAL)=THD.TRK;               /* POINT TO THIS TRACK HEADS TRACK NUMBER */         T#        =READ(MD);              /* COPY TRACK NUMBER INTO LOCAL VARAIBLE */         IF (T#=0)                         /* PROCESSING LIVE PERFORMANCE AT VK */         THEN WRITE(MAL)=THD.LIVE.RTES+5;  /* GET LIVE ACTUAL RIBBON  */         ELSE WRITE(MAL)=THD.RTES+5;       /* GET RECORDED ACTUAL RIBBON   */         L=SHL(READ(MDI),8);               /* MOVE TO UPPER HALF - EITHER POS OR NEGATIVE NUMBER HERE */         M=READ(MD);                       /* GET POSITIVE FILTERED VERSION */         IF  (L<>M)                        /* DIFFERENT */         THEN DO;                          /* CHANGE REQUIRED AT FILTER RATE */            WRITE(MAL)=THD.RF.TC;          /* POINT TO TRACK COPY OF TIME CONSTANT */            IF M<L THEN DO;                /* HEADED UP - USE SIGNED COMPARISON HERE */               DO P=PRIOR.RF TO SAMPLED.REAL.MILLISECONDS-10 BY 10; /* CORRECT FOR LOST TIME */                  LOAD (L-M); MUL READ(MD);                  M=M+READ(4);             /* FRACTIONAL MULTIPLY */                  IF READ(4)=0 THEN DO;    /* SPECIAL CHECKS REQUIRED */                     IF M<>L THEN M=M+1;                  END;               END;            END;            ELSE DO;                        /* HEADED DOWN */               DO P=PRIOR.RF TO SAMPLED.REAL.MILLISECONDS-10 BY 10; /* CORRECT FOR LOST TIME */                  LOAD (M-L); MUL READ(MD);                  M=M-READ(4);              /* FREACTIONAL MULTIPLY, HEAD DOWN (ALL UNSIGNED FOR SPEED) */                  IF READ(4)=0 THEN DO;     /* SPECIAL CHECKS REQUIRED */                     IF M<>L THEN M=M-1;                  END;               END;            END;                        IF (T#=0)                       /* PROCESSING LIVE PERFORMANCE AT VK */            THEN WRITE(MAL)=THD.LIVE.RTES+6;            ELSE WRITE(MAL)=THD.RTES+6;     /* SEQUENCER TRACK        */            WRITE(MDI)=M;                   /* STORE NEW POS VALUE    */            WRITE(MD )=-M;                  /* AND MINUS VALUE        */            WRITE(MAL)=THD.RF.PARS;         /* GET BITS FOR PARAMS    */            P=READ(MD);            WRITE(MAL)=THD.UPD.PARS;        /* MUST UPDATE THOSE      */            WRITE(MDI)=READ(MD)\P;            IF  (READ(MD)=0)                /* CHECK UPD.QUED         */            THEN DO;               WRITE(MDI)=1;                /* THD.UPD.QUED TO NONZ   */               WRITE(MD)=UPLIST0;           /* STORE FORWD PTR        */               UPLIST0=I;                   /* IN THD.UPD.LINK        */            END;            NEW.INFO=1;                     /* FORCE IMMEDIATE ENTRY TO UPDATING CODE */         END;                               /* OF DIFFERENT */         WRITE(MAL)=THD.ARLIST;             /* GET NEXT     */         I=READ(MD);      END;                                  /* OF LOOP OVER TIMBRES WITH ACTIVE RIBBON CONTROLLERS */      PRIOR.RF=SAMPLED.REAL.MILLISECONDS;   /* SAVE TIME OF LAST UPDATE */   END;                                     /* OF ACTUALLY 10 MS LATER */END;
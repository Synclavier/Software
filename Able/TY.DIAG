/* . . . . . . .   L I T E R A L   D E C L A R A T I O N S   . . . . . . . *//* SHORTENED OR ALTERNATE XPL KEYWORDS */dcl pri                  lit 'print';dcl pub                  lit 'public';dcl ascii_space             lit 'chr(#ascii_space)';dcl #ascii_space lit '32';dcl #ascii_0     lit '48';/* . . . . . . . . .  P R I V A T E   V A R I A B L E S  . . . . . . . . . *//* VARIABLE FOR GENERAL USE AS A TEMPORARY SLOT */dcl (private0,private1) fixed;/* . .  P U B L I C   P R O C E D U R E S   A N D   F U N C T I O N S  . . *//* THE FOLLOWING PROCEDURES USE THE HARDWARE MULTIPLY/DIVIDE TO PERFORM   UNSIGNED INTEGER CALCULATIONS. *//* THE FUNCTION "intdiv" INPUTS A FIXED POINT DIVIDEND AND A FIXED POINT   DIVISOR AND RETURNS THE INTEGER PORTION OF THE QUOTIENT. */intdiv: proc(divisor,dividend) returns (fixed) pub;  dcl (divisor,dividend) fixed;  write(5)=divisor;  write(7)=dividend;  return read(5);end;/* . . . . . . . . .   P U B L I C   V A R I A B L E S   . . . . . . . . . *//* VARIABLES USED FOR BOOLEAN FLAG */dcl vertical_align boolean pub;vertical_align=false;/* . .  P U B L I C   P R O C E D U R E S   A N D   F U N C T I O N S  . . *//* THE FOLLOWING PROCEDURES PERFORM VARIOUS CONVERSIONS BETWEEN INTEGERS AND   TEXTUAL REPRESENTATIONS OF THEM. */dcl place   lit 'private0';dcl leading lit 'private1';/* THE PROCEDURE "print_digit" IS PRIVATE TO THIS MODULE AND IS USED ONLY BY   THE FOLLOWING TWO PROCEDURES "octpri" AND "intpri". */print_digit: proc(digit);  dcl digit fixed;  if leading then do;    if digit ieq 0 then do;      if vertical_align then pri ascii_space,;    end;    else do;      leading=false;      pri chr(digit+#ascii_0),;    end;  end;  else do;    pri chr(digit+#ascii_0),;  end;end;/* THE PROCEDURE "intpri" INPUTS A FIXED POINT NUMBER AND PRINTS IT TO THE   SCREEN IN UNSIGNED INTEGER FORMAT WITH NO LEADING ZEROS.  IF THE GLOBAL   VARIABLE 'vertical_align' IS SET TO TRUE THEN SPACES ARE INSERTED WHERE   LEADING ZEROS WOULD BE IN ORDER TO KEEP COLUMNS OF NUMBERS LINED UP. */intpri: proc(integer) pub;  dcl (integer) fixed;  place=10000;  leading=true;  do while place igt 1;    write(5)=integer;          /* DIVISOR */    write(7)=place;            /* DIVIDEND */    integer=(read(4));         /* REMAINDER */    call print_digit(read(5)); /* QUOTIENT */    place=intdiv(place,10);  end;  pri chr(integer+#ascii_0),;end;
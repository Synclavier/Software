30000 iterations of {d = a+a;}						took 18188 D16 increments.30000 iterations of {d = a*2;}						took 23710 D16 increments.30000 iterations of {d = shl(a,1);}					took 18193 D16 increments.30000 iterations of {load a; mul 2; d = res;}	took 23734 D16 increments.30000 iterations of {d = intmul(a,2);}				took 46491 D16 increments.---When input is prime (forcing exhaustive search), the new algorithm is:faster by a factor of 825.0 best case (reduce_integer(3))faster by a factor of  62.5 worst case (reduce_integer(65521))faster by a factor of  70.1 on the averageNote: this average is fairly meningless because the factor is highly dependent on how large the number is.For example, with numbers around 1750 you can expect the new algorithm to be faster by a factor of 93reduce_integer(3)31 iteration of NEW VERSION took     1 D16 increments.1 iteration of OLD VERSION took   825 D16 increments.reduce_integer(23)231 iteration of NEW VERSION took     7 D16 increments.1 iteration of OLD VERSION took  1972 D16 increments.reduce_integer(257)2571 iteration of NEW VERSION took    29 D16 increments.1 iteration of OLD VERSION took  3463 D16 increments.reduce_integer(1759)17591 iteration of NEW VERSION took    85 D16 increments.1 iteration of OLD VERSION took  7926 D16 increments.reduce_integer(-15)655211 iteration of NEW VERSION took   740 D16 increments.1 iteration of OLD VERSION took 46272 D16 increments.---When input is composed of relatively small prime factors, the new algorithm is:faster by a factor of 283.0 best case (reduce_integer(4))faster by a factor of 172.8 worst case (reduce_integer(65520))faster by a factor of 214.9 on the averageIn this case the size of the number has much less effect on the factor.The speed is primarily affected by the size of the prime components of the number.reduce_integer(4)2*21 iteration of NEW VERSION took     3 D16 increments.1 iteration of OLD VERSION took   849 D16 increments.reduce_integer(24)2*2*2*31 iteration of NEW VERSION took     7 D16 increments.1 iteration of OLD VERSION took  2169 D16 increments.reduce_integer(256)2*2*2*2*2*2*2*21 iteration of NEW VERSION took    15 D16 increments.1 iteration of OLD VERSION took  3491 D16 increments.reduce_integer(1760)2*2*2*2*2*5*111 iteration of NEW VERSION took    18 D16 increments.1 iteration of OLD VERSION took  3823 D16 increments.reduce_integer(-16)2*2*2*2*3*3*5*7*131 iteration of NEW VERSION took    26 D16 increments.1 iteration of OLD VERSION took  4493 D16 increments.
/* Plotting Package insert file */library ':-xpl:libs:plotlib';dcl #transparent     lit '0';dcl #alpha           lit '1';dcl #vector          lit '2';dcl #point           lit '3';dcl point_mode       lit 'do;control.seq=1;wchar("34");#mode=#point;#initialize=1;end;';dcl vector_mode      lit 'do;control.seq=1;wchar("35");#mode=#vector;#initialize=1;end;'; dcl transparent_mode lit 'if #mode<>#transparent then do;control.seq=0;wchar("30");#mode=#transparent;end;';dcl alpha_mode       lit 'do;control.seq=1;wchar("37");#mode=#alpha;end;';/* character sizes */dcl small_chars  lit '0'; /* normal characters */dcl medium_chars lit '1'; /* bigger than normal characters */dcl large_chars  lit '2'; /* large characters */dcl extra_large  lit '3'; /* extra large characters *//* data levels */dcl copy_pixels       lit '0'; /* copy pixels */dcl erase_pixels      lit '1'; /* erase pixels */dcl complement_pixels lit '2'; /* complement pixels *//* line types */dcl solid_line   lit '0'; /* solid line */dcl dotted_line  lit '1'; /* dotted line */dcl dot_dashed   lit '2'; /* dot-dashed line */dcl short_dashed lit '3'; /* short-dashed line */dcl long_dashed  lit '4'; /* long-dashed line */dcl CLEAR            lit 'call #clear';dcl CHAR_SIZE        lit 'call #char_size';dcl DATA_LEVEL       lit 'call #data_level';dcl LINE_TYPE        lit 'call #line_type';dcl PS               lit 'call #plotstring';dcl PN               lit 'call #plotnum';dcl IPLOT            lit 'call #iplot';dcl PLOT             lit 'call #plot';dcl IMOVE_TO         lit 'call #imove_to';dcl MOVE_TO          lit 'call #move_to';dcl ICONNECT         lit 'call #iconnect';dcl CONNECT          lit 'call #connect';dcl IAXES            lit 'call #iaxes';dcl AXES             lit 'call #axes';dcl BORDER           lit 'call #border';dcl CHAR_BOUND       lit '#char_bound';dcl PUNITS           lit 'call #punits';dcl IWINDOW          lit 'call #iwindow';dcl WINDOW           lit 'call #window';dcl VIEWPORT         lit 'call #viewport';dcl HARDCOPY         lit 'call #hardcopy';dcl GPOSX            lit '#gpos.x';dcl GPOSY            lit '#gpos.y';dcl #clear      proc external; /* clear screen, leave in transparent mode */dcl #char_size  proc(fixed) external; /* char size 0 - 80 per line;  1-40 per line */dcl #data_level proc(fixed) external; /* sets line to on, off, or complement */dcl #line_type  proc(fixed) external; /* sets line type */dcl #plotstring proc(fixed array) external; /* plots string in TEK4010 alpha characters */dcl #plotnum    proc(fixed) external; /* plots number in TEK4010 alpha characters */dcl #iplot      proc(fixed,fixed) external; /* continues vector sequence to (x,y) in user units */dcl #plot       proc(floating,floating) external; /* continues vector sequence to FLOATING POINT problem (x,y) coord's */dcl #imove_to   proc(fixed,fixed) returns (fixed) external; /* begin vector sequence at user's (x,y), return 1 if out  */dcl #move_to    proc(floating,floating) returns (fixed) external; /* begin vector sequence at FLOATING POINT problem (x,y) coords, return 1 if out  */dcl #iconnect   proc(fixed,fixed,fixed,fixed) external; /* connects user's (a,b) to (c,d) */dcl #connect    proc(floating,floating,floating,floating) external; /* connects FLOATING POINT problem (a,b) to (c,d) */dcl #iaxes      proc(fixed,fixed) external; /* axes through (x,y) */ dcl #axes       proc(floating,floating) external; /* axes through FLOATING POINT problem (x,y) */ dcl #border     proc external; /* draw border around viewport */dcl #char_bound proc(fixed,fixed,fixed,fixed) returns (boolean) external; /* check to see if char can be plotted */dcl #punits     proc(fixed,fixed) external; /* user units for viewports */dcl #iwindow    proc(fixed,fixed,fixed,fixed) external; /* set plot limits in user units */dcl #window     proc(floating,floating,floating,floating) external; /* set plot limits in floating user units */dcl #viewport   proc(fixed,fixed,fixed,fixed) external; /* set plot limits in plotter units */dcl #hardcopy   proc external; /* dumps from screen to PAPER TIGER/PRISM series printer */dcl #gpos.x     proc (fixed) returns (fixed) external; /* maps transparent x-coord to graphics pixel pos */dcl #gpos.y     proc (fixed) returns (fixed) external; /* maps transparent y-coord to graphics pixel pos */dcl #mode       fixed external; /* 0=transparent,1=alpha,2=vector, 3=point */dcl #initialize fixed external; /* flag to mark first point in point or vector sequence */
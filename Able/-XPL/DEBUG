/* DEBUG   $TITLE  This is an XPL debugger!   Modified:   11/02/90 - MWH - Author   *//* $z Tell the XPL compiler to generate DEBUG-able model-D function calls */library ':-xpl:libs:debugger';eof;   /* The remainder of this file is documentation on the debugger */-----------------------------------------------------------------------------This is a quickly-written guide to using the XPL debugger.The XPL debugger ("MarksBugs") will allow you to halt on the entryand exit of any swapping procedure, given the proc number (fromthe symbol table -SYMTAB-).  Once halted, you can examinearguments, return values, any memory (internal, external or poly)and change or remove the function number for breakpointing.  Thefull command set in listed if you type a "?" command to the debuggerprompt.  The current commands are:      B = Set Breakpoint (-1 halts at ALL, -2 logs all calls/returns)      C = Clear Breakpoint      D = Dump memory      H = Break on HOP only      I = Info      P = Proceed      S = Single Step      T = Break on terminal      X = Exit      Z = Zap memoryYou must be compiling for the Able Model-D processor to use the debugger.Note that to force entry into the debugger when no breakpoint is set,you need to type a "CONTROL-]" (that is, hold the "control" key andpress the "close square bracket" key).  Use the "P" command("proceed") to resume execution of the program.The "H" command is used if you are debugging a screen-intensiveprogram and don't want a breakpoint to print anything that disturbsthe display.  After typing "H", future breakpoints will cause a halt onthe HOP only, with the swap proc number displayed in the HOPlights.  The MSB (Data Buss bit "15") will be OFF if this is functionENTRY and ON if this is the function EXIT.  On function entry, thearguments are available in R0 through R3.  On a function return, youmay look at the return value in R0.  (R0 through R3 are octal "300" to"303" on the HOP switches).Setting a breakpoint on proc number "-2" is useful in connection withTermulator logging.  All function calls are returns will be written tothe screen along with the first 4 arguments on calls and the returnvalues on return.  The data may be browsed at a later time (eg: withMicroSoft WORD) to analyze the program flow.To include the XPL debugger in a compiled program, do the following:* Be sure you are running version 6.10 or higher of XPL.  If you arenot, get the correct versions of the files in your :.SYSTEM:  ".P1-7",".P2-7", ".P3-7" and ".RTB-7", ".RTC-7", ".RTD-7".* Add the debugger's run-time package in :.SYSTEM:  ".RTDB-7".  Ifthis file is missing, you will get a compile error.* Insert this file in your top-level source code (eg: BLD-ALLD).This file contains a $Z command to XPL which causes it to generatedebugger code.  You should put in lines something like:/* Turn on code generation for debugging  */insert ':-xpl:debug';Just comment out the "insert" statement to build without the debugger.Talk to Mark Harley if you have any questions on the use of the debugger.
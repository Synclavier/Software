/* Catalog routines:.     VALID_FILECHAR (c): returns TRUE if character C is valid in a filename.     VALID_FILENAME (name): returns TRUE if passed filename is valid.     CLEAN_FILENAME (name, fcb_name): converts XPL string format to FCB name format.     CLEAN_FCBNAME (fcb_name, name): converts FCB name to XPL string format..     CACHE (bufptr, bufmed): cache contents of catalog buffer in buffer BUFPTR on BUFMED.     REINIT_CACHE (n, buffer): reinitialize caching to provide for N caches.     FLUSH_CACHE (n): flush cache N to disk/tape.     DISABLE_CACHE (n): disable cache N.     ENABLE_CACHE (n): enable cache N.     CACHE_TREENAME (enable): enable/disable treename caching..     SET_CATBUF (bufptr, bufmed): set the catalog buffer pointer.     READCAT (ms_sector, ls_sector, dir_size, ms_length, ls_length): read in a catalog.     WRITECAT: write out the catalog buffer.     READDIR (name): read in catalog NAME..     GET_FCB (fcb#, fcb): extract an FCB from the catalog buffer.     PUT_FCB (fcb#, fcb): replace an FCB into the catalog buffer..     FINDFILE (name): find a file in the catalog buffer.     REMOVEFILE (name): remove file NAME from catalog.     ADDFILE (name, type, ms_sectors, ls_sectors, length): add file NAME to catalog.     SHORTENFILE (name, ms_sectors, ls_sectors, length): shorten file NAME.     RENAMEFILE (old_name, new_name): rename OLD_NAME to NEW_NAME.     FINDSTORAGE (ms_sectors, ls_sectors): find storage.     FINDMAX: find maximum storage available..     READ_CATALOG (treename, level): read catalog TREENAME on LEVEL.     WRITE_CATALOG: write out the catalog buffer.     DELETE (treename, level): delete file TREENAME on LEVEL.     REPLACE (treename, type, ms_sectors, ls_sectors, length, level): replace file TREENAME on LEVEL.     TRUNCATE (treename, ms_sectors, ls_sectors, length, level): truncate file TREENAME on LEVEL.     RENAME (old_name, new_name, level): rename OLD_NAME to NEW_NAME on LEVEL.     LOCATE (treename, level): locate file TREENAME on LEVEL.     LOOKSTORAGE (treename, ms_sectors, ls_sectors, level): look for storage on TREENAME/LEVEL.     LOOKMAX (treename, level): lookup maximum storage available on TREENAME/LEVEL.     ENTER_CATALOG (treename, level): enter catalog TREENAME on LEVEL.     ENTER_ALTERNATE (treename, level): enter alternate catalog TREENAME on LEVEL*//* Catalog entry definitions */dcl c#nm  lit '0'; /* filename (four words) */dcl c#ls  lit '4'; /* LS starting sector */dcl c#ll  lit '5'; /* LS sector length */dcl c#wd  lit '6'; /* word length (modulo 64K) */dcl c#ty  lit '7'; /* MS starting sector (8 bits)/MS sector length (4 bits)/file type (4 bits) */dcl c#len lit '8'; /* number of words in a catalog entry */dcl c#dir_max lit '1024'; /* maximum directory size (words) *//* FCB definitions (used with GET_FCB and PUT_FCB) */dcl f#nm  lit '0'; /* filename (four words) */dcl f#ls  lit '4'; /* LS starting sector */dcl f#ms  lit '5'; /* MS starting sector */dcl f#ll  lit '6'; /* LS sector length */dcl f#ml  lit '7'; /* MS sector length */dcl f#wd  lit '8'; /* word length (modulo 64K) */dcl f#ty  lit '9'; /* file type */dcl f#len lit '10'; /* number of words in an FCB */dcl f#name_len lit '4'; /* number of words in a filename *//* File type definitions */dcl t#text   lit '0'; /* text file */dcl t#exec   lit '1'; /* executable binary */dcl t#reloc  lit '2'; /* relocatable binary */dcl t#data   lit '3'; /* data file */dcl t#sync   lit '4'; /* synclavier sequence */dcl t#sound  lit '5'; /* sound file */dcl t#subc   lit '6'; /* subcatalog */dcl t#lsubc  lit '7'; /* large subcatalog */dcl t#dump   lit '8'; /* dump file */dcl t#spect  lit '9'; /* spectral file */dcl t#index  lit '10'; /* index file */dcl t#timbre lit '11'; /* synclavier timbre */dcl t#max    lit '11'; /* maximum defined filetype *//* Errors returned in C#STATUS */dcl e#none      lit '0'; /* no error encountered */dcl e#OS        lit '1'; /* operating system error - magic number not set */dcl e#buffer    lit '2'; /* no catalog buffer allocated */dcl e#no_dir    lit '3'; /* no directory in memory */dcl e#no_config lit '4'; /* device not configured */dcl e#no_floppy lit '5'; /* no floppy in drive */dcl e#FCB       lit '6'; /* FCB number out of bounds */dcl e#level     lit '7'; /* level number out of bounds */dcl e#storage   lit '8'; /* not enough available storage */dcl e#cstorage  lit '9'; /* not enough contiguous storage available */dcl e#dir_full  lit '10'; /* no entries left in the directory */dcl e#invalid   lit '11'; /* invalid directory */dcl e#name      lit '12'; /* invalid filename specified for operation requested */dcl e#duplicate lit '13'; /* duplicate filename */dcl e#no_file   lit '14'; /* file not found */dcl e#not_cat   lit '15'; /* name specified is required to be a catalog, but isn't */dcl e#treename  lit '16'; /* incorrect format for treename */dcl e#no_path   lit '17'; /* intermediate catalog (in treename) not found */dcl e#type      lit '18'; /* type mismatch between saved file and replaced file (ADDFILE/REPLACE only) */dcl e#protect   lit '19'; /* write protected floppy */dcl e#too_large lit '20'; /* file too large (>= 2^20 sectors) */dcl e#truncate  lit '21'; /* truncation error - trying to expand a file (or truncate tape file) */dcl e#diskerror lit '22'; /* disk error - could not read disk *//* Caching literals */dcl $_vars      lit '5'; /* five variables/cache *//* Global catalog variables */dcl c#status    fixed external; /* status of last catalog operation */dcl c#bufptr    fixed external; /* pointer to the catalog buffer */dcl c#bufmed    fixed external; /* catalog buffer media:  0 - main memory, 1 - external memory */dcl c#ms_sector fixed external; /* device and MS starting sector of catalog */dcl c#ls_sector fixed external; /* LS starting sector of catalog */dcl c#ms_length fixed external; /* MS sector length of catalog (including directory) */dcl c#ls_length fixed external; /* LS sector length of catalog (including directory) */dcl c#dir_size  fixed external; /* size of catalog directory (in words) */dcl c#err_level fixed external; /* level # of disk error *//* Global file variables */dcl f#name      fixed array external; /* name of last filename scanned off treename */dcl f#ms_sector fixed external; /* device and MS starting sector of file */dcl f#ls_sector fixed external; /* LS starting sector of file */dcl f#ms_length fixed external; /* MS sector length of file */dcl f#ls_length fixed external; /* LS sector length of file */dcl f#words     fixed external; /* word length of file (modulo 64K) */dcl f#type      fixed external; /* type of file *//* Alternate catalog variables (for reference only - do NOT modify) */dcl a#name      fixed array external; /* name of alternate catalog */dcl a#ms_sector fixed external; /* device and MS starting sector of catalog */dcl a#ls_sector fixed external; /* LS starting sector of catalog */dcl a#ms_length fixed external; /* MS sector length of catalog (including directory) */dcl a#ls_length fixed external; /* LS sector length of catalog (including directory) */dcl a#dir_size  fixed external; /* size of catalog directory (in words) *//* Filename processing */dcl valid_filechar proc(fixed) returns (boolean) external; /* return TRUE if specified character is valid in a filename */dcl valid_filename proc(fixed array) returns (boolean) external; /* return TRUE if passed filename is valid */dcl clean_filename proc(fixed array, fixed array) external; /* convert XPL string format to FCB name format */dcl clean_fcbname  proc(fixed array, fixed array) external; /* convert FCB name to XPL string format *//* Caching */dcl cache          proc(fixed, fixed) returns (fixed) external; /* cache contents of catalog buffer */dcl reinit_cache   proc(fixed, fixed array) external; /* reinitialize caching to provide for N caches */dcl flush_cache    proc(fixed) returns (boolean) external; /* flush cache N to disk/tape */dcl disable_cache  proc(fixed) external; /* disable cache N */dcl enable_cache   proc(fixed) external; /* enable cache N */dcl cache_treename proc(boolean) external; /* enable/disable treename caching *//* Buffer interface */dcl set_catbuf proc(pointer, fixed) external; /* set the catalog buffer pointer */dcl readcat    proc(fixed, fixed, fixed, fixed, fixed) returns (boolean) external; /* read in a catalog */dcl writecat   proc returns (boolean) external; /* write out the catalog buffer */dcl readdir    proc(fixed array) returns (boolean) external; /* read in catalog NAME */dcl get_fcb proc(fixed, fixed array) returns (boolean) external; /* extract an FCB from the catalog buffer */dcl put_fcb proc(fixed, fixed array) returns (boolean) external; /* replace an FCB into the catalog buffer */dcl findfile    proc(fixed array) returns (fixed) external; /* find a file in the catalog buffer */dcl removefile  proc(fixed array) returns (boolean) external; /* remove file NAME from catalog */dcl addfile     proc(fixed array, fixed, fixed, fixed, fixed) returns (boolean) external; /* add file NAME to catalog */dcl shortenfile proc(fixed array, fixed, fixed, fixed) returns (boolean) external; /* shorten file NAME */dcl renamefile  proc(fixed array, fixed array) returns (boolean) external; /* rename OLD_NAME to NEW_NAME */dcl findstorage proc(fixed, fixed) returns (fixed) external; /* find storage */dcl findmax     proc returns (boolean) external; /* find maximum storage available *//* Level interface */dcl read_catalog  proc(fixed array, fixed) returns (boolean) external; /* read catalog TREENAME on LEVEL */dcl write_catalog proc returns (boolean) external; /* write out the catalog buffer */dcl delete      proc(fixed array, fixed) returns (boolean) external; /* delete file NAME on LEVEL */dcl replace     proc(fixed array, fixed, fixed, fixed, fixed, fixed) returns (boolean) external; /* replace file NAME on LEVEL */dcl truncate    proc(fixed array, fixed, fixed, fixed, fixed) returns (boolean) external; /* truncate file NAME on LEVEL */dcl rename      proc(fixed array, fixed array, fixed) returns (boolean) external; /* rename OLD_NAME to NEW_NAME on LEVEL */dcl locate      proc(fixed array, fixed) returns (boolean) external; /* locate file NAME on LEVEL */dcl lookstorage proc(fixed array, fixed, fixed, fixed) returns (boolean) external; /* look for storage on TREENAME/LEVEL */dcl lookmax     proc(fixed array, fixed) returns (boolean) external; /* lookup maximum storage available on TREENAME/LEVEL */dcl enter_catalog   proc(fixed array, fixed) returns (boolean) external; /* enter catalog NAME on LEVEL */dcl enter_alternate proc(fixed array, fixed) returns (boolean) external; /* enter alternate catalog NAME on LEVEL */
/* Some string processing routines (modeled after C):..       TOUPPER (WORD):  Converts WORD to uppercase..              Returns:  The uppercased word..       TOLOWER (WORD):  Converts WORD to lowercase..              Returns:  The lowercased word..       UPPER (S)     :  Converts string S to uppercase..              Returns:  Pointer to S..       LOWER (S)     :  Converts string S to lowercase..              Returns:  Pointer to S..       STRLEN (S)    :  Determine length of string S..              Returns:  Character length of string S..       STRCMP (S, T) :  Compares strings S with string T..              Returns:  0 if S = T, <0 if S < T, >0 if S > T. STRNCMP (S, T, I, J):  Compares N chars of string T (from I to J) with string S..              Returns:  0 if S = T, <0 if S < T, >0 if S > T.       STRCPY (S, T) :  Copy string T to string S..              Returns:  Pointer to S.. STRNCPY (S, T, I, J):  Copy N chars from string T (from I to J) to string S..              Returns:  Pointer to S..       STRCAT (S, T) :  Concatenate string T to the end of string S..              Returns:  Pointer to S..    STRNCAT (S, T, P):  Insert string T at position P of string S..              Returns:  Pointer to S..      INDEX (S, T, P):  Find position of string T in string S; start at position P..              Returns:  Position of string T in string S or -1 if not found..     STRSPN (S, T, P):  Find first occurrence of any char of string T in string S; start at pos P..              Returns:  Position of char from string T in string S or -1 if none found..    STRCSPN (S, T, P):  Find first occurrence of any char not of string T in string S; start at pos P..              Returns:  Position of char not from string T in string S or -1 if none found..    STRNTIN (S, P, Q):  Initializes token scanner w/string S.  Start at position P, stop at position Q..       STRTIN (S)    :  Initializes token scanner w/string S..       STRTOK (S, T) :  Extract next token S (delimited by chars in T) from STRTOKIN string..              Returns:  Pointer to S..       COMPARE (S, T):  Compares strings S with string T ignoring case..              Returns:  TRUE if S = T, FALSE otherwise*/library ':-xpl:libs:strings';dcl toupper proc(fixed) returns (fixed) external; /* uppercase an ASCII word */dcl tolower proc(fixed) returns (fixed) external; /* lowercase an ASCII word */dcl upper   proc(fixed array) returns (pointer) external; /* convert S to uppercase */dcl lower   proc(fixed array) returns (pointer) external; /* convert S to lowercase */dcl strlen  proc(fixed array) returns (fixed) external; /* length of string S */dcl strcmp  proc(fixed array, fixed array) returns (fixed) external; /* string compare a la C: 0 if equal, <0 if s < t, >0 if s > t */dcl strncmp proc(fixed array, fixed array, fixed, fixed) returns (fixed) external; /* compare N chars of string T with string S (i.e., strcmp (S, substr(T, I, J));) */dcl strcpy  proc(fixed array, fixed array) returns (pointer) external; /* copy string T to string S (i.e., interpret S = T;) */dcl strncpy proc(fixed array, fixed array, fixed, fixed) returns (pointer) external; /* copy N chars from string T to string S (i.e., S = substr(T, I, J);) */dcl strcat  proc(fixed array, fixed array) returns (pointer) external; /* concatenate string T to the end of string S */dcl strncat proc(fixed array, fixed array, fixed) returns (pointer) external; /* insert string T at position P of string S */dcl index   proc(fixed array, fixed array, fixed) returns (fixed) external; /* find position of string T in string S at or after position P */dcl strspn  proc(fixed array, fixed array, fixed) returns (fixed) external; /* find position of char from T in string S at or after position P */dcl strcspn proc(fixed array, fixed array, fixed) returns (fixed) external; /* find position of char not from T in string S at or after position P */dcl strntin proc(fixed array, fixed, fixed) external; /* initialize STRTOK with string S; start at P, end at Q */dcl strtin  proc(fixed array) external; /* initialize STRTOK with string S */dcl strtok  proc(fixed array, fixed array) returns (pointer) external; /* find next token S (delimited by chars in T) from STRTOKIN string */dcl compare proc(fixed array, fixed array) returns (boolean) external; /* return TRUE if strings equal ignoring case */
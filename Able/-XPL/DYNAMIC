/* Dynamic memory allocation (heap management):Initialization/Reinitialization:   Create_Heap (Heap, Size, Handles, Len):      This routine initializes the heap and must be called before any      other calls to this module.  HEAP is a pointer to where the heap      begins in memory, SIZE is the number of words in the heap, HANDLES      is a pointer to a block of memory to be used to store handles, and      LEN is the size of that block.  If HANDLES is NULL, blocks can only      be manipulated by pointers and garbage collection will not occur.   Clear_Heap:      This procedure frees all allocated blocks and releases all handles.Heap Management (By Pointer):   Allocate (Size):      This procedure attempts to allocate a block of SIZE words.  If      it succeeds, a pointer to the block is returned.  Otherwise, a      NULL pointer is returned.   Free (Ptr):      This procedure releases the (previously allocated) block of      memory pointed to by PTR.   Expand (Ptr, Len):      This procedure expands (or shrinks) the block pointed to by PTR      by LEN words.  A pointer to the block or a NULL pointer (if the      block cannot grow) is returned.   Block_Size (Ptr):      This procedure returns the size of a block of memory pointed to      by PTR.  A zero is returned for invalid pointers.Heap Management (By Handle):   Alloc_Handle (Size):      This procedure attempts to allocate a block of SIZE words.  If      it succeeds, a handle to the block is returned.  Otherwise, a      NULL pointer is returned.   Free_Handle (Handle):      This procedure releases the (previously allocated) block of      memory referred to by HANDLE.   Expand_Handle (Handle, Len):      This procedure expands (or shrinks) the block referred to by HANDLE      by LEN words.  A NULL pointer is returned if the block cannot be      expanded (otherwise, the passed handle is returned).   Handle_Size (Handle):      This procedure returns the size of a block of memory pointed to      by a handle.  A zero is returned for invalid handles.*/library ':-xpl:libs:dynamic';dcl handle lit 'pointer'; /* handle definition */dcl create_heap   proc(pointer, fixed, pointer, fixed) external; /* set up heap */dcl clear_heap    proc external; /* free all memory */dcl allocate      proc(fixed) returns (pointer) external; /* get a block of SIZE words */dcl free          proc(pointer) external; /* release a block */dcl expand        proc(pointer, fixed) returns (pointer) external; /* expand block PTR by LEN words */dcl block_size    proc(pointer) returns (fixed) external; /* get size of block PTR */dcl alloc_handle  proc(fixed) returns (handle) external; /* allocate a block; return a handle to it */dcl free_handle   proc(handle) external; /* free block referred to by handle */dcl expand_handle proc(handle, fixed) returns (handle) external; /* expand block HANDLE by LEN words */dcl handle_size   proc(handle) returns (fixed) external; /* get size of block HANDLE */
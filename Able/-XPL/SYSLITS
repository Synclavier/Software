/* SYSLITS   $TITLE  System-wide literals

   Modified:
   11/11/96 - CWJ - Changed order of declaration to assist with XPL translations
   08/14/91 - MWH - Added option bit for DSP
   02/07/91 - MWH - Added option bits for Poly Voice Type and the D164
*/
/* $subtitle Configuration Information */

/* Every XPL program has a configuration area in lowcore (pointed
.  to by the contents of the word at address ONE of the program).
.  The following definitions define the configuration area: */

dcl mem.siz fixed external; /* holds memory size - required to use these literals */

dcl c#contab lit 'core(1)'; /* pointer to the configuration table */

/* compiler information [accessed via CORE(C#CONTAB + <literal>)] */
dcl c#vstart lit '0'; 			/* start  of variable area */
dcl c#vlngth lit '1'; 			/* length of variable area */
dcl c#stklen lit '2'; 			/* length of stack area */
dcl c#objloc lit '3'; 			/* start  of object code */
dcl c#objlen lit '4'; 			/* length of object code */
dcl c#swploc lit 'c#objlen'; 	/* pointer to swap area */
dcl c#swpram lit '5'; 			/* pointer to swapping mechanism ram area */
dcl c#swplen lit '6'; 			/* length of swap file (in sectors) */
dcl c#rtploc lit '7'; 			/* start  of RTP */
dcl c#inttab lit '8'; 			/* pointer to WHEN statement table */
dcl c#rcvptr lit '9'; 			/* pointer to RCVDCHARACTER */
dcl c#inpbuf lit '10'; 			/* pointer to terminal INPUT buffer */
dcl c#sbrsbw lit '11'; 			/* pointer to special READ/WRITE word pair */
dcl c#curtrk lit '12'; 			/* pointer to disk head position words (F0/F1/R0/R1, in that order) */
dcl c#devtab lit '13'; 			/* pointer to additional device driver table */

dcl c#offset lit '16'; 			/* highcore configuration table starts here */

/* system configuration/options */
dcl c#memsiz lit '16'; /* memory size (in sectors) */
dcl c#cmopt  lit '17'; /* computer and music options */

dcl memory_sectors lit 'core(c#contab + c#memsiz)'; /* memory size (in sectors) */
dcl options_word   lit 'core(c#contab + c#cmopt)'; /* computer and music options */

dcl memory.size    lit 'shl(memory_sectors, 8)'; /* memory size (in words) */
dcl processor_type lit '(shr(options_word, 8) and "7")'; /* processor type (0: Model A, 1: Model B, 2: Model C, etc. */
dcl d03_speed      lit '2'; /* hardcode to 200 Hz for now */

/* option bits */
									/* d03 speed was in lower 3 bits; a 0 or  a 1 */
dcl o#bootable  lit '     "2"';     /* set in options word if program is self-booting */
dcl o#d4567  	lit '    "10"';     /* set in options word if D4567 is in system */
dcl o#d40    	lit '    "20"';     /* set in options word if D40 (printer) is in system */
dcl o#d164   	lit '    "40"';     /* set in options word if D164 (kbd filter/trigger bd) is in system */
dcl o#d44    	lit '   "100"';    	/* set in options word if D44 (mouse) is in system */
dcl o#pvoice 	lit '   "200"';    	/* set in options word if mono/3200 poly voices are installed */
dcl o#proct  	lit '  "3400"';		/* processor type field */
dcl o#dsp    	lit ' "10000"';  	/* set in options word if DSP is attached to DTD */
dcl o#d66    	lit ' "20000"';  	/* set in options word if D66 is in system */
dcl o#d130   	lit ' "40000"';  	/* set in options word if D130 is in system */
dcl o#d160  	lit '"100000"'; 	/* set in options word if D160 is in system */

/* option tests */
dcl d4567_present 		lit 	'((options_word and o#d4567)  <> 0)'; /* TRUE if D4567 is in system */
dcl d40_present  		lit 	'((options_word and o#d40)    <> 0)'; /* TRUE if D40 is in system */
dcl d164_present  		lit 	'((options_word and o#d164)   <> 0)'; /* TRUE if D164 is in system */
dcl mouse_present 		lit 	'((options_word and o#d44)    <> 0)'; /* TRUE if D44 is in system */
dcl mono_voices_present lit 	'((options_word and o#pvoice) <> 0)'; /* TRUE if 3200/mono poly voices are in system */
dcl dsp_present  		lit 	'((options_word and o#dsp)    <> 0)'; /* TRUE if DSP is attached to DTD */
dcl d66_present   		lit 	'((options_word and o#d66)    <> 0)'; /* TRUE if D66 is in system */
dcl d130_present  		lit 	'((options_word and o#d130)   <> 0)'; /* TRUE if D130 is in system */
dcl d160_present  		lit 	'((options_word and o#d160)   <> 0)'; /* TRUE if D160 is in system */

/* terminal/printer information */
dcl c#ptype  lit '18'; /* terminal information */
dcl c#stype  lit '19'; /* printer information */
dcl c#redrct lit '20'; /* redirection word */

dcl terminal_info     lit 'core(c#contab + c#ptype)'; /* terminal information */
dcl printer_info      lit 'core(c#contab + c#stype)'; /* printer information */
dcl redirection_word  lit 'core(c#contab + c#redrct)'; /* redirection word */

dcl terminal.model    lit 'shr(terminal_info, 8)'; /* terminal model */
dcl terminal.type     lit '(shr(terminal_info, 8) and "37")'; /* terminal type */
dcl terminal.graphics lit 'shr(terminal_info, 13)'; /* terminal graphics */
dcl terminal.nulls    lit '(terminal_info and "377")'; /* terminal nulls */

dcl printer.type      lit '(shr(printer_info, 8) and "37")'; /* printer  type */
dcl printer.graphics  lit 'shr(printer_info, 13)'; /* printer  graphics */
dcl printer.nulls     lit '(printer_info and "377")'; /* printer  nulls */

dcl directed_output   lit '(redirection_word and "377")'; /* output redirection information (0: to terminal; 1: to printer) */
dcl directed_input    lit 'shr(redirection_word, 8)'; /* input redirection information (0: from terminal; 1: from printer) */
dcl no_redirection    lit '0'; /* cancel all redirection by setting REDIRECTION_WORD to this */

/* $page */

/* graphics */
dcl g#vt640     lit '1';
dcl g#dq640     lit '2';
dcl g#mg600     lit '3';
dcl g#macintosh lit '4';

/* terminal models */
dcl t#unknown   lit '0';
dcl t#hardcopy  lit '1';
dcl t#adm3      lit '2';
dcl t#vt100     lit '3';
dcl t#datamedia lit '4';
dcl t#z19       lit '5';

dcl t#vt640     lit '(t#vt100 or shl(g#vt640, 5))'; /* VT100 w/graphics G#VT640 */
dcl t#dq640     lit '(t#vt100 or shl(g#dq640, 5))'; /* VT100 w/graphics G#DQ640 */
dcl t#mg600     lit '(t#vt100 or shl(g#mg600, 5))'; /* VT100 w/graphics G#MG600 */
dcl t#macintosh lit '(t#vt100 or shl(g#macintosh, 5))'; /* VT100 w/graphics G#MACINTOSH */

/* printer types */
dcl p#unknown    lit '0';
dcl p#decIII     lit '9';
dcl p#la34       lit '10'; /* DECwriter IV - has graphics capabilities */
dcl p#printronix lit '11'; /* has graphics capabilities */
dcl p#prism      lit '12'; /* has graphics capabilities */
dcl p#diablo     lit '13'; /* has graphics capabilities */

/* operating system version */
dcl c#version lit '21'; /* configuration/system version number minus six (-6 is 0, -7 is 1, etc) */

dcl c#current_version lit '1'; /* current OS version is -7 */

/* storage device information */
dcl c#curdev lit '23'; /* current device (physically encoded) */
dcl c#sysdev lit '24'; /* system device (physically encoded) */

dcl current_device lit '(core(c#contab + c#curdev))'; /* current device (physically encoded) */
dcl system_device  lit '(core(c#contab + c#sysdev))'; /* system device (physically encoded) */

dcl curtyp lit '(current_device and "17")'; /* current device type (0=floppy, 1=winchester, 2=remote) */
dcl systyp lit '(system_device  and "17")'; /* system  device type (0=floppy, 1=winchester) */

dcl c#strdev lit  '24'; /* start of storage device table */
dcl c#strend lit '104'; /* end   of storage device table (plus one) */

dcl c#strlen lit '(c#strend - c#strdev)'; /* length of storage device table */

/* storage device table entry layout */

/* For storage device table usage: checkout :xpl:scsi for interpration.								*/
/* Also: :utilcat:condev sets them, somewhat differently...											*/

dcl s#devtyp lit '0';	/* 8 bits:					4 bits:				4 bits:						*/
						/* 	1 = SCSI					0 = drive 0			0 = Floppy				*/
						/* 								1 = drive 1			1 = W0/W1 winchester	*/
						/*													2 = R0/R1 floppy		*/
						/*													3 = T0/T1 tape			*/
						/*													4 = O0/O1 optical		*/
						/*	5 = for M/O Optical														*/
						/* e.g bits 10,11: 0 == 12", 1 == 5"										*/
						
dcl s#seccyl lit '1'; 	/* sectors/cylinder */
dcl s#totcyl lit '2'; 	/* total cylinders */

dcl s#spdtrk lit '3'; 	/* sectors per track/stepping speed for floppies							*/
dcl s#devadr lit '3'; 	/* device address (drive/controller) for Winchesters						*/
						/* 4 bits: unknown	4 bits: LUN		4 bits: which board		4 bits: target	*/
						/* note: for board 1, LUN becomes host ID and LUN is zero					*/
						
dcl s#blklen lit '4'; /* length of device table entry */

dcl s#freblk lit '-1'; /* indicates a free block in the device table */

dcl c#conlen lit 'c#strend'; /* length of configuration table (since the storage table is last) */

/* D40Q baud rates (SHL by 8 before writing to D41, D43, D45, or D51) */

dcl b#300    lit '0'; /* 300 baud */
dcl b#1200   lit '1'; /* 1200 baud */
dcl b#2400   lit '2'; /* 2400 baud */
dcl b#4800   lit '3'; /* 4800 baud */
dcl b#9600   lit '4'; /* 9600 baud */
dcl b#19200  lit '5'; /* 19200 baud */
dcl b#38400  lit '6'; /* 38400 baud */
dcl b#76800  lit '7'; /* 76800 baud */
dcl b#enable lit '"100000"'; /* OR in to enable baud rate selection */

/* $subtitle Symbolic Definitions For Upper Memory */

/* The ABLE Series Monitor stores many important items of information
.  in the upper part of memory in order to preserve them between
.  program overlays (and to pass certain information to cooperative
.  programs).  This information includes items such as the name of
.  the user's current file, where on the disk it is stored, etc. */

/* current file definitions */
dcl loc.cfn     lit '(mem.siz -   5)'; /* current file name */
dcl loc.ftyp    lit '(mem.siz -   6)'; /* current file type */
dcl loc.svd     lit '(mem.siz -   7)'; /* TRUE if file is saved */
dcl loc.strd    lit '(mem.siz -   8)'; /* TRUE if file stored */
dcl loc.strn    lit '(mem.siz -  13)'; /* stored name of file */
dcl loc.cmed    lit '(mem.siz -  14)'; /* current file media:  0 = file, 1 = core */
dcl loc.csec    lit '(mem.siz -  16)'; /* starting sector/device of current file or word ptr if in core */
dcl loc.csln    lit '(mem.siz -  17)'; /* number of sectors in current file */
dcl loc.clen    lit '(mem.siz -  18)'; /* current file length mod 64K */

/* system, path, and user (current) catalog definitions */
dcl loc.scat    lit '(mem.siz -  20)'; /* system catalog sector */
dcl loc.sctl    lit '(mem.siz -  21)'; /* system catalog length */
dcl loc.smax    lit '(mem.siz -  23)'; /* system catalog maximum */
dcl loc.pcat    lit '(mem.siz -  25)'; /* path   catalog sector (0 if no path) */
dcl loc.pctl    lit '(mem.siz -  26)'; /* path   catalog length */
dcl loc.pmax    lit '(mem.siz -  28)'; /* path   catalog maximum */
dcl loc.pcnm    lit '(mem.siz -  33)'; /* path   catalog name */
dcl loc.ucat    lit '(mem.siz -  35)'; /* user   catalog sector */
dcl loc.uctl    lit '(mem.siz -  36)'; /* user   catalog length */
dcl loc.umax    lit '(mem.siz -  38)'; /* user   catalog maximum */
dcl loc.ccnm    lit '(mem.siz -  43)'; /* user   catalog name */

/* work file definitions */
dcl loc.wmed    lit '(mem.siz -  44)'; /* work file media:  0 = file, 1 = core */
dcl loc.wsec    lit '(mem.siz -  46)'; /* starting sector of work file or word ptr if in core */
dcl loc.wsln    lit '(mem.siz -  47)'; /* number of sectors in work file */
dcl loc.wlen    lit '(mem.siz -  48)'; /* work file length mod 64K */

/* command file definitions */
dcl loc.perform lit '(mem.siz -  49)'; /* indicates in a command file */
dcl loc.perptr  lit '(mem.siz -  50)'; /* byte pointer into command file */
dcl loc.perfsec lit '(mem.siz -  52)'; /* starting sector of command file */
dcl loc.perflen lit '(mem.siz -  53)'; /* word length of command file */

/* system file locations/lengths (named after the system file they're most often used for) */
dcl loc.mon     lit '(mem.siz -  55)'; /* monitor (starting sector at LOC.MON, word length (or -1) at LOC.MON - 1) */
dcl loc.p1      lit '(mem.siz -  58)'; /* pass1 */
dcl loc.p2      lit '(mem.siz -  61)'; /* pass2 */
dcl loc.p3      lit '(mem.siz -  64)'; /* pass3 */
dcl loc.st      lit '(mem.siz -  67)'; /* symbol table */
dcl loc.rt      lit '(mem.siz -  70)'; /* runtime file */
dcl loc.mplt    lit '(mem.siz -  73)'; /* music printing */

/* overlay parameters/return values */
dcl loc.rst     lit '(mem.siz -  75)'; /* run status (to MONITOR) */
dcl loc.usr1    lit '(mem.siz -  76)'; /* user defined */
dcl loc.usr2    lit '(mem.siz -  77)'; /* user defined */
dcl loc.usr3    lit '(mem.siz -  78)'; /* user defined */

/* monitor bit definitions */
dcl loc.monbits lit '(mem.siz -  79)'; /* bits for monitor ON/OFF states */
dcl m#log       lit '"h0001"';		   /* history logging on/off */
dcl m#w0_ej		lit '"h0002"';
dcl m#w1_ej		lit '"h0004"';

/* words (MEM.SIZ - 80) through (MEM.SIZ - 82) are currently unused */

/* $page */

/* MONITOR state variables */
dcl loc.tyb     lit '(mem.siz - 138)'; /* 110 char tty buffer (plus length) */
dcl loc.tybp    lit '(mem.siz - 139)'; /* byte pointer into tty buffer */
dcl loc.inch    lit '(mem.siz - 140)'; /* input character */
dcl loc.cnum    lit '(mem.siz - 141)'; /* current command number */
dcl loc.prmt    lit '(mem.siz - 146)'; /* 8 char command prompt */
dcl loc.screen  lit '(mem.siz - 147)'; /* lines/screen on the terminal (0 means the terminal isn't screen-oriented) */

/* MONITOR bootload state variables */
dcl loc.magic   lit '(mem.siz - 148)'; /* location of magic number */
dcl loc.psys    lit '(mem.siz - 149)'; /* previous SYSTYP to detect bootload error */

/* SED state variables */
dcl loc.sed1    lit '(mem.siz - 150)'; /* reserved for sed use */
dcl loc.sed2    lit '(mem.siz - 151)'; /* reserved for sed use */

/* configuration/device information */
dcl loc.ctab    lit '(mem.siz - 239)'; /* system configuration */
dcl loc.headpos lit '(mem.siz - 243)'; /* drive F0, F1, R0, and R1 head positions */
dcl loc.emsize  lit '(mem.siz - 244)'; /* external memory size less amount reserved for MONITOR (in sectors) */

/* word (MEM.SIZ - 245) is currently unused */

/* Synclavier (r)/SCRIPT state variables */
dcl loc.synrtpn lit '(mem.siz - 250)'; /* 8 char name of default Synclavier RTP */
dcl loc.synmed  lit '(mem.siz - 251)'; /* synclavier file media (0 = normal memory, 1 = expanded memory) */
dcl loc.synmisc lit '(mem.siz - 252)'; /* pointer to synclavier miscellaneous area */
dcl loc.syntimb lit '(mem.siz - 253)'; /* pointer to synclavier timbre area */
dcl loc.synseq  lit '(mem.siz - 254)'; /* pointer to synclavier sequence notes */
dcl loc.synstat lit '(mem.siz - 255)'; /* synclavier status word */
dcl loc.synret  lit '(mem.siz - 256)'; /* pointer to word trio (above) describing program to return to if no room */

/* overlay routine (768 words) */
dcl loc.load lit '(mem.siz - 1024)'; /* load/overlay routine stored here */

dcl mem.offs lit '256'; /* offset from a one K boundary (above 16K and below MEM.SIZ) of memory size word */

/* NOTE:  ALL longs are stored with the LS at the location and the MS at the location + 1. */


/* external memory state variables (only there if core(loc.emsize) <> 0) */
dcl loc.emarea lit 'loc.emsize'; /* sector start of external memory state variables */

/* word offsets from LOC.EMAREA */
dcl em.polycache 					lit '0'; 		/* TRUE if poly cache valid */
dcl em.disallow_grouping_by_holding lit '1';		/* true to disallow track group creation by holding track buttons */
dcl em.perform   					lit '256'; 		/* nested perform file state (50 words + 56 words command line) */

library ':-xpl:libs:syslits'; /* set up MEM.SIZ */

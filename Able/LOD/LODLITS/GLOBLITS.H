/* Lod globlits - global literals for LOD Software *//* 02/12/92 - cj - deleted ddsad_xtal restrictions *//* 01/07/92 - cj - changed lod.version # for move  *//* 08/14/91 - cj - made CREG_AVAIL a variable      *//* 06/21/91 - cj - added cue adition track lit     *//* 04/04/91 - cj - narrowed lock-up window more    *//* 03/26/91 - cj - narrowed lock-up window         *//* 03/14/91 - cj - changed to ext DDSAD clock      *//* 03/07/91 - cj - added D130 device literals      *//*	Translated to C:   	10/23/97 at 09:08	*//*	Translator Version:	0.000				*/#include	"XPL.h"_configuration("modelc, muldiv")#define	inc_multi_udio	0						/* exclude multi udio code						*/#define	inc_jaz_prints	0						/* esclude debug output							*/#define	swapable		recursive swap#if (inc_multi_udio==0)							/* if no multi udio, bring in procs				*/	#define	inc_multi_udio_swapable	#else 										  /* else leave in ext memory				 */	#define	inc_multi_udio_swapable	recursive swap#endif #define	lod_software_version	11				/* rev code sent to synclav						*/#define	zero_time		50						/* syncl time of first click					*/#define	num_tracks		16						/* num of tracks in track directory				*/#define	max_ports		8						/* num of ports   checked by software			*/#define	max_tracks		16						/* num of tracks  checked by software			*/#define	max_voices		16						/* num of voices  checked by software			*/#define	max_ddts		2						/* num of ddt's   checked by software			*/#define	rezero_wrenivs	0						/* disable Wren IV rezeroes						*/#define	cue_audition_track	254					/* abs. track number of cue audition trk		*//* $page - poly memory organization: *//* Each scsi port has available to it a total of 512 sectors of        *//* poly memory for use by the tracks that are recorded on that scsi    *//* port.   This memory contains:                                       *//*                                                                     *//*        1.   zeroes - some sectors of zeroes to write to disk        *//*        2.   read rotary buffer for disk playback                    *//*        3.   write rotary buffer for recording/punch ins             *//*                                                                     */#define	zer_base		0						/* start of zeroes for adir garbage colct		*/#define	zer_len			12						/* 10 sectors worth								*/#define	inf_base		12						/* sectors to write cue directory with			*/#define	inf_len			4						/* 4 sectors worth								*/#define	buf_base		16						/* start of playback rotary buffer				*//* Note : buffer lengths must be multiple of 16 sectors for tape io    */#define	buf_2track		240						/* buffer length - 2 tracks/port				*/#define	rec_2track		256						/* rec buffer offset - 2 tracks/port			*/#define	buf_4track		112						/* buffer length - 4 tracks/port				*/#define	rec_4track		128						/* rec buffer offset - 4 tracks/port			*//* Note: cannot set buffer length below 100 sectors without modifying  *//* the poly transfer code.                                             *//* Loop playback discontinued until enough memory is available */#define	loop_buf1		0						/* 3 10 sector buffers used by					*/#define	loop_buf2		0						/* looping playback code						*/#define	loop_buf3		0#define	loop_maxl		10/* Loop Playback Literals: */#define	loop_fade_len	128						/* words of fade length							*/#define	loop_pre_len	256						/* switch over area before fade (includes fade)	*/#define	loop_post_len	64						/* switch over area after fade					*//* $page - Lod Disk Format: *//* The hard disks store some system information about each track,  as *//* well as the audio data for the track.   These literals describe    *//* that format.                                                       */#define	magic_1			((fixed) 54322)#define	magic_2			((fixed) 12345)#define	magic_sec_		0						/* magic id #									*/#define	adir_sec_		1						/* allocation info								*//*                         '   2';        alloc info for second track     *//*                         '   3';        alloc info for third  track     *//*                         '   4';        alloc info for fourth track     */#define	song_sec_		16						/* song directory								*/#define	track_sec_		32						/* track directories (allow 100)				*//* Cue storage on disk: */#define	disk_info_sec_	132						/* info sector for cue storage					*/#define	disk_alloc_sec_	133						/* disk copy of cue alloc directry				*/												/* remember: two word entries					*/#define	disk_max_cue_secs	64					/* sectors for alph,time,smpt					*/#define	disk_alph_sec_	261						/* disk copy of cue alpha sort					*/#define	disk_time_sec_	325						/* disk copy of cue time  sort					*/#define	disk_smpt_sec_	389						/* disk copy of cue smpt  sort					*/#define	disk_cue_sec_	453						/* disk copy of cue list						*//* Part of each disk contains digital zeroes.   This is used to zero out  *//* poly memory during CUE PLAYBACK mode when no cues are being triggered. */#define	old_zero_sec_	744						/* start of zeroes - old format					*/#define	old_data_sec_	1000					/* start of data   - old format					*/#define	new_zero_sec_	3744					/* start of zeroes - new format					*/#define	new_data_sec_	4000					/* start of data   - new format					*/#define	zero_len_		256						/* # of sectors of zeros on disk				*/#define	zero_len_s__msb	(shr(zero_len_,8))		/* # of samples of zeroes						*/#define	zero_len_s__lsb	(shl(zero_len_,8))		/* on the disk									*//* $page - upper memory locations.                                        *//* upper internal memory conains info to optimize bootloading.            */#define	loadadd			((fixed) (63*1024))		/* location of loader rom						*/#define	magic_loc		(((fixed) (60*1024))-1)#define	rmsec_loc		(((fixed) (60*1024))-2)#define	maxms_loc		(((fixed) (60*1024))-3)/* Configuration Area of this program: */#define	c_contab		able_core(1)			/* pointer to the configuration table			*//* compiler information [accessed via CORE(C#CONTAB + <literal>)] */#define	c_vstart		0						/* start  of variable area						*/#define	c_vlngth		1						/* length of variable area						*/#define	c_stklen		2						/* length of stack area							*/#define	c_objloc		3						/* start  of object code						*/#define	c_objlen		4						/* length of object code						*/#define	c_swploc		c_objlen				/* pointer to swap area							*/#define	c_swpram		5						/* pointer to swapping mechanism ram area		*/#define	c_swplen		6						/* length of swap file (in sectors)				*/#define	c_rtploc		7						/* start  of RTP								*/#define	c_inttab		8						/* pointer to WHEN statement table				*/#define	c_rcvptr		9						/* pointer to RCVDCHARACTER						*/#define	c_inpbuf		10						/* pointer to terminal INPUT buffer				*/#define	c_sbrsbw		11						/* pointer to special READ/WRITE word pair		*/#define	c_curtrk		12						/* pointer to disk head position words (F0/F1/R0/R1, in that order)	*/#define	c_devtab		13						/* pointer to additional device driver table	*/#define	c_cmopt			17						/* computer and music options					*/#define	options_word	able_core(c_contab + c_cmopt)	/* computer and music options					*/#define	o_dsp			((fixed) 0x1000)		/* set in options word if DSP is attached to DTD	*/#define	dsp_present		((options_word & o_dsp) != 0)	/* True if DSP is attached to DTD				*//* track head literals: */#define	thd_tvol		( 33)					/* Track volume									*/#define	thd_trou		( 34)					/* Track routing								*/#define	thd_tpan		( 35)					/* Track pan									*/#define	thd_cue_out		(213)					/* Dynamic output allocation output #			*//* Devices:             */#define	d16				0x000E					/* d16 timer									*/#define	dreg			0x0058					/* data address for SK2							*/#define	creg			0x0059					/* control address for SK2						*/#define	creg_ddsad		0x0000					/* write remote address 0 for control			*/#define	creg_rev		0x0001					/* read  remote address 1 for rev				*/#define	creg_write		0x0020#define	creg_read		0x0040/* Bits for control of DDSAD interface                                    */#define	ddsad_buflen	0x0040					/* normal playback: buffer of 64				*/#define	ddsad_scrbuf	0x0008					/* scrubbing: use shorter buffer to				*/												/* reduce audio delays							*/#define	ddsad_intclk	0x0000					/* 0 = internal (on-board) clock				*/#define	ddsad_extclk	0x0100					/* 1 = external            clock				*/#define	ddsad_normal	0x0000					/* 0 = track backplane/normal					*/#define	ddsad_scrubb	0x0200					/* 1 = track 44.1/allow scrubbing				*/#define	ddsad_mute		0x0000					/* 0 = mute										*/#define	ddsad_play		0x0400					/* 1 = allow sample playback					*/#define	ddsad_stop		0x0000					/* 0 = stop										*/#define	ddsad_go		0x0800					/* 1 = go										*/#define	ddsad_clock		ddsad_extclk			/* which clock to use							*/#define	ddsad_window	200						/* define smpte look up window. 100				*/												/* equals .5 %, 200 = 1 %, etc.					*//* Multiply divide literals: */#define	load			write(5)=				/* Load											*/#define	uload			write(4)=				/* Load upper									*/#define	mul				write(6)=#define	div				write(7)=#define	res				read(5)					/* Result										*/#define	rem				read(4)					/* Remainder									*/#define	ures			read(4)					/* Upper result									*/#define	mwait			write("324")=RES		/* D5 to atnv to wait for mul/div				*//* Repeat counter: */#define	rpc				write("010")=(-1)+/* External memory definitions */#define	mam				0x0030					/* memory address msb							*/#define	mal				0x0031					/* memory address lsb							*/#define	md				0x0032					/* memory data									*/#define	mdi				0x0033					/* memory data with increment					*//* 32 bit address literals */#define	lw_msb			( 0)					/* Upper 16 bits of 32-bit "long word"			*/#define	lw_lsb			( 1)					/* Lower 16 bits of 32-bit "long word"			*/#define	lw_ilt			(-1)					/* 32 bit compare is less than					*/#define	lw_ieq			( 0)					/* 32 bit compare is equal to					*/#define	lw_igt			(1)						/* 32 bit compare is greater than				*//* $Page - literals for song and track directory *//* song directory format: */#define	num_songs		50						/* num of songs in directory					*/#define	song_len		24						/* 24 words per entry							*/#define	song_item		0						/* human item # - start w/ 1					*/#define	song_title		1#define	song_start		13						/* start time, secs, 50 khz						*/#define	song_end		14						/* end   time, secs, 50 khz						*/#define	song_rate		15						/* sample rate for song							*/#define	song_used		16						/* # of seconds used							*/#define	song_status		17						/* status bits									*/#define	song_modified	18						/* true if modified since						*/												/* last backup									*/#define	song_index		19						/* index to track dir sec#						*/#define	song_fade		20						/* cross fade, msec								*/#define	song_star		21						/* 1: *   2: +									*//* Status Bits:      bit 0:    0 = empty song    1 = non-empty (something recorded or loaded)      bit 1:    0 = ready         2 = locked by user *//* format of track directory: */#define	track_len		16#define	track_title		0						/* see description of these fields				*/#define	track_stat		8						/* where the corresponding						*/#define	track_used		9						/* variables are declared						*/#define	track_input		10						/*												*/#define	track_gain		11						/*												*/#define	track_volume	12						/*												*/#define	track_pan		13						/*												*/#define	track_bits		14						/*												*/#define	track_routs		15						/**********************************				*/
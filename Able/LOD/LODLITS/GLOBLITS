/* LOD GLOBLITS - global literals for LOD Software *//* 02/12/92 - cj - deleted ddsad_xtal restrictions *//* 01/07/92 - cj - changed lod.version # for move  *//* 08/14/91 - cj - made CREG_AVAIL a variable      *//* 06/21/91 - cj - added cue adition track lit     *//* 04/04/91 - cj - narrowed lock-up window more    *//* 03/26/91 - cj - narrowed lock-up window         *//* 03/14/91 - cj - changed to ext DDSAD clock      *//* 03/07/91 - cj - added D130 device literals      */configuration modelc, muldiv;dcl inc.multi.udio	lit '0';		  /* exclude multi udio code				 */dcl inc.jaz.prints   lit '0';		  /* esclude debug output					 */dcl swapable  lit 'recursive swap';#if (inc.multi.udio==0)				  /* if no multi udio, bring in procs	 */	dcl inc.multi.udio.swapable lit '';#else										  /* else leave in ext memory				 */	dcl inc.multi.udio.swapable lit 'recursive swap';#endifdcl lod.software.version lit '11'; /* rev code sent to synclav           */dcl (zero.time)          lit '50'; /* syncl time of first click          */dcl (num.tracks )     lit  '16';   /* num of tracks in track directory   */dcl (max.ports  )     lit  ' 8';   /* num of ports   checked by software */dcl (max.tracks )     lit  '16';   /* num of tracks  checked by software */dcl (max.voices )     lit  '16';   /* num of voices  checked by software */dcl (max.ddts   )     lit  ' 2';   /* num of ddt's   checked by software */dcl (Rezero.WrenIVs)  lit  ' 0';   /* disable Wren IV rezeroes           */dcl cue.audition.track lit '254';  /* abs. track number of cue audition trk *//* $page - poly memory organization: *//* Each scsi port has available to it a total of 512 sectors of        *//* poly memory for use by the tracks that are recorded on that scsi    *//* port.   This memory contains:                                       *//*                                                                     *//*        1.   zeroes - some sectors of zeroes to write to disk        *//*        2.   read rotary buffer for disk playback                    *//*        3.   write rotary buffer for recording/punch ins             *//*                                                                     */dcl zer.base   lit '  0';  /* start of zeroes for adir garbage colct   */dcl zer.len    lit ' 12';  /* 10 sectors worth                         */dcl inf.base   lit ' 12';  /* sectors to write cue directory with      */dcl inf.len    lit '  4';  /* 4 sectors worth                          */dcl buf.base   lit ' 16';  /* start of playback rotary buffer          *//* Note : buffer lengths must be multiple of 16 sectors for tape io    */dcl buf.2track lit '240';  /* buffer length - 2 tracks/port            */dcl rec.2track lit '256';  /* rec buffer offset - 2 tracks/port        */dcl buf.4track lit '112';  /* buffer length - 4 tracks/port            */dcl rec.4track lit '128';  /* rec buffer offset - 4 tracks/port        *//* NOTE: cannot set buffer length below 100 sectors without modifying  *//* the poly transfer code.                                             *//* Loop playback discontinued until enough memory is available */dcl loop.buf1  lit '  0';  /* 3 10 sector buffers used by */dcl loop.buf2  lit '  0';  /* looping playback code       */dcl loop.buf3  lit '  0';dcl loop.maxl  lit ' 10';/* Loop Playback Literals: */dcl loop.fade.len  lit '128';  /* words of fade length              */dcl loop.pre.len   lit '256';  /* switch over area before fade (includes fade) */dcl loop.post.len  lit '64';   /* switch over area after fade       *//* $page - Lod Disk Format: *//* The hard disks store some system information about each track,  as *//* well as the audio data for the track.   These literals describe    *//* that format.                                                       */dcl magic#1            lit '54322';dcl magic#2            lit '12345';dcl magic.sec#         lit '   0';     /* magic id #                      */dcl adir.sec#          lit '   1';     /* allocation info                 *//*                         '   2';        alloc info for second track     *//*                         '   3';        alloc info for third  track     *//*                         '   4';        alloc info for fourth track     */dcl song.sec#          lit '  16';     /* song directory                  */dcl track.sec#         lit '  32';     /* track directories (allow 100)   *//* Cue storage on disk: */dcl disk.info.sec#     lit ' 132';     /* info sector for cue storage     */dcl disk.alloc.sec#    lit ' 133';     /* disk copy of cue alloc directry */                                       /* remember: two word entries      */dcl disk.max.cue.secs  lit '  64';     /* sectors for alph,time,smpt      */dcl disk.alph.sec#     lit ' 261';     /* disk copy of cue alpha sort     */dcl disk.time.sec#     lit ' 325';     /* disk copy of cue time  sort     */dcl disk.smpt.sec#     lit ' 389';     /* disk copy of cue smpt  sort     */dcl disk.cue.sec#      lit ' 453';     /* disk copy of cue list           *//* Part of each disk contains digital zeroes.   This is used to zero out  *//* poly memory during CUE PLAYBACK mode when no cues are being triggered. */dcl old.zero.sec#      lit ' 744';     /* start of zeroes - old format    */dcl old.data.sec#      lit '1000';     /* start of data   - old format    */dcl new.zero.sec#      lit '3744';     /* start of zeroes - new format    */dcl new.data.sec#      lit '4000';     /* start of data   - new format    */dcl zero.len#          lit ' 256';     /* # of sectors of zeros on disk   */dcl (zero.len.s#.msb)  lit  '(shr(zero.len#,8))';  /* # of samples of zeroes */dcl (zero.len.s#.lsb)  lit  '(shl(zero.len#,8))';  /* on the disk            *//* $page - upper memory locations.                                        *//* upper internal memory conains info to optimize bootloading.            */dcl loadadd    lit '63*1024';          /* location of loader rom          */dcl magic.loc  lit '(60*1024-1)';dcl rmsec.loc  lit '(60*1024-2)';dcl maxms.loc  lit '(60*1024-3)';/* Configuration Area of this program: */dcl c#contab lit 'core(1)'; /* pointer to the configuration table *//* compiler information [accessed via CORE(C#CONTAB + <literal>)] */dcl c#vstart lit '0'; /* start  of variable area */dcl c#vlngth lit '1'; /* length of variable area */dcl c#stklen lit '2'; /* length of stack area */dcl c#objloc lit '3'; /* start  of object code */dcl c#objlen lit '4'; /* length of object code */dcl c#swploc lit 'c#objlen'; /* pointer to swap area */dcl c#swpram lit '5'; /* pointer to swapping mechanism ram area */dcl c#swplen lit '6'; /* length of swap file (in sectors) */dcl c#rtploc lit '7'; /* start  of RTP */dcl c#inttab lit '8'; /* pointer to WHEN statement table */dcl c#rcvptr lit '9'; /* pointer to RCVDCHARACTER */dcl c#inpbuf lit '10'; /* pointer to terminal INPUT buffer */dcl c#sbrsbw lit '11'; /* pointer to special READ/WRITE word pair */dcl c#curtrk lit '12'; /* pointer to disk head position words (F0/F1/R0/R1, in that order) */dcl c#devtab lit '13'; /* pointer to additional device driver table */dcl c#cmopt  lit '17'; /* computer and music options */dcl options_word   lit 'core(c#contab + c#cmopt)'; /* computer and music options */dcl o#dsp    lit '"10000"';   /* set in options word if DSP is attached to DTD */dcl dsp_present   lit '((options_word and o#dsp) <> 0)'; /* TRUE if DSP is attached to DTD *//* track head literals: */DCL THD.TVOL      LIT  '( 33)';    /* TRACK VOLUME                       */DCL THD.TROU      LIT  '( 34)';    /* TRACK ROUTING                      */DCL THD.TPAN      LIT  '( 35)';    /* TRACK PAN                          */DCL THD.CUE.OUT   LIT  '(213)';    /* DYNAMIC OUTPUT ALLOCATION OUTPUT # *//* Devices:             */dcl d16              lit '"016"';   /* d16 timer                          */DCL DREG             LIT '"130"';   /* data address for SK2               */DCL CREG             LIT '"131"';   /* control address for SK2            */DCL CREG_DDSAD       LIT '"000"';   /* write remote address 0 for control */DCL CREG_REV         LIT '"001"';   /* read  remote address 1 for rev     */DCL CREG_WRITE       LIT '"040"';DCL CREG_READ        LIT '"100"';/* Bits for control of DDSAD interface                                    */DCL DDSAD_BUFLEN     LIT '"0100"';  /* normal playback: buffer of 64      */DCL DDSAD_SCRBUF     LIT '"0010"';  /* scrubbing: use shorter buffer to   */                                    /* reduce audio delays                */DCL DDSAD_INTCLK     LIT '"0000"';  /* 0 = internal (on-board) clock      */DCL DDSAD_EXTCLK     LIT '"0400"';  /* 1 = external            clock      */DCL DDSAD_NORMAL     LIT '"0000"';  /* 0 = track backplane/normal         */DCL DDSAD_SCRUBB     LIT '"1000"';  /* 1 = track 44.1/allow scrubbing     */DCL DDSAD_MUTE       LIT '"0000"';  /* 0 = mute                           */DCL DDSAD_PLAY       LIT '"2000"';  /* 1 = allow sample playback          */DCL DDSAD_STOP       LIT '"0000"';  /* 0 = stop                           */DCL DDSAD_GO         LIT '"4000"';  /* 1 = go                             */DCL DDSAD_CLOCK      LIT 'DDSAD_EXTCLK';  /* which clock to use           */DCL DDSAD_WINDOW     LIT '200';     /* define smpte look up window. 100   */                                    /* equals .5 %, 200 = 1 %, etc.       *//* MULTIPLY DIVIDE LITERALS: */DCL LOAD  LIT 'WRITE(5)=';             /* LOAD         */DCL ULOAD LIT 'WRITE(4)=';             /* LOAD UPPER   */DCL MUL   LIT 'WRITE(6)=';DCL DIV   LIT 'WRITE(7)=';  DCL RES   LIT 'READ(5)'  ;             /* RESULT       */DCL REM   LIT 'READ(4)'  ;             /* REMAINDER    */DCL URES  LIT 'READ(4)'  ;             /* UPPER RESULT */DCL MWAIT LIT 'WRITE("324")=RES';      /* D5 TO ATNV TO WAIT FOR MUL/DIV *//* REPEAT COUNTER: */  DCL RPC   LIT 'WRITE("010")=(-1)+';/* EXTERNAL MEMORY DEFINITIONS */dcl mam    lit '"60"';     /* memory address msb */dcl mal    lit '"61"';     /* memory address lsb */dcl md     lit '"62"';     /* memory data */dcl mdi    lit '"63"';     /* memory data with increment *//* 32 bit address literals */dcl lw#msb    lit '( 0)';  /* Upper 16 bits of 32-bit "long word"    */dcl lw#lsb    lit '( 1)';  /* Lower 16 bits of 32-bit "long word"    */dcl lw#ilt    lit '(-1)';  /* 32 bit compare is less than            */dcl lw#ieq    lit '( 0)';  /* 32 bit compare is equal to             */dcl lw#igt    lit '(+1)';  /* 32 bit compare is greater than         *//* $Page - literals for song and track directory *//* song directory format: */dcl num.songs      lit  '50';       /* num of songs in directory */dcl song.len       lit  '24';       /* 24 words per entry        */dcl song.item      lit  ' 0';       /* human item # - start w/ 1 */dcl song.title     lit  ' 1';dcl song.start     lit  '13';       /* start time, secs, 50 khz  */dcl song.end       lit  '14';       /* end   time, secs, 50 khz  */dcl song.rate      lit  '15';       /* sample rate for song      */dcl song.used      lit  '16';       /* # of seconds used         */dcl song.status    lit  '17';       /* status bits               */dcl song.modified  lit  '18';       /* true if modified since    */                                    /* last backup               */dcl song.index     lit  '19';       /* index to track dir sec#   */dcl song.fade      lit  '20';       /* cross fade, msec          */dcl song.star      lit  '21';       /* 1: *   2: +               *//* Status Bits:      bit 0:    0 = empty song    1 = non-empty (something recorded or loaded)      bit 1:    0 = ready         2 = locked by user *//* format of track directory: */dcl track.len     lit '16';dcl track.title   lit ' 0';    /* see description of these fields */dcl track.stat    lit ' 8';    /* where the corresponding         */dcl track.used    lit ' 9';    /* variables are declared          */dcl track.input   lit '10';    /*                                 */dcl track.gain    lit '11';    /*                                 */dcl track.volume  lit '12';    /*                                 */dcl track.pan     lit '13';    /*                                 */dcl track.bits    lit '14';    /*                                 */dcl track.routs   lit '15';    /***********************************/
/* CUELITS - basic literals for cue storage in external memory */dcl Max.Cue.Record.Len  lit '2560'; /* max cue record length             */                                    /* must be set carefully in lod code *//* cue record format */dcl cue.rlen         lit '  0';   /* word length of cue record */dcl cue.s.msb        lit '  1';   /* start msb sample #        */dcl cue.s.lsb        lit '  2';   /* start lsb sample #        */dcl cue.e.msb        lit '  3';   /* end   msb sample #        */dcl cue.e.lsb        lit '  4';   /* end   lsb sample #        */dcl cue.fin          lit '  5';   /* fade in time              */dcl cue.fout         lit '  6';   /* fade out time             */dcl cue.trks         lit '  7';   /* holds track id bits       *//*                          8                                  *//*                          9                                  *//*                         10                                  */dcl cue.alloc#       lit ' 11';   /* id #    to index cue      */dcl cue.smpt.msb     lit ' 12';   /* sorted smpte bit msb      */dcl cue.smpt.lsb     lit ' 13';   /* sorted smpte bit lsb      */dcl cue.smpt.mode    lit ' 14';   /* mode code for smpt bits   */dcl cue.edit.in.msb  lit ' 15';   /* edit in msb sample #      */dcl cue.edit.in.lsb  lit ' 16';   /* edit in lsb sample #      */dcl cue.edit.out.msb lit ' 17';   /* edit out msb sample #     */dcl cue.edit.out.lsb lit ' 18';   /* edit out lsb sample #     */dcl cue.off.msb      lit ' 19';   /* mark offset msb msec time */dcl cue.off.lsb      lit ' 20';   /* mark offset lsb msec time */dcl cue.bits         lit ' 21';   /* bit 0   = protect or not  *//*                                   2,4 = cue offset switch   *//*                                   8   = cue.smpt.msb is     *//*                                         absolute            *//*                                   16  = even.in.s#.msb has  *//*                                         been set.           */dcl cue.srate        lit ' 22';   /* holds sample rate         */dcl cue.len.msb      lit ' 23';   /* cue length, msecs         */dcl cue.len.lsb      lit ' 24';   /* lsb                       */dcl cue.list.ptr     lit ' 25';   /* pointer to splice list    */dcl cue.list.len     lit ' 26';   /* length of splice list     */dcl cue.in.s#.msb    lit ' 27';   /* actual disk sample # of   */dcl cue.in.s#.lsb    lit ' 28';   /* first audio segment       */dcl event.in.s#.msb  lit ' 29';   /* base in time for event    */dcl event.in.s#.lsb  lit ' 30';   /* relative times            *//*                         31        spare                     */dcl cue.name         lit ' 32';   /* cue name stored here      */dcl cue.name.l       lit ' 32';   /* max byte len of cue name  *//* Format of Cue Record Edit Segments */dcl Cue.Seg.Stride      lit '16';  /* words per edit segment    */dcl S#Sync.Msb          lit ' 0';  /* 32-Bit Sync     Address   */dcl S#Sync.Lsb          lit ' 1';dcl S#In.Msb            lit ' 2';  /* 32-Bit Disk In  Address   */dcl S#In.Lsb            lit ' 3';dcl S#Out.Msb           lit ' 4';  /* 32-Bit Disk Out Address   */dcl S#Out.Lsb           lit ' 5';dcl S#DriveBits1        lit ' 6';  /* 64-Bits for Drive ON/OFF  */dcl S#DriveBits2        lit ' 7';  /* Control Bits              */dcl S#DriveBits3        lit ' 8';dcl S#DriveBits4        lit ' 9';dcl S#Fade.In           lit '10';  /* Fade In  Milliseconds     */dcl S#Fade.Out          lit '11';  /* Fade Out Milliseconds     */dcl S#Reserved1         lit '12';  /* Unused                    */dcl S#Reserved2         lit '13';  /* Unused                    */dcl S#SPixelPointer     lit '14';  /* Seg start pixel ptr       */dcl S#EPixelPointer     lit '15';  /* Seg end   pixel ptr       *//* 6 sort tables are set up as indexes into the cue data base: *//* The following lits are codes for the different sort tables  */dcl alph.sort        lit '0';  /* total disk alpha sort */dcl time.sort        lit '1';  /* total disk time sort  */dcl smpt.sort        lit '2';  /* total disk smpt sort  */dcl cs.alph.sort     lit '3';  /* cur song alpha sort   */dcl cs.time.sort     lit '4';  /* cur song time  sort   */dcl cs.smpt.sort     lit '5';  /* cur song smpt  sort   *//* literals for access to CURRENT.CUE:  */dcl cc.rlen          lit 'current.cue(cue.rlen     )'; /* - record length */dcl CC.In            lit 'loc(addr(current.cue(cue.s.msb)))';dcl cc.s.msb         lit 'current.cue(cue.s.msb    )'; /* - s msb         */dcl cc.s.lsb         lit 'current.cue(cue.s.lsb    )'; /* - s lsb         */dcl CC.Out           lit 'loc(addr(current.cue(cue.e.msb)))';dcl cc.e.msb         lit 'current.cue(cue.e.msb    )'; /* - e msb         */dcl cc.e.lsb         lit 'current.cue(cue.e.lsb    )'; /* - e lsb         */dcl cc.fin           lit 'current.cue(cue.fin      )'; /* - fade in       */dcl cc.fout          lit 'current.cue(cue.fout     )'; /* - fade out      */dcl cc.trks          lit 'current.cue(cue.trks     )'; /* - track bits    */dcl cc.bits          lit 'current.cue(cue.bits     )'; /* - cue bit info  */dcl CC.Smpt          lit 'loc(addr(current.cue(cue.smpt.msb)))';dcl cc.smpt.msb      lit 'current.cue(cue.smpt.msb )'; /* - smpt msb      */dcl cc.smpt.lsb      lit 'current.cue(cue.smpt.lsb )'; /* - smpt lsb      */dcl CC.In.S#         lit 'loc(addr(current.cue(cue.in.s#.msb)))';dcl cc.in.s#.msb     lit 'current.cue(cue.in.s#.msb )';dcl cc.in.s#.lsb     lit 'current.cue(cue.in.s#.lsb )';dcl CC.Event.S#      lit 'loc(addr(current.cue(event.in.s#.msb)))';dcl cc.event.s#.msb  lit 'current.cue(event.in.s#.msb )';dcl cc.event.s#.lsb  lit 'current.cue(event.in.s#.lsb )';dcl cc.alloc#        lit 'current.cue(cue.alloc#   )'; /* - alloc tbl id# */dcl cc.name          lit 'current.cue(cue.name     )'; /* - cue name      */dcl cc.list.ptr      lit 'current.cue(cue.list.ptr )'; /* - seg list ptr  */dcl cc.list.len      lit 'current.cue(cue.list.len )'; /* - seg list len  */
/* external declarations for miscellaneous LOD Operating System Routines */dcl misc.buf                 array EXTERNAL;dcl Synclav.software.version fixed EXTERNAL;  /* holds version # of synclav software that is running */dcl creg_avail               lit   '0';  	  /* true if d130 avail (ddsad)                          */dcl bits                     data  EXTERNAL;dcl status.tracks            fixed EXTERNAL;dcl Send.Init.Info           fixed EXTERNAL;  /* 1: send init info to syncl some time    */dcl Send.screen.info         fixed EXTERNAL;  /* 1: send directory info to syncl         */dcl Get.New.Motion           fixed EXTERNAL;  /* request new motion                      */dcl Screen                   fixed EXTERNAL;  /* 1: user is on song directory screen     */                                              /* 2: user is on trk  directory screen     */dcl Buf.Len                  fixed EXTERNAL;  /* Buffer size in use                      */dcl Rec.Base                 fixed EXTERNAL;  /* Offset from playback to record buffer   */dcl Tracks.Per.Port          fixed EXTERNAL;  /* holds # of trks on each port            */DCL STR32                    proc(fixed,fixed,array) external;DCL ADD16                    proc(fixed,array)       external;DCL SUB16                    proc(fixed,array)       external;DCL ADD32                    proc(array,array,array) external;DCL SUB32                    proc(array,array,array) external;DCL COM32                    proc(array,array) returns (fixed) external;DCL COM16                    proc(fixed,array) returns (fixed) external;DCL COPY32                   proc(array,array)       external;DCL SHL32                    proc(array,fixed)       external;DCL SHR32                    proc(array,fixed)       external;DCL ROUND32                  proc(array)             external;DCL READ32                   proc(fixed,fixed,array) external;DCL WRITE32                  proc(fixed,fixed,array) external;DCL BIT           array EXTERNAL;  /* holds bitmsb, bitlsb, mul.llsb */DCL BITMSB        LIT   'BIT(0)';  /* ALSO CALLED THIS SOME       */DCL BITLSB        LIT   'BIT(1)';  /* PLACES                      */DCL MUL.LLSB      LIT   'BIT(2)';DCL UNROUND               	PROC                          EXTERNAL;DCL ratio_multiply			PROC(FIXED,FIXED)             EXTERNAL;dcl (real.milliseconds)   fixed EXTERNAL;  /* counts msecs off of d03      */dcl (real.seconds     )   fixed EXTERNAL;  /* counts secs  off of d03      */dcl (Our.Time)       array    EXTERNAL;    /* holds 32-bit d16 time base   */dcl (our.time.msb)   lit      'Our.Time(0)';dcl (our.time.lsb)   lit      'Our.Time(1)';dcl get.d16.time     proc     EXTERNAL;    /* get 32-bit d16 timer */dcl poll.for.external.memory     proc external;dcl compute.store.ptrs           proc (fixed,fixed) EXTERNAL;dcl read.store                   proc (fixed,fixed) EXTERNAL;dcl read.len                     proc (fixed,fixed) EXTERNAL;dcl read.word                    proc               EXTERNAL;dcl write.store                  proc (fixed,fixed) EXTERNAL;dcl write.len                    proc (fixed,fixed) EXTERNAL;dcl write.word                   proc (fixed)       EXTERNAL;dcl move.store                   proc (fixed,fixed,fixed,fixed,fixed,fixed) EXTERNAL;dcl log.buf    array       EXTERNAL;dcl log.error             proc(array) EXTERNAL;  /* log error on main synclavier */dcl append.log.character  proc(fixed) EXTERNAL;dcl append.log.string     proc(array) EXTERNAL;dcl append.decimal.number proc(fixed) EXTERNAL;dcl append.input.number   proc(fixed) EXTERNAL;dcl append.octal.number   proc(fixed) EXTERNAL;dcl append.min.sec        proc(fixed) EXTERNAL;dcl append.khz            proc(fixed) EXTERNAL;dcl song.dir.valid       fixed EXTERNAL;  /* 1: song dir has been read in            */dcl track.dir.valid      fixed EXTERNAL;  /* 0: must read in track directory         */dcl cue.dir.valid        fixed EXTERNAL;  /* 0: must read in cue directory         */dcl adir.inval.trks      fixed EXTERNAL;  /* the adirs for these tracks need to be read in also */dcl new.dtd.song#        fixed EXTERNAL;  /* set when dtd.song# changes              */dcl new.inputs           fixed EXTERNAL;  /* set when input routing/gain changes     */dcl song.dir.updated     fixed EXTERNAL;  /* nonzero - update song directory to disk */dcl track.dir.updated    fixed EXTERNAL;  /* nonzero - update trk  directory to disk */dcl track.dir.song       fixed EXTERNAL;  /* song# which track directory goes with   */dcl song.base    fixed EXTERNAL;          /* top of screen song# 0-40  */dcl dtd.song#    fixed EXTERNAL;          /* song line 0-9             */dcl gsong.dir proc (fixed) EXTERNAL;/* Global variables to hold current song directory entry: */dcl s.item       fixed EXTERNAL;  /* declare these items in order */dcl s.title      array EXTERNAL;dcl s.start      fixed EXTERNAL;dcl s.end        fixed EXTERNAL;dcl s.rate       fixed EXTERNAL;dcl s.used       fixed EXTERNAL;dcl s.status     fixed EXTERNAL;dcl s.modified   fixed EXTERNAL;dcl s.index      fixed EXTERNAL;dcl s.fade       fixed EXTERNAL;dcl s.star       fixed EXTERNAL;dcl s.unused1    fixed EXTERNAL;dcl s.unused2    fixed EXTERNAL;dcl song.lookup proc EXTERNAL;dcl song.store  proc EXTERNAL;dcl reitemize.song.directory proc  EXTERNAL;dcl shuffle.song.dir.down    proc  EXTERNAL;dcl shuffle.song.dir.up      proc  EXTERNAL;dcl songs.overlap            fixed EXTERNAL;  /* 1: song start and end times overlap     */dcl check.for.song.overlap   proc  EXTERNAL;dcl dtd.track#               fixed EXTERNAL;   /* current cursor row       */dcl track.dir                array EXTERNAL;dcl alt.tdir                 array EXTERNAL;/* global variables to hold current entry: */dcl t.title    array EXTERNAL; /* 16 char track title.  Stored in directory */                               /* with no length field,  space filled       */dcl t.sr       fixed EXTERNAL; /* lower half of track.stat:                 */                               /*    0 = safe                               */                               /*    1 = ready                              */                               /*    2 = locked                             */dcl t.ria      fixed EXTERNAL; /* Upper half of Track.Stat:                 */                               /*    0 = repro        */                               /*    1 = input        */                               /*    2 = auto         */                               /*    3 = cue playback */dcl t.used     fixed EXTERNAL; /* # of seconds of recording used @ 50 Khz   */dcl t.input    fixed EXTERNAL; /* upper half:         */                               /*    0 = STM          */                               /*    1 = DIG          */                               /*    2 = OUT          */                               /*    3 = TRK          */                               /* lower half          */                               /*    0 = no channel   */                               /*    else 1-16        */dcl t.gain     fixed EXTERNAL; /* input gain, 0 - 100.0               */dcl t.volume   fixed EXTERNAL; /* track volume0 - 100.0               */dcl t.pan      fixed EXTERNAL; /* track pan     -50 - +50             */dcl t.routs    fixed EXTERNAL; /* upper half:                         */                               /*    digital routing for this output  */                               /* lower half:                         */                               /*    voice output for this track      */                               /* Bits word:                          */                               /*    bits 0,1 = code for command      */                               /*               outstanding           */                               /*    bit 2    = 0 means early         */                               /*               directory with no     */                               /*               routing information   *//* format for track status:   lower half:     0=safe      1=ready      2=locked      upper half:     0=repro     1=input      2=auto     3=cue playback */dcl this.track.lookup          proc(fixed) EXTERNAL;dcl look.up.port.ddt.direction proc(fixed) EXTERNAL;dcl track.lookup               proc        EXTERNAL;dcl lookup.ready.tracks        proc        EXTERNAL;dcl track.store                proc        EXTERNAL;dcl init.song.entry            proc        EXTERNAL;dcl init.song.dir              proc        EXTERNAL;dcl init.track.dir             proc        EXTERNAL;dcl invalidate.track.dir       proc        EXTERNAL;dcl init.alt.tdir.entry        proc(fixed) EXTERNAL;dcl init.alt.tdir              proc        EXTERNAL;dcl Precompute.Volume.Information proc     EXTERNAL;dcl append.song.name           proc        EXTERNAL;dcl append.command.song.name   proc(fixed) EXTERNAL;dcl append.track.name          proc        EXTERNAL;dcl log.overlap.message        proc        EXTERNAL;dcl log.proj.eof.error         proc        EXTERNAL;dcl log.sys.is.not.ready       proc        EXTERNAL;dcl gadir                      proc(fixed) EXTERNAL; /* allocation directory *//* Information for current project: */dcl samp.speed                  fixed EXTERNAL;  /* current synclav speed setting */dcl current.rate                fixed EXTERNAL;  /* current in-use samp rate      */dcl apply.drop.frame.correction fixed EXTERNAL;  /* 1: correcty by 2997/3000      */dcl (smpte.onoff)            fixed EXTERNAL;dcl (smpte.mode.rate)        fixed EXTERNAL;dcl (smpte.track.rate)       fixed EXTERNAL;dcl (output.happening)       fixed EXTERNAL;  /* true if chan 32 running */dcl (now.playing   )         fixed EXTERNAL;  /* set if play request started output */dcl (now.triggering)         fixed EXTERNAL;  /* set if trig request started output */dcl (now.looping   )         fixed EXTERNAL;  /* set if doing point playback output */dcl (now.monitoring)         fixed EXTERNAL;  /* set if runing poly to monitor DDT  */dcl (out.of.sync   )         fixed EXTERNAL;  /* true if out of sync condition      */dcl Song.Data        array   EXTERNAL;   /* Sector # of start of song data  */dcl Song.Length      array   EXTERNAL;   /* # of sectors in current song    */dcl Song.Ending      array   EXTERNAL;   /* Ending sector # of cur song     */dcl Song.Data.S#     array   EXTERNAL;   /* Sample # of song start          */dcl Song.End.S#      array   EXTERNAL;   /* Sample # of song end            */dcl C.Data           array   EXTERNAL;   /* Sector # of command song        */dcl C.Len            array   EXTERNAL;   /* # of sectors in command song    */dcl C.End            array   EXTERNAL;   /* ending sector # of command song */dcl C.Data.S#        array   EXTERNAL;   /* sample # of command song start  */dcl C.End.S#         array   EXTERNAL;   /* sample # of end of command song */dcl Compute.C.Info     proc               EXTERNAL;dcl Syncl.Time       array   EXTERNAL;   /* Synclavier time - msb, lsb, acu */dcl compute.syncl.time       proc(array,fixed,array)       EXTERNAL;dcl round.syncl.time         proc(array)                   EXTERNAL;dcl compute.mark.start.point proc(array,fixed,fixed,array) EXTERNAL;library ':LOD:LODLIBS:MISCLIB';